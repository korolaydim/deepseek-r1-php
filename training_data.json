[
  {
    "input": "Example #1 An introductory example",
    "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n\n<?php\n\necho\n\"Hi, I'm a PHP script!\"\n;\n\n?>\n    </body>\n</html>"
  },
  {
    "input": "Example #1 Our first PHP script: hello.php",
    "output": "<?php\necho\n\"Hello World!\"\n;\n?>"
  },
  {
    "input": "Example #2 Get system information from PHP",
    "output": "<?php phpinfo\n();\n?>"
  },
  {
    "input": "Example #1 Printing a variable (Array element)",
    "output": "<?php\necho\n$_SERVER\n[\n'HTTP_USER_AGENT'\n];\n?>"
  },
  {
    "input": "Example #2 Example using control\n     structures and functions",
    "output": "<?php\nif (\nstr_contains\n(\n$_SERVER\n[\n'HTTP_USER_AGENT'\n],\n'Firefox'\n)) {\n    echo\n'You are using Firefox.'\n;\n}\n?>"
  },
  {
    "input": "Example #3 Mixing both HTML and PHP modes",
    "output": "<?php\nif (\nstr_contains\n(\n$_SERVER\n[\n'HTTP_USER_AGENT'\n],\n'Firefox'\n)) {\n?>\n<h3>str_contains() returned true</h3>\n<p>You are using Firefox</p>\n<?php\n} else {\n?>\n<h3>str_contains() returned false</h3>\n<p>You are not using Firefox</p>\n<?php\n}\n?>"
  },
  {
    "input": "Example #2 Printing data from our form",
    "output": "Hi\n<?php\necho\nhtmlspecialchars\n(\n$_POST\n[\n'name'\n]);\n?>\n.\nYou are\n<?php\necho (int)\n$_POST\n[\n'age'\n];\n?>\n years old."
  },
  {
    "input": "Example #1 \n      phpinfo()\n      call",
    "output": "<?php\nphpinfo\n();\n?>"
  },
  {
    "input": "Example #1 PHP Opening and Closing Tags",
    "output": "1.\n<?php\necho\n'if you want to serve PHP code in XHTML or XML documents,\n                use these tags'\n;\n?>\n2.  You can use the short echo tag to\n<?=\n'print this string'\n?>\n.\n    It's equivalent to\n<?php\necho\n'print this string'\n?>\n.\n3.  <? echo 'this code is within short tags, but will only work '.\n            'if short_open_tag is enabled'; ?>"
  },
  {
    "input": "Example #1 Advanced escaping using conditions",
    "output": "<?php\nif (\n$expression\n==\ntrue\n):\n?>\n  This will show if the expression is true.\n<?php\nelse:\n?>\n  Otherwise this will show.\n<?php\nendif;\n?>"
  },
  {
    "input": "Example #1 Example showing the closing tag encompassing the trailing newline",
    "output": "<?php\necho\n\"Some text\"\n;\n?>\nNo newline\n<?=\n\"But newline now\"\n?>"
  },
  {
    "input": "Example #1 Integer literals",
    "output": "<?php\n$a\n=\n1234\n;\n// decimal number\n$a\n=\n0123\n;\n// octal number (equivalent to 83 decimal)\n$a\n=\n0o123\n;\n// octal number (as of PHP 8.1.0)\n$a\n=\n0x1A\n;\n// hexadecimal number (equivalent to 26 decimal)\n$a\n=\n0b11111111\n;\n// binary number (equivalent to 255 decimal)\n$a\n=\n1_234_567\n;\n// decimal number (as of PHP 7.4.0)\n?>"
  },
  {
    "input": "Example #2 Integer overflow",
    "output": "<?php\n$large_number\n=\n50000000000000000000\n;\nvar_dump\n(\n$large_number\n);\n// float(5.0E+19)\nvar_dump\n(\nPHP_INT_MAX\n+\n1\n);\n// 32-bit system: float(2147483648)\n                                 // 64-bit system: float(9.2233720368548E+18)\n?>"
  },
  {
    "input": "Example #1 Basic Heredoc example as of PHP 7.3.0",
    "output": "<?php\n// no indentation\necho <<<END\n      a\n     b\n    c\n\\n\nEND;\n// 4 spaces of indentation\necho <<<END\n      a\n     b\n    c\n    END;"
  },
  {
    "input": "Example #2 Closing identifier must not be indented further than any lines of the body",
    "output": "<?php\necho <<<END\n  a\n b\nc\n   END;"
  },
  {
    "input": "Example #3 Different indentation for body (spaces) closing identifier",
    "output": "<?php\n// All the following code do not work.\n// different indentation for body (spaces) ending marker (tabs)\n{\n    echo <<<END\n     a\n        END;\n}\n// mixing spaces and tabs in body\n{\n    echo <<<END\n        a\n     END;\n}\n// mixing spaces and tabs in ending marker\n{\n    echo <<<END\n          a\n         END;\n}"
  },
  {
    "input": "Example #4 Continuing an expression after a closing identifier",
    "output": "<?php\n$values\n= [<<<END\na\n  b\n    c\nEND,\n'd e f'\n];\nvar_dump\n(\n$values\n);"
  },
  {
    "input": "Example #5 Closing identifier in body of the string tends to cause ParseError",
    "output": "<?php\n$values\n= [<<<END\na\nb\nEND\nING\nEND\n,\n'd e f'\n];"
  },
  {
    "input": "Example #6 Invalid example, prior to PHP 7.3.0",
    "output": "<?php\nclass\nfoo\n{\n    public\n$bar\n= <<<EOT\nbar\n    EOT;\n}\n// Identifier must not be indented\n?>"
  },
  {
    "input": "Example #7 Valid example, even prior to PHP 7.3.0",
    "output": "<?php\nclass\nfoo\n{\n    public\n$bar\n= <<<EOT\nbar\nEOT;\n}\n?>"
  },
  {
    "input": "Example #8 Heredoc string quoting example",
    "output": "<?php\n$str\n= <<<EOD\nExample of string\nspanning multiple lines\nusing heredoc syntax.\nEOD;\n/* More complex example, with variables. */\nclass\nfoo\n{\n    var\n$foo\n;\n    var\n$bar\n;\n    function\n__construct\n()\n    {\n\n$this\n->\nfoo\n=\n'Foo'\n;\n\n$this\n->\nbar\n= array(\n'Bar1'\n,\n'Bar2'\n,\n'Bar3'\n);\n    }\n}\n$foo\n= new\nfoo\n();\n$name\n=\n'MyName'\n;\necho <<<EOT\nMy name is \"\n$name\n\". I am printing some\n$foo\n->\nfoo\n.\nNow, I am printing some\n{\n$foo\n->\nbar\n[\n1\n]}\n.\nThis should print a capital 'A': \\x41\nEOT;\n?>"
  },
  {
    "input": "Example #9 Heredoc in arguments example",
    "output": "<?php\nvar_dump\n(array(<<<EOD\nfoobar!\nEOD\n));\n?>"
  },
  {
    "input": "Example #10 Using Heredoc to initialize static values",
    "output": "<?php\n// Static variables\nfunction\nfoo\n()\n{\n    static\n$bar\n= <<<LABEL\nNothing in here...\nLABEL;\n}\n// Class properties/constants\nclass\nfoo\n{\n    const\nBAR\n= <<<FOOBAR\nConstant example\nFOOBAR;\n    public\n$baz\n= <<<FOOBAR\nProperty example\nFOOBAR;\n}\n?>"
  },
  {
    "input": "Example #11 Using double quotes in Heredoc",
    "output": "<?php\necho <<<\"FOOBAR\"\nHello World!\nFOOBAR;\n?>"
  },
  {
    "input": "Example #12 Nowdoc string quoting example",
    "output": "<?php\necho <<<'EOD'\nExample of string spanning multiple lines\nusing nowdoc syntax. Backslashes are always treated literally,\ne.g. \\\\ and \\'.\nEOD;"
  },
  {
    "input": "Example #13 Nowdoc string quoting example with variables",
    "output": "<?php\nclass\nfoo\n{\n    public\n$foo\n;\n    public\n$bar\n;\n    function\n__construct\n()\n    {\n\n$this\n->\nfoo\n=\n'Foo'\n;\n\n$this\n->\nbar\n= array(\n'Bar1'\n,\n'Bar2'\n,\n'Bar3'\n);\n    }\n}\n$foo\n= new\nfoo\n();\n$name\n=\n'MyName'\n;\necho <<<'EOT'\nMy name is \"$name\". I am printing some $foo->foo.\nNow, I am printing some {$foo->bar[1]}.\nThis should not print a capital 'A': \\x41\nEOT;\n?>"
  },
  {
    "input": "Example #14 Static data example",
    "output": "<?php\nclass\nfoo\n{\n    public\n$bar\n= <<<'EOT'\nbar\nEOT;\n}\n?>"
  },
  {
    "input": "Example #15 Interpolating the value of the first dimension of an array or property",
    "output": "<?php\n$juices\n= array(\n\"apple\"\n,\n\"orange\"\n,\n\"string_key\"\n=>\n\"purple\"\n);\necho\n\"He drank some\n$juices\n[\n0\n]\n juice.\"\n;\necho\nPHP_EOL\n;\necho\n\"He drank some\n$juices\n[\n1\n]\n juice.\"\n;\necho\nPHP_EOL\n;\necho\n\"He drank some\n$juices\n[\nstring_key\n]\n juice.\"\n;\necho\nPHP_EOL\n;\nclass\nA\n{\n    public\n$s\n=\n\"string\"\n;\n}\n$o\n= new\nA\n();\necho\n\"Object value:\n$o\n->\ns\n.\"\n;\n?>"
  },
  {
    "input": "Example #16 Negative numeric indices",
    "output": "<?php\n$string\n=\n'string'\n;\necho\n\"The character at index -2 is\n$string\n[-\n2\n]\n.\"\n,\nPHP_EOL\n;\n$string\n[-\n3\n] =\n'o'\n;\necho\n\"Changing the character at index -3 to o gives\n$string\n.\"\n,\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #17 Some string examples",
    "output": "<?php\n// Get the first character of a string\n$str\n=\n'This is a test.'\n;\n$first\n=\n$str\n[\n0\n];\n// Get the third character of a string\n$third\n=\n$str\n[\n2\n];\n// Get the last character of a string.\n$str\n=\n'This is still a test.'\n;\n$last\n=\n$str\n[\nstrlen\n(\n$str\n)-\n1\n];\n// Modify the last character of a string\n$str\n=\n'Look at the sea'\n;\n$str\n[\nstrlen\n(\n$str\n)-\n1\n] =\n'e'\n;\n?>"
  },
  {
    "input": "Example #18 Example of Illegal String Offsets",
    "output": "<?php\n$str\n=\n'abc'\n;\nvar_dump\n(\n$str\n[\n'1'\n]);\nvar_dump\n(isset(\n$str\n[\n'1'\n]));\nvar_dump\n(\n$str\n[\n'1.0'\n]);\nvar_dump\n(isset(\n$str\n[\n'1.0'\n]));\nvar_dump\n(\n$str\n[\n'x'\n]);\nvar_dump\n(isset(\n$str\n[\n'x'\n]));\nvar_dump\n(\n$str\n[\n'1x'\n]);\nvar_dump\n(isset(\n$str\n[\n'1x'\n]));\n?>"
  },
  {
    "input": "Example #1 A simple array",
    "output": "<?php\n$array\n= array(\n\n\"foo\"\n=>\n\"bar\"\n,\n\n\"bar\"\n=>\n\"foo\"\n,\n);\n// Using the short array syntax\n$array\n= [\n\n\"foo\"\n=>\n\"bar\"\n,\n\n\"bar\"\n=>\n\"foo\"\n,\n];\n?>"
  },
  {
    "input": "Example #2 Type Casting and Overwriting example",
    "output": "<?php\n$array\n= array(\n\n1\n=>\n\"a\"\n,\n\n\"1\"\n=>\n\"b\"\n,\n\n1.5\n=>\n\"c\"\n,\n\ntrue\n=>\n\"d\"\n,\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #3 Mixed int and string keys",
    "output": "<?php\n$array\n= array(\n\n\"foo\"\n=>\n\"bar\"\n,\n\n\"bar\"\n=>\n\"foo\"\n,\n\n100\n=> -\n100\n,\n    -\n100\n=>\n100\n,\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #4 Indexed arrays without key",
    "output": "<?php\n$array\n= array(\n\"foo\"\n,\n\"bar\"\n,\n\"hello\"\n,\n\"world\"\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #5 Keys not on all elements",
    "output": "<?php\n$array\n= array(\n\n\"a\"\n,\n\n\"b\"\n,\n\n6\n=>\n\"c\"\n,\n\n\"d\"\n,\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #8 Accessing array elements",
    "output": "<?php\n$array\n= array(\n\n\"foo\"\n=>\n\"bar\"\n,\n\n42\n=>\n24\n,\n\n\"multi\"\n=> array(\n\n\"dimensional\"\n=> array(\n\n\"array\"\n=>\n\"foo\"\n\n)\n    )\n);\nvar_dump\n(\n$array\n[\n\"foo\"\n]);\nvar_dump\n(\n$array\n[\n42\n]);\nvar_dump\n(\n$array\n[\n\"multi\"\n][\n\"dimensional\"\n][\n\"array\"\n]);\n?>"
  },
  {
    "input": "Example #9 Array dereferencing",
    "output": "<?php\nfunction\ngetArray\n() {\n    return array(\n1\n,\n2\n,\n3\n);\n}\n$secondElement\n=\ngetArray\n()[\n1\n];\n?>"
  },
  {
    "input": "Example #10 Simple array unpacking",
    "output": "<?php\n// Using short array syntax.\n// Also, works with array() syntax.\n$arr1\n= [\n1\n,\n2\n,\n3\n];\n$arr2\n= [...\n$arr1\n];\n//[1, 2, 3]\n$arr3\n= [\n0\n, ...\n$arr1\n];\n//[0, 1, 2, 3]\n$arr4\n= [...\n$arr1\n, ...\n$arr2\n,\n111\n];\n//[1, 2, 3, 1, 2, 3, 111]\n$arr5\n= [...\n$arr1\n, ...\n$arr1\n];\n//[1, 2, 3, 1, 2, 3]\nfunction\ngetArr\n() {\n  return [\n'a'\n,\n'b'\n];\n}\n$arr6\n= [...\ngetArr\n(),\n'c'\n=>\n'd'\n];\n//['a', 'b', 'c' => 'd']\n?>"
  },
  {
    "input": "Example #11 Array unpacking with duplicate key",
    "output": "<?php\n// string key\n$arr1\n= [\n\"a\"\n=>\n1\n];\n$arr2\n= [\n\"a\"\n=>\n2\n];\n$arr3\n= [\n\"a\"\n=>\n0\n, ...\n$arr1\n, ...\n$arr2\n];\nvar_dump\n(\n$arr3\n);\n// [\"a\" => 2]\n// integer key\n$arr4\n= [\n1\n,\n2\n,\n3\n];\n$arr5\n= [\n4\n,\n5\n,\n6\n];\n$arr6\n= [...\n$arr4\n, ...\n$arr5\n];\nvar_dump\n(\n$arr6\n);\n// [1, 2, 3, 4, 5, 6]\n// Which is [0 => 1, 1 => 2, 2 => 3, 3 => 4, 4 => 5, 5 => 6]\n// where the original integer keys have not been retained.\n?>"
  },
  {
    "input": "Example #12 Using array()",
    "output": "<?php\n// Array as (property-)map\n$map\n= array(\n'version'\n=>\n4\n,\n\n'OS'\n=>\n'Linux'\n,\n\n'lang'\n=>\n'english'\n,\n\n'short_tags'\n=>\ntrue\n\n);\n\n// strictly numerical keys\n$array\n= array(\n7\n,\n\n8\n,\n\n0\n,\n\n156\n,\n                -\n10\n\n);\n// this is the same as array(0 => 7, 1 => 8, ...)\n$switching\n= array(\n10\n,\n// key = 0\n\n5\n=>\n6\n,\n\n3\n=>\n7\n,\n\n'a'\n=>\n4\n,\n\n11\n,\n// key = 6 (maximum of integer-indices was 5)\n\n'8'\n=>\n2\n,\n// key = 8 (integer!)\n\n'02'\n=>\n77\n,\n// key = '02'\n\n0\n=>\n12\n// the value 10 will be overwritten by 12\n\n);\n\n// empty array\n$empty\n= array();\n?>"
  },
  {
    "input": "Example #13 Collection",
    "output": "<?php\n$colors\n= array(\n'red'\n,\n'blue'\n,\n'green'\n,\n'yellow'\n);\nforeach (\n$colors\nas\n$color\n) {\n    echo\n\"Do you like\n$color\n?\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #14 Changing element in the loop",
    "output": "<?php\nforeach (\n$colors\nas &\n$color\n) {\n\n$color\n=\nmb_strtoupper\n(\n$color\n);\n}\nunset(\n$color\n);\n/* ensure that following writes to\n$color will not modify the last array element */\nprint_r\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #15 One-based index",
    "output": "<?php\n$firstquarter\n= array(\n1\n=>\n'January'\n,\n'February'\n,\n'March'\n);\nprint_r\n(\n$firstquarter\n);\n?>"
  },
  {
    "input": "Example #16 Filling an array",
    "output": "<?php\n// fill an array with all items from a directory\n$handle\n=\nopendir\n(\n'.'\n);\nwhile (\nfalse\n!== (\n$file\n=\nreaddir\n(\n$handle\n))) {\n\n$files\n[] =\n$file\n;\n}\nclosedir\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #17 Sorting an array",
    "output": "<?php\nsort\n(\n$files\n);\nprint_r\n(\n$files\n);\n?>"
  },
  {
    "input": "Example #18 Recursive and multi-dimensional arrays",
    "output": "<?php\n$fruits\n= array (\n\"fruits\"\n=> array (\n\"a\"\n=>\n\"orange\"\n,\n\n\"b\"\n=>\n\"banana\"\n,\n\n\"c\"\n=>\n\"apple\"\n\n),\n\n\"numbers\"\n=> array (\n1\n,\n\n2\n,\n\n3\n,\n\n4\n,\n\n5\n,\n\n6\n\n),\n\n\"holes\"\n=> array (\n\"first\"\n,\n\n5\n=>\n\"second\"\n,\n\n\"third\"\n\n)\n                );\n// Some examples to address values in the array above\necho\n$fruits\n[\n\"holes\"\n][\n5\n];\n// prints \"second\"\necho\n$fruits\n[\n\"fruits\"\n][\n\"a\"\n];\n// prints \"orange\"\nunset(\n$fruits\n[\n\"holes\"\n][\n0\n]);\n// remove \"first\"\n// Create a new multi-dimensional array\n$juices\n[\n\"apple\"\n][\n\"green\"\n] =\n\"good\"\n;\n?>"
  },
  {
    "input": "Example #1 \n     Callback function examples",
    "output": "<?php\n// An example callback function\nfunction\nmy_callback_function\n() {\n    echo\n'hello world!'\n;\n}\n// An example callback method\nclass\nMyClass\n{\n    static function\nmyCallbackMethod\n() {\n        echo\n'Hello World!'\n;\n    }\n}\n// Type 1: Simple callback\ncall_user_func\n(\n'my_callback_function'\n);\n// Type 2: Static class method call\ncall_user_func\n(array(\n'MyClass'\n,\n'myCallbackMethod'\n));\n// Type 3: Object method call\n$obj\n= new\nMyClass\n();\ncall_user_func\n(array(\n$obj\n,\n'myCallbackMethod'\n));\n// Type 4: Static class method call\ncall_user_func\n(\n'MyClass::myCallbackMethod'\n);\n// Type 5: Relative static class method call\nclass\nA\n{\n    public static function\nwho\n() {\n        echo\n\"A\\n\"\n;\n    }\n}\nclass\nB\nextends\nA\n{\n    public static function\nwho\n() {\n        echo\n\"B\\n\"\n;\n    }\n}\ncall_user_func\n(array(\n'B'\n,\n'parent::who'\n));\n// A, deprecated as of PHP 8.2.0\n// Type 6: Objects implementing __invoke can be used as callables\nclass\nC\n{\n    public function\n__invoke\n(\n$name\n) {\n        echo\n'Hello '\n,\n$name\n,\n\"\\n\"\n;\n    }\n}\n$c\n= new\nC\n();\ncall_user_func\n(\n$c\n,\n'PHP!'\n);\n?>"
  },
  {
    "input": "Example #2 \n     Callback example using a Closure",
    "output": "<?php\n// Our closure\n$double\n= function(\n$a\n) {\n    return\n$a\n*\n2\n;\n};\n// This is our range of numbers\n$numbers\n=\nrange\n(\n1\n,\n5\n);\n// Use the closure as a callback here to\n// double the size of each element in our\n// range\n$new_numbers\n=\narray_map\n(\n$double\n,\n$numbers\n);\nprint\nimplode\n(\n' '\n,\n$new_numbers\n);\n?>"
  },
  {
    "input": "Example #1 \n     Iterable generator return type example",
    "output": "<?php\nfunction\ngen\n():\niterable\n{\n    yield\n1\n;\n    yield\n2\n;\n    yield\n3\n;\n}\n?>"
  },
  {
    "input": "Example #1 Typed pass-by-reference Parameters",
    "output": "<?php\nfunction\narray_baz\n(array &\n$param\n)\n{\n\n$param\n=\n1\n;\n}\n$var\n= [];\narray_baz\n(\n$var\n);\nvar_dump\n(\n$var\n);\narray_baz\n(\n$var\n);\n?>"
  },
  {
    "input": "Example #2 Old way to make arguments nullable",
    "output": "<?php\nclass\nC\n{}\nfunction\nf\n(\nC $c\n=\nnull\n) {\n\nvar_dump\n(\n$c\n);\n}\nf\n(new\nC\n);\nf\n(\nnull\n);\n?>"
  },
  {
    "input": "Example #3 Basic class type declaration",
    "output": "<?php\nclass\nC\n{}\nclass\nD\nextends\nC\n{}\n// This doesn't extend C.\nclass\nE\n{}\nfunction\nf\n(\nC $c\n) {\n    echo\nget_class\n(\n$c\n).\n\"\\n\"\n;\n}\nf\n(new\nC\n);\nf\n(new\nD\n);\nf\n(new\nE\n);\n?>"
  },
  {
    "input": "Example #4 Basic interface type declaration",
    "output": "<?php\ninterface\nI\n{ public function\nf\n(); }\nclass\nC\nimplements\nI\n{ public function\nf\n() {} }\n// This doesn't implement I.\nclass\nE\n{}\nfunction\nf\n(\nI $i\n) {\n    echo\nget_class\n(\n$i\n).\n\"\\n\"\n;\n}\nf\n(new\nC\n);\nf\n(new\nE\n);\n?>"
  },
  {
    "input": "Example #5 Basic return type declaration",
    "output": "<?php\nfunction\nsum\n(\n$a\n,\n$b\n):\nfloat\n{\n    return\n$a\n+\n$b\n;\n}\n// Note that a float will be returned.\nvar_dump\n(\nsum\n(\n1\n,\n2\n));\n?>"
  },
  {
    "input": "Example #6 Returning an object",
    "output": "<?php\nclass\nC\n{}\nfunction\ngetC\n():\nC\n{\n    return new\nC\n;\n}\nvar_dump\n(\ngetC\n());\n?>"
  },
  {
    "input": "Example #7 Nullable argument type declaration",
    "output": "<?php\nclass\nC\n{}\nfunction\nf\n(?\nC $c\n) {\n\nvar_dump\n(\n$c\n);\n}\nf\n(new\nC\n);\nf\n(\nnull\n);\n?>"
  },
  {
    "input": "Example #8 Nullable return type declaration",
    "output": "<?php\nfunction\nget_item\n(): ?\nstring\n{\n    if (isset(\n$_GET\n[\n'item'\n])) {\n        return\n$_GET\n[\n'item'\n];\n    } else {\n        return\nnull\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #9 Class property type declaration",
    "output": "<?php\nclass\nUser\n{\n    public static\nstring $foo\n=\n'foo'\n;\n    public\nint $id\n;\n    public\nstring $username\n;\n    public function\n__construct\n(\nint $id\n,\nstring $username\n) {\n\n$this\n->\nid\n=\n$id\n;\n\n$this\n->\nusername\n=\n$username\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #10 Strict typing for arguments values",
    "output": "<?php\ndeclare(\nstrict_types\n=\n1\n);\nfunction\nsum\n(\nint $a\n,\nint $b\n) {\n    return\n$a\n+\n$b\n;\n}\nvar_dump\n(\nsum\n(\n1\n,\n2\n));\nvar_dump\n(\nsum\n(\n1.5\n,\n2.5\n));\n?>"
  },
  {
    "input": "Example #11 Coercive typing for argument values",
    "output": "<?php\nfunction\nsum\n(\nint $a\n,\nint $b\n) {\n    return\n$a\n+\n$b\n;\n}\nvar_dump\n(\nsum\n(\n1\n,\n2\n));\n// These will be coerced to integers: note the output below!\nvar_dump\n(\nsum\n(\n1.5\n,\n2.5\n));\n?>"
  },
  {
    "input": "Example #12 Strict typing for return values",
    "output": "<?php\ndeclare(\nstrict_types\n=\n1\n);\nfunction\nsum\n(\n$a\n,\n$b\n):\nint\n{\n    return\n$a\n+\n$b\n;\n}\nvar_dump\n(\nsum\n(\n1\n,\n2\n));\nvar_dump\n(\nsum\n(\n1\n,\n2.5\n));\n?>"
  },
  {
    "input": "Example #1 Example of types being coerced into a type part of the union",
    "output": "<?php\n// int|string\n42\n-->\n42\n// exact type\n\"42\"\n-->\n\"42\"\n// exact type\nnew\nObjectWithToString\n-->\n\"Result of __toString()\"\n\n// object never compatible with int, fall back to string\n42.0\n-->\n42\n// float compatible with int\n42.1\n-->\n42\n// float compatible with int\n1e100\n-->\n\"1.0E+100\"\n// float too large for int type, fall back to string\nINF\n-->\n\"INF\"\n// float too large for int type, fall back to string\ntrue\n-->\n1\n// bool compatible with int\n[]    -->\nTypeError\n// array not compatible with int or string\n// int|float|bool\n\"45\"\n-->\n45\n// int numeric string\n\"45.0\"\n-->\n45.0\n// float numeric string\n\"45X\"\n-->\ntrue\n// not numeric string, fall back to bool\n\"\"\n-->\nfalse\n// not numeric string, fall back to bool\n\"X\"\n-->\ntrue\n// not numeric string, fall back to bool\n[]      -->\nTypeError\n// array not compatible with int, float or bool\n?>"
  },
  {
    "input": "Example #1 Valid and invalid variable names",
    "output": "<?php\n$var\n=\n'Bob'\n;\n$Var\n=\n'Joe'\n;\necho\n\"\n$var\n,\n$Var\n\"\n;\n// outputs \"Bob, Joe\"\n$\n4site\n=\n'not yet'\n;\n// invalid; starts with a number\n$_4site\n=\n'not yet'\n;\n// valid; starts with an underscore\n$täyte\n=\n'mansikka'\n;\n// valid; 'ä' is (Extended) ASCII 228.\n?>"
  },
  {
    "input": "Example #2 Accessing obscure variable names",
    "output": "<?php\n${\n'invalid-name'\n} =\n'bar'\n;\n$name\n=\n'invalid-name'\n;\necho ${\n'invalid-name'\n},\n\" \"\n, $\n$name\n;\n?>"
  },
  {
    "input": "Example #3 Default value of an uninitialized variable",
    "output": "<?php\n// Unset AND unreferenced (no use context) variable.\nvar_dump\n(\n$unset_var\n);\n?>"
  },
  {
    "input": "Example #4 Autovivification of an array from an undefined variable",
    "output": "<?php\n$unset_array\n[] =\n'value'\n;\n// Does not generate a warning.\n?>"
  },
  {
    "input": "Example #1 Example of global variable scope",
    "output": "<?php\n$a\n=\n1\n;\ninclude\n'b.inc'\n;\n// Variable $a will be available within b.inc\n?>"
  },
  {
    "input": "Example #2 Example of local variable scope",
    "output": "<?php\n$a\n=\n1\n;\n// global scope\nfunction\ntest\n()\n{\n    echo\n$a\n;\n// Variable $a is undefined as it refers to a local version of $a\n}\n?>"
  },
  {
    "input": "Example #3 Using global",
    "output": "<?php\n$a\n=\n1\n;\n$b\n=\n2\n;\nfunction\nSum\n()\n{\n    global\n$a\n,\n$b\n;\n\n$b\n=\n$a\n+\n$b\n;\n}\nSum\n();\necho\n$b\n;\n?>"
  },
  {
    "input": "Example #4 Using $GLOBALS instead of global",
    "output": "<?php\n$a\n=\n1\n;\n$b\n=\n2\n;\nfunction\nSum\n()\n{\n\n$GLOBALS\n[\n'b'\n] =\n$GLOBALS\n[\n'a'\n] +\n$GLOBALS\n[\n'b'\n];\n}\nSum\n();\necho\n$b\n;\n?>"
  },
  {
    "input": "Example #5 Example demonstrating superglobals and scope",
    "output": "<?php\nfunction\ntest_superglobal\n()\n{\n    echo\n$_POST\n[\n'name'\n];\n}\n?>"
  },
  {
    "input": "Example #6 Example demonstrating need for static variables",
    "output": "<?php\nfunction\ntest\n()\n{\n\n$a\n=\n0\n;\n    echo\n$a\n;\n\n$a\n++;\n}\n?>"
  },
  {
    "input": "Example #7 Example use of static variables",
    "output": "<?php\nfunction\ntest\n()\n{\n    static\n$a\n=\n0\n;\n    echo\n$a\n;\n\n$a\n++;\n}\n?>"
  },
  {
    "input": "Example #8 Static variables with recursive functions",
    "output": "<?php\nfunction\ntest\n()\n{\n    static\n$count\n=\n0\n;\n\n$count\n++;\n    echo\n$count\n;\n    if (\n$count\n<\n10\n) {\n\ntest\n();\n    }\n\n$count\n--;\n}\n?>"
  },
  {
    "input": "Example #9 Declaring static variables",
    "output": "<?php\nfunction\nfoo\n(){\n    static\n$int\n=\n0\n;\n// correct\n\nstatic\n$int\n=\n1\n+\n2\n;\n// correct\n\nstatic\n$int\n=\nsqrt\n(\n121\n);\n// correct as of PHP 8.3.0\n\n$int\n++;\n    echo\n$int\n;\n}\n?>"
  },
  {
    "input": "Example #10 Static variables in anonymous functions",
    "output": "<?php\nfunction\nexampleFunction\n(\n$input\n) {\n\n$result\n= (static function () use (\n$input\n) {\n        static\n$counter\n=\n0\n;\n\n$counter\n++;\n        return\n\"Input:\n$input\n, Counter:\n$counter\n\\n\"\n;\n    });\n    return\n$result\n();\n}\n// Calls to exampleFunction will recreate the anonymous function, so the static\n// variable does not retain its value.\necho\nexampleFunction\n(\n'A'\n);\n// Outputs: Input: A, Counter: 1\necho\nexampleFunction\n(\n'B'\n);\n// Outputs: Input: B, Counter: 1\n?>"
  },
  {
    "input": "Example #11 Usage of static Variables in Inherited Methods",
    "output": "<?php\nclass\nFoo\n{\n    public static function\ncounter\n() {\n        static\n$counter\n=\n0\n;\n\n$counter\n++;\n        return\n$counter\n;\n    }\n}\nclass\nBar\nextends\nFoo\n{}\nvar_dump\n(\nFoo\n::\ncounter\n());\n// int(1)\nvar_dump\n(\nFoo\n::\ncounter\n());\n// int(2)\nvar_dump\n(\nBar\n::\ncounter\n());\n// int(3), prior to PHP 8.1.0 int(1)\nvar_dump\n(\nBar\n::\ncounter\n());\n// int(4), prior to PHP 8.1.0 int(2)\n?>"
  },
  {
    "input": "Example #1 Variable property example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$bar\n=\n'I am bar.'\n;\n    public\n$arr\n= [\n'I am A.'\n,\n'I am B.'\n,\n'I am C.'\n];\n    public\n$r\n=\n'I am r.'\n;\n}\n$foo\n= new\nFoo\n();\n$bar\n=\n'bar'\n;\n$baz\n= [\n'foo'\n,\n'bar'\n,\n'baz'\n,\n'quux'\n];\necho\n$foo\n->\n$bar\n.\n\"\\n\"\n;\necho\n$foo\n->{\n$baz\n[\n1\n]} .\n\"\\n\"\n;\n$start\n=\n'b'\n;\n$end\n=\n'ar'\n;\necho\n$foo\n->{\n$start\n.\n$end\n} .\n\"\\n\"\n;\n$arr\n=\n'arr'\n;\necho\n$foo\n->{\n$arr\n[\n1\n]} .\n\"\\n\"\n;\necho\n$foo\n->{\n$arr\n}[\n1\n] .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Accessing data from a simple POST HTML form",
    "output": "<?php\necho\n$_POST\n[\n'username'\n];\necho\n$_REQUEST\n[\n'username'\n];\n?>"
  },
  {
    "input": "Example #3 More complex form variables",
    "output": "<?php\nif (\n$_POST\n) {\n    echo\n'<pre>'\n;\n    echo\nhtmlspecialchars\n(\nprint_r\n(\n$_POST\n,\ntrue\n));\n    echo\n'</pre>'\n;\n}\n?>\n<form action=\"\" method=\"post\">\n    Name:  <input type=\"text\" name=\"personal[name]\" /><br />\n    Email: <input type=\"text\" name=\"personal[email]\" /><br />\n    Beer: <br />\n    <select multiple name=\"beer[]\">\n        <option value=\"warthog\">Warthog</option>\n        <option value=\"guinness\">Guinness</option>\n        <option value=\"stuttgarter\">Stuttgarter Schwabenbräu</option>\n    </select><br />\n    <input type=\"submit\" value=\"submit me!\" />\n</form>"
  },
  {
    "input": "Example #4 A setcookie() example",
    "output": "<?php\nif (isset(\n$_COOKIE\n[\n'count'\n])) {\n\n$count\n=\n$_COOKIE\n[\n'count'\n] +\n1\n;\n} else {\n\n$count\n=\n1\n;\n}\nsetcookie\n(\n'count'\n,\n$count\n,\ntime\n()+\n3600\n);\nsetcookie\n(\n\"Cart[\n$count\n]\"\n,\n$item\n,\ntime\n()+\n3600\n);\n?>"
  },
  {
    "input": "Example #1 Valid and invalid constant names",
    "output": "<?php\n// Valid constant names\ndefine\n(\n\"FOO\"\n,\n\"something\"\n);\ndefine\n(\n\"FOO2\"\n,\n\"something else\"\n);\ndefine\n(\n\"FOO_BAR\"\n,\n\"something more\"\n);\n// Invalid constant names\ndefine\n(\n\"2FOO\"\n,\n\"something\"\n);\n// This is valid, but should be avoided:\n// PHP may one day provide a magical constant\n// that will break your script\ndefine\n(\n\"__FOO__\"\n,\n\"something\"\n);\n?>"
  },
  {
    "input": "Example #1 Defining Constants",
    "output": "<?php\ndefine\n(\n\"CONSTANT\"\n,\n\"Hello world.\"\n);\necho\nCONSTANT\n;\n// outputs \"Hello world.\"\necho\nConstant\n;\n// Emits an Error: Undefined constant \"Constant\"\n               // Prior to PHP 8.0.0, outputs \"Constant\" and issues a warning.\n?>"
  },
  {
    "input": "Example #2 Defining Constants using the const keyword",
    "output": "<?php\n// Simple scalar value\nconst\nCONSTANT\n=\n'Hello World'\n;\necho\nCONSTANT\n;\n// Scalar expression\nconst\nANOTHER_CONST\n=\nCONSTANT\n.\n'; Goodbye World'\n;\necho\nANOTHER_CONST\n;\nconst\nANIMALS\n= array(\n'dog'\n,\n'cat'\n,\n'bird'\n);\necho\nANIMALS\n[\n1\n];\n// outputs \"cat\"\n// Constant arrays\ndefine\n(\n'ANIMALS'\n, array(\n\n'dog'\n,\n\n'cat'\n,\n\n'bird'\n));\necho\nANIMALS\n[\n1\n];\n// outputs \"cat\"\n?>"
  },
  {
    "input": "Example #1 Associativity",
    "output": "<?php\n$a\n=\n3\n*\n3\n%\n5\n;\n// (3 * 3) % 5 = 4\n// ternary operator associativity differs from C/C++\n$a\n=\ntrue\n?\n0\n:\ntrue\n?\n1\n:\n2\n;\n// (true ? 0 : true) ? 1 : 2 = 2 (prior to PHP 8.0.0)\n$a\n=\n1\n;\n$b\n=\n2\n;\n$a\n=\n$b\n+=\n3\n;\n// $a = ($b += 3) -> $a = 5, $b = 5\n?>"
  },
  {
    "input": "Example #2 Undefined order of evaluation",
    "output": "<?php\n$a\n=\n1\n;\necho\n$a\n+\n$a\n++;\n// may print either 2 or 3\n$i\n=\n1\n;\n$array\n[\n$i\n] =\n$i\n++;\n// may set either index 1 or 2\n?>"
  },
  {
    "input": "Example #3 +, - and . have the same precedence (prior to PHP 8.0.0)",
    "output": "<?php\n$x\n=\n4\n;\n// this line might result in unexpected output:\necho\n\"x minus one equals \"\n.\n$x\n-\n1\n.\n\", or so I hope\\n\"\n;\n// because it is evaluated like this line (prior to PHP 8.0.0):\necho ((\n\"x minus one equals \"\n.\n$x\n) -\n1\n) .\n\", or so I hope\\n\"\n;\n// the desired precedence can be enforced by using parentheses:\necho\n\"x minus one equals \"\n. (\n$x\n-\n1\n) .\n\", or so I hope\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 PERL string increment example",
    "output": "<?php\necho\n'== Alphabetic strings =='\n.\nPHP_EOL\n;\n$s\n=\n'W'\n;\nfor (\n$n\n=\n0\n;\n$n\n<\n6\n;\n$n\n++) {\n    echo ++\n$s\n.\nPHP_EOL\n;\n}\n// Alphanumeric strings behave differently\necho\n'== Alphanumeric strings =='\n.\nPHP_EOL\n;\n$d\n=\n'A8'\n;\nfor (\n$n\n=\n0\n;\n$n\n<\n6\n;\n$n\n++) {\n    echo ++\n$d\n.\nPHP_EOL\n;\n}\n$d\n=\n'A08'\n;\nfor (\n$n\n=\n0\n;\n$n\n<\n6\n;\n$n\n++) {\n    echo ++\n$d\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #2 Alphanumerical string converted to float",
    "output": "<?php\n$s\n=\n\"5d9\"\n;\nvar_dump\n(++\n$s\n);\nvar_dump\n(++\n$s\n);\n?>"
  },
  {
    "input": "Example #1 Assigning by reference",
    "output": "<?php\n$a\n=\n3\n;\n$b\n= &\n$a\n;\n// $b is a reference to $a\nprint\n\"\n$a\n\\n\"\n;\n// prints 3\nprint\n\"\n$b\n\\n\"\n;\n// prints 3\n$a\n=\n4\n;\n// change $a\nprint\n\"\n$a\n\\n\"\n;\n// prints 4\nprint\n\"\n$b\n\\n\"\n;\n// prints 4 as well, since $b is a reference to $a, which has\n              // been changed\n?>"
  },
  {
    "input": "Example #1 Bitwise AND, OR and XOR operations on integers",
    "output": "<?php\n/*\n * Ignore the top section,\n * it is just formatting to make output clearer.\n */\n$format\n=\n'(%1$2d = %1$04b) = (%2$2d = %2$04b)'\n\n.\n' %3$s (%4$2d = %4$04b)'\n.\n\"\\n\"\n;\necho <<<EOH\n ---------     ---------  -- ---------\n result        value      op test\n ---------     ---------  -- ---------\nEOH;\n/*\n * Here are the examples.\n */\n$values\n= array(\n0\n,\n1\n,\n2\n,\n4\n,\n8\n);\n$test\n=\n1\n+\n4\n;\necho\n\"\\n Bitwise AND \\n\"\n;\nforeach (\n$values\nas\n$value\n) {\n\n$result\n=\n$value\n&\n$test\n;\n\nprintf\n(\n$format\n,\n$result\n,\n$value\n,\n'&'\n,\n$test\n);\n}\necho\n\"\\n Bitwise Inclusive OR \\n\"\n;\nforeach (\n$values\nas\n$value\n) {\n\n$result\n=\n$value\n|\n$test\n;\n\nprintf\n(\n$format\n,\n$result\n,\n$value\n,\n'|'\n,\n$test\n);\n}\necho\n\"\\n Bitwise Exclusive OR (XOR) \\n\"\n;\nforeach (\n$values\nas\n$value\n) {\n\n$result\n=\n$value\n^\n$test\n;\n\nprintf\n(\n$format\n,\n$result\n,\n$value\n,\n'^'\n,\n$test\n);\n}\n?>"
  },
  {
    "input": "Example #2 Bitwise XOR operations on strings",
    "output": "<?php\necho\n12\n^\n9\n;\n// Outputs '5'\necho\n\"12\"\n^\n\"9\"\n;\n// Outputs the Backspace character (ascii 8)\n                 // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8\necho\n\"hallo\"\n^\n\"hello\"\n;\n// Outputs the ascii values #0 #4 #0 #0 #0\n                        // 'a' ^ 'e' = #4\necho\n2\n^\n\"3\"\n;\n// Outputs 1\n              // 2 ^ ((int) \"3\") == 1\necho\n\"2\"\n^\n3\n;\n// Outputs 1\n              // ((int) \"2\") ^ 3 == 1\n?>"
  },
  {
    "input": "Example #3 Bit shifting on integers",
    "output": "<?php\n/*\n * Here are the examples.\n */\necho\n\"\\n--- BIT SHIFT RIGHT ON POSITIVE INTEGERS ---\\n\"\n;\n$val\n=\n4\n;\n$places\n=\n1\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'copy of sign bit shifted into left side'\n);\n$val\n=\n4\n;\n$places\n=\n2\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n);\n$val\n=\n4\n;\n$places\n=\n3\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'bits shift out right side'\n);\n$val\n=\n4\n;\n$places\n=\n4\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'same result as above; can not shift beyond 0'\n);\necho\n\"\\n--- BIT SHIFT RIGHT ON NEGATIVE INTEGERS ---\\n\"\n;\n$val\n= -\n4\n;\n$places\n=\n1\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'copy of sign bit shifted into left side'\n);\n$val\n= -\n4\n;\n$places\n=\n2\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'bits shift out right side'\n);\n$val\n= -\n4\n;\n$places\n=\n3\n;\n$res\n=\n$val\n>>\n$places\n;\np\n(\n$res\n,\n$val\n,\n'>>'\n,\n$places\n,\n'same result as above; can not shift beyond -1'\n);\necho\n\"\\n--- BIT SHIFT LEFT ON POSITIVE INTEGERS ---\\n\"\n;\n$val\n=\n4\n;\n$places\n=\n1\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n,\n'zeros fill in right side'\n);\n$val\n=\n4\n;\n$places\n= (\nPHP_INT_SIZE\n*\n8\n) -\n4\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n);\n$val\n=\n4\n;\n$places\n= (\nPHP_INT_SIZE\n*\n8\n) -\n3\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n,\n'sign bits get shifted out'\n);\n$val\n=\n4\n;\n$places\n= (\nPHP_INT_SIZE\n*\n8\n) -\n2\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n,\n'bits shift out left side'\n);\necho\n\"\\n--- BIT SHIFT LEFT ON NEGATIVE INTEGERS ---\\n\"\n;\n$val\n= -\n4\n;\n$places\n=\n1\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n,\n'zeros fill in right side'\n);\n$val\n= -\n4\n;\n$places\n= (\nPHP_INT_SIZE\n*\n8\n) -\n3\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n);\n$val\n= -\n4\n;\n$places\n= (\nPHP_INT_SIZE\n*\n8\n) -\n2\n;\n$res\n=\n$val\n<<\n$places\n;\np\n(\n$res\n,\n$val\n,\n'<<'\n,\n$places\n,\n'bits shift out left side, including sign bit'\n);\n/*\n * Ignore this bottom section,\n * it is just formatting to make output clearer.\n */\nfunction\np\n(\n$res\n,\n$val\n,\n$op\n,\n$places\n,\n$note\n=\n''\n) {\n\n$format\n=\n'%0'\n. (\nPHP_INT_SIZE\n*\n8\n) .\n\"b\\n\"\n;\n\nprintf\n(\n\"Expression: %d = %d %s %d\\n\"\n,\n$res\n,\n$val\n,\n$op\n,\n$places\n);\n    echo\n\" Decimal:\\n\"\n;\n\nprintf\n(\n\"  val=%d\\n\"\n,\n$val\n);\n\nprintf\n(\n\"  res=%d\\n\"\n,\n$res\n);\n    echo\n\" Binary:\\n\"\n;\n\nprintf\n(\n'  val='\n.\n$format\n,\n$val\n);\n\nprintf\n(\n'  res='\n.\n$format\n,\n$res\n);\n    if (\n$note\n) {\n        echo\n\" NOTE:\n$note\n\\n\"\n;\n    }\n    echo\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Boolean/null comparison",
    "output": "<?php\n// Bool and null are compared as bool always\nvar_dump\n(\n1\n==\nTRUE\n);\n// TRUE - same as (bool) 1 == TRUE\nvar_dump\n(\n0\n==\nFALSE\n);\n// TRUE - same as (bool) 0 == FALSE\nvar_dump\n(\n100\n<\nTRUE\n);\n// FALSE - same as (bool) 100 < TRUE\nvar_dump\n(-\n10\n<\nFALSE\n);\n// FALSE - same as (bool) -10 < FALSE\nvar_dump\n(\nmin\n(-\n100\n, -\n10\n,\nNULL\n,\n10\n,\n100\n));\n// NULL - (bool) NULL < (bool) -100 is FALSE < TRUE\n?>"
  },
  {
    "input": "Example #2 Transcription of standard array comparison",
    "output": "<?php\n// Arrays are compared like this with standard comparison operators as well as the spaceship operator.\nfunction\nstandard_array_compare\n(\n$op1\n,\n$op2\n)\n{\n    if (\ncount\n(\n$op1\n) <\ncount\n(\n$op2\n)) {\n        return -\n1\n;\n// $op1 < $op2\n\n} elseif (\ncount\n(\n$op1\n) >\ncount\n(\n$op2\n)) {\n        return\n1\n;\n// $op1 > $op2\n\n}\n    foreach (\n$op1\nas\n$key\n=>\n$val\n) {\n        if (!\narray_key_exists\n(\n$key\n,\n$op2\n)) {\n            return\n1\n;\n        } elseif (\n$val\n<\n$op2\n[\n$key\n]) {\n            return -\n1\n;\n        } elseif (\n$val\n>\n$op2\n[\n$key\n]) {\n            return\n1\n;\n        }\n    }\n    return\n0\n;\n// $op1 == $op2\n}\n?>"
  },
  {
    "input": "Example #3 Assigning a default value",
    "output": "<?php\n// Example usage for: Ternary Operator\n$action\n= (empty(\n$_POST\n[\n'action'\n])) ?\n'default'\n:\n$_POST\n[\n'action'\n];\n// The above is identical to this if/else statement\nif (empty(\n$_POST\n[\n'action'\n])) {\n\n$action\n=\n'default'\n;\n} else {\n\n$action\n=\n$_POST\n[\n'action'\n];\n}\n?>"
  },
  {
    "input": "Example #4 Non-obvious Ternary Behaviour",
    "output": "<?php\n// on first glance, the following appears to output 'true'\necho (\ntrue\n?\n'true'\n:\nfalse\n?\n't'\n:\n'f'\n);\n// however, the actual output of the above is 't' prior to PHP 8.0.0\n// this is because ternary expressions are left-associative\n// the following is a more obvious version of the same code as above\necho ((\ntrue\n?\n'true'\n:\nfalse\n) ?\n't'\n:\n'f'\n);\n// here, one can see that the first expression is evaluated to 'true', which\n// in turn evaluates to (bool) true, thus returning the true branch of the\n// second ternary expression.\n?>"
  },
  {
    "input": "Example #5 Short-ternary chaining",
    "output": "<?php\necho\n0\n?:\n1\n?:\n2\n?:\n3\n,\nPHP_EOL\n;\n//1\necho\n0\n?:\n0\n?:\n2\n?:\n3\n,\nPHP_EOL\n;\n//2\necho\n0\n?:\n0\n?:\n0\n?:\n3\n,\nPHP_EOL\n;\n//3\n?>"
  },
  {
    "input": "Example #6 Assigning a default value",
    "output": "<?php\n// Example usage for: Null Coalesce Operator\n$action\n=\n$_POST\n[\n'action'\n] ??\n'default'\n;\n// The above is identical to this if/else statement\nif (isset(\n$_POST\n[\n'action'\n])) {\n\n$action\n=\n$_POST\n[\n'action'\n];\n} else {\n\n$action\n=\n'default'\n;\n}\n?>"
  },
  {
    "input": "Example #7 Nesting null coalescing operator",
    "output": "<?php\n$foo\n=\nnull\n;\n$bar\n=\nnull\n;\n$baz\n=\n1\n;\n$qux\n=\n2\n;\necho\n$foo\n??\n$bar\n??\n$baz\n??\n$qux\n;\n// outputs 1\n?>"
  },
  {
    "input": "Example #1 Logical operators illustrated",
    "output": "<?php\n// --------------------\n// foo() will never get called as those operators are short-circuit\n$a\n= (\nfalse\n&&\nfoo\n());\n$b\n= (\ntrue\n||\nfoo\n());\n$c\n= (\nfalse\nand\nfoo\n());\n$d\n= (\ntrue\nor\nfoo\n());\n// --------------------\n// \"||\" has a greater precedence than \"or\"\n// The result of the expression (false || true) is assigned to $e\n// Acts like: ($e = (false || true))\n$e\n=\nfalse\n||\ntrue\n;\n// The constant false is assigned to $f before the \"or\" operation occurs\n// Acts like: (($f = false) or true)\n$f\n=\nfalse\nor\ntrue\n;\nvar_dump\n(\n$e\n,\n$f\n);\n// --------------------\n// \"&&\" has a greater precedence than \"and\"\n// The result of the expression (true && false) is assigned to $g\n// Acts like: ($g = (true && false))\n$g\n=\ntrue\n&&\nfalse\n;\n// The constant true is assigned to $h before the \"and\" operation occurs\n// Acts like: (($h = true) and false)\n$h\n=\ntrue\nand\nfalse\n;\nvar_dump\n(\n$g\n,\n$h\n);\n?>"
  },
  {
    "input": "Example #1 Comparing arrays",
    "output": "<?php\n$a\n= array(\n\"apple\"\n,\n\"banana\"\n);\n$b\n= array(\n1\n=>\n\"banana\"\n,\n\"0\"\n=>\n\"apple\"\n);\nvar_dump\n(\n$a\n==\n$b\n);\n// bool(true)\nvar_dump\n(\n$a\n===\n$b\n);\n// bool(false)\n?>"
  },
  {
    "input": "Example #1 Using instanceof with classes",
    "output": "<?php\nclass\nMyClass\n{\n}\nclass\nNotMyClass\n{\n}\n$a\n= new\nMyClass\n;\nvar_dump\n(\n$a\ninstanceof\nMyClass\n);\nvar_dump\n(\n$a\ninstanceof\nNotMyClass\n);\n?>"
  },
  {
    "input": "Example #2 Using instanceof with inherited classes",
    "output": "<?php\nclass\nParentClass\n{\n}\nclass\nMyClass\nextends\nParentClass\n{\n}\n$a\n= new\nMyClass\n;\nvar_dump\n(\n$a\ninstanceof\nMyClass\n);\nvar_dump\n(\n$a\ninstanceof\nParentClass\n);\n?>"
  },
  {
    "input": "Example #3 Using instanceof to check if object is not an\n    instanceof a class",
    "output": "<?php\nclass\nMyClass\n{\n}\n$a\n= new\nMyClass\n;\nvar_dump\n(!(\n$a\ninstanceof\nstdClass\n));\n?>"
  },
  {
    "input": "Example #4 Using instanceof with interfaces",
    "output": "<?php\ninterface\nMyInterface\n{\n}\nclass\nMyClass\nimplements\nMyInterface\n{\n}\n$a\n= new\nMyClass\n;\nvar_dump\n(\n$a\ninstanceof\nMyClass\n);\nvar_dump\n(\n$a\ninstanceof\nMyInterface\n);\n?>"
  },
  {
    "input": "Example #5 Using instanceof with other variables",
    "output": "<?php\ninterface\nMyInterface\n{\n}\nclass\nMyClass\nimplements\nMyInterface\n{\n}\n$a\n= new\nMyClass\n;\n$b\n= new\nMyClass\n;\n$c\n=\n'MyClass'\n;\n$d\n=\n'NotMyClass'\n;\nvar_dump\n(\n$a\ninstanceof\n$b\n);\n// $b is an object of class MyClass\nvar_dump\n(\n$a\ninstanceof\n$c\n);\n// $c is a string 'MyClass'\nvar_dump\n(\n$a\ninstanceof\n$d\n);\n// $d is a string 'NotMyClass'\n?>"
  },
  {
    "input": "Example #6 Using instanceof to test other variables",
    "output": "<?php\n$a\n=\n1\n;\n$b\n=\nNULL\n;\n$c\n=\nimagecreate\n(\n5\n,\n5\n);\nvar_dump\n(\n$a\ninstanceof\nstdClass\n);\n// $a is an integer\nvar_dump\n(\n$b\ninstanceof\nstdClass\n);\n// $b is NULL\nvar_dump\n(\n$c\ninstanceof\nstdClass\n);\n// $c is a resource\nvar_dump\n(\nFALSE\ninstanceof\nstdClass\n);\n?>"
  },
  {
    "input": "Example #7 Using instanceof to test constants",
    "output": "<?php\nvar_dump\n(\nFALSE\ninstanceof\nstdClass\n);\n?>"
  },
  {
    "input": "Example #8 Using instanceof with an arbitrary expression",
    "output": "<?php\nclass\nClassA\nextends\n\\stdClass\n{}\nclass\nClassB\nextends\n\\stdClass\n{}\nclass\nClassC\nextends\nClassB\n{}\nclass\nClassD\nextends\nClassA\n{}\nfunction\ngetSomeClass\n():\nstring\n{\n    return\nClassA\n::class;\n}\nvar_dump\n(new\nClassA\ninstanceof (\n'std'\n.\n'Class'\n));\nvar_dump\n(new\nClassB\ninstanceof (\n'Class'\n.\n'B'\n));\nvar_dump\n(new\nClassC\ninstanceof (\n'Class'\n.\n'A'\n));\nvar_dump\n(new\nClassD\ninstanceof (\ngetSomeClass\n()));\n?>"
  },
  {
    "input": "Example #1 switch structure",
    "output": "<?php\n// This switch statement:\nswitch (\n$i\n) {\n    case\n0\n:\n        echo\n\"i equals 0\"\n;\n        break;\n    case\n1\n:\n        echo\n\"i equals 1\"\n;\n        break;\n    case\n2\n:\n        echo\n\"i equals 2\"\n;\n        break;\n}\n// Is equivalent to:\nif (\n$i\n==\n0\n) {\n    echo\n\"i equals 0\"\n;\n} elseif (\n$i\n==\n1\n) {\n    echo\n\"i equals 1\"\n;\n} elseif (\n$i\n==\n2\n) {\n    echo\n\"i equals 2\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Structure of a match expression",
    "output": "<?php\n$return_value\n= match (\nsubject_expression\n) {\n\nsingle_conditional_expression\n=>\nreturn_expression\n,\n\nconditional_expression1\n,\nconditional_expression2\n=>\nreturn_expression\n,\n};\n?>"
  },
  {
    "input": "Example #2 Basic match usage",
    "output": "<?php\n$food\n=\n'cake'\n;\n$return_value\n= match (\n$food\n) {\n\n'apple'\n=>\n'This food is an apple'\n,\n\n'bar'\n=>\n'This food is a bar'\n,\n\n'cake'\n=>\n'This food is a cake'\n,\n};\nvar_dump\n(\n$return_value\n);\n?>"
  },
  {
    "input": "Example #3 Example of using match with comparison operators",
    "output": "<?php\n$age\n=\n18\n;\n$output\n= match (\ntrue\n) {\n\n$age\n<\n2\n=>\n\"Baby\"\n,\n\n$age\n<\n13\n=>\n\"Child\"\n,\n\n$age\n<=\n19\n=>\n\"Teenager\"\n,\n\n$age\n>=\n40\n=>\n\"Old adult\"\n,\n\n$age\n>\n19\n=>\n\"Young adult\"\n,\n};\nvar_dump\n(\n$output\n);\n?>"
  },
  {
    "input": "Example #4 Example of an unhandled match expression",
    "output": "<?php\n$condition\n=\n5\n;\ntry {\n    match (\n$condition\n) {\n\n1\n,\n2\n=>\nfoo\n(),\n\n3\n,\n4\n=>\nbar\n(),\n    };\n} catch (\n\\UnhandledMatchError $e\n) {\n\nvar_dump\n(\n$e\n);\n}\n?>"
  },
  {
    "input": "Example #5 Using a generalized match expressions to branch on integer ranges",
    "output": "<?php\n$age\n=\n23\n;\n$result\n= match (\ntrue\n) {\n\n$age\n>=\n65\n=>\n'senior'\n,\n\n$age\n>=\n25\n=>\n'adult'\n,\n\n$age\n>=\n18\n=>\n'young adult'\n,\n    default =>\n'kid'\n,\n};\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #6 Using a generalized match expressions to branch on string content",
    "output": "<?php\n$text\n=\n'Bienvenue chez nous'\n;\n$result\n= match (\ntrue\n) {\n\nstr_contains\n(\n$text\n,\n'Welcome'\n) ||\nstr_contains\n(\n$text\n,\n'Hello'\n) =>\n'en'\n,\n\nstr_contains\n(\n$text\n,\n'Bienvenue'\n) ||\nstr_contains\n(\n$text\n,\n'Bonjour'\n) =>\n'fr'\n,\n\n// ...\n};\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 Tick usage example",
    "output": "<?php\ndeclare(\nticks\n=\n1\n);\n// A function called on each tick event\nfunction\ntick_handler\n()\n{\n    echo\n\"tick_handler() called\\n\"\n;\n}\nregister_tick_function\n(\n'tick_handler'\n);\n// causes a tick event\n$a\n=\n1\n;\n// causes a tick event\nif (\n$a\n>\n0\n) {\n\n$a\n+=\n2\n;\n// causes a tick event\n\nprint\n$a\n;\n// causes a tick event\n}\n?>"
  },
  {
    "input": "Example #2 Declaring an encoding for the script",
    "output": "<?php\ndeclare(\nencoding\n=\n'ISO-8859-1'\n);\n// code here\n?>"
  },
  {
    "input": "Example #1 Basic include example",
    "output": "vars.php\n<?php\n$color\n=\n'green'\n;\n$fruit\n=\n'apple'\n;\n?>\ntest.php\n<?php\necho\n\"A\n$color\n\n$fruit\n\"\n;\n// A\ninclude\n'vars.php'\n;\necho\n\"A\n$color\n\n$fruit\n\"\n;\n// A green apple\n?>"
  },
  {
    "input": "Example #2 Including within functions",
    "output": "<?php\nfunction\nfoo\n()\n{\n    global\n$color\n;\n    include\n'vars.php'\n;\n    echo\n\"A\n$color\n\n$fruit\n\"\n;\n}\n/* vars.php is in the scope of foo() so     *\n* $fruit is NOT available outside of this  *\n* scope.  $color is because we declared it *\n* as global.                               */\nfoo\n();\n// A green apple\necho\n\"A\n$color\n\n$fruit\n\"\n;\n// A green\n?>"
  },
  {
    "input": "Example #3 include through HTTP",
    "output": "<?php\n/* This example assumes that www.example.com is configured to parse .php\n* files and not .txt files. Also, 'Works' here means that the variables\n* $foo and $bar are available within the included file. */\n// Won't work; file.txt wasn't handled by www.example.com as PHP\ninclude\n'http://www.example.com/file.txt?foo=1&bar=2'\n;\n// Won't work; looks for a file named 'file.php?foo=1&bar=2' on the\n// local filesystem.\ninclude\n'file.php?foo=1&bar=2'\n;\n// Works.\ninclude\n'http://www.example.com/file.php?foo=1&bar=2'\n;\n?>"
  },
  {
    "input": "Example #4 Comparing return value of include",
    "output": "<?php\n// won't work, evaluated as include(('vars.php') == TRUE), i.e. include('1')\nif (include(\n'vars.php'\n) ==\nTRUE\n) {\n    echo\n'OK'\n;\n}\n// works\nif ((include\n'vars.php'\n) ==\nTRUE\n) {\n    echo\n'OK'\n;\n}\n?>"
  },
  {
    "input": "Example #5 include and the return statement",
    "output": "return.php\n<?php\n$var\n=\n'PHP'\n;\nreturn\n$var\n;\n?>\nnoreturn.php\n<?php\n$var\n=\n'PHP'\n;\n?>\ntestreturns.php\n<?php\n$foo\n= include\n'return.php'\n;\necho\n$foo\n;\n// prints 'PHP'\n$bar\n= include\n'noreturn.php'\n;\necho\n$bar\n;\n// prints 1\n?>"
  },
  {
    "input": "Example #6 Using output buffering to include a PHP file into a string",
    "output": "<?php\n$string\n=\nget_include_contents\n(\n'somefile.php'\n);\nfunction\nget_include_contents\n(\n$filename\n) {\n    if (\nis_file\n(\n$filename\n)) {\n\nob_start\n();\n        include\n$filename\n;\n        return\nob_get_clean\n();\n    }\n    return\nfalse\n;\n}\n?>"
  },
  {
    "input": "Example #1 goto example",
    "output": "<?php\ngoto\na\n;\necho\n'Foo'\n;\na\n:\necho\n'Bar'\n;\n?>"
  },
  {
    "input": "Example #2 goto loop example",
    "output": "<?php\nfor (\n$i\n=\n0\n,\n$j\n=\n50\n;\n$i\n<\n100\n;\n$i\n++) {\n    while (\n$j\n--) {\n        if (\n$j\n==\n17\n) {\n            goto\nend\n;\n        }\n    }\n}\necho\n\"i =\n$i\n\"\n;\nend\n:\necho\n'j hit 17'\n;\n?>"
  },
  {
    "input": "Example #3 This will not work",
    "output": "<?php\ngoto\nloop\n;\nfor (\n$i\n=\n0\n,\n$j\n=\n50\n;\n$i\n<\n100\n;\n$i\n++) {\n    while (\n$j\n--) {\n\nloop\n:\n    }\n}\necho\n\"\n$i\n =\n$i\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Pseudo code to demonstrate function uses",
    "output": "<?php\nfunction\nfoo\n(\n$arg_1\n,\n$arg_2\n,\n/* ..., */\n$arg_n\n)\n{\n    echo\n\"Example function.\\n\"\n;\n    return\n$retval\n;\n}\n?>"
  },
  {
    "input": "Example #2 Conditional functions",
    "output": "<?php\n$makefoo\n=\ntrue\n;\n/* We can't call foo() from here\n   since it doesn't exist yet,\n   but we can call bar() */\nbar\n();\nif (\n$makefoo\n) {\n  function\nfoo\n()\n  {\n    echo\n\"I don't exist until program execution reaches me.\\n\"\n;\n  }\n}\n/* Now we can safely call foo()\n   since $makefoo evaluated to true */\nif (\n$makefoo\n)\nfoo\n();\nfunction\nbar\n()\n{\n  echo\n\"I exist immediately upon program start.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Functions within functions",
    "output": "<?php\nfunction\nfoo\n()\n{\n  function\nbar\n()\n  {\n    echo\n\"I don't exist until foo() is called.\\n\"\n;\n  }\n}\n/* We can't call bar() yet\n   since it doesn't exist. */\nfoo\n();\n/* Now we can call bar(),\n   foo()'s processing has\n   made it accessible. */\nbar\n();\n?>"
  },
  {
    "input": "Example #4 Recursive functions",
    "output": "<?php\nfunction\nrecursion\n(\n$a\n)\n{\n    if (\n$a\n<\n20\n) {\n        echo\n\"\n$a\n\\n\"\n;\n\nrecursion\n(\n$a\n+\n1\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Passing arrays to functions",
    "output": "<?php\nfunction\ntakes_array\n(\n$input\n)\n{\n    echo\n\"\n$input\n[\n0\n]\n +\n$input\n[\n1\n]\n = \"\n,\n$input\n[\n0\n]+\n$input\n[\n1\n];\n}\n?>"
  },
  {
    "input": "Example #2 Function parameter list with trailing comma",
    "output": "<?php\nfunction\ntakes_many_args\n(\n\n$first_arg\n,\n\n$second_arg\n,\n\n$a_very_long_argument_name\n,\n\n$arg_with_default\n=\n5\n,\n\n$again\n=\n'a default string'\n,\n// This trailing comma was not permitted before 8.0.0.\n)\n{\n\n// ...\n}\n?>"
  },
  {
    "input": "Example #3 Passing function arguments by reference",
    "output": "<?php\nfunction\nadd_some_extra\n(&\n$string\n)\n{\n\n$string\n.=\n'and something extra.'\n;\n}\n$str\n=\n'This is a string, '\n;\nadd_some_extra\n(\n$str\n);\necho\n$str\n;\n// outputs 'This is a string, and something extra.'\n?>"
  },
  {
    "input": "Example #4 Use of default parameters in functions",
    "output": "<?php\nfunction\nmakecoffee\n(\n$type\n=\n\"cappuccino\"\n)\n{\n    return\n\"Making a cup of\n$type\n.\\n\"\n;\n}\necho\nmakecoffee\n();\necho\nmakecoffee\n(\nnull\n);\necho\nmakecoffee\n(\n\"espresso\"\n);\n?>"
  },
  {
    "input": "Example #5 Using non-scalar types as default values",
    "output": "<?php\nfunction\nmakecoffee\n(\n$types\n= array(\n\"cappuccino\"\n),\n$coffeeMaker\n=\nNULL\n)\n{\n\n$device\n=\nis_null\n(\n$coffeeMaker\n) ?\n\"hands\"\n:\n$coffeeMaker\n;\n    return\n\"Making a cup of \"\n.\njoin\n(\n\", \"\n,\n$types\n).\n\" with\n$device\n.\\n\"\n;\n}\necho\nmakecoffee\n();\necho\nmakecoffee\n(array(\n\"cappuccino\"\n,\n\"lavazza\"\n),\n\"teapot\"\n);\n?>"
  },
  {
    "input": "Example #6 Using objects as default values (as of PHP 8.1.0)",
    "output": "<?php\nclass\nDefaultCoffeeMaker\n{\n    public function\nbrew\n() {\n        return\n\"Making coffee.\\n\"\n;\n    }\n}\nclass\nFancyCoffeeMaker\n{\n    public function\nbrew\n() {\n        return\n\"Crafting a beautiful coffee just for you.\\n\"\n;\n    }\n}\nfunction\nmakecoffee\n(\n$coffeeMaker\n= new\nDefaultCoffeeMaker\n)\n{\n    return\n$coffeeMaker\n->\nbrew\n();\n}\necho\nmakecoffee\n();\necho\nmakecoffee\n(new\nFancyCoffeeMaker\n);\n?>"
  },
  {
    "input": "Example #7 Incorrect usage of default function parameters",
    "output": "<?php\nfunction\nmakeyogurt\n(\n$container\n=\n\"bowl\"\n,\n$flavour\n)\n{\n    return\n\"Making a\n$container\n of\n$flavour\n yogurt.\\n\"\n;\n}\necho\nmakeyogurt\n(\n\"raspberry\"\n);\n// \"raspberry\" is $container, not $flavour\n?>"
  },
  {
    "input": "Example #8 Correct usage of default function parameters",
    "output": "<?php\nfunction\nmakeyogurt\n(\n$flavour\n,\n$container\n=\n\"bowl\"\n)\n{\n    return\n\"Making a\n$container\n of\n$flavour\n yogurt.\\n\"\n;\n}\necho\nmakeyogurt\n(\n\"raspberry\"\n);\n// \"raspberry\" is $flavour\n?>"
  },
  {
    "input": "Example #9 Correct usage of default function parameters",
    "output": "<?php\nfunction\nmakeyogurt\n(\n$container\n=\n\"bowl\"\n,\n$flavour\n=\n\"raspberry\"\n,\n$style\n=\n\"Greek\"\n)\n{\n    return\n\"Making a\n$container\n of\n$flavour\n\n$style\n yogurt.\\n\"\n;\n}\necho\nmakeyogurt\n(\nstyle\n:\n\"natural\"\n);\n?>"
  },
  {
    "input": "Example #10 Declaring optional parameters after mandatory parameters",
    "output": "<?php\nfunction\nfoo\n(\n$a\n= [],\n$b\n) {}\n// Default not used; deprecated as of PHP 8.0.0\nfunction\nfoo\n(\n$a\n,\n$b\n) {}\n// Functionally equivalent, no deprecation notice\nfunction\nbar\n(\nA $a\n=\nnull\n,\n$b\n) {}\n// As of PHP 8.1.0, $a is implicitly required\n                                 // (because it comes before the required one),\n                                 // but implicitly nullable (deprecated as of PHP 8.4.0),\n                                 // because the default parameter value is null\nfunction\nbar\n(?\nA $a\n,\n$b\n) {}\n// Recommended\n?>"
  },
  {
    "input": "Example #11 Using ... to access variable arguments",
    "output": "<?php\nfunction\nsum\n(...\n$numbers\n) {\n\n$acc\n=\n0\n;\n    foreach (\n$numbers\nas\n$n\n) {\n\n$acc\n+=\n$n\n;\n    }\n    return\n$acc\n;\n}\necho\nsum\n(\n1\n,\n2\n,\n3\n,\n4\n);\n?>"
  },
  {
    "input": "Example #12 Using ... to provide arguments",
    "output": "<?php\nfunction\nadd\n(\n$a\n,\n$b\n) {\n    return\n$a\n+\n$b\n;\n}\necho\nadd\n(...[\n1\n,\n2\n]).\n\"\\n\"\n;\n$a\n= [\n1\n,\n2\n];\necho\nadd\n(...\n$a\n);\n?>"
  },
  {
    "input": "Example #13 Type declared variable arguments",
    "output": "<?php\nfunction\ntotal_intervals\n(\n$unit\n,\nDateInterval\n...\n$intervals\n) {\n\n$time\n=\n0\n;\n    foreach (\n$intervals\nas\n$interval\n) {\n\n$time\n+=\n$interval\n->\n$unit\n;\n    }\n    return\n$time\n;\n}\n$a\n= new\nDateInterval\n(\n'P1D'\n);\n$b\n= new\nDateInterval\n(\n'P2D'\n);\necho\ntotal_intervals\n(\n'd'\n,\n$a\n,\n$b\n).\n' days'\n;\n// This will fail, since null isn't a DateInterval object.\necho\ntotal_intervals\n(\n'd'\n,\nnull\n);\n?>"
  },
  {
    "input": "Example #14 Named argument syntax",
    "output": "<?php\nmyFunction\n(\nparamName\n:\n$value\n);\narray_foobar\n(array:\n$value\n);\n// NOT supported.\nfunction_name\n(\n$variableStoringParamName\n:\n$value\n);\n?>"
  },
  {
    "input": "Example #15 Positional arguments versus named arguments",
    "output": "<?php\n// Using positional arguments:\narray_fill\n(\n0\n,\n100\n,\n50\n);\n// Using named arguments:\narray_fill\n(\nstart_index\n:\n0\n,\ncount\n:\n100\n,\nvalue\n:\n50\n);\n?>"
  },
  {
    "input": "Example #16 Same example as above with a different order of parameters",
    "output": "<?php\narray_fill\n(\nvalue\n:\n50\n,\ncount\n:\n100\n,\nstart_index\n:\n0\n);\n?>"
  },
  {
    "input": "Example #17 Combining named arguments with positional arguments",
    "output": "<?php\nhtmlspecialchars\n(\n$string\n,\ndouble_encode\n:\nfalse\n);\n// Same as\nhtmlspecialchars\n(\n$string\n,\nENT_QUOTES\n|\nENT_SUBSTITUTE\n|\nENT_HTML401\n,\n'UTF-8'\n,\nfalse\n);\n?>"
  },
  {
    "input": "Example #18 Error thrown when passing an argument to the same named parameter multiple times",
    "output": "<?php\nfunction\nfoo\n(\n$param\n) { ... }\nfoo\n(\nparam\n:\n1\n,\nparam\n:\n2\n);\n// Error: Named parameter $param overwrites previous argument\nfoo\n(\n1\n,\nparam\n:\n2\n);\n// Error: Named parameter $param overwrites previous argument\n?>"
  },
  {
    "input": "Example #19 Use named arguments after unpacking",
    "output": "<?php\nfunction\nfoo\n(\n$a\n,\n$b\n,\n$c\n=\n3\n,\n$d\n=\n4\n) {\n  return\n$a\n+\n$b\n+\n$c\n+\n$d\n;\n}\nvar_dump\n(\nfoo\n(...[\n1\n,\n2\n],\nd\n:\n40\n));\n// 46\nvar_dump\n(\nfoo\n(...[\n'b'\n=>\n2\n,\n'a'\n=>\n1\n],\nd\n:\n40\n));\n// 46\nvar_dump\n(\nfoo\n(...[\n1\n,\n2\n],\nb\n:\n20\n));\n// Fatal error. Named parameter $b overwrites previous argument\n?>"
  },
  {
    "input": "Example #1 Use of return",
    "output": "<?php\nfunction\nsquare\n(\n$num\n)\n{\n    return\n$num\n*\n$num\n;\n}\necho\nsquare\n(\n4\n);\n// outputs '16'.\n?>"
  },
  {
    "input": "Example #2 Returning an array to get multiple values",
    "output": "<?php\nfunction\nsmall_numbers\n()\n{\n    return [\n0\n,\n1\n,\n2\n];\n}\n// Array destructuring will collect each member of the array individually\n[\n$zero\n,\n$one\n,\n$two\n] =\nsmall_numbers\n();\n// Prior to 7.1.0, the only equivalent alternative is using list() construct\nlist(\n$zero\n,\n$one\n,\n$two\n) =\nsmall_numbers\n();\n?>"
  },
  {
    "input": "Example #3 Returning a reference from a function",
    "output": "<?php\nfunction &\nreturns_reference\n()\n{\n    return\n$someref\n;\n}\n$newref\n=&\nreturns_reference\n();\n?>"
  },
  {
    "input": "Example #1 Variable function example",
    "output": "<?php\nfunction\nfoo\n() {\n    echo\n\"In foo()<br />\\n\"\n;\n}\nfunction\nbar\n(\n$arg\n=\n''\n)\n{\n    echo\n\"In bar(); argument was '\n$arg\n'.<br />\\n\"\n;\n}\n// This is a wrapper function around echo\nfunction\nechoit\n(\n$string\n)\n{\n    echo\n$string\n;\n}\n$func\n=\n'foo'\n;\n$func\n();\n// This calls foo()\n$func\n=\n'bar'\n;\n$func\n(\n'test'\n);\n// This calls bar()\n$func\n=\n'echoit'\n;\n$func\n(\n'test'\n);\n// This calls echoit()\n?>"
  },
  {
    "input": "Example #2 Variable method example",
    "output": "<?php\nclass\nFoo\n{\n    function\nVariable\n()\n    {\n\n$name\n=\n'Bar'\n;\n\n$this\n->\n$name\n();\n// This calls the Bar() method\n\n}\n\n    function\nBar\n()\n    {\n        echo\n\"This is Bar\"\n;\n    }\n}\n$foo\n= new\nFoo\n();\n$funcname\n=\n\"Variable\"\n;\n$foo\n->\n$funcname\n();\n// This calls $foo->Variable()\n?>"
  },
  {
    "input": "Example #3 Variable method example with static properties",
    "output": "<?php\nclass\nFoo\n{\n    static\n$variable\n=\n'static property'\n;\n    static function\nVariable\n()\n    {\n        echo\n'Method Variable called'\n;\n    }\n}\necho\nFoo\n::\n$variable\n;\n// This prints 'static property'. It does need a $variable in this scope.\n$variable\n=\n\"Variable\"\n;\nFoo\n::\n$variable\n();\n// This calls $foo->Variable() reading $variable in this scope.\n?>"
  },
  {
    "input": "Example #4 Complex callables",
    "output": "<?php\nclass\nFoo\n{\n    static function\nbar\n()\n    {\n        echo\n\"bar\\n\"\n;\n    }\n    function\nbaz\n()\n    {\n        echo\n\"baz\\n\"\n;\n    }\n}\n$func\n= array(\n\"Foo\"\n,\n\"bar\"\n);\n$func\n();\n// prints \"bar\"\n$func\n= array(new\nFoo\n,\n\"baz\"\n);\n$func\n();\n// prints \"baz\"\n$func\n=\n\"Foo::bar\"\n;\n$func\n();\n// prints \"bar\"\n?>"
  },
  {
    "input": "Example #1 Anonymous function example",
    "output": "<?php\necho\npreg_replace_callback\n(\n'~-([a-z])~'\n, function (\n$match\n) {\n    return\nstrtoupper\n(\n$match\n[\n1\n]);\n},\n'hello-world'\n);\n// outputs helloWorld\n?>"
  },
  {
    "input": "Example #2 Anonymous function variable assignment example",
    "output": "<?php\n$greet\n= function(\n$name\n) {\n\nprintf\n(\n\"Hello %s\\r\\n\"\n,\n$name\n);\n};\n$greet\n(\n'World'\n);\n$greet\n(\n'PHP'\n);\n?>"
  },
  {
    "input": "Example #3 Inheriting variables from the parent scope",
    "output": "<?php\n$message\n=\n'hello'\n;\n// No \"use\"\n$example\n= function () {\n\nvar_dump\n(\n$message\n);\n};\n$example\n();\n// Inherit $message\n$example\n= function () use (\n$message\n) {\n\nvar_dump\n(\n$message\n);\n};\n$example\n();\n// Inherited variable's value is from when the function\n// is defined, not when called\n$message\n=\n'world'\n;\n$example\n();\n// Reset message\n$message\n=\n'hello'\n;\n// Inherit by-reference\n$example\n= function () use (&\n$message\n) {\n\nvar_dump\n(\n$message\n);\n};\n$example\n();\n// The changed value in the parent scope\n// is reflected inside the function call\n$message\n=\n'world'\n;\n$example\n();\n// Closures can also accept regular arguments\n$example\n= function (\n$arg\n) use (\n$message\n) {\n\nvar_dump\n(\n$arg\n.\n' '\n.\n$message\n);\n};\n$example\n(\n\"hello\"\n);\n// Return type declaration comes after the use clause\n$example\n= function () use (\n$message\n):\nstring\n{\n    return\n\"hello\n$message\n\"\n;\n};\nvar_dump\n(\n$example\n());\n?>"
  },
  {
    "input": "Example #4 Closures and scoping",
    "output": "<?php\n// A basic shopping cart which contains a list of added products\n// and the quantity of each product. Includes a method which\n// calculates the total price of the items in the cart using a\n// closure as a callback.\nclass\nCart\n{\n    const\nPRICE_BUTTER\n=\n1.00\n;\n    const\nPRICE_MILK\n=\n3.00\n;\n    const\nPRICE_EGGS\n=\n6.95\n;\n    protected\n$products\n= array();\n\n    public function\nadd\n(\n$product\n,\n$quantity\n)\n    {\n\n$this\n->\nproducts\n[\n$product\n] =\n$quantity\n;\n    }\n\n    public function\ngetQuantity\n(\n$product\n)\n    {\n        return isset(\n$this\n->\nproducts\n[\n$product\n]) ?\n$this\n->\nproducts\n[\n$product\n] :\n\nFALSE\n;\n    }\n\n    public function\ngetTotal\n(\n$tax\n)\n    {\n\n$total\n=\n0.00\n;\n\n\n$callback\n=\n            function (\n$quantity\n,\n$product\n) use (\n$tax\n, &\n$total\n)\n            {\n\n$pricePerItem\n=\nconstant\n(\n__CLASS__\n.\n\"::PRICE_\"\n.\n\nstrtoupper\n(\n$product\n));\n\n$total\n+= (\n$pricePerItem\n*\n$quantity\n) * (\n$tax\n+\n1.0\n);\n            };\n\n\narray_walk\n(\n$this\n->\nproducts\n,\n$callback\n);\n        return\nround\n(\n$total\n,\n2\n);\n    }\n}\n$my_cart\n= new\nCart\n;\n// Add some items to the cart\n$my_cart\n->\nadd\n(\n'butter'\n,\n1\n);\n$my_cart\n->\nadd\n(\n'milk'\n,\n3\n);\n$my_cart\n->\nadd\n(\n'eggs'\n,\n6\n);\n// Print the total with a 5% sales tax.\nprint\n$my_cart\n->\ngetTotal\n(\n0.05\n) .\n\"\\n\"\n;\n// The result is 54.29\n?>"
  },
  {
    "input": "Example #5 Automatic binding of $this",
    "output": "<?php\nclass\nTest\n{\n    public function\ntesting\n()\n    {\n        return function() {\n\nvar_dump\n(\n$this\n);\n        };\n    }\n}\n$object\n= new\nTest\n;\n$function\n=\n$object\n->\ntesting\n();\n$function\n();\n\n?>"
  },
  {
    "input": "Example #6 Attempting to use $this inside a static anonymous function",
    "output": "<?php\nclass\nFoo\n{\n    function\n__construct\n()\n    {\n\n$func\n= static function() {\n\nvar_dump\n(\n$this\n);\n        };\n\n$func\n();\n    }\n};\nnew\nFoo\n();\n?>"
  },
  {
    "input": "Example #7 Attempting to bind an object to a static anonymous function",
    "output": "<?php\n$func\n= static function() {\n\n// function body\n};\n$func\n=\n$func\n->\nbindTo\n(new\nstdClass\n);\n$func\n();\n?>"
  },
  {
    "input": "Example #1 Arrow functions capture variables by value automatically",
    "output": "<?php\n$y\n=\n1\n;\n$fn1\n= fn(\n$x\n) =>\n$x\n+\n$y\n;\n// equivalent to using $y by value:\n$fn2\n= function (\n$x\n) use (\n$y\n) {\n    return\n$x\n+\n$y\n;\n};\nvar_export\n(\n$fn1\n(\n3\n));\n?>"
  },
  {
    "input": "Example #2 Arrow functions capture variables by value automatically, even when nested",
    "output": "<?php\n$z\n=\n1\n;\n$fn\n= fn(\n$x\n) => fn(\n$y\n) =>\n$x\n*\n$y\n+\n$z\n;\n// Outputs 51\nvar_export\n(\n$fn\n(\n5\n)(\n10\n));\n?>"
  },
  {
    "input": "Example #3 Examples of arrow functions",
    "output": "<?php\nfn(array\n$x\n) =>\n$x\n;\nstatic fn(\n$x\n):\nint\n=>\n$x\n;\nfn(\n$x\n=\n42\n) =>\n$x\n;\nfn(&\n$x\n) =>\n$x\n;\nfn&(\n$x\n) =>\n$x\n;\nfn(\n$x\n, ...\n$rest\n) =>\n$rest\n;\n?>"
  },
  {
    "input": "Example #4 Values from the outer scope cannot be modified by arrow functions",
    "output": "<?php\n$x\n=\n1\n;\n$fn\n= fn() =>\n$x\n++;\n// Has no effect\n$fn\n();\nvar_export\n(\n$x\n);\n// Outputs 1\n?>"
  },
  {
    "input": "Example #1 Simple first class callable syntax",
    "output": "<?php\nclass\nFoo\n{\n   public function\nmethod\n() {}\n   public static function\nstaticmethod\n() {}\n   public function\n__invoke\n() {}\n}\n$obj\n= new\nFoo\n();\n$classStr\n=\n'Foo'\n;\n$methodStr\n=\n'method'\n;\n$staticmethodStr\n=\n'staticmethod'\n;\n$f1\n=\nstrlen\n(...);\n$f2\n=\n$obj\n(...);\n// invokable object\n$f3\n=\n$obj\n->\nmethod\n(...);\n$f4\n=\n$obj\n->\n$methodStr\n(...);\n$f5\n=\nFoo\n::\nstaticmethod\n(...);\n$f6\n=\n$classStr\n::\n$staticmethodStr\n(...);\n// traditional callable using string, array\n$f7\n=\n'strlen'\n(...);\n$f8\n= [\n$obj\n,\n'method'\n](...);\n$f9\n= [\nFoo\n::class,\n'staticmethod'\n](...);\n?>"
  },
  {
    "input": "Example #2 Scope comparison of CallableExpr(...) and traditional callable",
    "output": "<?php\nclass\nFoo\n{\n    public function\ngetPrivateMethod\n() {\n        return [\n$this\n,\n'privateMethod'\n];\n    }\n    private function\nprivateMethod\n() {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$foo\n= new\nFoo\n;\n$privateMethod\n=\n$foo\n->\ngetPrivateMethod\n();\n$privateMethod\n();\n// Fatal error: Call to private method Foo::privateMethod() from global scope\n// This is because call is performed outside from Foo and visibility will be checked from this point.\nclass\nFoo1\n{\n    public function\ngetPrivateMethod\n() {\n\n// Uses the scope where the callable is acquired.\n\nreturn\n$this\n->\nprivateMethod\n(...);\n// identical to Closure::fromCallable([$this, 'privateMethod']);\n\n}\n    private function\nprivateMethod\n() {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$foo1\n= new\nFoo1\n;\n$privateMethod\n=\n$foo1\n->\ngetPrivateMethod\n();\n$privateMethod\n();\n// Foo1::privateMethod\n?>"
  },
  {
    "input": "Example #1 Simple Class definition",
    "output": "<?php\nclass\nSimpleClass\n{\n\n// property declaration\n\npublic\n$var\n=\n'a default value'\n;\n\n// method declaration\n\npublic function\ndisplayVar\n() {\n        echo\n$this\n->\nvar\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Some examples of the $this pseudo-variable",
    "output": "<?php\nclass\nA\n{\n    function\nfoo\n()\n    {\n        if (isset(\n$this\n)) {\n            echo\n'$this is defined ('\n;\n            echo\nget_class\n(\n$this\n);\n            echo\n\")\\n\"\n;\n        } else {\n            echo\n\"\\$this is not defined.\\n\"\n;\n        }\n    }\n}\nclass\nB\n{\n    function\nbar\n()\n    {\n\nA\n::\nfoo\n();\n    }\n}\n$a\n= new\nA\n();\n$a\n->\nfoo\n();\nA\n::\nfoo\n();\n$b\n= new\nB\n();\n$b\n->\nbar\n();\nB\n::\nbar\n();\n?>"
  },
  {
    "input": "Example #3 Creating an instance",
    "output": "<?php\n$instance\n= new\nSimpleClass\n();\n// This can also be done with a variable:\n$className\n=\n'SimpleClass'\n;\n$instance\n= new\n$className\n();\n// new SimpleClass()\n?>"
  },
  {
    "input": "Example #5 Object Assignment",
    "output": "<?php\n$instance\n= new\nSimpleClass\n();\n$assigned\n=\n$instance\n;\n$reference\n=&\n$instance\n;\n$instance\n->\nvar\n=\n'$assigned will have this value'\n;\n$instance\n=\nnull\n;\n// $instance and $reference become null\nvar_dump\n(\n$instance\n);\nvar_dump\n(\n$reference\n);\nvar_dump\n(\n$assigned\n);\n?>"
  },
  {
    "input": "Example #6 Creating new objects",
    "output": "<?php\nclass\nTest\n{\n    public static function\ngetNew\n()\n    {\n        return new static();\n    }\n}\nclass\nChild\nextends\nTest\n{}\n$obj1\n= new\nTest\n();\n// By the class name\n$obj2\n= new\n$obj1\n();\n// Through the variable containing an object\nvar_dump\n(\n$obj1\n!==\n$obj2\n);\n$obj3\n=\nTest\n::\ngetNew\n();\n// By the class method\nvar_dump\n(\n$obj3\ninstanceof\nTest\n);\n$obj4\n=\nChild\n::\ngetNew\n();\n// Through a child class method\nvar_dump\n(\n$obj4\ninstanceof\nChild\n);\n?>"
  },
  {
    "input": "Example #7 Access member of newly created object",
    "output": "<?php\necho (new\nDateTime\n())->\nformat\n(\n'Y'\n);\n// surrounding parentheses are optional as of PHP 8.4.0\necho new\nDateTime\n()->\nformat\n(\n'Y'\n);\n?>"
  },
  {
    "input": "Example #8 Property access vs. method call",
    "output": "<?php\nclass\nFoo\n{\n    public\n$bar\n=\n'property'\n;\n\n    public function\nbar\n() {\n        return\n'method'\n;\n    }\n}\n$obj\n= new\nFoo\n();\necho\n$obj\n->\nbar\n,\nPHP_EOL\n,\n$obj\n->\nbar\n(),\nPHP_EOL\n;"
  },
  {
    "input": "Example #9 Calling an anonymous function stored in a property",
    "output": "<?php\nclass\nFoo\n{\n    public\n$bar\n;\n\n    public function\n__construct\n() {\n\n$this\n->\nbar\n= function() {\n            return\n42\n;\n        };\n    }\n}\n$obj\n= new\nFoo\n();\necho (\n$obj\n->\nbar\n)(),\nPHP_EOL\n;"
  },
  {
    "input": "Example #10 Simple Class Inheritance",
    "output": "<?php\nclass\nExtendClass\nextends\nSimpleClass\n{\n\n// Redefine the parent method\n\nfunction\ndisplayVar\n()\n    {\n        echo\n\"Extending class\\n\"\n;\n\nparent\n::\ndisplayVar\n();\n    }\n}\n$extended\n= new\nExtendClass\n();\n$extended\n->\ndisplayVar\n();\n?>"
  },
  {
    "input": "Example #11 Compatible child methods",
    "output": "<?php\nclass\nBase\n{\n    public function\nfoo\n(\nint $a\n) {\n        echo\n\"Valid\\n\"\n;\n    }\n}\nclass\nExtend1\nextends\nBase\n{\n    function\nfoo\n(\nint $a\n=\n5\n)\n    {\n\nparent\n::\nfoo\n(\n$a\n);\n    }\n}\nclass\nExtend2\nextends\nBase\n{\n    function\nfoo\n(\nint $a\n,\n$b\n=\n5\n)\n    {\n\nparent\n::\nfoo\n(\n$a\n);\n    }\n}\n$extended1\n= new\nExtend1\n();\n$extended1\n->\nfoo\n();\n$extended2\n= new\nExtend2\n();\n$extended2\n->\nfoo\n(\n1\n);"
  },
  {
    "input": "Example #12 Fatal error when a child method removes a parameter",
    "output": "<?php\nclass\nBase\n{\n    public function\nfoo\n(\nint $a\n=\n5\n) {\n        echo\n\"Valid\\n\"\n;\n    }\n}\nclass\nExtend\nextends\nBase\n{\n    function\nfoo\n()\n    {\n\nparent\n::\nfoo\n(\n1\n);\n    }\n}"
  },
  {
    "input": "Example #13 Fatal error when a child method makes an optional parameter mandatory",
    "output": "<?php\nclass\nBase\n{\n    public function\nfoo\n(\nint $a\n=\n5\n) {\n        echo\n\"Valid\\n\"\n;\n    }\n}\nclass\nExtend\nextends\nBase\n{\n    function\nfoo\n(\nint $a\n)\n    {\n\nparent\n::\nfoo\n(\n$a\n);\n    }\n}"
  },
  {
    "input": "Example #14 Error when using named arguments and parameters were renamed in a child class",
    "output": "<?php\nclass\nA\n{\n    public function\ntest\n(\n$foo\n,\n$bar\n) {}\n}\nclass\nB\nextends\nA\n{\n    public function\ntest\n(\n$a\n,\n$b\n) {}\n}\n$obj\n= new\nB\n;\n// Pass parameters according to A::test() contract\n$obj\n->\ntest\n(\nfoo\n:\n\"foo\"\n,\nbar\n:\n\"bar\"\n);\n// ERROR!"
  },
  {
    "input": "Example #15 Class name resolution",
    "output": "<?php\nnamespace\nNS\n{\n    class\nClassName\n{\n    }\n\n    echo\nClassName\n::class;\n}\n?>"
  },
  {
    "input": "Example #16 Missing class name resolution",
    "output": "<?php\nprint\nDoes\\Not\\Exist\n::class;\n?>"
  },
  {
    "input": "Example #17 Object name resolution",
    "output": "<?php\nnamespace\nNS\n{\n    class\nClassName\n{\n    }\n}\n$c\n= new\nClassName\n();\nprint\n$c\n::class;\n?>"
  },
  {
    "input": "Example #18 Nullsafe Operator",
    "output": "<?php\n// As of PHP 8.0.0, this line:\n$result\n=\n$repository\n?->\ngetUser\n(\n5\n)?->\nname\n;\n// Is equivalent to the following code block:\nif (\nis_null\n(\n$repository\n)) {\n\n$result\n=\nnull\n;\n} else {\n\n$user\n=\n$repository\n->\ngetUser\n(\n5\n);\n    if (\nis_null\n(\n$user\n)) {\n\n$result\n=\nnull\n;\n    } else {\n\n$result\n=\n$user\n->\nname\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Property declarations",
    "output": "<?php\nclass\nSimpleClass\n{\n   public\n$var1\n=\n'hello '\n.\n'world'\n;\n   public\n$var2\n= <<<EOD\nhello world\nEOD;\n   public\n$var3\n=\n1\n+\n2\n;\n\n// invalid property declarations:\n\npublic\n$var4\n=\nself\n::\nmyStaticMethod\n();\n   public\n$var5\n=\n$myVar\n;\n\n// valid property declarations:\n\npublic\n$var6\n=\nmyConstant\n;\n   public\n$var7\n= [\ntrue\n,\nfalse\n];\n   public\n$var8\n= <<<'EOD'\nhello world\nEOD;\n\n// Without visibility modifier:\n\nstatic\n$var9\n;\n   readonly\nint $var10\n;\n}\n?>"
  },
  {
    "input": "Example #2 Example of typed properties",
    "output": "<?php\nclass\nUser\n{\n    public\nint $id\n;\n    public ?\nstring $name\n;\n    public function\n__construct\n(\nint $id\n, ?\nstring $name\n)\n    {\n\n$this\n->\nid\n=\n$id\n;\n\n$this\n->\nname\n=\n$name\n;\n    }\n}\n$user\n= new\nUser\n(\n1234\n,\nnull\n);\nvar_dump\n(\n$user\n->\nid\n);\nvar_dump\n(\n$user\n->\nname\n);\n?>"
  },
  {
    "input": "Example #3 Accessing properties",
    "output": "<?php\nclass\nShape\n{\n    public\nint $numberOfSides\n;\n    public\nstring $name\n;\n    public function\nsetNumberOfSides\n(\nint $numberOfSides\n):\nvoid\n\n{\n\n$this\n->\nnumberOfSides\n=\n$numberOfSides\n;\n    }\n    public function\nsetName\n(\nstring $name\n):\nvoid\n\n{\n\n$this\n->\nname\n=\n$name\n;\n    }\n    public function\ngetNumberOfSides\n():\nint\n\n{\n        return\n$this\n->\nnumberOfSides\n;\n    }\n    public function\ngetName\n():\nstring\n\n{\n        return\n$this\n->\nname\n;\n    }\n}\n$triangle\n= new\nShape\n();\n$triangle\n->\nsetName\n(\n\"triangle\"\n);\n$triangle\n->\nsetNumberofSides\n(\n3\n);\nvar_dump\n(\n$triangle\n->\ngetName\n());\nvar_dump\n(\n$triangle\n->\ngetNumberOfSides\n());\n$circle\n= new\nShape\n();\n$circle\n->\nsetName\n(\n\"circle\"\n);\nvar_dump\n(\n$circle\n->\ngetName\n());\nvar_dump\n(\n$circle\n->\ngetNumberOfSides\n());\n?>"
  },
  {
    "input": "Example #4 Example of readonly properties",
    "output": "<?php\nclass\nTest\n{\n   public readonly\nstring $prop\n;\n   public function\n__construct\n(\nstring $prop\n) {\n\n// Legal initialization.\n\n$this\n->\nprop\n=\n$prop\n;\n   }\n}\n$test\n= new\nTest\n(\n\"foobar\"\n);\n// Legal read.\nvar_dump\n(\n$test\n->\nprop\n);\n// string(6) \"foobar\"\n// Illegal reassignment. It does not matter that the assigned value is the same.\n$test\n->\nprop\n=\n\"foobar\"\n;\n// Error: Cannot modify readonly property Test::$prop\n?>"
  },
  {
    "input": "Example #5 Illegal initialization of readonly properties",
    "output": "<?php\nclass\nTest1\n{\n    public readonly\nstring $prop\n;\n}\n$test1\n= new\nTest1\n;\n// Illegal initialization outside of private scope.\n$test1\n->\nprop\n=\n\"foobar\"\n;\n// Error: Cannot initialize readonly property Test1::$prop from global scope\n?>"
  },
  {
    "input": "Example #6 Readonly properties and cloning",
    "output": "<?php\nclass\nTest1\n{\n    public readonly ?\nstring $prop\n;\n    public function\n__clone\n() {\n\n$this\n->\nprop\n=\nnull\n;\n    }\n    public function\nsetProp\n(\nstring $prop\n):\nvoid\n{\n\n$this\n->\nprop\n=\n$prop\n;\n    }\n}\n$test1\n= new\nTest1\n;\n$test1\n->\nsetProp\n(\n'foobar'\n);\n$test2\n= clone\n$test1\n;\nvar_dump\n(\n$test2\n->\nprop\n);\n// NULL\n?>"
  },
  {
    "input": "Example #1 Property hooks (full version)",
    "output": "<?php\nclass\nExample\n{\n    private\nbool $modified\n=\nfalse\n;\n    public\nstring $foo\n=\n'default value'\n{\n\nget\n{\n            if (\n$this\n->\nmodified\n) {\n                return\n$this\n->\nfoo\n.\n' (modified)'\n;\n            }\n            return\n$this\n->\nfoo\n;\n        }\n\nset\n(\nstring $value\n) {\n\n$this\n->\nfoo\n=\nstrtolower\n(\n$value\n);\n\n$this\n->\nmodified\n=\ntrue\n;\n        }\n    }\n}\n$example\n= new\nExample\n();\n$example\n->\nfoo\n=\n'changed'\n;\nprint\n$example\n->\nfoo\n;\n?>"
  },
  {
    "input": "Example #4 Property set expression",
    "output": "<?php\nclass\nExample\n{\n    public\nstring $foo\n=\n'default value'\n{\n\nget\n=>\n$this\n->\nfoo\n. (\n$this\n->\nmodified\n?\n' (modified)'\n:\n''\n);\n\nset\n=>\nstrtolower\n(\n$value\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #5 Invalid virtual property",
    "output": "<?php\nclass\nExample\n{\n    public\nstring $foo\n{\n\nget\n{\n\n$temp\n=\n__PROPERTY__\n;\n            return\n$this\n->\n$temp\n;\n// Doesn't refer to $this->foo, so it doesn't count.\n\n}\n    }\n}\n?>"
  },
  {
    "input": "Example #6 Virtual property",
    "output": "<?php\nreadonly class\nRectangle\n{\n\n// A virtual property.\n\npublic\nint $area\n{\n\nget\n=>\n$this\n->\nh\n*\n$this\n->\nw\n;\n    }\n    public function\n__construct\n(public\nint $h\n, public\nint $w\n) {}\n}\n$s\n= new\nRectangle\n(\n4\n,\n5\n);\nprint\n$s\n->\narea\n;\n// prints 20\n$s\n->\narea\n=\n30\n;\n// Error, as there is no set operation defined.\n?>"
  },
  {
    "input": "Example #7 Calling a method from a hook",
    "output": "<?php\nclass\nPerson\n{\n    public\nstring $phone\n{\n\nset\n=>\n$this\n->\nsanitizePhone\n(\n$value\n);\n    }\n    private function\nsanitizePhone\n(\nstring $value\n):\nstring\n{\n\n$value\n=\nltrim\n(\n$value\n,\n'+'\n);\n\n$value\n=\nltrim\n(\n$value\n,\n'1'\n);\n        if (!\npreg_match\n(\n'/\\d\\d\\d\\-\\d\\d\\d\\-\\d\\d\\d\\d/'\n,\n$value\n)) {\n            throw new\n\\InvalidArgumentException\n();\n        }\n        return\n$value\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #8 Final hooks",
    "output": "<?php\nclass\nUser\n{\n    public\nstring $username\n{\n        final\nset\n=>\nstrtolower\n(\n$value\n);\n    }\n}\nclass\nManager\nextends\nUser\n{\n    public\nstring $username\n{\n\n// This is allowed\n\nget\n=>\nstrtoupper\n(\n$this\n->\nusername\n);\n\n// But this is NOT allowed, because set is final in the parent.\n\nset\n=>\nstrtoupper\n(\n$value\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #9 Hook inheritance",
    "output": "<?php\nclass\nPoint\n{\n    public\nint $x\n;\n    public\nint $y\n;\n}\nclass\nPositivePoint\nextends\nPoint\n{\n    public\nint $x\n{\n\nset\n{\n            if (\n$value\n<\n0\n) {\n                throw new\n\\InvalidArgumentException\n(\n'Too small'\n);\n            }\n\n$this\n->\nx\n=\n$value\n;\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #10 Parent hook access (set)",
    "output": "<?php\nclass\nPoint\n{\n    public\nint $x\n;\n    public\nint $y\n;\n}\nclass\nPositivePoint\nextends\nPoint\n{\n    public\nint $x\n{\n\nset\n{\n            if (\n$value\n<\n0\n) {\n                throw new\n\\InvalidArgumentException\n(\n'Too small'\n);\n            }\n\nparent\n::\n$x\n::\nset\n(\n$value\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #11 Parent hook access (get)",
    "output": "<?php\nclass\nStrings\n{\n    public\nstring $val\n;\n}\nclass\nCaseFoldingStrings\nextends\nStrings\n{\n    public\nbool $uppercase\n=\ntrue\n;\n    public\nstring $val\n{\n\nget\n=>\n$this\n->\nuppercase\n\n?\nstrtoupper\n(\nparent\n::\n$val\n::\nget\n())\n            :\nstrtolower\n(\nparent\n::\n$val\n::\nget\n());\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Defining and using a constant",
    "output": "<?php\nclass\nMyClass\n{\n    const\nCONSTANT\n=\n'constant value'\n;\n    function\nshowConstant\n() {\n        echo\nself\n::\nCONSTANT\n.\n\"\\n\"\n;\n    }\n}\necho\nMyClass\n::\nCONSTANT\n.\n\"\\n\"\n;\n$classname\n=\n\"MyClass\"\n;\necho\n$classname\n::\nCONSTANT\n.\n\"\\n\"\n;\n$class\n= new\nMyClass\n();\n$class\n->\nshowConstant\n();\necho\n$class\n::\nCONSTANT\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Namespaced ::class example",
    "output": "<?php\nnamespace\nfoo\n{\n    class\nbar\n{\n    }\n    echo\nbar\n::class;\n// foo\\bar\n}\n?>"
  },
  {
    "input": "Example #3 Class constant expression example",
    "output": "<?php\nconst\nONE\n=\n1\n;\nclass\nfoo\n{\n    const\nTWO\n=\nONE\n*\n2\n;\n    const\nTHREE\n=\nONE\n+\nself\n::\nTWO\n;\n    const\nSENTENCE\n=\n'The value of THREE is '\n.\nself\n::\nTHREE\n;\n}\n?>"
  },
  {
    "input": "Example #4 Class constant visibility modifiers, as of PHP 7.1.0",
    "output": "<?php\nclass\nFoo\n{\n    public const\nBAR\n=\n'bar'\n;\n    private const\nBAZ\n=\n'baz'\n;\n}\necho\nFoo\n::\nBAR\n,\nPHP_EOL\n;\necho\nFoo\n::\nBAZ\n,\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #5 Class constant visibility variance check, as of PHP 8.3.0",
    "output": "<?php\ninterface\nMyInterface\n{\n    public const\nVALUE\n=\n42\n;\n}\nclass\nMyClass\nimplements\nMyInterface\n{\n    protected const\nVALUE\n=\n42\n;\n}\n?>"
  },
  {
    "input": "Example #6 Fetch class constant syntax, as of PHP 8.3.0",
    "output": "<?php\nclass\nFoo\n{\n    public const\nBAR\n=\n'bar'\n;\n    private const\nBAZ\n=\n'baz'\n;\n}\n$name\n=\n'BAR'\n;\necho\nFoo\n::{\n$name\n},\nPHP_EOL\n;\n// bar\n?>"
  },
  {
    "input": "Example #1 Constructors in inheritance",
    "output": "<?php\nclass\nBaseClass\n{\n    function\n__construct\n() {\n        print\n\"In BaseClass constructor\\n\"\n;\n    }\n}\nclass\nSubClass\nextends\nBaseClass\n{\n    function\n__construct\n() {\n\nparent\n::\n__construct\n();\n        print\n\"In SubClass constructor\\n\"\n;\n    }\n}\nclass\nOtherSubClass\nextends\nBaseClass\n{\n\n// inherits BaseClass's constructor\n}\n// In BaseClass constructor\n$obj\n= new\nBaseClass\n();\n// In BaseClass constructor\n// In SubClass constructor\n$obj\n= new\nSubClass\n();\n// In BaseClass constructor\n$obj\n= new\nOtherSubClass\n();\n?>"
  },
  {
    "input": "Example #2 Using constructor arguments",
    "output": "<?php\nclass\nPoint\n{\n    protected\nint $x\n;\n    protected\nint $y\n;\n    public function\n__construct\n(\nint $x\n,\nint $y\n=\n0\n) {\n\n$this\n->\nx\n=\n$x\n;\n\n$this\n->\ny\n=\n$y\n;\n    }\n}\n// Pass both parameters.\n$p1\n= new\nPoint\n(\n4\n,\n5\n);\n// Pass only the required parameter. $y will take its default value of 0.\n$p2\n= new\nPoint\n(\n4\n);\n// With named parameters (as of PHP 8.0):\n$p3\n= new\nPoint\n(\ny\n:\n5\n,\nx\n:\n4\n);\n?>"
  },
  {
    "input": "Example #3 Using constructor property promotion",
    "output": "<?php\nclass\nPoint\n{\n    public function\n__construct\n(protected\nint $x\n, protected\nint $y\n=\n0\n) {\n    }\n}"
  },
  {
    "input": "Example #4 Using new in initializers",
    "output": "<?php\n// All allowed:\nstatic\n$x\n= new\nFoo\n;\nconst\nC\n= new\nFoo\n;\n\nfunction\ntest\n(\n$param\n= new\nFoo\n) {}\n\n#[\nAnAttribute\n(new\nFoo\n)]\nclass\nTest\n{\n    public function\n__construct\n(\n        public\n$prop\n= new\nFoo\n,\n    ) {}\n}\n// All not allowed (compile-time error):\nfunction\ntest\n(\n\n$a\n= new (\nCLASS_NAME_CONSTANT\n)(),\n// dynamic class name\n\n$b\n= new class {},\n// anonymous class\n\n$c\n= new\nA\n(...[]),\n// argument unpacking\n\n$d\n= new\nB\n(\n$abc\n),\n// unsupported constant expression\n) {}\n?>"
  },
  {
    "input": "Example #5 Using static creation methods",
    "output": "<?php\nclass\nProduct\n{\n    private ?\nint $id\n;\n    private ?\nstring $name\n;\n    private function\n__construct\n(?\nint $id\n=\nnull\n, ?\nstring $name\n=\nnull\n) {\n\n$this\n->\nid\n=\n$id\n;\n\n$this\n->\nname\n=\n$name\n;\n    }\n    public static function\nfromBasicData\n(\nint $id\n,\nstring $name\n): static {\n\n$new\n= new static(\n$id\n,\n$name\n);\n        return\n$new\n;\n    }\n    public static function\nfromJson\n(\nstring $json\n): static {\n\n$data\n=\njson_decode\n(\n$json\n,\ntrue\n);\n        return new static(\n$data\n[\n'id'\n],\n$data\n[\n'name'\n]);\n    }\n    public static function\nfromXml\n(\nstring $xml\n): static {\n\n// Custom logic here.\n\n$data\n=\nconvert_xml_to_array\n(\n$xml\n);\n\n$new\n= new static();\n\n$new\n->\nid\n=\n$data\n[\n'id'\n];\n\n$new\n->\nname\n=\n$data\n[\n'name'\n];\n        return\n$new\n;\n    }\n}\n$p1\n=\nProduct\n::\nfromBasicData\n(\n5\n,\n'Widget'\n);\n$p2\n=\nProduct\n::\nfromJson\n(\n$some_json_string\n);\n$p3\n=\nProduct\n::\nfromXml\n(\n$some_xml_string\n);"
  },
  {
    "input": "Example #6 Destructor Example",
    "output": "<?php\nclass\nMyDestructableClass\n{\n    function\n__construct\n() {\n        print\n\"In constructor\\n\"\n;\n    }\n    function\n__destruct\n() {\n        print\n\"Destroying \"\n.\n__CLASS__\n.\n\"\\n\"\n;\n    }\n}\n$obj\n= new\nMyDestructableClass\n();"
  },
  {
    "input": "Example #1 Property declaration",
    "output": "<?php\n/**\n * Define MyClass\n */\nclass\nMyClass\n{\n    public\n$public\n=\n'Public'\n;\n    protected\n$protected\n=\n'Protected'\n;\n    private\n$private\n=\n'Private'\n;\n    function\nprintHello\n()\n    {\n        echo\n$this\n->\npublic\n;\n        echo\n$this\n->\nprotected\n;\n        echo\n$this\n->\nprivate\n;\n    }\n}\n$obj\n= new\nMyClass\n();\necho\n$obj\n->\npublic\n;\n// Works\necho\n$obj\n->\nprotected\n;\n// Fatal Error\necho\n$obj\n->\nprivate\n;\n// Fatal Error\n$obj\n->\nprintHello\n();\n// Shows Public, Protected and Private\n/**\n * Define MyClass2\n */\nclass\nMyClass2\nextends\nMyClass\n{\n\n// We can redeclare the public and protected properties, but not private\n\npublic\n$public\n=\n'Public2'\n;\n    protected\n$protected\n=\n'Protected2'\n;\n    function\nprintHello\n()\n    {\n        echo\n$this\n->\npublic\n;\n        echo\n$this\n->\nprotected\n;\n        echo\n$this\n->\nprivate\n;\n    }\n}\n$obj2\n= new\nMyClass2\n();\necho\n$obj2\n->\npublic\n;\n// Works\necho\n$obj2\n->\nprotected\n;\n// Fatal Error\necho\n$obj2\n->\nprivate\n;\n// Undefined\n$obj2\n->\nprintHello\n();\n// Shows Public2, Protected2, Undefined\n?>"
  },
  {
    "input": "Example #2 Asymmetric Property visibility",
    "output": "<?php\nclass\nBook\n{\n    public function\n__construct\n(\n        public private(\nset\n)\nstring $title\n,\n        public protected(\nset\n)\nstring $author\n,\n        protected private(\nset\n)\nint $pubYear\n,\n    ) {}\n}\nclass\nSpecialBook\nextends\nBook\n{\n    public function\nupdate\n(\nstring $author\n,\nint $year\n):\nvoid\n\n{\n\n$this\n->\nauthor\n=\n$author\n;\n// OK\n\n$this\n->\npubYear\n=\n$year\n;\n// Fatal Error\n\n}\n}\n$b\n= new\nBook\n(\n'How to PHP'\n,\n'Peter H. Peterson'\n,\n2024\n);\necho\n$b\n->\ntitle\n;\n// Works\necho\n$b\n->\nauthor\n;\n// Works\necho\n$b\n->\npubYear\n;\n// Fatal Error\n$b\n->\ntitle\n=\n'How not to PHP'\n;\n// Fatal Error\n$b\n->\nauthor\n=\n'Pedro H. Peterson'\n;\n// Fatal Error\n$b\n->\npubYear\n=\n2023\n;\n// Fatal Error\n?>"
  },
  {
    "input": "Example #3 Asymmetric Property inheritance",
    "output": "<?php\nclass\nBook\n{\n    protected\nstring $title\n;\n    public protected(\nset\n)\nstring $author\n;\n    protected private(\nset\n)\nint $pubYear\n;\n}\nclass\nSpecialBook\nextends\nBook\n{\n    public protected(\nset\n)\n$title\n;\n// OK, as reading is wider and writing the same.\n\npublic\nstring $author\n;\n// OK, as reading is the same and writing is wider.\n\npublic protected(\nset\n)\nint $pubYear\n;\n// Fatal Error. private(set) properties are final.\n}\n?>"
  },
  {
    "input": "Example #4 Method Declaration",
    "output": "<?php\n/**\n * Define MyClass\n */\nclass\nMyClass\n{\n\n// Declare a public constructor\n\npublic function\n__construct\n() { }\n\n// Declare a public method\n\npublic function\nMyPublic\n() { }\n\n// Declare a protected method\n\nprotected function\nMyProtected\n() { }\n\n// Declare a private method\n\nprivate function\nMyPrivate\n() { }\n\n// This is public\n\nfunction\nFoo\n()\n    {\n\n$this\n->\nMyPublic\n();\n\n$this\n->\nMyProtected\n();\n\n$this\n->\nMyPrivate\n();\n    }\n}\n$myclass\n= new\nMyClass\n;\n$myclass\n->\nMyPublic\n();\n// Works\n$myclass\n->\nMyProtected\n();\n// Fatal Error\n$myclass\n->\nMyPrivate\n();\n// Fatal Error\n$myclass\n->\nFoo\n();\n// Public, Protected and Private work\n/**\n * Define MyClass2\n */\nclass\nMyClass2\nextends\nMyClass\n{\n\n// This is public\n\nfunction\nFoo2\n()\n    {\n\n$this\n->\nMyPublic\n();\n\n$this\n->\nMyProtected\n();\n\n$this\n->\nMyPrivate\n();\n// Fatal Error\n\n}\n}\n$myclass2\n= new\nMyClass2\n;\n$myclass2\n->\nMyPublic\n();\n// Works\n$myclass2\n->\nFoo2\n();\n// Public and Protected work, not Private\nclass\nBar\n{\n    public function\ntest\n() {\n\n$this\n->\ntestPrivate\n();\n\n$this\n->\ntestPublic\n();\n    }\n    public function\ntestPublic\n() {\n        echo\n\"Bar::testPublic\\n\"\n;\n    }\n\n    private function\ntestPrivate\n() {\n        echo\n\"Bar::testPrivate\\n\"\n;\n    }\n}\nclass\nFoo\nextends\nBar\n{\n    public function\ntestPublic\n() {\n        echo\n\"Foo::testPublic\\n\"\n;\n    }\n\n    private function\ntestPrivate\n() {\n        echo\n\"Foo::testPrivate\\n\"\n;\n    }\n}\n$myFoo\n= new\nFoo\n();\n$myFoo\n->\ntest\n();\n// Bar::testPrivate\n                // Foo::testPublic\n?>"
  },
  {
    "input": "Example #5 Constant Declaration as of PHP 7.1.0",
    "output": "<?php\n/**\n * Define MyClass\n */\nclass\nMyClass\n{\n\n// Declare a public constant\n\npublic const\nMY_PUBLIC\n=\n'public'\n;\n\n// Declare a protected constant\n\nprotected const\nMY_PROTECTED\n=\n'protected'\n;\n\n// Declare a private constant\n\nprivate const\nMY_PRIVATE\n=\n'private'\n;\n    public function\nfoo\n()\n    {\n        echo\nself\n::\nMY_PUBLIC\n;\n        echo\nself\n::\nMY_PROTECTED\n;\n        echo\nself\n::\nMY_PRIVATE\n;\n    }\n}\n$myclass\n= new\nMyClass\n();\nMyClass\n::\nMY_PUBLIC\n;\n// Works\nMyClass\n::\nMY_PROTECTED\n;\n// Fatal Error\nMyClass\n::\nMY_PRIVATE\n;\n// Fatal Error\n$myclass\n->\nfoo\n();\n// Public, Protected and Private work\n/**\n * Define MyClass2\n */\nclass\nMyClass2\nextends\nMyClass\n{\n\n// This is public\n\nfunction\nfoo2\n()\n    {\n        echo\nself\n::\nMY_PUBLIC\n;\n        echo\nself\n::\nMY_PROTECTED\n;\n        echo\nself\n::\nMY_PRIVATE\n;\n// Fatal Error\n\n}\n}\n$myclass2\n= new\nMyClass2\n;\necho\nMyClass2\n::\nMY_PUBLIC\n;\n// Works\n$myclass2\n->\nfoo2\n();\n// Public and Protected work, not Private\n?>"
  },
  {
    "input": "Example #6 Accessing private members of the same object type",
    "output": "<?php\nclass\nTest\n{\n    private\n$foo\n;\n    public function\n__construct\n(\n$foo\n)\n    {\n\n$this\n->\nfoo\n=\n$foo\n;\n    }\n    private function\nbar\n()\n    {\n        echo\n'Accessed the private method.'\n;\n    }\n    public function\nbaz\n(\nTest $other\n)\n    {\n\n// We can change the private property:\n\n$other\n->\nfoo\n=\n'hello'\n;\n\nvar_dump\n(\n$other\n->\nfoo\n);\n\n// We can also call the private method:\n\n$other\n->\nbar\n();\n    }\n}\n$test\n= new\nTest\n(\n'test'\n);\n$test\n->\nbaz\n(new\nTest\n(\n'other'\n));\n?>"
  },
  {
    "input": "Example #1 Inheritance Example",
    "output": "<?php\nclass\nFoo\n{\n    public function\nprintItem\n(\n$string\n)\n    {\n        echo\n'Foo: '\n.\n$string\n.\nPHP_EOL\n;\n    }\n\n    public function\nprintPHP\n()\n    {\n        echo\n'PHP is great.'\n.\nPHP_EOL\n;\n    }\n}\nclass\nBar\nextends\nFoo\n{\n    public function\nprintItem\n(\n$string\n)\n    {\n        echo\n'Bar: '\n.\n$string\n.\nPHP_EOL\n;\n    }\n}\n$foo\n= new\nFoo\n();\n$bar\n= new\nBar\n();\n$foo\n->\nprintItem\n(\n'baz'\n);\n// Output: 'Foo: baz'\n$foo\n->\nprintPHP\n();\n// Output: 'PHP is great'\n$bar\n->\nprintItem\n(\n'baz'\n);\n// Output: 'Bar: baz'\n$bar\n->\nprintPHP\n();\n// Output: 'PHP is great'\n?>"
  },
  {
    "input": "Example #2 The overriding method does not declare any return type",
    "output": "<?php\nclass\nMyDateTime\nextends\nDateTime\n{\n    public function\nmodify\n(\nstring $modifier\n) { return\nfalse\n; }\n}\n\n// \"Deprecated: Return type of MyDateTime::modify(string $modifier) should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice\" as of PHP 8.1.0\n?>"
  },
  {
    "input": "Example #3 The overriding method declares a wrong return type",
    "output": "<?php\nclass\nMyDateTime\nextends\nDateTime\n{\n    public function\nmodify\n(\nstring $modifier\n): ?\nDateTime\n{ return\nnull\n; }\n}\n\n// \"Deprecated: Return type of MyDateTime::modify(string $modifier): ?DateTime should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice\" as of PHP 8.1.0\n?>"
  },
  {
    "input": "Example #4 The overriding method declares a wrong return type without a deprecation notice",
    "output": "<?php\nclass\nMyDateTime\nextends\nDateTime\n{\n\n/**\n     * @return DateTime|false\n     */\n\n#[\n\\ReturnTypeWillChange\n]\n    public function\nmodify\n(\nstring $modifier\n) { return\nfalse\n; }\n}\n\n// No notice is triggered\n?>"
  },
  {
    "input": "Example #1 :: from outside the class definition",
    "output": "<?php\nclass\nMyClass\n{\n    const\nCONST_VALUE\n=\n'A constant value'\n;\n}\n$classname\n=\n'MyClass'\n;\necho\n$classname\n::\nCONST_VALUE\n;\necho\nMyClass\n::\nCONST_VALUE\n;\n?>"
  },
  {
    "input": "Example #2 :: from inside the class definition",
    "output": "<?php\nclass\nOtherClass\nextends\nMyClass\n{\n    public static\n$my_static\n=\n'static var'\n;\n    public static function\ndoubleColon\n() {\n        echo\nparent\n::\nCONST_VALUE\n.\n\"\\n\"\n;\n        echo\nself\n::\n$my_static\n.\n\"\\n\"\n;\n    }\n}\n$classname\n=\n'OtherClass'\n;\n$classname\n::\ndoubleColon\n();\nOtherClass\n::\ndoubleColon\n();\n?>"
  },
  {
    "input": "Example #3 Calling a parent's method",
    "output": "<?php\nclass\nMyClass\n{\n    protected function\nmyFunc\n() {\n        echo\n\"MyClass::myFunc()\\n\"\n;\n    }\n}\nclass\nOtherClass\nextends\nMyClass\n{\n\n// Override parent's definition\n\npublic function\nmyFunc\n()\n    {\n\n// But still call the parent function\n\nparent\n::\nmyFunc\n();\n        echo\n\"OtherClass::myFunc()\\n\"\n;\n    }\n}\n$class\n= new\nOtherClass\n();\n$class\n->\nmyFunc\n();\n?>"
  },
  {
    "input": "Example #1 Static method example",
    "output": "<?php\nclass\nFoo\n{\n    public static function\naStaticMethod\n() {\n\n// ...\n\n}\n}\nFoo\n::\naStaticMethod\n();\n$classname\n=\n'Foo'\n;\n$classname\n::\naStaticMethod\n();\n?>"
  },
  {
    "input": "Example #2 Static property example",
    "output": "<?php\nclass\nFoo\n{\n    public static\n$my_static\n=\n'foo'\n;\n    public function\nstaticValue\n() {\n        return\nself\n::\n$my_static\n;\n    }\n}\nclass\nBar\nextends\nFoo\n{\n    public function\nfooStatic\n() {\n        return\nparent\n::\n$my_static\n;\n    }\n}\nprint\nFoo\n::\n$my_static\n.\n\"\\n\"\n;\n$foo\n= new\nFoo\n();\nprint\n$foo\n->\nstaticValue\n() .\n\"\\n\"\n;\nprint\n$foo\n->\nmy_static\n.\n\"\\n\"\n;\n// Undefined \"Property\" my_static\nprint\n$foo\n::\n$my_static\n.\n\"\\n\"\n;\n$classname\n=\n'Foo'\n;\nprint\n$classname\n::\n$my_static\n.\n\"\\n\"\n;\nprint\nBar\n::\n$my_static\n.\n\"\\n\"\n;\n$bar\n= new\nBar\n();\nprint\n$bar\n->\nfooStatic\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Abstract method example",
    "output": "<?php\nabstract class\nAbstractClass\n{\n\n// Force extending class to define this method\n\nabstract protected function\ngetValue\n();\n    abstract protected function\nprefixValue\n(\n$prefix\n);\n\n// Common method\n\npublic function\nprintOut\n()\n    {\n        print\n$this\n->\ngetValue\n() .\n\"\\n\"\n;\n    }\n}\nclass\nConcreteClass1\nextends\nAbstractClass\n{\n    protected function\ngetValue\n()\n    {\n        return\n\"ConcreteClass1\"\n;\n    }\n    public function\nprefixValue\n(\n$prefix\n)\n    {\n        return\n\"\n{\n$prefix\n}\nConcreteClass1\"\n;\n    }\n}\nclass\nConcreteClass2\nextends\nAbstractClass\n{\n    public function\ngetValue\n()\n    {\n        return\n\"ConcreteClass2\"\n;\n    }\n    public function\nprefixValue\n(\n$prefix\n)\n    {\n        return\n\"\n{\n$prefix\n}\nConcreteClass2\"\n;\n    }\n}\n$class1\n= new\nConcreteClass1\n();\n$class1\n->\nprintOut\n();\necho\n$class1\n->\nprefixValue\n(\n'FOO_'\n),\n\"\\n\"\n;\n$class2\n= new\nConcreteClass2\n();\n$class2\n->\nprintOut\n();\necho\n$class2\n->\nprefixValue\n(\n'FOO_'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Abstract method example",
    "output": "<?php\nabstract class\nAbstractClass\n{\n\n// An abstract method only needs to define the required arguments\n\nabstract protected function\nprefixName\n(\n$name\n);\n}\nclass\nConcreteClass\nextends\nAbstractClass\n{\n\n// A child class may define optional parameters which are not present in the parent's signature\n\npublic function\nprefixName\n(\n$name\n,\n$separator\n=\n\".\"\n)\n    {\n        if (\n$name\n==\n\"Pacman\"\n) {\n\n$prefix\n=\n\"Mr\"\n;\n        } elseif (\n$name\n==\n\"Pacwoman\"\n) {\n\n$prefix\n=\n\"Mrs\"\n;\n        } else {\n\n$prefix\n=\n\"\"\n;\n        }\n        return\n\"\n{\n$prefix\n}{\n$separator\n}\n\n{\n$name\n}\n\"\n;\n    }\n}\n$class\n= new\nConcreteClass\n();\necho\n$class\n->\nprefixName\n(\n\"Pacman\"\n),\n\"\\n\"\n;\necho\n$class\n->\nprefixName\n(\n\"Pacwoman\"\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Abstract property example",
    "output": "<?php\nabstract class\nA\n{\n\n// Extending classes must have a publicly-gettable property\n\nabstract public\nstring $readable\n{\n\nget\n;\n    }\n\n// Extending classes must have a protected- or public-writeable property\n\nabstract protected\nstring $writeable\n{\n\nset\n;\n    }\n\n// Extending classes must have a protected or public symmetric property\n\nabstract protected\nstring $both\n{\n\nget\n;\n\nset\n;\n    }\n}\nclass\nC\nextends\nA\n{\n\n// This satisfies the requirement and also makes it settable, which is valid\n\npublic\nstring $readable\n;\n\n// This would NOT satisfy the requirement, as it is not publicly readable\n\nprotected\nstring $readable\n;\n\n// This satisfies the requirement exactly, so is sufficient.\n    // It may only be written to, and only from protected scope\n\nprotected\nstring $writeable\n{\n\nset\n=>\n$value\n;\n    }\n\n// This expands the visibility from protected to public, which is fine\n\npublic\nstring $both\n;\n}\n?>"
  },
  {
    "input": "Example #4 Abstract property example",
    "output": "<?php\nabstract class\nA\n{\n\n// This provides a default (but overridable) set implementation,\n    // and requires child classes to provide a get implementation\n\nabstract public\nstring $foo\n{\n\nget\n;\n\nset\n{\n\n$this\n->\nfoo\n=\n$value\n;\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Interface properties example",
    "output": "<?php\ninterface\nI\n{\n\n// An implementing class MUST have a publicly-readable property,\n    // but whether or not it's publicly settable is unrestricted.\n\npublic\nstring $readable\n{\nget\n; }\n\n// An implementing class MUST have a publicly-writeable property,\n    // but whether or not it's publicly readable is unrestricted.\n\npublic\nstring $writeable\n{\nset\n; }\n\n// An implementing class MUST have a property that is both publicly\n    // readable and publicly writeable.\n\npublic\nstring $both\n{\nget\n;\nset\n; }\n}\n// This class implements all three properties as traditional, un-hooked\n// properties. That's entirely valid.\nclass\nC1\nimplements\nI\n{\n    public\nstring $readable\n;\n    public\nstring $writeable\n;\n    public\nstring $both\n;\n}\n// This class implements all three properties using just the hooks\n// that are requested.  This is also entirely valid.\nclass\nC2\nimplements\nI\n{\n    private\nstring $written\n=\n''\n;\n    private\nstring $all\n=\n''\n;\n\n// Uses only a get hook to create a virtual property.\n    // This satisfies the \"public get\" requirement.\n    // It is not writeable, but that is not required by the interface.\n\npublic\nstring $readable\n{\nget\n=>\nstrtoupper\n(\n$this\n->\nwriteable\n); }\n\n// The interface only requires the property be settable,\n    // but also including get operations is entirely valid.\n    // This example creates a virtual property, which is fine.\n\npublic\nstring $writeable\n{\n\nget\n=>\n$this\n->\nwritten\n;\n\nset\n{\n\n$this\n->\nwritten\n=\n$value\n;\n        }\n    }\n\n// This property requires both read and write be possible,\n    // so we need to either implement both, or allow it to have\n    // the default behavior.\n\npublic\nstring $both\n{\n\nget\n=>\n$this\n->\nall\n;\n\nset\n{\n\n$this\n->\nall\n=\nstrtoupper\n(\n$value\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Interface example",
    "output": "<?php\n// Declare the interface 'Template'\ninterface\nTemplate\n{\n    public function\nsetVariable\n(\n$name\n,\n$var\n);\n    public function\ngetHtml\n(\n$template\n);\n}\n// Implement the interface\n// This will work\nclass\nWorkingTemplate\nimplements\nTemplate\n{\n    private\n$vars\n= [];\n\n    public function\nsetVariable\n(\n$name\n,\n$var\n)\n    {\n\n$this\n->\nvars\n[\n$name\n] =\n$var\n;\n    }\n\n    public function\ngetHtml\n(\n$template\n)\n    {\n        foreach(\n$this\n->\nvars\nas\n$name\n=>\n$value\n) {\n\n$template\n=\nstr_replace\n(\n'{'\n.\n$name\n.\n'}'\n,\n$value\n,\n$template\n);\n        }\n\n        return\n$template\n;\n    }\n}\n// This will not work\n// Fatal error: Class BadTemplate contains 1 abstract methods\n// and must therefore be declared abstract (Template::getHtml)\nclass\nBadTemplate\nimplements\nTemplate\n{\n    private\n$vars\n= [];\n\n    public function\nsetVariable\n(\n$name\n,\n$var\n)\n    {\n\n$this\n->\nvars\n[\n$name\n] =\n$var\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #3 Extendable Interfaces",
    "output": "<?php\ninterface\nA\n{\n    public function\nfoo\n();\n}\ninterface\nB\nextends\nA\n{\n    public function\nbaz\n(\nBaz $baz\n);\n}\n// This will work\nclass\nC\nimplements\nB\n{\n    public function\nfoo\n()\n    {\n    }\n    public function\nbaz\n(\nBaz $baz\n)\n    {\n    }\n}\n// This will not work and result in a fatal error\nclass\nD\nimplements\nB\n{\n    public function\nfoo\n()\n    {\n    }\n    public function\nbaz\n(\nFoo $foo\n)\n    {\n    }\n}\n?>"
  },
  {
    "input": "Example #4 Variance compatibility with multiple interfaces",
    "output": "<?php\nclass\nFoo\n{}\nclass\nBar\nextends\nFoo\n{}\ninterface\nA\n{\n    public function\nmyfunc\n(\nFoo $arg\n):\nFoo\n;\n}\ninterface\nB\n{\n    public function\nmyfunc\n(\nBar $arg\n):\nBar\n;\n}\nclass\nMyClass\nimplements\nA\n,\nB\n{\n    public function\nmyfunc\n(\nFoo $arg\n):\nBar\n\n{\n        return new\nBar\n();\n    }\n}\n?>"
  },
  {
    "input": "Example #5 Multiple interface inheritance",
    "output": "<?php\ninterface\nA\n{\n    public function\nfoo\n();\n}\ninterface\nB\n{\n    public function\nbar\n();\n}\ninterface\nC\nextends\nA\n,\nB\n{\n    public function\nbaz\n();\n}\nclass\nD\nimplements\nC\n{\n    public function\nfoo\n()\n    {\n    }\n    public function\nbar\n()\n    {\n    }\n    public function\nbaz\n()\n    {\n    }\n}\n?>"
  },
  {
    "input": "Example #6 Interfaces with constants",
    "output": "<?php\ninterface\nA\n{\n    const\nB\n=\n'Interface constant'\n;\n}\n// Prints: Interface constant\necho\nA\n::\nB\n;\nclass\nB\nimplements\nA\n{\n    const\nB\n=\n'Class constant'\n;\n}\n// Prints: Class constant\n// Prior to PHP 8.1.0, this will however not work because it was not\n// allowed to override constants.\necho\nB\n::\nB\n;\n?>"
  },
  {
    "input": "Example #7 Interfaces with abstract classes",
    "output": "<?php\ninterface\nA\n{\n    public function\nfoo\n(\nstring $s\n):\nstring\n;\n    public function\nbar\n(\nint $i\n):\nint\n;\n}\n// An abstract class may implement only a portion of an interface.\n// Classes that extend the abstract class must implement the rest.\nabstract class\nB\nimplements\nA\n{\n    public function\nfoo\n(\nstring $s\n):\nstring\n\n{\n        return\n$s\n.\nPHP_EOL\n;\n    }\n}\nclass\nC\nextends\nB\n{\n    public function\nbar\n(\nint $i\n):\nint\n\n{\n        return\n$i\n*\n2\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #8 Extending and implementing simultaneously",
    "output": "<?php\nclass\nOne\n{\n\n/* ... */\n}\ninterface\nUsable\n{\n\n/* ... */\n}\ninterface\nUpdatable\n{\n\n/* ... */\n}\n// The keyword order here is important. 'extends' must come first.\nclass\nTwo\nextends\nOne\nimplements\nUsable\n,\nUpdatable\n{\n\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #1 Trait example",
    "output": "<?php\ntrait\nTraitA\n{\n    public function\nsayHello\n() {\n        echo\n'Hello'\n;\n    }\n}\ntrait\nTraitB\n{\n    public function\nsayWorld\n() {\n        echo\n'World'\n;\n    }\n}\nclass\nMyHelloWorld\n{\n    use\nTraitA\n,\nTraitB\n;\n// A class can use multiple traits\n\npublic function\nsayHelloWorld\n() {\n\n$this\n->\nsayHello\n();\n        echo\n' '\n;\n\n$this\n->\nsayWorld\n();\n        echo\n\"!\\n\"\n;\n    }\n}\n$myHelloWorld\n= new\nMyHelloWorld\n();\n$myHelloWorld\n->\nsayHelloWorld\n();\n?>"
  },
  {
    "input": "Example #3 Alternate Precedence Order Example",
    "output": "<?php\ntrait\nHelloWorld\n{\n    public function\nsayHello\n() {\n        echo\n'Hello World!'\n;\n    }\n}\nclass\nTheWorldIsNotEnough\n{\n    use\nHelloWorld\n;\n    public function\nsayHello\n() {\n        echo\n'Hello Universe!'\n;\n    }\n}\n$o\n= new\nTheWorldIsNotEnough\n();\n$o\n->\nsayHello\n();\n?>"
  },
  {
    "input": "Example #4 Multiple Traits Usage",
    "output": "<?php\ntrait\nHello\n{\n    public function\nsayHello\n() {\n        echo\n'Hello '\n;\n    }\n}\ntrait\nWorld\n{\n    public function\nsayWorld\n() {\n        echo\n'World'\n;\n    }\n}\nclass\nMyHelloWorld\n{\n    use\nHello\n,\nWorld\n;\n    public function\nsayExclamationMark\n() {\n        echo\n'!'\n;\n    }\n}\n$o\n= new\nMyHelloWorld\n();\n$o\n->\nsayHello\n();\n$o\n->\nsayWorld\n();\n$o\n->\nsayExclamationMark\n();\n?>"
  },
  {
    "input": "Example #6 Changing Method Visibility",
    "output": "<?php\ntrait\nHelloWorld\n{\n    public function\nsayHello\n() {\n        echo\n'Hello World!'\n;\n    }\n}\n// Change visibility of sayHello\nclass\nMyClass1\n{\n    use\nHelloWorld\n{\nsayHello\nas protected; }\n}\n// Alias method with changed visibility\n// sayHello visibility not changed\nclass\nMyClass2\n{\n    use\nHelloWorld\n{\nsayHello\nas private\nmyPrivateHello\n; }\n}\n?>"
  },
  {
    "input": "Example #7 Traits Composed from Traits",
    "output": "<?php\ntrait\nHello\n{\n    public function\nsayHello\n() {\n        echo\n'Hello '\n;\n    }\n}\ntrait\nWorld\n{\n    public function\nsayWorld\n() {\n        echo\n'World!'\n;\n    }\n}\ntrait\nHelloWorld\n{\n    use\nHello\n,\nWorld\n;\n}\nclass\nMyHelloWorld\n{\n    use\nHelloWorld\n;\n}\n$o\n= new\nMyHelloWorld\n();\n$o\n->\nsayHello\n();\n$o\n->\nsayWorld\n();\n?>"
  },
  {
    "input": "Example #8 Express Requirements by Abstract Methods",
    "output": "<?php\ntrait\nHello\n{\n    public function\nsayHelloWorld\n() {\n        echo\n'Hello'\n.\n$this\n->\ngetWorld\n();\n    }\n    abstract public function\ngetWorld\n();\n}\nclass\nMyHelloWorld\n{\n    private\n$world\n;\n    use\nHello\n;\n    public function\ngetWorld\n() {\n        return\n$this\n->\nworld\n;\n    }\n    public function\nsetWorld\n(\n$val\n) {\n\n$this\n->\nworld\n=\n$val\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #9 Static Variables",
    "output": "<?php\ntrait\nCounter\n{\n    public function\ninc\n()\n    {\n        static\n$c\n=\n0\n;\n\n$c\n=\n$c\n+\n1\n;\n        echo\n\"\n$c\n\\n\"\n;\n    }\n}\nclass\nC1\n{\n    use\nCounter\n;\n}\nclass\nC2\n{\n    use\nCounter\n;\n}\n$o\n= new\nC1\n();\n$o\n->\ninc\n();\n$p\n= new\nC2\n();\n$p\n->\ninc\n();\n?>"
  },
  {
    "input": "Example #10 Static Methods",
    "output": "<?php\ntrait\nStaticExample\n{\n    public static function\ndoSomething\n()\n    {\n        return\n'Doing something'\n;\n    }\n}\nclass\nExample\n{\n    use\nStaticExample\n;\n}\necho\nExample\n::\ndoSomething\n();\n?>"
  },
  {
    "input": "Example #11 Static Properties",
    "output": "<?php\ntrait\nT\n{\n    public static\n$counter\n=\n1\n;\n}\nclass\nA\n{\n    use\nT\n;\n    public static function\nincrementCounter\n()\n    {\n        static::\n$counter\n++;\n    }\n}\nclass\nB\nextends\nA\n{\n    use\nT\n;\n}\nA\n::\nincrementCounter\n();\necho\nA\n::\n$counter\n,\n\"\\n\"\n;\necho\nB\n::\n$counter\n,\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #12 Defining Properties",
    "output": "<?php\ntrait\nPropertiesTrait\n{\n    public\n$x\n=\n1\n;\n}\nclass\nPropertiesExample\n{\n    use\nPropertiesTrait\n;\n}\n$example\n= new\nPropertiesExample\n();\n$example\n->\nx\n;\n?>"
  },
  {
    "input": "Example #13 Conflict Resolution",
    "output": "<?php\ntrait\nPropertiesTrait\n{\n    public\n$same\n=\ntrue\n;\n    public\n$different1\n=\nfalse\n;\n    public\nbool $different2\n;\n    public\nbool $different3\n;\n}\nclass\nPropertiesExample\n{\n    use\nPropertiesTrait\n;\n    public\n$same\n=\ntrue\n;\n    public\n$different1\n=\ntrue\n;\n// Fatal error\n\npublic\nstring $different2\n;\n// Fatal error\n\nreadonly protected\nbool $different3\n;\n// Fatal error\n}\n?>"
  },
  {
    "input": "Example #14 Defining Constants",
    "output": "<?php\ntrait\nConstantsTrait\n{\n    public const\nFLAG_MUTABLE\n=\n1\n;\n    final public const\nFLAG_IMMUTABLE\n=\n5\n;\n}\nclass\nConstantsExample\n{\n    use\nConstantsTrait\n;\n}\n$example\n= new\nConstantsExample\n;\necho\n$example\n::\nFLAG_MUTABLE\n;\n?>"
  },
  {
    "input": "Example #15 Conflict Resolution",
    "output": "<?php\ntrait\nConstantsTrait\n{\n    public const\nFLAG_MUTABLE\n=\n1\n;\n    final public const\nFLAG_IMMUTABLE\n=\n5\n;\n}\nclass\nConstantsExample\n{\n    use\nConstantsTrait\n;\n    public const\nFLAG_IMMUTABLE\n=\n5\n;\n// Fatal error\n}\n?>"
  },
  {
    "input": "Example #16 Defining a method coming from a trait as final",
    "output": "<?php\ntrait\nCommonTrait\n{\n    public function\nmethod\n()\n    {\n        echo\n'Hello'\n;\n    }\n}\nclass\nFinalExampleA\n{\n    use\nCommonTrait\n{\n\nCommonTrait\n::\nmethod\nas final;\n// The 'final' prevents child classes from overriding the method\n\n}\n}\nclass\nFinalExampleB\nextends\nFinalExampleA\n{\n    public function\nmethod\n() {}\n}\n?>"
  },
  {
    "input": "Example #1 Defining a readonly anonymous class",
    "output": "<?php\n// Using an anonymous class\n$util\n->\nsetLogger\n(new readonly class(\n'[DEBUG]'\n) {\n    public function\n__construct\n(private\nstring $prefix\n)\n    {\n    }\n    public function\nlog\n(\n$msg\n)\n    {\n        echo\n$this\n->\nprefix\n.\n' '\n.\n$msg\n;\n    }\n});"
  },
  {
    "input": "Example #1 \n     Overloading properties via the __get(),\n     __set(), __isset()\n     and __unset() methods",
    "output": "<?php\nclass\nPropertyTest\n{\n\n/**  Location for overloaded data.  */\n\nprivate\n$data\n= array();\n\n/**  Overloading not used on declared properties.  */\n\npublic\n$declared\n=\n1\n;\n\n/**  Overloading only used on this when accessed outside the class.  */\n\nprivate\n$hidden\n=\n2\n;\n    public function\n__set\n(\n$name\n,\n$value\n)\n    {\n        echo\n\"Setting '\n$name\n' to '\n$value\n'\\n\"\n;\n\n$this\n->\ndata\n[\n$name\n] =\n$value\n;\n    }\n    public function\n__get\n(\n$name\n)\n    {\n        echo\n\"Getting '\n$name\n'\\n\"\n;\n        if (\narray_key_exists\n(\n$name\n,\n$this\n->\ndata\n)) {\n            return\n$this\n->\ndata\n[\n$name\n];\n        }\n\n$trace\n=\ndebug_backtrace\n();\n\ntrigger_error\n(\n\n'Undefined property via __get(): '\n.\n$name\n.\n\n' in '\n.\n$trace\n[\n0\n][\n'file'\n] .\n\n' on line '\n.\n$trace\n[\n0\n][\n'line'\n],\n\nE_USER_NOTICE\n);\n        return\nnull\n;\n    }\n    public function\n__isset\n(\n$name\n)\n    {\n        echo\n\"Is '\n$name\n' set?\\n\"\n;\n        return isset(\n$this\n->\ndata\n[\n$name\n]);\n    }\n    public function\n__unset\n(\n$name\n)\n    {\n        echo\n\"Unsetting '\n$name\n'\\n\"\n;\n        unset(\n$this\n->\ndata\n[\n$name\n]);\n    }\n\n/**  Not a magic method, just here for example.  */\n\npublic function\ngetHidden\n()\n    {\n        return\n$this\n->\nhidden\n;\n    }\n}\necho\n\"<pre>\\n\"\n;\n$obj\n= new\nPropertyTest\n;\n$obj\n->\na\n=\n1\n;\necho\n$obj\n->\na\n.\n\"\\n\\n\"\n;\nvar_dump\n(isset(\n$obj\n->\na\n));\nunset(\n$obj\n->\na\n);\nvar_dump\n(isset(\n$obj\n->\na\n));\necho\n\"\\n\"\n;\necho\n$obj\n->\ndeclared\n.\n\"\\n\\n\"\n;\necho\n\"Let's experiment with the private property named 'hidden':\\n\"\n;\necho\n\"Privates are visible inside the class, so __get() not used...\\n\"\n;\necho\n$obj\n->\ngetHidden\n() .\n\"\\n\"\n;\necho\n\"Privates not visible outside of class, so __get() is used...\\n\"\n;\necho\n$obj\n->\nhidden\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 \n     Overloading methods via the __call()\n     and __callStatic() methods",
    "output": "<?php\nclass\nMethodTest\n{\n    public function\n__call\n(\n$name\n,\n$arguments\n)\n    {\n\n// Note: value of $name is case sensitive.\n\necho\n\"Calling object method '\n$name\n' \"\n\n.\nimplode\n(\n', '\n,\n$arguments\n).\n\"\\n\"\n;\n    }\n    public static function\n__callStatic\n(\n$name\n,\n$arguments\n)\n    {\n\n// Note: value of $name is case sensitive.\n\necho\n\"Calling static method '\n$name\n' \"\n\n.\nimplode\n(\n', '\n,\n$arguments\n).\n\"\\n\"\n;\n    }\n}\n$obj\n= new\nMethodTest\n;\n$obj\n->\nrunTest\n(\n'in object context'\n);\nMethodTest\n::\nrunTest\n(\n'in static context'\n);\n?>"
  },
  {
    "input": "Example #1 Simple Object Iteration",
    "output": "<?php\nclass\nMyClass\n{\n    public\n$var1\n=\n'value 1'\n;\n    public\n$var2\n=\n'value 2'\n;\n    public\n$var3\n=\n'value 3'\n;\n    protected\n$protected\n=\n'protected var'\n;\n    private\n$private\n=\n'private var'\n;\n    function\niterateVisible\n() {\n       echo\n\"MyClass::iterateVisible:\\n\"\n;\n       foreach (\n$this\nas\n$key\n=>\n$value\n) {\n           print\n\"\n$key\n =>\n$value\n\\n\"\n;\n       }\n    }\n}\n$class\n= new\nMyClass\n();\nforeach(\n$class\nas\n$key\n=>\n$value\n) {\n    print\n\"\n$key\n =>\n$value\n\\n\"\n;\n}\necho\n\"\\n\"\n;\n$class\n->\niterateVisible\n();\n?>"
  },
  {
    "input": "Example #1 Sleep and wakeup",
    "output": "<?php\nclass\nConnection\n{\n    protected\n$link\n;\n    private\n$dsn\n,\n$username\n,\n$password\n;\n\n    public function\n__construct\n(\n$dsn\n,\n$username\n,\n$password\n)\n    {\n\n$this\n->\ndsn\n=\n$dsn\n;\n\n$this\n->\nusername\n=\n$username\n;\n\n$this\n->\npassword\n=\n$password\n;\n\n$this\n->\nconnect\n();\n    }\n\n    private function\nconnect\n()\n    {\n\n$this\n->\nlink\n= new\nPDO\n(\n$this\n->\ndsn\n,\n$this\n->\nusername\n,\n$this\n->\npassword\n);\n    }\n\n    public function\n__sleep\n()\n    {\n        return array(\n'dsn'\n,\n'username'\n,\n'password'\n);\n    }\n\n    public function\n__wakeup\n()\n    {\n\n$this\n->\nconnect\n();\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Serialize and unserialize",
    "output": "<?php\nclass\nConnection\n{\n    protected\n$link\n;\n    private\n$dsn\n,\n$username\n,\n$password\n;\n    public function\n__construct\n(\n$dsn\n,\n$username\n,\n$password\n)\n    {\n\n$this\n->\ndsn\n=\n$dsn\n;\n\n$this\n->\nusername\n=\n$username\n;\n\n$this\n->\npassword\n=\n$password\n;\n\n$this\n->\nconnect\n();\n    }\n    private function\nconnect\n()\n    {\n\n$this\n->\nlink\n= new\nPDO\n(\n$this\n->\ndsn\n,\n$this\n->\nusername\n,\n$this\n->\npassword\n);\n    }\n    public function\n__serialize\n(): array\n    {\n        return [\n\n'dsn'\n=>\n$this\n->\ndsn\n,\n\n'user'\n=>\n$this\n->\nusername\n,\n\n'pass'\n=>\n$this\n->\npassword\n,\n        ];\n    }\n    public function\n__unserialize\n(array\n$data\n):\nvoid\n\n{\n\n$this\n->\ndsn\n=\n$data\n[\n'dsn'\n];\n\n$this\n->\nusername\n=\n$data\n[\n'user'\n];\n\n$this\n->\npassword\n=\n$data\n[\n'pass'\n];\n\n$this\n->\nconnect\n();\n    }\n}\n?>"
  },
  {
    "input": "Example #3 Simple example",
    "output": "<?php\n// Declare a simple class\nclass\nTestClass\n{\n    public\n$foo\n;\n    public function\n__construct\n(\n$foo\n)\n    {\n\n$this\n->\nfoo\n=\n$foo\n;\n    }\n    public function\n__toString\n()\n    {\n        return\n$this\n->\nfoo\n;\n    }\n}\n$class\n= new\nTestClass\n(\n'Hello'\n);\necho\n$class\n;\n?>"
  },
  {
    "input": "Example #4 Using __invoke()",
    "output": "<?php\nclass\nCallableClass\n{\n    public function\n__invoke\n(\n$x\n)\n    {\n\nvar_dump\n(\n$x\n);\n    }\n}\n$obj\n= new\nCallableClass\n;\n$obj\n(\n5\n);\nvar_dump\n(\nis_callable\n(\n$obj\n));\n?>"
  },
  {
    "input": "Example #5 Using __invoke()",
    "output": "<?php\nclass\nSort\n{\n    private\n$key\n;\n    public function\n__construct\n(\nstring $key\n)\n    {\n\n$this\n->\nkey\n=\n$key\n;\n    }\n    public function\n__invoke\n(array\n$a\n, array\n$b\n):\nint\n\n{\n        return\n$a\n[\n$this\n->\nkey\n] <=>\n$b\n[\n$this\n->\nkey\n];\n    }\n}\n$customers\n= [\n    [\n'id'\n=>\n1\n,\n'first_name'\n=>\n'John'\n,\n'last_name'\n=>\n'Do'\n],\n    [\n'id'\n=>\n3\n,\n'first_name'\n=>\n'Alice'\n,\n'last_name'\n=>\n'Gustav'\n],\n    [\n'id'\n=>\n2\n,\n'first_name'\n=>\n'Bob'\n,\n'last_name'\n=>\n'Filipe'\n]\n];\n// sort customers by first name\nusort\n(\n$customers\n, new\nSort\n(\n'first_name'\n));\nprint_r\n(\n$customers\n);\n// sort customers by last name\nusort\n(\n$customers\n, new\nSort\n(\n'last_name'\n));\nprint_r\n(\n$customers\n);\n?>"
  },
  {
    "input": "Example #6 Using __set_state()",
    "output": "<?php\nclass\nA\n{\n    public\n$var1\n;\n    public\n$var2\n;\n    public static function\n__set_state\n(\n$an_array\n)\n    {\n\n$obj\n= new\nA\n;\n\n$obj\n->\nvar1\n=\n$an_array\n[\n'var1'\n];\n\n$obj\n->\nvar2\n=\n$an_array\n[\n'var2'\n];\n        return\n$obj\n;\n    }\n}\n$a\n= new\nA\n;\n$a\n->\nvar1\n=\n5\n;\n$a\n->\nvar2\n=\n'foo'\n;\n$b\n=\nvar_export\n(\n$a\n,\ntrue\n);\nvar_dump\n(\n$b\n);\neval(\n'$c = '\n.\n$b\n.\n';'\n);\nvar_dump\n(\n$c\n);\n?>"
  },
  {
    "input": "Example #7 Using __debugInfo()",
    "output": "<?php\nclass\nC\n{\n    private\n$prop\n;\n    public function\n__construct\n(\n$val\n) {\n\n$this\n->\nprop\n=\n$val\n;\n    }\n    public function\n__debugInfo\n() {\n        return [\n\n'propSquared'\n=>\n$this\n->\nprop\n**\n2\n,\n        ];\n    }\n}\nvar_dump\n(new\nC\n(\n42\n));\n?>"
  },
  {
    "input": "Example #1 Final methods example",
    "output": "<?php\nclass\nBaseClass\n{\n   public function\ntest\n() {\n       echo\n\"BaseClass::test() called\\n\"\n;\n   }\n\n   final public function\nmoreTesting\n() {\n       echo\n\"BaseClass::moreTesting() called\\n\"\n;\n   }\n}\nclass\nChildClass\nextends\nBaseClass\n{\n   public function\nmoreTesting\n() {\n       echo\n\"ChildClass::moreTesting() called\\n\"\n;\n   }\n}\n// Results in Fatal error: Cannot override final method BaseClass::moreTesting()\n?>"
  },
  {
    "input": "Example #2 Final class example",
    "output": "<?php\nfinal class\nBaseClass\n{\n   public function\ntest\n() {\n       echo\n\"BaseClass::test() called\\n\"\n;\n   }\n\n// As the class is already final, the final keyword is redundant\n\nfinal public function\nmoreTesting\n() {\n       echo\n\"BaseClass::moreTesting() called\\n\"\n;\n   }\n}\nclass\nChildClass\nextends\nBaseClass\n{\n}\n// Results in Fatal error: Class ChildClass may not inherit from final class (BaseClass)\n?>"
  },
  {
    "input": "Example #3 Final property example as of PHP 8.4.0",
    "output": "<?php\nclass\nBaseClass\n{\n   final protected\nstring $test\n;\n}\nclass\nChildClass\nextends\nBaseClass\n{\n    public\nstring $test\n;\n}\n// Results in Fatal error: Cannot override final property BaseClass::$test\n?>"
  },
  {
    "input": "Example #4 Final constants example as of PHP 8.1.0",
    "output": "<?php\nclass\nFoo\n{\n    final public const\nX\n=\n\"foo\"\n;\n}\nclass\nBar\nextends\nFoo\n{\n    public const\nX\n=\n\"bar\"\n;\n}\n// Fatal error: Bar::X cannot override final constant Foo::X\n?>"
  },
  {
    "input": "Example #1 Cloning an object",
    "output": "<?php\nclass\nSubObject\n{\n    static\n$instances\n=\n0\n;\n    public\n$instance\n;\n    public function\n__construct\n() {\n\n$this\n->\ninstance\n= ++\nself\n::\n$instances\n;\n    }\n    public function\n__clone\n() {\n\n$this\n->\ninstance\n= ++\nself\n::\n$instances\n;\n    }\n}\nclass\nMyCloneable\n{\n    public\n$object1\n;\n    public\n$object2\n;\n    function\n__clone\n()\n    {\n\n// Force a copy of this->object, otherwise\n        // it will point to same object.\n\n$this\n->\nobject1\n= clone\n$this\n->\nobject1\n;\n    }\n}\n$obj\n= new\nMyCloneable\n();\n$obj\n->\nobject1\n= new\nSubObject\n();\n$obj\n->\nobject2\n= new\nSubObject\n();\n$obj2\n= clone\n$obj\n;\nprint\n\"Original Object:\\n\"\n;\nprint_r\n(\n$obj\n);\nprint\n\"Cloned Object:\\n\"\n;\nprint_r\n(\n$obj2\n);\n?>"
  },
  {
    "input": "Example #2 Access member of freshly cloned object",
    "output": "<?php\n$dateTime\n= new\nDateTime\n();\necho (clone\n$dateTime\n)->\nformat\n(\n'Y'\n);\n?>"
  },
  {
    "input": "Example #1 Example of object comparison",
    "output": "<?php\nfunction\nbool2str\n(\n$bool\n)\n{\n    if (\n$bool\n===\nfalse\n) {\n        return\n'FALSE'\n;\n    } else {\n        return\n'TRUE'\n;\n    }\n}\nfunction\ncompareObjects\n(&\n$o1\n, &\n$o2\n)\n{\n    echo\n'o1 == o2 : '\n.\nbool2str\n(\n$o1\n==\n$o2\n) .\n\"\\n\"\n;\n    echo\n'o1 != o2 : '\n.\nbool2str\n(\n$o1\n!=\n$o2\n) .\n\"\\n\"\n;\n    echo\n'o1 === o2 : '\n.\nbool2str\n(\n$o1\n===\n$o2\n) .\n\"\\n\"\n;\n    echo\n'o1 !== o2 : '\n.\nbool2str\n(\n$o1\n!==\n$o2\n) .\n\"\\n\"\n;\n}\nclass\nFlag\n{\n    public\n$flag\n;\n    function\n__construct\n(\n$flag\n=\ntrue\n) {\n\n$this\n->\nflag\n=\n$flag\n;\n    }\n}\nclass\nOtherFlag\n{\n    public\n$flag\n;\n    function\n__construct\n(\n$flag\n=\ntrue\n) {\n\n$this\n->\nflag\n=\n$flag\n;\n    }\n}\n$o\n= new\nFlag\n();\n$p\n= new\nFlag\n();\n$q\n=\n$o\n;\n$r\n= new\nOtherFlag\n();\necho\n\"Two instances of the same class\\n\"\n;\ncompareObjects\n(\n$o\n,\n$p\n);\necho\n\"\\nTwo references to the same instance\\n\"\n;\ncompareObjects\n(\n$o\n,\n$q\n);\necho\n\"\\nInstances of two different classes\\n\"\n;\ncompareObjects\n(\n$o\n,\n$r\n);\n?>"
  },
  {
    "input": "Example #1 self:: usage",
    "output": "<?php\nclass\nA\n{\n    public static function\nwho\n() {\n        echo\n__CLASS__\n;\n    }\n    public static function\ntest\n() {\n\nself\n::\nwho\n();\n    }\n}\nclass\nB\nextends\nA\n{\n    public static function\nwho\n() {\n        echo\n__CLASS__\n;\n    }\n}\nB\n::\ntest\n();\n?>"
  },
  {
    "input": "Example #2 static:: simple usage",
    "output": "<?php\nclass\nA\n{\n    public static function\nwho\n() {\n        echo\n__CLASS__\n;\n    }\n    public static function\ntest\n() {\n        static::\nwho\n();\n// Here comes Late Static Bindings\n\n}\n}\nclass\nB\nextends\nA\n{\n    public static function\nwho\n() {\n        echo\n__CLASS__\n;\n    }\n}\nB\n::\ntest\n();\n?>"
  },
  {
    "input": "Example #3 static:: usage in a non-static context",
    "output": "<?php\nclass\nA\n{\n    private function\nfoo\n() {\n        echo\n\"success!\\n\"\n;\n    }\n    public function\ntest\n() {\n\n$this\n->\nfoo\n();\n        static::\nfoo\n();\n    }\n}\nclass\nB\nextends\nA\n{\n\n/* foo() will be copied to B, hence its scope will still be A and\n    * the call be successful */\n}\nclass\nC\nextends\nA\n{\n    private function\nfoo\n() {\n\n/* original method is replaced; the scope of the new one is C */\n\n}\n}\n$b\n= new\nB\n();\n$b\n->\ntest\n();\n$c\n= new\nC\n();\n$c\n->\ntest\n();\n//fails\n?>"
  },
  {
    "input": "Example #4 Forwarding and non-forwarding calls",
    "output": "<?php\nclass\nA\n{\n    public static function\nfoo\n() {\n        static::\nwho\n();\n    }\n    public static function\nwho\n() {\n        echo\n__CLASS__\n.\n\"\\n\"\n;\n    }\n}\nclass\nB\nextends\nA\n{\n    public static function\ntest\n() {\n\nA\n::\nfoo\n();\n\nparent\n::\nfoo\n();\n\nself\n::\nfoo\n();\n    }\n    public static function\nwho\n() {\n        echo\n__CLASS__\n.\n\"\\n\"\n;\n    }\n}\nclass\nC\nextends\nB\n{\n    public static function\nwho\n() {\n        echo\n__CLASS__\n.\n\"\\n\"\n;\n    }\n}\nC\n::\ntest\n();\n?>"
  },
  {
    "input": "Example #1 References and Objects",
    "output": "<?php\nclass\nA\n{\n    public\n$foo\n=\n1\n;\n}\n$a\n= new\nA\n;\n$b\n=\n$a\n;\n// $a and $b are copies of the same identifier\n             // ($a) = ($b) = <id>\n$b\n->\nfoo\n=\n2\n;\necho\n$a\n->\nfoo\n.\n\"\\n\"\n;\n$c\n= new\nA\n;\n$d\n= &\n$c\n;\n// $c and $d are references\n             // ($c,$d) = <id>\n$d\n->\nfoo\n=\n2\n;\necho\n$c\n->\nfoo\n.\n\"\\n\"\n;\n$e\n= new\nA\n;\nfunction\nfoo\n(\n$obj\n) {\n\n// ($obj) = ($e) = <id>\n\n$obj\n->\nfoo\n=\n2\n;\n}\nfoo\n(\n$e\n);\necho\n$e\n->\nfoo\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Property type variance",
    "output": "<?php\nclass\nAnimal\n{}\nclass\nDog\nextends\nAnimal\n{}\nclass\nPoodle\nextends\nDog\n{}\ninterface\nPetOwner\n{\n\n// Only a get operation is required, so this may be covariant.\n\npublic\nAnimal $pet\n{\nget\n; }\n}\nclass\nDogOwner\nimplements\nPetOwner\n{\n\n// This may be a more restrictive type since the \"get\" side\n    // still returns an Animal.  However, as a native property\n    // children of this class may not change the type anymore.\n\npublic\nDog $pet\n;\n}\nclass\nPoodleOwner\nextends\nDogOwner\n{\n\n// This is NOT ALLOWED, because DogOwner::$pet has both\n    // get and set operations defined and required.\n\npublic\nPoodle $pet\n;\n}\n?>"
  },
  {
    "input": "Example #1 Creating a Lazy Ghost",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n)\n    {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$lazyObject\n=\n$reflector\n->\nnewLazyGhost\n(function (\nExample $object\n) {\n\n// Initialize object in-place\n\n$object\n->\n__construct\n(\n1\n);\n});\nvar_dump\n(\n$lazyObject\n);\nvar_dump\n(\nget_class\n(\n$lazyObject\n));\n// Triggers initialization\nvar_dump\n(\n$lazyObject\n->\nprop\n);\n?>"
  },
  {
    "input": "Example #2 Creating a Lazy Proxy",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n)\n    {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$lazyObject\n=\n$reflector\n->\nnewLazyProxy\n(function (\nExample $object\n) {\n\n// Create and return the real instance\n\nreturn new\nExample\n(\n1\n);\n});\nvar_dump\n(\n$lazyObject\n);\nvar_dump\n(\nget_class\n(\n$lazyObject\n));\n// Triggers initialization\nvar_dump\n(\n$lazyObject\n->\nprop\n);\n?>"
  },
  {
    "input": "Example #3 Initializing Properties Eagerly",
    "output": "<?php\nclass\nBlogPost\n{\n    public function\n__construct\n(\n        public\nint $id\n,\n        public\nstring $title\n,\n        public\nstring $content\n,\n    ) { }\n}\n$reflector\n= new\nReflectionClass\n(\nBlogPost\n::class);\n$post\n=\n$reflector\n->\nnewLazyGhost\n(function (\n$post\n) {\n\n$data\n=\nfetch_from_store\n(\n$post\n->\nid\n);\n\n$post\n->\n__construct\n(\n$data\n[\n'id'\n],\n$data\n[\n'title'\n],\n$data\n[\n'content'\n]);\n});\n// Without this line, the following call to ReflectionProperty::setValue() would\n// trigger initialization.\n$reflector\n->\ngetProperty\n(\n'id'\n)->\nskipLazyInitialization\n(\n$post\n);\n$reflector\n->\ngetProperty\n(\n'id'\n)->\nsetValue\n(\n$post\n,\n123\n);\n// Alternatively, one can use this directly:\n$reflector\n->\ngetProperty\n(\n'id'\n)->\nsetRawValueWithoutLazyInitialization\n(\n$post\n,\n123\n);\n// The id property can be accessed without triggering initialization\nvar_dump\n(\n$post\n->\nid\n);\n?>"
  },
  {
    "input": "Example #1 Namespace syntax example",
    "output": "<?php\nnamespace\nmy\\name\n;\n// see \"Defining Namespaces\" section\nclass\nMyClass\n{}\nfunction\nmyfunction\n() {}\nconst\nMYCONST\n=\n1\n;\n$a\n= new\nMyClass\n;\n$c\n= new\n\\my\\name\\MyClass\n;\n// see \"Global Space\" section\n$a\n=\nstrlen\n(\n'hi'\n);\n// see \"Using namespaces: fallback to global\n                   // function/constant\" section\n$d\n=\nnamespace\\MYCONST\n;\n// see \"namespace operator and __NAMESPACE__\n                        // constant\" section\n$d\n=\n__NAMESPACE__\n.\n'\\MYCONST'\n;\necho\nconstant\n(\n$d\n);\n// see \"Namespaces and dynamic language features\" section\n?>"
  },
  {
    "input": "Example #1 Declaring a single namespace",
    "output": "<?php\nnamespace\nMyProject\n;\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #2 Declaring a single namespace",
    "output": "<html>\n<?php\nnamespace\nMyProject\n;\n// fatal error - namespace must be the first statement in the script\n?>"
  },
  {
    "input": "Example #1 Declaring a single namespace with hierarchy",
    "output": "<?php\nnamespace\nMyProject\\Sub\\Level\n;\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #1 Declaring multiple namespaces, simple combination syntax",
    "output": "<?php\nnamespace\nMyProject\n;\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\nnamespace\nAnotherProject\n;\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #2 Declaring multiple namespaces, bracketed syntax",
    "output": "<?php\nnamespace\nMyProject\n{\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n}\nnamespace\nAnotherProject\n{\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n}\n?>"
  },
  {
    "input": "Example #3 Declaring multiple namespaces and unnamespaced code",
    "output": "<?php\nnamespace\nMyProject\n{\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n}\nnamespace {\n// global code\nsession_start\n();\n$a\n=\nMyProject\\connect\n();\necho\nMyProject\\Connection\n::\nstart\n();\n}\n?>"
  },
  {
    "input": "Example #4 Declaring multiple namespaces and unnamespaced code",
    "output": "<?php\ndeclare(\nencoding\n=\n'UTF-8'\n);\nnamespace\nMyProject\n{\nconst\nCONNECT_OK\n=\n1\n;\nclass\nConnection\n{\n/* ... */\n}\nfunction\nconnect\n() {\n/* ... */\n}\n}\nnamespace {\n// global code\nsession_start\n();\n$a\n=\nMyProject\\connect\n();\necho\nMyProject\\Connection\n::\nstart\n();\n}\n?>"
  },
  {
    "input": "Example #1 Accessing global classes, functions and constants from within a namespace",
    "output": "<?php\nnamespace\nFoo\n;\nfunction\nstrlen\n() {}\nconst\nINI_ALL\n=\n3\n;\nclass\nException\n{}\n$a\n=\n\\strlen\n(\n'hi'\n);\n// calls global function strlen\n$b\n=\n\\INI_ALL\n;\n// accesses global constant INI_ALL\n$c\n= new\n\\Exception\n(\n'error'\n);\n// instantiates global class Exception\n?>"
  },
  {
    "input": "Example #2 Dynamically accessing namespaced elements",
    "output": "<?php\nnamespace\nnamespacename\n;\nclass\nclassname\n{\n    function\n__construct\n()\n    {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\nfunction\nfuncname\n()\n{\n    echo\n__FUNCTION__\n,\n\"\\n\"\n;\n}\nconst\nconstname\n=\n\"namespaced\"\n;\n/* note that if using double quotes, \"\\\\namespacename\\\\classname\" must be used */\n$a\n=\n'\\namespacename\\classname'\n;\n$obj\n= new\n$a\n;\n// prints namespacename\\classname::__construct\n$a\n=\n'namespacename\\classname'\n;\n$obj\n= new\n$a\n;\n// also prints namespacename\\classname::__construct\n$b\n=\n'namespacename\\funcname'\n;\n$b\n();\n// prints namespacename\\funcname\n$b\n=\n'\\namespacename\\funcname'\n;\n$b\n();\n// also prints namespacename\\funcname\necho\nconstant\n(\n'\\namespacename\\constname'\n),\n\"\\n\"\n;\n// prints namespaced\necho\nconstant\n(\n'namespacename\\constname'\n),\n\"\\n\"\n;\n// also prints namespaced\n?>"
  },
  {
    "input": "Example #1 __NAMESPACE__ example, namespaced code",
    "output": "<?php\nnamespace\nMyProject\n;\necho\n'\"'\n,\n__NAMESPACE__\n,\n'\"'\n;\n// outputs \"MyProject\"\n?>"
  },
  {
    "input": "Example #2 __NAMESPACE__ example, global code",
    "output": "<?php\necho\n'\"'\n,\n__NAMESPACE__\n,\n'\"'\n;\n// outputs \"\"\n?>"
  },
  {
    "input": "Example #3 using __NAMESPACE__ for dynamic name construction",
    "output": "<?php\nnamespace\nMyProject\n;\nfunction\nget\n(\n$classname\n)\n{\n\n$a\n=\n__NAMESPACE__\n.\n'\\\\'\n.\n$classname\n;\n    return new\n$a\n;\n}\n?>"
  },
  {
    "input": "Example #4 the namespace operator, inside a namespace",
    "output": "<?php\nnamespace\nMyProject\n;\nuse\nblah\\blah\nas\nmine\n;\n// see \"Using namespaces: Aliasing/Importing\"\nblah\\mine\n();\n// calls function MyProject\\blah\\mine()\nnamespace\\blah\\mine\n();\n// calls function MyProject\\blah\\mine()\nnamespace\\func\n();\n// calls function MyProject\\func()\nnamespace\\sub\\func\n();\n// calls function MyProject\\sub\\func()\nnamespace\\cname\n::\nmethod\n();\n// calls static method \"method\" of class MyProject\\cname\n$a\n= new\nnamespace\\sub\\cname\n();\n// instantiates object of class MyProject\\sub\\cname\n$b\n=\nnamespace\\CONSTANT\n;\n// assigns value of constant MyProject\\CONSTANT to $b\n?>"
  },
  {
    "input": "Example #5 the namespace operator, in global code",
    "output": "<?php\nnamespace\\func\n();\n// calls function func()\nnamespace\\sub\\func\n();\n// calls function sub\\func()\nnamespace\\cname\n::\nmethod\n();\n// calls static method \"method\" of class cname\n$a\n= new\nnamespace\\sub\\cname\n();\n// instantiates object of class sub\\cname\n$b\n=\nnamespace\\CONSTANT\n;\n// assigns value of constant CONSTANT to $b\n?>"
  },
  {
    "input": "Example #1 importing/aliasing with the use operator",
    "output": "<?php\nnamespace\nfoo\n;\nuse\nMy\\Full\\Classname\nas\nAnother\n;\n// this is the same as use My\\Full\\NSname as NSname\nuse\nMy\\Full\\NSname\n;\n// importing a global class\nuse\nArrayObject\n;\n// importing a function\nuse function\nMy\\Full\\functionName\n;\n// aliasing a function\nuse function\nMy\\Full\\functionName\nas\nfunc\n;\n// importing a constant\nuse const\nMy\\Full\\CONSTANT\n;\n$obj\n= new\nnamespace\\Another\n;\n// instantiates object of class foo\\Another\n$obj\n= new\nAnother\n;\n// instantiates object of class My\\Full\\Classname\nNSname\\subns\\func\n();\n// calls function My\\Full\\NSname\\subns\\func\n$a\n= new\nArrayObject\n(array(\n1\n));\n// instantiates object of class ArrayObject\n// without the \"use ArrayObject\" we would instantiate an object of class foo\\ArrayObject\nfunc\n();\n// calls function My\\Full\\functionName\necho\nCONSTANT\n;\n// echoes the value of My\\Full\\CONSTANT\n?>"
  },
  {
    "input": "Example #2 importing/aliasing with the use operator, multiple use statements combined",
    "output": "<?php\nuse\nMy\\Full\\Classname\nas\nAnother\n,\nMy\\Full\\NSname\n;\n$obj\n= new\nAnother\n;\n// instantiates object of class My\\Full\\Classname\nNSname\\subns\\func\n();\n// calls function My\\Full\\NSname\\subns\\func\n?>"
  },
  {
    "input": "Example #3 Importing and dynamic names",
    "output": "<?php\nuse\nMy\\Full\\Classname\nas\nAnother\n,\nMy\\Full\\NSname\n;\n$obj\n= new\nAnother\n;\n// instantiates object of class My\\Full\\Classname\n$a\n=\n'Another'\n;\n$obj\n= new\n$a\n;\n// instantiates object of class Another\n?>"
  },
  {
    "input": "Example #4 Importing and fully qualified names",
    "output": "<?php\nuse\nMy\\Full\\Classname\nas\nAnother\n,\nMy\\Full\\NSname\n;\n$obj\n= new\nAnother\n;\n// instantiates object of class My\\Full\\Classname\n$obj\n= new\n\\Another\n;\n// instantiates object of class Another\n$obj\n= new\nAnother\\thing\n;\n// instantiates object of class My\\Full\\Classname\\thing\n$obj\n= new\n\\Another\\thing\n;\n// instantiates object of class Another\\thing\n?>"
  },
  {
    "input": "Example #5 Illegal importing rule",
    "output": "<?php\nnamespace\nLanguages\n;\nfunction\ntoGreenlandic\n()\n{\n    use\nLanguages\\Danish\n;\n\n// ...\n}\n?>"
  },
  {
    "input": "Example #1 Using global space specification",
    "output": "<?php\nnamespace\nA\\B\\C\n;\n/* This function is A\\B\\C\\fopen */\nfunction\nfopen\n() {\n\n/* ... */\n\n$f\n=\n\\fopen\n(...);\n// call global fopen\n\nreturn\n$f\n;\n}\n?>"
  },
  {
    "input": "Example #1 Accessing global classes inside a namespace",
    "output": "<?php\nnamespace\nA\\B\\C\n;\nclass\nException\nextends\n\\Exception\n{}\n$a\n= new\nException\n(\n'hi'\n);\n// $a is an object of class A\\B\\C\\Exception\n$b\n= new\n\\Exception\n(\n'hi'\n);\n// $b is an object of class Exception\n$c\n= new\nArrayObject\n;\n// fatal error, class A\\B\\C\\ArrayObject not found\n?>"
  },
  {
    "input": "Example #2 global functions/constants fallback inside a namespace",
    "output": "<?php\nnamespace\nA\\B\\C\n;\nconst\nE_ERROR\n=\n45\n;\nfunction\nstrlen\n(\n$str\n)\n{\n    return\n\\strlen\n(\n$str\n) -\n1\n;\n}\necho\nE_ERROR\n,\n\"\\n\"\n;\n// prints \"45\"\necho\nINI_ALL\n,\n\"\\n\"\n;\n// prints \"7\" - falls back to global INI_ALL\necho\nstrlen\n(\n'hi'\n),\n\"\\n\"\n;\n// prints \"1\"\nif (\nis_array\n(\n'hi'\n)) {\n// prints \"is not array\"\n\necho\n\"is array\\n\"\n;\n} else {\n    echo\n\"is not array\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Name resolutions illustrated",
    "output": "<?php\nnamespace\nA\n;\nuse\nB\\D\n,\nC\\E\nas\nF\n;\n// function calls\nfoo\n();\n// first tries to call \"foo\" defined in namespace \"A\"\n            // then calls global function \"foo\"\n\\foo\n();\n// calls function \"foo\" defined in global scope\nmy\\foo\n();\n// calls function \"foo\" defined in namespace \"A\\my\"\nF\n();\n// first tries to call \"F\" defined in namespace \"A\"\n            // then calls global function \"F\"\n// class references\nnew\nB\n();\n// creates object of class \"B\" defined in namespace \"A\"\n            // if not found, it tries to autoload class \"A\\B\"\nnew\nD\n();\n// using import rules, creates object of class \"D\" defined in namespace \"B\"\n            // if not found, it tries to autoload class \"B\\D\"\nnew\nF\n();\n// using import rules, creates object of class \"E\" defined in namespace \"C\"\n            // if not found, it tries to autoload class \"C\\E\"\nnew\n\\B\n();\n// creates object of class \"B\" defined in global scope\n            // if not found, it tries to autoload class \"B\"\nnew\n\\D\n();\n// creates object of class \"D\" defined in global scope\n            // if not found, it tries to autoload class \"D\"\nnew\n\\F\n();\n// creates object of class \"F\" defined in global scope\n            // if not found, it tries to autoload class \"F\"\n// static methods/namespace functions from another namespace\nB\\foo\n();\n// calls function \"foo\" from namespace \"A\\B\"\nB\n::\nfoo\n();\n// calls method \"foo\" of class \"B\" defined in namespace \"A\"\n            // if class \"A\\B\" not found, it tries to autoload class \"A\\B\"\nD\n::\nfoo\n();\n// using import rules, calls method \"foo\" of class \"D\" defined in namespace \"B\"\n            // if class \"B\\D\" not found, it tries to autoload class \"B\\D\"\n\\B\\foo\n();\n// calls function \"foo\" from namespace \"B\"\n\\B\n::\nfoo\n();\n// calls method \"foo\" of class \"B\" from global scope\n            // if class \"B\" not found, it tries to autoload class \"B\"\n// static methods/namespace functions of current namespace\nA\\B\n::\nfoo\n();\n// calls method \"foo\" of class \"B\" from namespace \"A\\A\"\n              // if class \"A\\A\\B\" not found, it tries to autoload class \"A\\A\\B\"\n\\A\\B\n::\nfoo\n();\n// calls method \"foo\" of class \"B\" from namespace \"A\"\n              // if class \"A\\B\" not found, it tries to autoload class \"A\\B\"\n?>"
  },
  {
    "input": "Example #1 Accessing global classes outside a namespace",
    "output": "<?php\n$a\n= new\n\\stdClass\n;\n?>"
  },
  {
    "input": "Example #2 Accessing global classes outside a namespace",
    "output": "<?php\n$a\n= new\nstdClass\n;\n?>"
  },
  {
    "input": "Example #3 Accessing internal classes in namespaces",
    "output": "<?php\nnamespace\nfoo\n;\n$a\n= new\n\\stdClass\n;\nfunction\ntest\n(\n\\ArrayObject $parameter_type_example\n=\nnull\n) {}\n$a\n=\n\\DirectoryIterator\n::\nCURRENT_AS_FILEINFO\n;\n// extending an internal or global class\nclass\nMyException\nextends\n\\Exception\n{}\n?>"
  },
  {
    "input": "Example #4 Accessing internal classes, functions or constants in namespaces",
    "output": "<?php\nnamespace\nfoo\n;\nclass\nMyClass\n{}\n// using a class from the current namespace as a parameter type\nfunction\ntest\n(\nMyClass $parameter_type_example\n=\nnull\n) {}\n// another way to use a class from the current namespace as a parameter type\nfunction\ntest\n(\n\\foo\\MyClass $parameter_type_example\n=\nnull\n) {}\n// extending a class from the current namespace\nclass\nExtended\nextends\nMyClass\n{}\n// accessing a global function\n$a\n=\n\\globalfunc\n();\n// accessing a global constant\n$b\n=\n\\INI_ALL\n;\n?>"
  },
  {
    "input": "Example #5 Fully Qualified names",
    "output": "<?php\nnamespace\nfoo\n;\n$a\n= new\n\\my\\name\n();\n// instantiates \"my\\name\" class\necho\n\\strlen\n(\n'hi'\n);\n// calls function \"strlen\"\n$a\n=\n\\INI_ALL\n;\n// $a is set to the value of constant \"INI_ALL\"\n?>"
  },
  {
    "input": "Example #6 Qualified names",
    "output": "<?php\nnamespace\nfoo\n;\nuse\nblah\\blah\nas\nfoo\n;\n$a\n= new\nmy\\name\n();\n// instantiates \"foo\\my\\name\" class\nfoo\\bar\n::\nname\n();\n// calls static method \"name\" in class \"blah\\blah\\bar\"\nmy\\bar\n();\n// calls function \"foo\\my\\bar\"\n$a\n=\nmy\\BAR\n;\n// sets $a to the value of constant \"foo\\my\\BAR\"\n?>"
  },
  {
    "input": "Example #7 Unqualified class names",
    "output": "<?php\nnamespace\nfoo\n;\nuse\nblah\\blah\nas\nfoo\n;\n$a\n= new\nname\n();\n// instantiates \"foo\\name\" class\nfoo\n::\nname\n();\n// calls static method \"name\" in class \"blah\\blah\"\n?>"
  },
  {
    "input": "Example #8 Unqualified function or constant names",
    "output": "<?php\nnamespace\nfoo\n;\nuse\nblah\\blah\nas\nfoo\n;\nconst\nFOO\n=\n1\n;\nfunction\nmy\n() {}\nfunction\nfoo\n() {}\nfunction\nsort\n(&\n$a\n)\n{\n\n\\sort\n(\n$a\n);\n// calls the global function \"sort\"\n\n$a\n=\narray_flip\n(\n$a\n);\n    return\n$a\n;\n}\nmy\n();\n// calls \"foo\\my\"\n$a\n=\nstrlen\n(\n'hi'\n);\n// calls global function \"strlen\" because \"foo\\strlen\" does not exist\n$arr\n= array(\n1\n,\n3\n,\n2\n);\n$b\n=\nsort\n(\n$arr\n);\n// calls function \"foo\\sort\"\n$c\n=\nfoo\n();\n// calls function \"foo\\foo\" - import is not applied\n$a\n=\nFOO\n;\n// sets $a to value of constant \"foo\\FOO\" - import is not applied\n$b\n=\nINI_ALL\n;\n// sets $b to value of global constant \"INI_ALL\"\n?>"
  },
  {
    "input": "Example #9 Dangers of using namespaced names inside a double-quoted string",
    "output": "<?php\n$a\n=\n\"dangerous\\name\"\n;\n// \\n is a newline inside double quoted strings!\n$obj\n= new\n$a\n;\n$a\n=\n'not\\at\\all\\dangerous'\n;\n// no problems here.\n$obj\n= new\n$a\n;\n?>"
  },
  {
    "input": "Example #10 Undefined constants",
    "output": "<?php\nnamespace\nbar\n;\n$a\n=\nFOO\n;\n// produces notice - undefined constants \"FOO\" assumed \"FOO\";\n$a\n=\n\\FOO\n;\n// fatal error, undefined namespace constant FOO\n$a\n=\nBar\\FOO\n;\n// fatal error, undefined namespace constant bar\\Bar\\FOO\n$a\n=\n\\Bar\\FOO\n;\n// fatal error, undefined namespace constant Bar\\FOO\n?>"
  },
  {
    "input": "Example #11 Undefined constants",
    "output": "<?php\nnamespace\nbar\n;\nconst\nNULL\n=\n0\n;\n// fatal error;\nconst\ntrue\n=\n'stupid'\n;\n// also fatal error;\n// etc.\n?>"
  },
  {
    "input": "Example #1 Basic limited values",
    "output": "<?php\nenum\nSortOrder\n{\n    case\nAsc\n;\n    case\nDesc\n;\n}\nfunction\nquery\n(\n$fields\n,\n$filter\n,\nSortOrder $order\n=\nSortOrder\n::\nAsc\n)\n{\n\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #2 Advanced exclusive values",
    "output": "<?php\nenum\nUserStatus\n:\nstring\n{\n    case\nPending\n=\n'P'\n;\n    case\nActive\n=\n'A'\n;\n    case\nSuspended\n=\n'S'\n;\n    case\nCanceledByUser\n=\n'C'\n;\n    public function\nlabel\n():\nstring\n\n{\n        return match(\n$this\n) {\n            static::\nPending\n=>\n'Pending'\n,\n            static::\nActive\n=>\n'Active'\n,\n            static::\nSuspended\n=>\n'Suspended'\n,\n            static::\nCanceledByUser\n=>\n'Canceled by user'\n,\n        };\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Converting error reporting to exceptions",
    "output": "<?php\nfunction\nexceptions_error_handler\n(\n$severity\n,\n$message\n,\n$filename\n,\n$lineno\n) {\n    throw new\nErrorException\n(\n$message\n,\n0\n,\n$severity\n,\n$filename\n,\n$lineno\n);\n}\nset_error_handler\n(\n'exceptions_error_handler'\n);\n?>"
  },
  {
    "input": "Example #2 Throwing an Exception",
    "output": "<?php\nfunction\ninverse\n(\n$x\n) {\n    if (!\n$x\n) {\n        throw new\nException\n(\n'Division by zero.'\n);\n    }\n    return\n1\n/\n$x\n;\n}\ntry {\n    echo\ninverse\n(\n5\n) .\n\"\\n\"\n;\n    echo\ninverse\n(\n0\n) .\n\"\\n\"\n;\n} catch (\nException $e\n) {\n    echo\n'Caught exception: '\n,\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n}\n// Continue execution\necho\n\"Hello World\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Exception handling with a finally block",
    "output": "<?php\nfunction\ninverse\n(\n$x\n) {\n    if (!\n$x\n) {\n        throw new\nException\n(\n'Division by zero.'\n);\n    }\n    return\n1\n/\n$x\n;\n}\ntry {\n    echo\ninverse\n(\n5\n) .\n\"\\n\"\n;\n} catch (\nException $e\n) {\n    echo\n'Caught exception: '\n,\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n} finally {\n    echo\n\"First finally.\\n\"\n;\n}\ntry {\n    echo\ninverse\n(\n0\n) .\n\"\\n\"\n;\n} catch (\nException $e\n) {\n    echo\n'Caught exception: '\n,\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n} finally {\n    echo\n\"Second finally.\\n\"\n;\n}\n// Continue execution\necho\n\"Hello World\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Interaction between the finally block and return",
    "output": "<?php\nfunction\ntest\n() {\n    try {\n        throw new\nException\n(\n'foo'\n);\n    } catch (\nException $e\n) {\n        return\n'catch'\n;\n    } finally {\n        return\n'finally'\n;\n    }\n}\necho\ntest\n();\n?>"
  },
  {
    "input": "Example #5 Nested Exception",
    "output": "<?php\nclass\nMyException\nextends\nException\n{ }\nclass\nTest\n{\n    public function\ntesting\n() {\n        try {\n            try {\n                throw new\nMyException\n(\n'foo!'\n);\n            } catch (\nMyException $e\n) {\n\n// rethrow it\n\nthrow\n$e\n;\n            }\n        } catch (\nException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetMessage\n());\n        }\n    }\n}\n$foo\n= new\nTest\n;\n$foo\n->\ntesting\n();\n?>"
  },
  {
    "input": "Example #6 Multi catch exception handling",
    "output": "<?php\nclass\nMyException\nextends\nException\n{ }\nclass\nMyOtherException\nextends\nException\n{ }\nclass\nTest\n{\n    public function\ntesting\n() {\n        try {\n            throw new\nMyException\n();\n        } catch (\nMyException\n|\nMyOtherException $e\n) {\n\nvar_dump\n(\nget_class\n(\n$e\n));\n        }\n    }\n}\n$foo\n= new\nTest\n;\n$foo\n->\ntesting\n();\n?>"
  },
  {
    "input": "Example #1 The Built in Exception class",
    "output": "<?php\nclass\nException\nimplements\nThrowable\n{\n    protected\n$message\n=\n'Unknown exception'\n;\n// exception message\n\nprivate\n$string\n;\n// __toString cache\n\nprotected\n$code\n=\n0\n;\n// user defined exception code\n\nprotected\n$file\n;\n// source filename of exception\n\nprotected\n$line\n;\n// source line of exception\n\nprivate\n$trace\n;\n// backtrace\n\nprivate\n$previous\n;\n// previous exception if nested exception\n\npublic function\n__construct\n(\n$message\n=\n''\n,\n$code\n=\n0\n,\nThrowable $previous\n=\nnull\n);\n    final private function\n__clone\n();\n// Inhibits cloning of exceptions.\n\nfinal public  function\ngetMessage\n();\n// message of exception\n\nfinal public  function\ngetCode\n();\n// code of exception\n\nfinal public  function\ngetFile\n();\n// source filename\n\nfinal public  function\ngetLine\n();\n// source line\n\nfinal public  function\ngetTrace\n();\n// an array of the backtrace()\n\nfinal public  function\ngetPrevious\n();\n// previous exception\n\nfinal public  function\ngetTraceAsString\n();\n// formatted string of trace\n    // Overrideable\n\npublic function\n__toString\n();\n// formatted string for display\n}\n?>"
  },
  {
    "input": "Example #2 Extending the Exception class",
    "output": "<?php\n/**\n * Define a custom exception class\n */\nclass\nMyException\nextends\nException\n{\n\n// Redefine the exception so message isn't optional\n\npublic function\n__construct\n(\n$message\n,\n$code\n=\n0\n,\nThrowable $previous\n=\nnull\n) {\n\n// some code\n        // make sure everything is assigned properly\n\nparent\n::\n__construct\n(\n$message\n,\n$code\n,\n$previous\n);\n    }\n\n// custom string representation of object\n\npublic function\n__toString\n() {\n        return\n__CLASS__\n.\n\": [\n{\n$this\n->\ncode\n}\n]:\n{\n$this\n->\nmessage\n}\n\\n\"\n;\n    }\n    public function\ncustomFunction\n() {\n        echo\n\"A custom function for this type of exception\\n\"\n;\n    }\n}\n/**\n * Create a class to test the exception\n */\nclass\nTestException\n{\n    public\n$var\n;\n    const\nTHROW_NONE\n=\n0\n;\n    const\nTHROW_CUSTOM\n=\n1\n;\n    const\nTHROW_DEFAULT\n=\n2\n;\n    function\n__construct\n(\n$avalue\n=\nself\n::\nTHROW_NONE\n) {\n        switch (\n$avalue\n) {\n            case\nself\n::\nTHROW_CUSTOM\n:\n\n// throw custom exception\n\nthrow new\nMyException\n(\n'1 is an invalid parameter'\n,\n5\n);\n                break;\n            case\nself\n::\nTHROW_DEFAULT\n:\n\n// throw default one.\n\nthrow new\nException\n(\n'2 is not allowed as a parameter'\n,\n6\n);\n                break;\n            default:\n\n// No exception, object will be created.\n\n$this\n->\nvar\n=\n$avalue\n;\n                break;\n        }\n    }\n}\n// Example 1\ntry {\n\n$o\n= new\nTestException\n(\nTestException\n::\nTHROW_CUSTOM\n);\n} catch (\nMyException $e\n) {\n// Will be caught\n\necho\n\"Caught my exception\\n\"\n,\n$e\n;\n\n$e\n->\ncustomFunction\n();\n} catch (\nException $e\n) {\n// Skipped\n\necho\n\"Caught Default Exception\\n\"\n,\n$e\n;\n}\n// Continue execution\nvar_dump\n(\n$o\n);\n// Null\necho\n\"\\n\\n\"\n;\n// Example 2\ntry {\n\n$o\n= new\nTestException\n(\nTestException\n::\nTHROW_DEFAULT\n);\n} catch (\nMyException $e\n) {\n// Doesn't match this type\n\necho\n\"Caught my exception\\n\"\n,\n$e\n;\n\n$e\n->\ncustomFunction\n();\n} catch (\nException $e\n) {\n// Will be caught\n\necho\n\"Caught Default Exception\\n\"\n,\n$e\n;\n}\n// Continue execution\nvar_dump\n(\n$o\n);\n// Null\necho\n\"\\n\\n\"\n;\n// Example 3\ntry {\n\n$o\n= new\nTestException\n(\nTestException\n::\nTHROW_CUSTOM\n);\n} catch (\nException $e\n) {\n// Will be caught\n\necho\n\"Default Exception caught\\n\"\n,\n$e\n;\n}\n// Continue execution\nvar_dump\n(\n$o\n);\n// Null\necho\n\"\\n\\n\"\n;\n// Example 4\ntry {\n\n$o\n= new\nTestException\n();\n} catch (\nException $e\n) {\n// Skipped, no exception\n\necho\n\"Default Exception caught\\n\"\n,\n$e\n;\n}\n// Continue execution\nvar_dump\n(\n$o\n);\n// TestException\necho\n\"\\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n$fiber\n= new\nFiber\n(function ():\nvoid\n{\n\n$value\n=\nFiber\n::\nsuspend\n(\n'fiber'\n);\n   echo\n\"Value used to resume fiber: \"\n,\n$value\n,\nPHP_EOL\n;\n});\n$value\n=\n$fiber\n->\nstart\n();\necho\n\"Value from fiber suspending: \"\n,\n$value\n,\nPHP_EOL\n;\n$fiber\n->\nresume\n(\n'test'\n);\n?>"
  },
  {
    "input": "Example #1 Implementing range() as a generator",
    "output": "<?php\nfunction\nxrange\n(\n$start\n,\n$limit\n,\n$step\n=\n1\n) {\n    if (\n$start\n<=\n$limit\n) {\n        if (\n$step\n<=\n0\n) {\n            throw new\nLogicException\n(\n'Step must be positive'\n);\n        }\n        for (\n$i\n=\n$start\n;\n$i\n<=\n$limit\n;\n$i\n+=\n$step\n) {\n            yield\n$i\n;\n        }\n    } else {\n        if (\n$step\n>=\n0\n) {\n            throw new\nLogicException\n(\n'Step must be negative'\n);\n        }\n        for (\n$i\n=\n$start\n;\n$i\n>=\n$limit\n;\n$i\n+=\n$step\n) {\n            yield\n$i\n;\n        }\n    }\n}\n/*\n * Note that both range() and xrange() result in the same\n * output below.\n */\necho\n'Single digit odd numbers from range():  '\n;\nforeach (\nrange\n(\n1\n,\n9\n,\n2\n) as\n$number\n) {\n    echo\n\"\n$number\n \"\n;\n}\necho\n\"\\n\"\n;\necho\n'Single digit odd numbers from xrange(): '\n;\nforeach (\nxrange\n(\n1\n,\n9\n,\n2\n) as\n$number\n) {\n    echo\n\"\n$number\n \"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A simple example of yielding values",
    "output": "<?php\nfunction\ngen_one_to_three\n() {\n    for (\n$i\n=\n1\n;\n$i\n<=\n3\n;\n$i\n++) {\n\n// Note that $i is preserved between yields.\n\nyield\n$i\n;\n    }\n}\n$generator\n=\ngen_one_to_three\n();\nforeach (\n$generator\nas\n$value\n) {\n    echo\n\"\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Yielding a key/value pair",
    "output": "<?php\n/*\n * The input is semi-colon separated fields, with the first\n * field being an ID to use as a key.\n */\n$input\n= <<<'EOF'\n1;PHP;Likes dollar signs\n2;Python;Likes whitespace\n3;Ruby;Likes blocks\nEOF;\nfunction\ninput_parser\n(\n$input\n) {\n    foreach (\nexplode\n(\n\"\\n\"\n,\n$input\n) as\n$line\n) {\n\n$fields\n=\nexplode\n(\n';'\n,\n$line\n);\n\n$id\n=\narray_shift\n(\n$fields\n);\n        yield\n$id\n=>\n$fields\n;\n    }\n}\nforeach (\ninput_parser\n(\n$input\n) as\n$id\n=>\n$fields\n) {\n    echo\n\"\n$id\n:\\n\"\n;\n    echo\n\"\n$fields\n[\n0\n]\n\\n\"\n;\n    echo\n\"\n$fields\n[\n1\n]\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Yielding nulls",
    "output": "<?php\nfunction\ngen_three_nulls\n() {\n    foreach (\nrange\n(\n1\n,\n3\n) as\n$i\n) {\n        yield;\n    }\n}\nvar_dump\n(\niterator_to_array\n(\ngen_three_nulls\n()));\n?>"
  },
  {
    "input": "Example #4 Yielding values by reference",
    "output": "<?php\nfunction &\ngen_reference\n() {\n\n$value\n=\n3\n;\n    while (\n$value\n>\n0\n) {\n        yield\n$value\n;\n    }\n}\n/*\n * Note that we can change $number within the loop, and\n * because the generator is yielding references, $value\n * within gen_reference() changes.\n */\nforeach (\ngen_reference\n() as &\n$number\n) {\n    echo (--\n$number\n).\n'... '\n;\n}\n?>"
  },
  {
    "input": "Example #5 yield from with iterator_to_array()",
    "output": "<?php\nfunction\ninner\n() {\n    yield\n1\n;\n// key 0\n\nyield\n2\n;\n// key 1\n\nyield\n3\n;\n// key 2\n}\nfunction\ngen\n() {\n    yield\n0\n;\n// key 0\n\nyield from\ninner\n();\n// keys 0-2\n\nyield\n4\n;\n// key 1\n}\n// pass false as second parameter to get an array [0, 1, 2, 3, 4]\nvar_dump\n(\niterator_to_array\n(\ngen\n()));\n?>"
  },
  {
    "input": "Example #6 Basic use of yield from",
    "output": "<?php\nfunction\ncount_to_ten\n() {\n    yield\n1\n;\n    yield\n2\n;\n    yield from [\n3\n,\n4\n];\n    yield from new\nArrayIterator\n([\n5\n,\n6\n]);\n    yield from\nseven_eight\n();\n    yield\n9\n;\n    yield\n10\n;\n}\nfunction\nseven_eight\n() {\n    yield\n7\n;\n    yield from\neight\n();\n}\nfunction\neight\n() {\n    yield\n8\n;\n}\nforeach (\ncount_to_ten\n() as\n$num\n) {\n    echo\n\"\n$num\n \"\n;\n}\n?>"
  },
  {
    "input": "Example #7 yield from and return values",
    "output": "<?php\nfunction\ncount_to_ten\n() {\n    yield\n1\n;\n    yield\n2\n;\n    yield from [\n3\n,\n4\n];\n    yield from new\nArrayIterator\n([\n5\n,\n6\n]);\n    yield from\nseven_eight\n();\n    return yield from\nnine_ten\n();\n}\nfunction\nseven_eight\n() {\n    yield\n7\n;\n    yield from\neight\n();\n}\nfunction\neight\n() {\n    yield\n8\n;\n}\nfunction\nnine_ten\n() {\n    yield\n9\n;\n    return\n10\n;\n}\n$gen\n=\ncount_to_ten\n();\nforeach (\n$gen\nas\n$num\n) {\n    echo\n\"\n$num\n \"\n;\n}\necho\n$gen\n->\ngetReturn\n();\n?>"
  },
  {
    "input": "Example #1 Implementing optional methods of an interface with Attributes",
    "output": "<?php\ninterface\nActionHandler\n{\n    public function\nexecute\n();\n}\n#[\nAttribute\n]\nclass\nSetUp\n{}\nclass\nCopyFile\nimplements\nActionHandler\n{\n    public\nstring $fileName\n;\n    public\nstring $targetDirectory\n;\n    #[\nSetUp\n]\n    public function\nfileExists\n()\n    {\n        if (!\nfile_exists\n(\n$this\n->\nfileName\n)) {\n            throw new\nRuntimeException\n(\n\"File does not exist\"\n);\n        }\n    }\n    #[\nSetUp\n]\n    public function\ntargetDirectoryExists\n()\n    {\n        if (!\nfile_exists\n(\n$this\n->\ntargetDirectory\n)) {\n\nmkdir\n(\n$this\n->\ntargetDirectory\n);\n        } elseif (!\nis_dir\n(\n$this\n->\ntargetDirectory\n)) {\n            throw new\nRuntimeException\n(\n\"Target directory\n$this\n->\ntargetDirectory\n is not a directory\"\n);\n        }\n    }\n    public function\nexecute\n()\n    {\n\ncopy\n(\n$this\n->\nfileName\n,\n$this\n->\ntargetDirectory\n.\n'/'\n.\nbasename\n(\n$this\n->\nfileName\n));\n    }\n}\nfunction\nexecuteAction\n(\nActionHandler $actionHandler\n)\n{\n\n$reflection\n= new\nReflectionObject\n(\n$actionHandler\n);\n    foreach (\n$reflection\n->\ngetMethods\n() as\n$method\n) {\n\n$attributes\n=\n$method\n->\ngetAttributes\n(\nSetUp\n::class);\n        if (\ncount\n(\n$attributes\n) >\n0\n) {\n\n$methodName\n=\n$method\n->\ngetName\n();\n\n$actionHandler\n->\n$methodName\n();\n        }\n    }\n\n$actionHandler\n->\nexecute\n();\n}\n$copyAction\n= new\nCopyFile\n();\n$copyAction\n->\nfileName\n=\n\"/tmp/foo.jpg\"\n;\n$copyAction\n->\ntargetDirectory\n=\n\"/home/user\"\n;\nexecuteAction\n(\n$copyAction\n);"
  },
  {
    "input": "Example #1 Attribute Syntax",
    "output": "<?php\n// a.php\nnamespace\nMyExample\n;\nuse\nAttribute\n;\n#[\nAttribute\n]\nclass\nMyAttribute\n{\n    const\nVALUE\n=\n'value'\n;\n    private\n$value\n;\n    public function\n__construct\n(\n$value\n=\nnull\n)\n    {\n\n$this\n->\nvalue\n=\n$value\n;\n    }\n}\n// b.php\nnamespace\nAnother\n;\nuse\nMyExample\\MyAttribute\n;\n#[\nMyAttribute\n]\n#[\n\\MyExample\\MyAttribute\n]\n#[\nMyAttribute\n(\n1234\n)]\n#[\nMyAttribute\n(\nvalue\n:\n1234\n)]\n#[\nMyAttribute\n(\nMyAttribute\n::\nVALUE\n)]\n#[\nMyAttribute\n(array(\n\"key\"\n=>\n\"value\"\n))]\n#[\nMyAttribute\n(\n100\n+\n200\n)]\nclass\nThing\n{\n}\n#[\nMyAttribute\n(\n1234\n),\nMyAttribute\n(\n5678\n)]\nclass\nAnotherThing\n{\n}"
  },
  {
    "input": "Example #1 Reading Attributes using Reflection API",
    "output": "<?php\n#[\nAttribute\n]\nclass\nMyAttribute\n{\n    public\n$value\n;\n    public function\n__construct\n(\n$value\n)\n    {\n\n$this\n->\nvalue\n=\n$value\n;\n    }\n}\n#[\nMyAttribute\n(\nvalue\n:\n1234\n)]\nclass\nThing\n{\n}\nfunction\ndumpAttributeData\n(\n$reflection\n) {\n\n$attributes\n=\n$reflection\n->\ngetAttributes\n();\n    foreach (\n$attributes\nas\n$attribute\n) {\n\nvar_dump\n(\n$attribute\n->\ngetName\n());\n\nvar_dump\n(\n$attribute\n->\ngetArguments\n());\n\nvar_dump\n(\n$attribute\n->\nnewInstance\n());\n    }\n}\ndumpAttributeData\n(new\nReflectionClass\n(\nThing\n::class));\n/*\nstring(11) \"MyAttribute\"\narray(1) {\n  [\"value\"]=>\n  int(1234)\n}\nobject(MyAttribute)#3 (1) {\n  [\"value\"]=>\n  int(1234)\n}\n*/"
  },
  {
    "input": "Example #2 Reading Specific Attributes using Reflection API",
    "output": "<?php\nfunction\ndumpMyAttributeData\n(\n$reflection\n) {\n\n$attributes\n=\n$reflection\n->\ngetAttributes\n(\nMyAttribute\n::class);\n    foreach (\n$attributes\nas\n$attribute\n) {\n\nvar_dump\n(\n$attribute\n->\ngetName\n());\n\nvar_dump\n(\n$attribute\n->\ngetArguments\n());\n\nvar_dump\n(\n$attribute\n->\nnewInstance\n());\n    }\n}\ndumpMyAttributeData\n(new\nReflectionClass\n(\nThing\n::class));"
  },
  {
    "input": "Example #1 Simple Attribute Class",
    "output": "<?php\nnamespace\nExample\n;\nuse\nAttribute\n;\n#[\nAttribute\n]\nclass\nMyAttribute\n{\n}"
  },
  {
    "input": "Example #2 Using target specification to restrict where attributes can be used",
    "output": "<?php\nnamespace\nExample\n;\nuse\nAttribute\n;\n#[\nAttribute\n(\nAttribute\n::\nTARGET_METHOD\n|\nAttribute\n::\nTARGET_FUNCTION\n)]\nclass\nMyAttribute\n{\n}"
  },
  {
    "input": "Example #3 Using IS_REPEATABLE to allow attribute on a declaration multiple times",
    "output": "<?php\nnamespace\nExample\n;\nuse\nAttribute\n;\n#[\nAttribute\n(\nAttribute\n::\nTARGET_METHOD\n|\nAttribute\n::\nTARGET_FUNCTION\n|\nAttribute\n::\nIS_REPEATABLE\n)]\nclass\nMyAttribute\n{\n}"
  },
  {
    "input": "Example #1 Using references with undefined variables",
    "output": "<?php\nfunction\nfoo\n(&\n$var\n) {}\nfoo\n(\n$a\n);\n// $a is \"created\" and assigned to null\n$b\n= array();\nfoo\n(\n$b\n[\n'b'\n]);\nvar_dump\n(\narray_key_exists\n(\n'b'\n,\n$b\n));\n// bool(true)\n$c\n= new\nstdClass\n();\nfoo\n(\n$c\n->\nd\n);\nvar_dump\n(\nproperty_exists\n(\n$c\n,\n'd'\n));\n// bool(true)\n?>"
  },
  {
    "input": "Example #2 Referencing global variables inside functions",
    "output": "<?php\n$var1\n=\n\"Example variable\"\n;\n$var2\n=\n\"\"\n;\nfunction\nglobal_references\n(\n$use_globals\n)\n{\n    global\n$var1\n,\n$var2\n;\n    if (!\n$use_globals\n) {\n\n$var2\n=&\n$var1\n;\n// visible only inside the function\n\n} else {\n\n$GLOBALS\n[\n\"var2\"\n] =&\n$var1\n;\n// visible also in global context\n\n}\n}\nglobal_references\n(\nfalse\n);\necho\n\"var2 is set to '\n$var2\n'\\n\"\n;\n// var2 is set to ''\nglobal_references\n(\ntrue\n);\necho\n\"var2 is set to '\n$var2\n'\\n\"\n;\n// var2 is set to 'Example variable'\n?>"
  },
  {
    "input": "Example #3 References and foreach statement",
    "output": "<?php\n$ref\n=\n0\n;\n$row\n=&\n$ref\n;\nforeach (array(\n1\n,\n2\n,\n3\n) as\n$row\n) {\n\n// Do something\n}\necho\n$ref\n;\n// 3 - last element of the iterated array\n?>"
  },
  {
    "input": "Example #1 $GLOBALS example",
    "output": "<?php\nfunction\ntest\n()\n{\n\n$foo\n=\n\"local variable\"\n;\n    echo\n'$foo in global scope: '\n.\n$GLOBALS\n[\n\"foo\"\n] .\n\"\\n\"\n;\n    echo\n'$foo in current scope: '\n.\n$foo\n.\n\"\\n\"\n;\n}\n$foo\n=\n\"Example content\"\n;\ntest\n();\n?>"
  },
  {
    "input": "Example #2 writing entire $GLOBALS will result in error.",
    "output": "<?php\n// Generates compile-time error:\n$GLOBALS\n= [];\n$GLOBALS\n+= [];\n$GLOBALS\n=&\n$x\n;\n$x\n=&\n$GLOBALS\n;\nunset(\n$GLOBALS\n);\narray_pop\n(\n$GLOBALS\n);\n// ...and any other write/read-write operation on $GLOBALS\n?>"
  },
  {
    "input": "Example #1 $_SERVER example",
    "output": "<?php\necho\n$_SERVER\n[\n'SERVER_NAME'\n];\n?>"
  },
  {
    "input": "Example #1 $_GET example",
    "output": "<?php\necho\n'Hello '\n.\nhtmlspecialchars\n(\n$_GET\n[\n\"name\"\n]) .\n'!'\n;\n?>"
  },
  {
    "input": "Example #1 $_POST example",
    "output": "<?php\necho\n'Hello '\n.\nhtmlspecialchars\n(\n$_POST\n[\n\"name\"\n]) .\n'!'\n;\n?>"
  },
  {
    "input": "Example #1 $_ENV example",
    "output": "<?php\necho\n'My username is '\n.\n$_ENV\n[\n\"USER\"\n] .\n'!'\n;\n?>"
  },
  {
    "input": "Example #1 $_COOKIE example",
    "output": "<?php\necho\n'Hello '\n.\nhtmlspecialchars\n(\n$_COOKIE\n[\n\"name\"\n]) .\n'!'\n;\n?>"
  },
  {
    "input": "Example #1 $php_errormsg example",
    "output": "<?php\n@\nstrpos\n();\necho\n$php_errormsg\n;\n?>"
  },
  {
    "input": "Example #1 $http_response_header example",
    "output": "<?php\nfunction\nget_contents\n() {\n\nfile_get_contents\n(\n\"http://example.com\"\n);\n\nvar_dump\n(\n$http_response_header\n);\n// variable is populated in the local scope\n}\nget_contents\n();\nvar_dump\n(\n$http_response_header\n);\n// a call to get_contents() does not populate the variable outside the function scope\n?>"
  },
  {
    "input": "Example #1 $argc example",
    "output": "<?php\nvar_dump\n(\n$argc\n);\n?>"
  },
  {
    "input": "Example #1 $argv example",
    "output": "<?php\nvar_dump\n(\n$argv\n);\n?>"
  },
  {
    "input": "Example #1 Exception::getMessage() example",
    "output": "<?php\ntry {\n    throw new\nException\n(\n\"Some error message\"\n);\n} catch(\nException $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n}\n?>"
  },
  {
    "input": "Example #1 Exception::getCode() example",
    "output": "<?php\ntry {\n    throw new\nException\n(\n\"Some error message\"\n,\n30\n);\n} catch(\nException $e\n) {\n    echo\n\"The exception code is: \"\n.\n$e\n->\ngetCode\n();\n}\n?>"
  },
  {
    "input": "Example #1 Exception::getFile() example",
    "output": "<?php\ntry {\n    throw new\nException\n;\n} catch(\nException $e\n) {\n    echo\n$e\n->\ngetFile\n();\n}\n?>"
  },
  {
    "input": "Example #1 Exception::getLine() example",
    "output": "<?php\ntry {\n    throw new\nException\n(\n\"Some error message\"\n);\n} catch(\nException $e\n) {\n    echo\n\"The exception was created on line: \"\n.\n$e\n->\ngetLine\n();\n}\n?>"
  },
  {
    "input": "Example #1 Exception::getTrace() example",
    "output": "<?php\nfunction\ntest\n() {\n throw new\nException\n;\n}\ntry {\n\ntest\n();\n} catch(\nException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetTrace\n());\n}\n?>"
  },
  {
    "input": "Example #1 Exception::getTraceAsString() example",
    "output": "<?php\nfunction\ntest\n() {\n    throw new\nException\n;\n}\ntry {\n\ntest\n();\n} catch(\nException $e\n) {\n    echo\n$e\n->\ngetTraceAsString\n();\n}\n?>"
  },
  {
    "input": "Example #1 Exception::__toString() example",
    "output": "<?php\ntry {\n    throw new\nException\n(\n\"Some error message\"\n);\n} catch(\nException $e\n) {\n    echo\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 Use set_error_handler() to change error messages into ErrorException",
    "output": "<?php\nset_error_handler\n(function (\nint $errno\n,\nstring $errstr\n,\nstring $errfile\n,\nint $errline\n) {\n    if (!(\nerror_reporting\n() &\n$errno\n)) {\n\n// This error code is not included in error_reporting.\n\nreturn;\n    }\n    if (\n$errno\n===\nE_DEPRECATED\n||\n$errno\n===\nE_USER_DEPRECATED\n) {\n\n// Do not throw an Exception for deprecation warnings as new or unexpected\n        // deprecations would break the application.\n\nreturn;\n    }\n    throw new\n\\ErrorException\n(\n$errstr\n,\n0\n,\n$errno\n,\n$errfile\n,\n$errline\n);\n});\n// Unserializing broken data triggers a warning which will be turned into an\n// ErrorException by the error handler.\nunserialize\n(\n'broken data'\n);\n?>"
  },
  {
    "input": "Example #1 ErrorException::getSeverity() example",
    "output": "<?php\ntry {\n    throw new\nErrorException\n(\n\"Exception message\"\n,\n0\n,\nE_USER_ERROR\n);\n} catch(\nErrorException $e\n) {\n    echo\n\"This exception severity is: \"\n.\n$e\n->\ngetSeverity\n();\n\nvar_dump\n(\n$e\n->\ngetSeverity\n() ===\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #1 Error::getMessage() example",
    "output": "<?php\ntry {\n    throw new\nError\n(\n\"Some error message\"\n);\n} catch(\nError $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n}\n?>"
  },
  {
    "input": "Example #1 Error::getCode() example",
    "output": "<?php\ntry {\n    throw new\nError\n(\n\"Some error message\"\n,\n30\n);\n} catch(\nError $e\n) {\n    echo\n\"The Error code is: \"\n.\n$e\n->\ngetCode\n();\n}\n?>"
  },
  {
    "input": "Example #1 Error::getFile() example",
    "output": "<?php\ntry {\n    throw new\nError\n;\n} catch(\nError $e\n) {\n    echo\n$e\n->\ngetFile\n();\n}\n?>"
  },
  {
    "input": "Example #1 Error::getLine() example",
    "output": "<?php\ntry {\n    throw new\nError\n(\n\"Some error message\"\n);\n} catch(\nError $e\n) {\n    echo\n\"The error was created on line: \"\n.\n$e\n->\ngetLine\n();\n}\n?>"
  },
  {
    "input": "Example #1 Error::getTrace() example",
    "output": "<?php\nfunction\ntest\n() {\n throw new\nError\n;\n}\ntry {\n\ntest\n();\n} catch(\nError $e\n) {\n\nvar_dump\n(\n$e\n->\ngetTrace\n());\n}\n?>"
  },
  {
    "input": "Example #1 Error::getTraceAsString() example",
    "output": "<?php\nfunction\ntest\n() {\n    throw new\nError\n;\n}\ntry {\n\ntest\n();\n} catch(\nError $e\n) {\n    echo\n$e\n->\ngetTraceAsString\n();\n}\n?>"
  },
  {
    "input": "Example #1 Error::__toString() example",
    "output": "<?php\ntry {\n    throw new\nError\n(\n\"Some error message\"\n);\n} catch(\nError $e\n) {\n    echo\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nmyData\nimplements\nIteratorAggregate\n{\n    public\n$property1\n=\n\"Public property one\"\n;\n    public\n$property2\n=\n\"Public property two\"\n;\n    public\n$property3\n=\n\"Public property three\"\n;\n    public\n$property4\n=\n\"\"\n;\n    public function\n__construct\n()\n    {\n\n$this\n->\nproperty4\n=\n\"last property\"\n;\n    }\n    public function\ngetIterator\n():\nTraversable\n\n{\n        return new\nArrayIterator\n(\n$this\n);\n    }\n}\n$obj\n= new\nmyData\n();\nforeach (\n$obj\nas\n$key\n=>\n$value\n) {\n\nvar_dump\n(\n$key\n,\n$value\n);\n    echo\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Countable::count() example",
    "output": "<?php\nclass\nCounter\nimplements\nCountable\n{\n    private\n$count\n=\n0\n;\n    public function\ncount\n():\nint\n\n{\n        return ++\n$this\n->\ncount\n;\n    }\n}\n$counter\n= new\nCounter\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n10\n; ++\n$i\n) {\n    echo\n\"I have been count()ed \"\n.\ncount\n(\n$counter\n) .\n\" times\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nObj\nimplements\nArrayAccess\n{\n    public\n$container\n= [\n\n\"one\"\n=>\n1\n,\n\n\"two\"\n=>\n2\n,\n\n\"three\"\n=>\n3\n,\n    ];\n    public function\noffsetSet\n(\n$offset\n,\n$value\n):\nvoid\n{\n        if (\nis_null\n(\n$offset\n)) {\n\n$this\n->\ncontainer\n[] =\n$value\n;\n        } else {\n\n$this\n->\ncontainer\n[\n$offset\n] =\n$value\n;\n        }\n    }\n    public function\noffsetExists\n(\n$offset\n):\nbool\n{\n        return isset(\n$this\n->\ncontainer\n[\n$offset\n]);\n    }\n    public function\noffsetUnset\n(\n$offset\n):\nvoid\n{\n        unset(\n$this\n->\ncontainer\n[\n$offset\n]);\n    }\n    public function\noffsetGet\n(\n$offset\n):\nmixed\n{\n        return isset(\n$this\n->\ncontainer\n[\n$offset\n]) ?\n$this\n->\ncontainer\n[\n$offset\n] :\nnull\n;\n    }\n}\n$obj\n= new\nObj\n;\nvar_dump\n(isset(\n$obj\n[\n\"two\"\n]));\nvar_dump\n(\n$obj\n[\n\"two\"\n]);\nunset(\n$obj\n[\n\"two\"\n]);\nvar_dump\n(isset(\n$obj\n[\n\"two\"\n]));\n$obj\n[\n\"two\"\n] =\n\"A value\"\n;\nvar_dump\n(\n$obj\n[\n\"two\"\n]);\n$obj\n[] =\n'Append 1'\n;\n$obj\n[] =\n'Append 2'\n;\n$obj\n[] =\n'Append 3'\n;\nprint_r\n(\n$obj\n);\n?>"
  },
  {
    "input": "Example #1 ArrayAccess::offsetExists() example",
    "output": "<?php\nclass\nobj\nimplements\nArrayAccess\n{\n    public function\noffsetSet\n(\n$offset\n,\n$value\n):\nvoid\n{\n\nvar_dump\n(\n__METHOD__\n);\n    }\n    public function\noffsetExists\n(\n$var\n):\nbool\n{\n\nvar_dump\n(\n__METHOD__\n);\n        if (\n$var\n==\n\"foobar\"\n) {\n            return\ntrue\n;\n        }\n        return\nfalse\n;\n    }\n    public function\noffsetUnset\n(\n$var\n):\nvoid\n{\n\nvar_dump\n(\n__METHOD__\n);\n    }\n    #[\n\\ReturnTypeWillChange\n]\n    public function\noffsetGet\n(\n$var\n) {\n\nvar_dump\n(\n__METHOD__\n);\n        return\n\"value\"\n;\n    }\n}\n$obj\n= new\nobj\n;\necho\n\"Runs obj::offsetExists()\\n\"\n;\nvar_dump\n(isset(\n$obj\n[\n\"foobar\"\n]));\necho\n\"\\nRuns obj::offsetExists() and obj::offsetGet()\\n\"\n;\nvar_dump\n(empty(\n$obj\n[\n\"foobar\"\n]));\necho\n\"\\nRuns obj::offsetExists(), *not* obj:offsetGet() as there is nothing to get\\n\"\n;\nvar_dump\n(empty(\n$obj\n[\n\"foobaz\"\n]));\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nobj\nimplements\nSerializable\n{\n    private\n$data\n;\n    public function\n__construct\n() {\n\n$this\n->\ndata\n=\n\"My private data\"\n;\n    }\n    public function\nserialize\n() {\n        return\nserialize\n(\n$this\n->\ndata\n);\n    }\n    public function\nunserialize\n(\n$data\n) {\n\n$this\n->\ndata\n=\nunserialize\n(\n$data\n);\n    }\n    public function\ngetData\n() {\n        return\n$this\n->\ndata\n;\n    }\n}\n$obj\n= new\nobj\n;\n$ser\n=\nserialize\n(\n$obj\n);\nvar_dump\n(\n$ser\n);\n$newobj\n=\nunserialize\n(\n$ser\n);\nvar_dump\n(\n$newobj\n->\ngetData\n());\n?>"
  },
  {
    "input": "Example #1 Closure::bind() example",
    "output": "<?php\nclass\nA\n{\n    private static\n$sfoo\n=\n1\n;\n    private\n$ifoo\n=\n2\n;\n}\n$cl1\n= static function() {\n    return\nA\n::\n$sfoo\n;\n};\n$cl2\n= function() {\n    return\n$this\n->\nifoo\n;\n};\n$bcl1\n=\nClosure\n::\nbind\n(\n$cl1\n,\nnull\n,\n'A'\n);\n$bcl2\n=\nClosure\n::\nbind\n(\n$cl2\n, new\nA\n(),\n'A'\n);\necho\n$bcl1\n(),\n\"\\n\"\n;\necho\n$bcl2\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Closure::bindTo() example",
    "output": "<?php\nclass\nA\n{\n    private\n$val\n;\n    public function\n__construct\n(\n$val\n)\n    {\n\n$this\n->\nval\n=\n$val\n;\n    }\n    public function\ngetClosure\n()\n    {\n\n// Returns closure bound to this object and scope\n\nreturn function() {\n            return\n$this\n->\nval\n;\n        };\n    }\n}\n$ob1\n= new\nA\n(\n1\n);\n$ob2\n= new\nA\n(\n2\n);\n$cl\n=\n$ob1\n->\ngetClosure\n();\necho\n$cl\n(),\n\"\\n\"\n;\n$cl\n=\n$cl\n->\nbindTo\n(\n$ob2\n);\necho\n$cl\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Closure::call() example",
    "output": "<?php\nclass\nValue\n{\n    protected\n$value\n;\n    public function\n__construct\n(\n$value\n) {\n\n$this\n->\nvalue\n=\n$value\n;\n    }\n    public function\ngetValue\n() {\n        return\n$this\n->\nvalue\n;\n    }\n}\n$three\n= new\nValue\n(\n3\n);\n$four\n= new\nValue\n(\n4\n);\n$closure\n= function (\n$delta\n) {\nvar_dump\n(\n$this\n->\ngetValue\n() +\n$delta\n); };\n$closure\n->\ncall\n(\n$three\n,\n4\n);\n$closure\n->\ncall\n(\n$four\n,\n4\n);\n?>"
  },
  {
    "input": "Example #1 Created as a result of typecasting to object",
    "output": "<?php\n$obj\n= (object) array(\n'foo'\n=>\n'bar'\n);\nvar_dump\n(\n$obj\n);"
  },
  {
    "input": "Example #2 Created as a result of json_decode()",
    "output": "<?php\n$json\n=\n'{\"foo\":\"bar\"}'\n;\nvar_dump\n(\njson_decode\n(\n$json\n));"
  },
  {
    "input": "Example #3 Declaring dynamic properties",
    "output": "<?php\n$obj\n= new\nstdClass\n();\n$obj\n->\nfoo\n=\n42\n;\n$obj\n->{\n1\n} =\n42\n;\nvar_dump\n(\n$obj\n);"
  },
  {
    "input": "Example #1 Generator::getReturn() example",
    "output": "<?php\n$gen\n= (function() {\n    yield\n1\n;\n    yield\n2\n;\n    return\n3\n;\n})();\nforeach (\n$gen\nas\n$val\n) {\n    echo\n$val\n,\nPHP_EOL\n;\n}\necho\n$gen\n->\ngetReturn\n(),\nPHP_EOL\n;"
  },
  {
    "input": "Example #1 Generator::key() example",
    "output": "<?php\nfunction\nGen\n()\n{\n    yield\n'key'\n=>\n'value'\n;\n}\n$gen\n=\nGen\n();\necho\n\"\n{\n$gen\n->\nkey\n()}\n =>\n{\n$gen\n->\ncurrent\n()}\n\"\n;"
  },
  {
    "input": "Example #1 Using Generator::send() to inject values",
    "output": "<?php\nfunction\nprinter\n() {\n    echo\n\"I'm printer!\"\n.\nPHP_EOL\n;\n    while (\ntrue\n) {\n\n$string\n= yield;\n        echo\n$string\n.\nPHP_EOL\n;\n    }\n}\n$printer\n=\nprinter\n();\n$printer\n->\nsend\n(\n'Hello world!'\n);\n$printer\n->\nsend\n(\n'Bye world!'\n);\n?>"
  },
  {
    "input": "Example #1 Throwing an exception into a generator",
    "output": "<?php\nfunction\ngen\n() {\n    echo\n\"Foo\\n\"\n;\n    try {\n        yield;\n    } catch (\nException $e\n) {\n        echo\n\"Exception:\n{\n$e\n->\ngetMessage\n()}\n\\n\"\n;\n    }\n    echo\n\"Bar\\n\"\n;\n}\n\n$gen\n=\ngen\n();\n$gen\n->\nrewind\n();\n$gen\n->\nthrow\n(new\nException\n(\n'Test'\n));\n?>"
  },
  {
    "input": "Example #1 Basic WeakReference Usage",
    "output": "<?php\n$obj\n= new\nstdClass\n();\n$weakref\n=\nWeakReference\n::\ncreate\n(\n$obj\n);\nvar_dump\n(\n$weakref\n->\nget\n());\nunset(\n$obj\n);\nvar_dump\n(\n$weakref\n->\nget\n());\n?>"
  },
  {
    "input": "Example #1 Weakmap usage example",
    "output": "<?php\n$wm\n= new\nWeakMap\n();\n$o\n= new\nstdClass\n;\nclass\nA\n{\n    public function\n__destruct\n() {\n        echo\n\"Dead!\\n\"\n;\n    }\n}\n$wm\n[\n$o\n] = new\nA\n;\nvar_dump\n(\ncount\n(\n$wm\n));\necho\n\"Unsetting...\\n\"\n;\nunset(\n$o\n);\necho\n\"Done\\n\"\n;\nvar_dump\n(\ncount\n(\n$wm\n));"
  },
  {
    "input": "Example #1 Passing a SensitiveParameterValue object to var_dump()",
    "output": "<?php\n$s\n= new\n\\SensitiveParameterValue\n(\n'secret'\n);\nvar_dump\n(\n$s\n);\n?>"
  },
  {
    "input": "Example #1 SensitiveParameterValue::getValue() example",
    "output": "<?php\n$s\n= new\n\\SensitiveParameterValue\n(\n'secret'\n);\necho\n\"The protected value is: \"\n,\n$s\n->\ngetValue\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Created by unserialize()",
    "output": "<?php\nclass\nMyClass\n{\n    public\nstring $property\n=\n\"myValue\"\n;\n}\n$myObject\n= new\nMyClass\n;\n$foo\n=\nserialize\n(\n$myObject\n);\n// unserializes all objects into __PHP_Incomplete_Class objects\n$disallowed\n=\nunserialize\n(\n$foo\n, [\n\"allowed_classes\"\n=>\nfalse\n]);\nvar_dump\n(\n$disallowed\n);\n// unserializes all objects into __PHP_Incomplete_Class objects except those of MyClass2 and MyClass3\n$disallowed2\n=\nunserialize\n(\n$foo\n, [\n\"allowed_classes\"\n=> [\n\"MyClass2\"\n,\n\"MyClass3\"\n]]);\nvar_dump\n(\n$disallowed2\n);\n// unserializes undefined class into __PHP_Incomplete_Class object\n$undefinedClass\n=\nunserialize\n(\n'O:16:\"MyUndefinedClass\":0:{}'\n);\nvar_dump\n(\n$undefinedClass\n);"
  },
  {
    "input": "Example #1 Basic bindto usage example",
    "output": "<?php\n// connect to the internet using the '192.168.0.100' IP\n$opts\n= array(\n\n'socket'\n=> array(\n\n'bindto'\n=>\n'192.168.0.100:0'\n,\n    ),\n);\n// connect to the internet using the '192.168.0.100' IP and port '7000'\n$opts\n= array(\n\n'socket'\n=> array(\n\n'bindto'\n=>\n'192.168.0.100:7000'\n,\n    ),\n);\n// connect to the internet using the '2001:db8::1' IPv6 address\n// and port '7000'\n$opts\n= array(\n\n'socket'\n=> array(\n\n'bindto'\n=>\n'[2001:db8::1]:7000'\n,\n    ),\n);\n// connect to the internet using port '7000'\n$opts\n= array(\n\n'socket'\n=> array(\n\n'bindto'\n=>\n'0:7000'\n,\n    ),\n);\n// create the context...\n$context\n=\nstream_context_create\n(\n$opts\n);\n// ...and use it to fetch the data\necho\nfile_get_contents\n(\n'http://www.example.com'\n,\nfalse\n,\n$context\n);\n?>"
  },
  {
    "input": "Example #1 Fetch a page and send POST data",
    "output": "<?php\n$postdata\n=\nhttp_build_query\n(\n    array(\n\n'var1'\n=>\n'some content'\n,\n\n'var2'\n=>\n'doh'\n\n)\n);\n$opts\n= array(\n'http'\n=>\n    array(\n\n'method'\n=>\n'POST'\n,\n\n'header'\n=>\n'Content-type: application/x-www-form-urlencoded'\n,\n\n'content'\n=>\n$postdata\n\n)\n);\n$context\n=\nstream_context_create\n(\n$opts\n);\n$result\n=\nfile_get_contents\n(\n'http://example.com/submit.php'\n,\nfalse\n,\n$context\n);\n?>"
  },
  {
    "input": "Example #2 Ignore redirects but fetch headers and content",
    "output": "<?php\n$url\n=\n\"http://www.example.org/header.php\"\n;\n$opts\n= array(\n'http'\n=>\n    array(\n\n'method'\n=>\n'GET'\n,\n\n'max_redirects'\n=>\n'0'\n,\n\n'ignore_errors'\n=>\n'1'\n\n)\n);\n$context\n=\nstream_context_create\n(\n$opts\n);\n$stream\n=\nfopen\n(\n$url\n,\n'r'\n,\nfalse\n,\n$context\n);\n// header information as well as meta data\n// about the stream\nvar_dump\n(\nstream_get_meta_data\n(\n$stream\n));\n// actual data at $url\nvar_dump\n(\nstream_get_contents\n(\n$stream\n));\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 Basic password usage example",
    "output": "<?php\n// Read encrypted archive\n$opts\n= array(\n\n'zip'\n=> array(\n\n'password'\n=>\n'secret'\n,\n    ),\n);\n// create the context...\n$context\n=\nstream_context_create\n(\n$opts\n);\n// ...and use it to fetch the data\necho\nfile_get_contents\n(\n'zip://test.zip#test.txt'\n,\nfalse\n,\n$context\n);\n?>"
  },
  {
    "input": "Example #1 Detecting which URL we ended up on after redirects",
    "output": "<?php\n$url\n=\n'http://www.example.com/redirecting_page.php'\n;\n$fp\n=\nfopen\n(\n$url\n,\n'r'\n);\n$meta_data\n=\nstream_get_meta_data\n(\n$fp\n);\nforeach (\n$meta_data\n[\n'wrapper_data'\n] as\n$response\n) {\n\n/* Were we redirected? */\n\nif (\nstrtolower\n(\nsubstr\n(\n$response\n,\n0\n,\n10\n)) ==\n'location: '\n) {\n\n/* update $url with where we were redirected to */\n\n$url\n=\nsubstr\n(\n$response\n,\n10\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Print data:// contents",
    "output": "<?php\n// prints \"I love PHP\"\necho\nfile_get_contents\n(\n'data://text/plain;base64,SSBsb3ZlIFBIUAo='\n);\n?>"
  },
  {
    "input": "Example #2 Fetch the media type",
    "output": "<?php\n$fp\n=\nfopen\n(\n'data://text/plain;base64,'\n,\n'r'\n);\n$meta\n=\nstream_get_meta_data\n(\n$fp\n);\n// prints \"text/plain\"\necho\n$meta\n[\n'mediatype'\n];\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n// Loop over all *.php files in ext/spl/examples/ directory\n// and print the filename and its size\n$it\n= new\nDirectoryIterator\n(\n\"glob://ext/spl/examples/*.php\"\n);\nforeach(\n$it\nas\n$f\n) {\n\nprintf\n(\n\"%s: %.1FK\\n\"\n,\n$f\n->\ngetFilename\n(),\n$f\n->\ngetSize\n()/\n1024\n);\n}\n?>"
  },
  {
    "input": "Example #1 Opening a stream from an active connection",
    "output": "<?php\n$session\n=\nssh2_connect\n(\n'example.com'\n,\n22\n);\nssh2_auth_pubkey_file\n(\n$session\n,\n'username'\n,\n'/home/username/.ssh/id_rsa.pub'\n,\n\n'/home/username/.ssh/id_rsa'\n,\n'secret'\n);\n$stream\n=\nfopen\n(\n\"ssh2.tunnel://\n$session\n/remote.example.com:1234\"\n,\n'r'\n);\n?>"
  },
  {
    "input": "Example #1 Traversing a RAR archive",
    "output": "<?php\nclass\nMyRecDirIt\nextends\nRecursiveDirectoryIterator\n{\n    function\ncurrent\n() {\n        return\nrawurldecode\n(\n$this\n->\ngetSubPathName\n()) .\n            (\nis_dir\n(\nparent\n::\ncurrent\n())?\n\" [DIR]\"\n:\n\"\"\n);\n    }\n}\n$f\n=\n\"rar://\"\n.\nrawurlencode\n(\ndirname\n(\n__FILE__\n)) .\n\nDIRECTORY_SEPARATOR\n.\n'dirs_and_extra_headers.rar#'\n;\n$it\n= new\nRecursiveTreeIterator\n(new\nMyRecDirIt\n(\n$f\n));\nforeach (\n$it\nas\n$s\n) {\n    echo\n$s\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Opening an encrypted file (header encryption)",
    "output": "<?php\n$stream\n=\nfopen\n(\n\"rar://\"\n.\n\nrawurlencode\n(\ndirname\n(\n__FILE__\n)) .\nDIRECTORY_SEPARATOR\n.\n\n'encrypted_headers.rar'\n.\n'#encfile1.txt'\n,\n\"r\"\n,\nfalse\n,\n\nstream_context_create\n(\n        array(\n\n'rar'\n=>\n                array(\n\n'open_password'\n=>\n'samplepassword'\n\n)\n            )\n        )\n    );\nvar_dump\n(\nstream_get_contents\n(\n$stream\n));\n/* creation and last access date is opt-in in WinRAR, hence most\n * files don't have them */\nvar_dump\n(\nfstat\n(\n$stream\n));\n?>"
  },
  {
    "input": "Example #1 Poor variable checking leads to....",
    "output": "<?php\n// Remove a file from the user's home directory\n$username\n=\n$_POST\n[\n'user_submitted_name'\n];\n$userfile\n=\n$_POST\n[\n'user_submitted_filename'\n];\n$homedir\n=\n\"/home/\n$username\n\"\n;\nunlink\n(\n\"\n$homedir\n/\n$userfile\n\"\n);\necho\n\"The file has been deleted!\"\n;\n?>"
  },
  {
    "input": "Example #2 ... A filesystem attack",
    "output": "<?php\n// Removes a file from anywhere on the hard drive that\n// the PHP user has access to. If PHP has root access:\n$username\n=\n$_POST\n[\n'user_submitted_name'\n];\n// \"../etc\"\n$userfile\n=\n$_POST\n[\n'user_submitted_filename'\n];\n// \"passwd\"\n$homedir\n=\n\"/home/\n$username\n\"\n;\n// \"/home/../etc\"\nunlink\n(\n\"\n$homedir\n/\n$userfile\n\"\n);\n// \"/home/../etc/passwd\"\necho\n\"The file has been deleted!\"\n;\n?>"
  },
  {
    "input": "Example #3 More secure file name checking",
    "output": "<?php\n// Removes a file from the hard drive that\n// the PHP user has access to.\n$username\n=\n$_SERVER\n[\n'REMOTE_USER'\n];\n// using an authentication mechanism\n$userfile\n=\nbasename\n(\n$_POST\n[\n'user_submitted_filename'\n]);\n$homedir\n=\n\"/home/\n$username\n\"\n;\n$filepath\n=\n\"\n$homedir\n/\n$userfile\n\"\n;\nif (\nfile_exists\n(\n$filepath\n) &&\nunlink\n(\n$filepath\n)) {\n\n$logstring\n=\n\"Deleted\n$filepath\n\\n\"\n;\n} else {\n\n$logstring\n=\n\"Failed to delete\n$filepath\n\\n\"\n;\n}\n$fp\n=\nfopen\n(\n\"/home/logging/filedelete.log\"\n,\n\"a\"\n);\nfwrite\n(\n$fp\n,\n$logstring\n);\nfclose\n(\n$fp\n);\necho\nhtmlentities\n(\n$logstring\n,\nENT_QUOTES\n);\n?>"
  },
  {
    "input": "Example #4 More secure file name checking",
    "output": "<?php\n$username\n=\n$_SERVER\n[\n'REMOTE_USER'\n];\n// using an authentication mechanisim\n$userfile\n=\n$_POST\n[\n'user_submitted_filename'\n];\n$homedir\n=\n\"/home/\n$username\n\"\n;\n$filepath\n=\n\"\n$homedir\n/\n$userfile\n\"\n;\nif (!\nctype_alnum\n(\n$username\n) || !\npreg_match\n(\n'/^(?:[a-z0-9_-]|\\.(?!\\.))+$/iD'\n,\n$userfile\n)) {\n    die(\n\"Bad username/filename\"\n);\n}\n// etc.\n?>"
  },
  {
    "input": "Example #1 Script vulnerable to null bytes",
    "output": "<?php\n$file\n=\n$_GET\n[\n'file'\n];\n// \"../../etc/passwd\\0\"\nif (\nfile_exists\n(\n'/home/wwwrun/'\n.\n$file\n.\n'.php'\n)) {\n\n// File_exists will return true as the file /home/wwwrun/../../etc/passwd exists\n\ninclude\n'/home/wwwrun/'\n.\n$file\n.\n'.php'\n;\n\n// The file /etc/passwd will be included\n}\n?>"
  },
  {
    "input": "Example #2 Correctly validating the input",
    "output": "<?php\n$file\n=\n$_GET\n[\n'file'\n];\n// Whitelisting possible values\nswitch (\n$file\n) {\n    case\n'main'\n:\n    case\n'foo'\n:\n    case\n'bar'\n:\n        include\n'/home/wwwrun/include/'\n.\n$file\n.\n'.php'\n;\n        break;\n    default:\n        include\n'/home/wwwrun/include/main.php'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Hashing password field",
    "output": "<?php\n// storing password hash\n$query\n=\nsprintf\n(\n\"INSERT INTO users(name,pwd) VALUES('%s','%s');\"\n,\n\npg_escape_string\n(\n$username\n),\n\npassword_hash\n(\n$password\n,\nPASSWORD_DEFAULT\n));\n$result\n=\npg_query\n(\n$connection\n,\n$query\n);\n// querying if user submitted the right password\n$query\n=\nsprintf\n(\n\"SELECT pwd FROM users WHERE name='%s';\"\n,\n\npg_escape_string\n(\n$username\n));\n$row\n=\npg_fetch_assoc\n(\npg_query\n(\n$connection\n,\n$query\n));\nif (\n$row\n&&\npassword_verify\n(\n$password\n,\n$row\n[\n'pwd'\n])) {\n    echo\n'Welcome, '\n.\nhtmlspecialchars\n(\n$username\n) .\n'!'\n;\n} else {\n    echo\n'Authentication failed for '\n.\nhtmlspecialchars\n(\n$username\n) .\n'.'\n;\n}\n?>"
  },
  {
    "input": "Example #2 \n       Listing out articles ... and some passwords (any database server)",
    "output": "<?php\n$query\n=\n\"SELECT id, name, inserted, size FROM products\n           WHERE size = '\n$size\n'\"\n;\n$result\n=\nodbc_exec\n(\n$conn\n,\n$query\n);\n?>"
  },
  {
    "input": "Example #3 \n      From resetting a password ... to gaining more privileges (any database server)",
    "output": "<?php\n$query\n=\n\"UPDATE usertable SET pwd='\n$pwd\n' WHERE uid='\n$uid\n';\"\n;\n?>"
  },
  {
    "input": "Example #5 Avoiding SQL injection by using PDO prepared statements",
    "output": "<?php\n// The dynamic SQL part is validated against expected values\n$sortingOrder\n=\n$_GET\n[\n'sortingOrder'\n] ===\n'DESC'\n?\n'DESC'\n:\n'ASC'\n;\n$productId\n=\n$_GET\n[\n'productId'\n];\n// The SQL is prepared with a placeholder\n$stmt\n=\n$pdo\n->\nprepare\n(\n\"SELECT * FROM products WHERE id LIKE ? ORDER BY price\n{\n$sortingOrder\n}\n\"\n);\n// The value is provided with LIKE wildcards\n$stmt\n->\nexecute\n([\n\"%\n{\n$productId\n}\n%\"\n]);\n?>"
  },
  {
    "input": "Example #3 Finding dangerous variables with E_ALL",
    "output": "<?php\nif (\n$username\n) {\n// Not initialized or checked before usage\n\n$good_login\n=\n1\n;\n}\nif (\n$good_login\n==\n1\n) {\n// If above test fails, not initialized or checked before usage\n\nreadfile\n(\n\"/highly/sensitive/data/index.html\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 Dangerous Variable Usage",
    "output": "<?php\n// remove a file from the user's home directory... or maybe\n// somebody else's?\nunlink\n(\n$evil_var\n);\n// Write logging of their access... or maybe an /etc/passwd entry?\nfwrite\n(\n$fp\n,\n$evil_var\n);\n// Execute something trivial.. or rm -rf *?\nsystem\n(\n$evil_var\n);\nexec\n(\n$evil_var\n);\n?>"
  },
  {
    "input": "Example #1 Basic HTTP Authentication example",
    "output": "<?php\nif (!isset(\n$_SERVER\n[\n'PHP_AUTH_USER'\n])) {\n\nheader\n(\n'WWW-Authenticate: Basic realm=\"My Realm\"'\n);\n\nheader\n(\n'HTTP/1.0 401 Unauthorized'\n);\n    echo\n'Text to send if user hits Cancel button'\n;\n    exit;\n} else {\n    echo\n\"<p>Hello\n{\n$_SERVER\n[\n'PHP_AUTH_USER'\n]}\n.</p>\"\n;\n    echo\n\"<p>You entered\n{\n$_SERVER\n[\n'PHP_AUTH_PW'\n]}\n as your password.</p>\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 HTTP Authentication example forcing a new name/password",
    "output": "<?php\nfunction\nauthenticate\n() {\n\nheader\n(\n'WWW-Authenticate: Basic realm=\"Test Authentication System\"'\n);\n\nheader\n(\n'HTTP/1.0 401 Unauthorized'\n);\n    echo\n\"You must enter a valid login ID and password to access this resource\\n\"\n;\n    exit;\n}\n\nif (!isset(\n$_SERVER\n[\n'PHP_AUTH_USER'\n]) ||\n    (\n$_POST\n[\n'SeenBefore'\n] ==\n1\n&&\n$_POST\n[\n'OldAuth'\n] ==\n$_SERVER\n[\n'PHP_AUTH_USER'\n])) {\n\nauthenticate\n();\n} else {\n    echo\n\"<p>Welcome: \"\n.\nhtmlspecialchars\n(\n$_SERVER\n[\n'PHP_AUTH_USER'\n]) .\n\"<br />\"\n;\n    echo\n\"Old: \"\n.\nhtmlspecialchars\n(\n$_REQUEST\n[\n'OldAuth'\n]);\n    echo\n\"<form action='' method='post'>\\n\"\n;\n    echo\n\"<input type='hidden' name='SeenBefore' value='1' />\\n\"\n;\n    echo\n\"<input type='hidden' name='OldAuth' value=\\\"\"\n.\nhtmlspecialchars\n(\n$_SERVER\n[\n'PHP_AUTH_USER'\n]) .\n\"\\\" />\\n\"\n;\n    echo\n\"<input type='submit' value='Re Authenticate' />\\n\"\n;\n    echo\n\"</form></p>\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Saving HTTP PUT files",
    "output": "<?php\n/* PUT data comes in on the stdin stream */\n$putdata\n=\nfopen\n(\n\"php://input\"\n,\n\"r\"\n);\n/* Open a file for writing */\n$fp\n=\nfopen\n(\n\"myputfile.ext\"\n,\n\"w\"\n);\n/* Read the data 1 KB at a time\n   and write to the file */\nwhile (\n$data\n=\nfread\n(\n$putdata\n,\n1024\n))\n\nfwrite\n(\n$fp\n,\n$data\n);\n/* Close the streams */\nfclose\n(\n$fp\n);\nfclose\n(\n$putdata\n);\n?>"
  },
  {
    "input": "Example #1 Getting the title of a remote page",
    "output": "<?php\n$file\n=\nfopen\n(\n\"http://www.example.com/\"\n,\n\"r\"\n);\nif (!\n$file\n) {\n    echo\n\"<p>Unable to open remote file.\\n\"\n;\n    exit;\n}\nwhile (!\nfeof\n(\n$file\n)) {\n\n$line\n=\nfgets\n(\n$file\n,\n1024\n);\n\n/* This only works if the title and its tags are on one line */\n\nif (\npreg_match\n(\n\"@\\<title\\>(.*)\\</title\\>@i\"\n,\n$line\n,\n$out\n)) {\n\n$title\n=\n$out\n[\n1\n];\n        break;\n    }\n}\nfclose\n(\n$file\n);\n?>"
  },
  {
    "input": "Example #2 Storing data on a remote server",
    "output": "<?php\n$file\n=\nfopen\n(\n\"ftp://ftp.example.com/incoming/outputfile\"\n,\n\"w\"\n);\nif (!\n$file\n) {\n    echo\n\"<p>Unable to open remote file for writing.\\n\"\n;\n    exit;\n}\n/* Write the data here. */\nfwrite\n(\n$file\n,\n$_SERVER\n[\n'HTTP_USER_AGENT'\n] .\n\"\\n\"\n);\nfclose\n(\n$file\n);\n?>"
  },
  {
    "input": "Example #1 \n       Example showing the difference to the CGI\nSAPI:",
    "output": "<?php\n// Our simple test application named test.php\necho\ngetcwd\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Execute PHP script as shell script",
    "output": "#!/usr/bin/php\n<?php\nvar_dump\n(\n$argv\n);\n?>"
  },
  {
    "input": "Example #2 Script intended to be run from command line (script.php)",
    "output": "#!/usr/bin/php\n<?php\nif (\n$argc\n!=\n2\n||\nin_array\n(\n$argv\n[\n1\n], array(\n'--help'\n,\n'-help'\n,\n'-h'\n,\n'-?'\n))) {\n?>\nThis is a command line PHP script with one option.\n  Usage:\n\n<?php\necho\n$argv\n[\n0\n];\n?>\n <option>\n  <option> can be some word you would like\n  to print out. With the --help, -help, -h,\n  or -? options, you can get this help.\n<?php\n} else {\n    echo\n$argv\n[\n1\n];\n}\n?>"
  },
  {
    "input": "Example #1 Creating a new zval container",
    "output": "<?php\n$a\n=\n\"new string\"\n;\n?>"
  },
  {
    "input": "Example #2 Displaying zval information",
    "output": "<?php\n$a\n=\n\"new string\"\n;\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #3 Increasing refcount of a zval",
    "output": "<?php\n$a\n=\n\"new string\"\n;\n$b\n=\n$a\n;\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #4 Decreasing zval refcount",
    "output": "<?php\n$a\n=\n\"new string\"\n;\n$c\n=\n$b\n=\n$a\n;\nxdebug_debug_zval\n(\n'a'\n);\n$b\n=\n42\n;\nxdebug_debug_zval\n(\n'a'\n);\nunset(\n$c\n);\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #5 Creating a array zval",
    "output": "<?php\n$a\n= array(\n'meaning'\n=>\n'life'\n,\n'number'\n=>\n42\n);\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #6 Adding already existing element to an array",
    "output": "<?php\n$a\n= array(\n'meaning'\n=>\n'life'\n,\n'number'\n=>\n42\n);\n$a\n[\n'life'\n] =\n$a\n[\n'meaning'\n];\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #7 Removing an element from an array",
    "output": "<?php\n$a\n= array(\n'meaning'\n=>\n'life'\n,\n'number'\n=>\n42\n);\n$a\n[\n'life'\n] =\n$a\n[\n'meaning'\n];\nunset(\n$a\n[\n'meaning'\n],\n$a\n[\n'number'\n] );\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #8 Adding the array as an element of itself",
    "output": "<?php\n$a\n= array(\n'one'\n);\n$a\n[] =&\n$a\n;\nxdebug_debug_zval\n(\n'a'\n);\n?>"
  },
  {
    "input": "Example #1 Memory usage example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$var\n=\n'3.14159265359'\n;\n    public\n$self\n;\n}\n$baseMemory\n=\nmemory_get_usage\n();\nfor (\n$i\n=\n0\n;\n$i\n<=\n100000\n;\n$i\n++ )\n{\n\n$a\n= new\nFoo\n;\n\n$a\n->\nself\n=\n$a\n;\n    if (\n$i\n%\n500\n===\n0\n)\n    {\n        echo\nsprintf\n(\n'%8d: '\n,\n$i\n),\nmemory_get_usage\n() -\n$baseMemory\n,\n\"\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 GC performance influences",
    "output": "<?php\nclass\nFoo\n{\n    public\n$var\n=\n'3.14159265359'\n;\n    public\n$self\n;\n}\nfor (\n$i\n=\n0\n;\n$i\n<=\n1000000\n;\n$i\n++ )\n{\n\n$a\n= new\nFoo\n;\n\n$a\n->\nself\n=\n$a\n;\n}\necho\nmemory_get_peak_usage\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A apcu_add() example",
    "output": "<?php\n$bar\n=\n'BAR'\n;\napcu_add\n(\n'foo'\n,\n$bar\n);\nvar_dump\n(\napcu_fetch\n(\n'foo'\n));\necho\n\"\\n\"\n;\n$bar\n=\n'NEVER GETS SET'\n;\napcu_add\n(\n'foo'\n,\n$bar\n);\nvar_dump\n(\napcu_fetch\n(\n'foo'\n));\necho\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A apcu_cache_info() example",
    "output": "<?php\nprint_r\n(\napcu_cache_info\n());\n?>"
  },
  {
    "input": "Example #1 apcu_cas() example",
    "output": "<?php\napcu_store\n(\n'foobar'\n,\n2\n);\necho\n'$foobar = 2'\n,\nPHP_EOL\n;\necho\n'$foobar == 1 ? 2 : 1 = '\n, (\napcu_cas\n(\n'foobar'\n,\n1\n,\n2\n) ?\n'ok'\n:\n'fail'\n),\nPHP_EOL\n;\necho\n'$foobar == 2 ? 1 : 2 = '\n, (\napcu_cas\n(\n'foobar'\n,\n2\n,\n1\n) ?\n'ok'\n:\n'fail'\n),\nPHP_EOL\n;\necho\n'$foobar = '\n,\napcu_fetch\n(\n'foobar'\n),\nPHP_EOL\n;\necho\n'$f__bar == 1 ? 2 : 1 = '\n, (\napcu_cas\n(\n'f__bar'\n,\n1\n,\n2\n) ?\n'ok'\n:\n'fail'\n),\nPHP_EOL\n;\napcu_store\n(\n'perfection'\n,\n'xyz'\n);\necho\n'$perfection == 2 ? 1 : 2 = '\n, (\napcu_cas\n(\n'perfection'\n,\n2\n,\n1\n) ?\n'ok'\n:\n'epic fail'\n),\nPHP_EOL\n;\necho\n'$foobar = '\n,\napcu_fetch\n(\n'foobar'\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 apcu_dec() example",
    "output": "<?php\necho\n\"Let's do something with success\"\n,\nPHP_EOL\n;\napcu_store\n(\n'anumber'\n,\n42\n);\necho\napcu_fetch\n(\n'anumber'\n),\nPHP_EOL\n;\necho\napcu_dec\n(\n'anumber'\n),\nPHP_EOL\n;\necho\napcu_dec\n(\n'anumber'\n,\n10\n),\nPHP_EOL\n;\necho\napcu_dec\n(\n'anumber'\n,\n10\n,\n$success\n),\nPHP_EOL\n;\nvar_dump\n(\n$success\n);\necho\n\"Now, let's fail\"\n,\nPHP_EOL\n,\nPHP_EOL\n;\napcu_store\n(\n'astring'\n,\n'foo'\n);\n$ret\n=\napcu_dec\n(\n'astring'\n,\n1\n,\n$fail\n);\nvar_dump\n(\n$ret\n);\nvar_dump\n(\n$fail\n);\n?>"
  },
  {
    "input": "Example #1 A apcu_delete() example",
    "output": "<?php\n$bar\n=\n'BAR'\n;\napcu_store\n(\n'foo'\n,\n$bar\n);\napcu_delete\n(\n'foo'\n);\n// this is obviously useless in this form\n// Alternatively delete multiple keys.\napcu_delete\n([\n'foo'\n,\n'bar'\n,\n'baz'\n]);\n// Or use an Iterator with a regular expression.\napcu_delete\n(new\nAPCUIterator\n(\n'#^myprefix_#'\n));\n?>"
  },
  {
    "input": "Example #1 An apcu_entry() example",
    "output": "<?php\n$config\n=\napcu_entry\n(\n\"config\"\n, function(\n$key\n) {\n return [\n\n\"fruit\"\n=>\napcu_entry\n(\n\"config.fruit\"\n, function(\n$key\n){\n     return [\n\n\"apples\"\n,\n\n\"pears\"\n\n];\n   }),\n\n\"people\"\n=>\napcu_entry\n(\n\"config.people\"\n, function(\n$key\n){\n     return [\n\n\"bob\"\n,\n\n\"joe\"\n,\n\n\"niki\"\n\n];\n   })\n ];\n});\nvar_dump\n(\n$config\n);\n?>"
  },
  {
    "input": "Example #1 apcu_exists() example",
    "output": "<?php\n$fruit\n=\n'apple'\n;\n$veggie\n=\n'carrot'\n;\napcu_store\n(\n'foo'\n,\n$fruit\n);\napcu_store\n(\n'bar'\n,\n$veggie\n);\nif (\napcu_exists\n(\n'foo'\n)) {\n    echo\n\"Foo exists: \"\n;\n    echo\napcu_fetch\n(\n'foo'\n);\n} else {\n    echo\n\"Foo does not exist\"\n;\n}\necho\nPHP_EOL\n;\nif (\napcu_exists\n(\n'baz'\n)) {\n    echo\n\"Baz exists.\"\n;\n} else {\n    echo\n\"Baz does not exist\"\n;\n}\necho\nPHP_EOL\n;\n$ret\n=\napcu_exists\n(array(\n'foo'\n,\n'donotexist'\n,\n'bar'\n));\nvar_dump\n(\n$ret\n);\n?>"
  },
  {
    "input": "Example #1 A apcu_fetch() example",
    "output": "<?php\n$bar\n=\n'BAR'\n;\napcu_store\n(\n'foo'\n,\n$bar\n);\nvar_dump\n(\napcu_fetch\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 apcu_inc() example",
    "output": "<?php\necho\n\"Let's do something with success\"\n,\nPHP_EOL\n;\napcu_store\n(\n'anumber'\n,\n42\n);\necho\napcu_fetch\n(\n'anumber'\n),\nPHP_EOL\n;\necho\napcu_inc\n(\n'anumber'\n),\nPHP_EOL\n;\necho\napcu_inc\n(\n'anumber'\n,\n10\n),\nPHP_EOL\n;\necho\napcu_inc\n(\n'anumber'\n,\n10\n,\n$success\n),\nPHP_EOL\n;\nvar_dump\n(\n$success\n);\necho\n\"Now, let's fail\"\n,\nPHP_EOL\n,\nPHP_EOL\n;\napcu_store\n(\n'astring'\n,\n'foo'\n);\n$ret\n=\napcu_inc\n(\n'astring'\n,\n1\n,\n$fail\n);\nvar_dump\n(\n$ret\n);\nvar_dump\n(\n$fail\n);\n?>"
  },
  {
    "input": "Example #1 A apcu_key_info() example",
    "output": "<?php\napcu_add\n(\n'a'\n,\n'b'\n);\nvar_dump\n(\napcu_key_info\n(\n'a'\n));\n?>"
  },
  {
    "input": "Example #1 A apcu_sma_info() example",
    "output": "<?php\nprint_r\n(\napcu_sma_info\n());\n?>"
  },
  {
    "input": "Example #1 A apcu_store() example",
    "output": "<?php\n$bar\n=\n'BAR'\n;\napcu_store\n(\n'foo'\n,\n$bar\n);\nvar_dump\n(\napcu_fetch\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 A APCUIterator::__construct() example",
    "output": "<?php\nforeach (new\nAPCUIterator\n(\n'/^counter\\./'\n) as\n$counter\n) {\n    echo\n\"\n$counter\n[\nkey\n]\n:\n$counter\n[\nvalue\n]\n\\n\"\n;\n\napc_dec\n(\n$counter\n[\n'key'\n],\n$counter\n[\n'value'\n]);\n}\n?>"
  },
  {
    "input": "Example #1 Using error handling in a script",
    "output": "<?php\n// we will do our own error handling\nerror_reporting\n(\n0\n);\n// user defined error handling function\nfunction\nuserErrorHandler\n(\n$errno\n,\n$errmsg\n,\n$filename\n,\n$linenum\n,\n$vars\n)\n{\n\n// timestamp for the error entry\n\n$dt\n=\ndate\n(\n\"Y-m-d H:i:s (T)\"\n);\n\n// define an assoc array of error string\n    // in reality the only entries we should\n    // consider are E_WARNING, E_NOTICE, E_USER_ERROR,\n    // E_USER_WARNING and E_USER_NOTICE\n\n$errortype\n= array (\n\nE_ERROR\n=>\n'Error'\n,\n\nE_WARNING\n=>\n'Warning'\n,\n\nE_PARSE\n=>\n'Parsing Error'\n,\n\nE_NOTICE\n=>\n'Notice'\n,\n\nE_CORE_ERROR\n=>\n'Core Error'\n,\n\nE_CORE_WARNING\n=>\n'Core Warning'\n,\n\nE_COMPILE_ERROR\n=>\n'Compile Error'\n,\n\nE_COMPILE_WARNING\n=>\n'Compile Warning'\n,\n\nE_USER_ERROR\n=>\n'User Error'\n,\n\nE_USER_WARNING\n=>\n'User Warning'\n,\n\nE_USER_NOTICE\n=>\n'User Notice'\n,\n\nE_STRICT\n=>\n'Runtime Notice'\n,\n\nE_RECOVERABLE_ERROR\n=>\n'Catchable Fatal Error'\n\n);\n\n// set of errors for which a var trace will be saved\n\n$user_errors\n= array(\nE_USER_ERROR\n,\nE_USER_WARNING\n,\nE_USER_NOTICE\n);\n\n\n$err\n=\n\"<errorentry>\\n\"\n;\n\n$err\n.=\n\"\\t<datetime>\"\n.\n$dt\n.\n\"</datetime>\\n\"\n;\n\n$err\n.=\n\"\\t<errornum>\"\n.\n$errno\n.\n\"</errornum>\\n\"\n;\n\n$err\n.=\n\"\\t<errortype>\"\n.\n$errortype\n[\n$errno\n] .\n\"</errortype>\\n\"\n;\n\n$err\n.=\n\"\\t<errormsg>\"\n.\n$errmsg\n.\n\"</errormsg>\\n\"\n;\n\n$err\n.=\n\"\\t<scriptname>\"\n.\n$filename\n.\n\"</scriptname>\\n\"\n;\n\n$err\n.=\n\"\\t<scriptlinenum>\"\n.\n$linenum\n.\n\"</scriptlinenum>\\n\"\n;\n    if (\nin_array\n(\n$errno\n,\n$user_errors\n)) {\n\n$err\n.=\n\"\\t<vartrace>\"\n.\nwddx_serialize_value\n(\n$vars\n,\n\"Variables\"\n) .\n\"</vartrace>\\n\"\n;\n    }\n\n$err\n.=\n\"</errorentry>\\n\\n\"\n;\n\n\n// for testing\n    // echo $err;\n    // save to the error log, and e-mail me if there is a critical user error\n\nerror_log\n(\n$err\n,\n3\n,\n\"/usr/local/php4/error.log\"\n);\n    if (\n$errno\n==\nE_USER_ERROR\n) {\n\nmail\n(\n\"phpdev@example.com\"\n,\n\"Critical User Error\"\n,\n$err\n);\n    }\n}\nfunction\ndistance\n(\n$vect1\n,\n$vect2\n)\n{\n    if (!\nis_array\n(\n$vect1\n) || !\nis_array\n(\n$vect2\n)) {\n\ntrigger_error\n(\n\"Incorrect parameters, arrays expected\"\n,\nE_USER_ERROR\n);\n        return\nNULL\n;\n    }\n    if (\ncount\n(\n$vect1\n) !=\ncount\n(\n$vect2\n)) {\n\ntrigger_error\n(\n\"Vectors need to be of the same size\"\n,\nE_USER_ERROR\n);\n        return\nNULL\n;\n    }\n    for (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$vect1\n);\n$i\n++) {\n\n$c1\n=\n$vect1\n[\n$i\n];\n$c2\n=\n$vect2\n[\n$i\n];\n\n$d\n=\n0.0\n;\n        if (!\nis_numeric\n(\n$c1\n)) {\n\ntrigger_error\n(\n\"Coordinate\n$i\n in vector 1 is not a number, using zero\"\n,\n\nE_USER_WARNING\n);\n\n$c1\n=\n0.0\n;\n        }\n        if (!\nis_numeric\n(\n$c2\n)) {\n\ntrigger_error\n(\n\"Coordinate\n$i\n in vector 2 is not a number, using zero\"\n,\n\nE_USER_WARNING\n);\n\n$c2\n=\n0.0\n;\n        }\n\n$d\n+=\n$c2\n*\n$c2\n-\n$c1\n*\n$c1\n;\n    }\n    return\nsqrt\n(\n$d\n);\n}\n$old_error_handler\n=\nset_error_handler\n(\n\"userErrorHandler\"\n);\n// undefined constant, generates a warning\n$t\n=\nI_AM_NOT_DEFINED\n;\n// define some \"vectors\"\n$a\n= array(\n2\n,\n3\n,\n\"foo\"\n);\n$b\n= array(\n5.5\n,\n4.3\n, -\n1.6\n);\n$c\n= array(\n1\n, -\n3\n);\n// generate a user error\n$t1\n=\ndistance\n(\n$c\n,\n$b\n) .\n\"\\n\"\n;\n// generate another user error\n$t2\n=\ndistance\n(\n$b\n,\n\"i am not an array\"\n) .\n\"\\n\"\n;\n// generate a warning\n$t3\n=\ndistance\n(\n$a\n,\n$b\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 debug_backtrace() example",
    "output": "<?php\n// filename: /tmp/a.php\nfunction\na_test\n(\n$str\n)\n{\n    echo\n\"\\nHi:\n$str\n\"\n;\n\nvar_dump\n(\ndebug_backtrace\n());\n}\na_test\n(\n'friend'\n);\n?>\n<?php\n// filename: /tmp/b.php\ninclude_once\n'/tmp/a.php'\n;\n?>"
  },
  {
    "input": "Example #1 debug_print_backtrace() example",
    "output": "<?php\n// include.php file\nfunction\na\n() {\n\nb\n();\n}\nfunction\nb\n() {\n\nc\n();\n}\nfunction\nc\n(){\n\ndebug_print_backtrace\n();\n}\na\n();\n?>"
  },
  {
    "input": "Example #1 An error_clear_last() example",
    "output": "<?php\nvar_dump\n(\nerror_get_last\n());\nerror_clear_last\n();\nvar_dump\n(\nerror_get_last\n());\n@\n$a\n=\n$b\n;\nvar_dump\n(\nerror_get_last\n());\nerror_clear_last\n();\nvar_dump\n(\nerror_get_last\n());\n?>"
  },
  {
    "input": "Example #1 An error_get_last() example",
    "output": "<?php\necho\n$a\n;\nprint_r\n(\nerror_get_last\n());\n?>"
  },
  {
    "input": "Example #1 error_log() examples",
    "output": "<?php\n// Send notification through the server log if we can not\n// connect to the database.\nif (!\nOra_Logon\n(\n$username\n,\n$password\n)) {\n\nerror_log\n(\n\"Oracle database not available!\"\n,\n0\n);\n}\n// Notify administrator by email if we run out of FOO\nif (!(\n$foo\n=\nallocate_new_foo\n())) {\n\nerror_log\n(\n\"Big trouble, we're all out of FOOs!\"\n,\n1\n,\n\n\"operator@example.com\"\n);\n}\n// another way to call error_log():\nerror_log\n(\n\"You messed up!\"\n,\n3\n,\n\"/var/tmp/my-errors.log\"\n);\n?>"
  },
  {
    "input": "Example #1 error_reporting() examples",
    "output": "<?php\n// Turn off all error reporting\nerror_reporting\n(\n0\n);\n// Report simple running errors\nerror_reporting\n(\nE_ERROR\n|\nE_WARNING\n|\nE_PARSE\n);\n// Reporting E_NOTICE can be good too (to report uninitialized\n// variables or catch variable name misspellings ...)\nerror_reporting\n(\nE_ERROR\n|\nE_WARNING\n|\nE_PARSE\n|\nE_NOTICE\n);\n// Report all errors except E_NOTICE\nerror_reporting\n(\nE_ALL\n& ~\nE_NOTICE\n);\n// Report all PHP errors\nerror_reporting\n(\nE_ALL\n);\n// Report all PHP errors\nerror_reporting\n(-\n1\n);\n// Same as error_reporting(E_ALL);\nini_set\n(\n'error_reporting'\n,\nE_ALL\n);\n?>"
  },
  {
    "input": "Example #1 restore_exception_handler() example",
    "output": "<?php\n\nfunction\nexception_handler_1\n(\nException $e\n)\n    {\n        echo\n'['\n.\n__FUNCTION__\n.\n'] '\n.\n$e\n->\ngetMessage\n();\n    }\n    function\nexception_handler_2\n(\nException $e\n)\n    {\n        echo\n'['\n.\n__FUNCTION__\n.\n'] '\n.\n$e\n->\ngetMessage\n();\n    }\n\nset_exception_handler\n(\n'exception_handler_1'\n);\n\nset_exception_handler\n(\n'exception_handler_2'\n);\n\nrestore_exception_handler\n();\n    throw new\nException\n(\n'This triggers the first exception handler...'\n);\n?>"
  },
  {
    "input": "Example #1 set_exception_handler() example",
    "output": "<?php\nfunction\nexception_handler\n(\nThrowable $exception\n) {\n  echo\n\"Uncaught exception: \"\n,\n$exception\n->\ngetMessage\n(),\n\"\\n\"\n;\n}\nset_exception_handler\n(\n'exception_handler'\n);\nthrow new\nException\n(\n'Uncaught Exception'\n);\necho\n\"Not Executed\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Calling a function from shared library",
    "output": "<?php\n// create FFI object, loading libc and exporting function printf()\n$ffi\n=\nFFI\n::\ncdef\n(\n\n\"int printf(const char *format, ...);\"\n,\n// this is a regular C declaration\n\n\"libc.so.6\"\n);\n// call C's printf()\n$ffi\n->\nprintf\n(\n\"Hello %s!\\n\"\n,\n\"world\"\n);\n?>"
  },
  {
    "input": "Example #2 Calling a function, returning a structure through an argument",
    "output": "<?php\n// create gettimeofday() binding\n$ffi\n=\nFFI\n::\ncdef\n(\n\"\n    typedef unsigned int time_t;\n    typedef unsigned int suseconds_t;\n\n    struct timeval {\n        time_t      tv_sec;\n        suseconds_t tv_usec;\n    };\n\n    struct timezone {\n        int tz_minuteswest;\n        int tz_dsttime;\n    };\n\n    int gettimeofday(struct timeval *tv, struct timezone *tz);\n\"\n,\n\"libc.so.6\"\n);\n// create C data structures\n$tv\n=\n$ffi\n->\nnew\n(\n\"struct timeval\"\n);\n$tz\n=\n$ffi\n->\nnew\n(\n\"struct timezone\"\n);\n// call C's gettimeofday()\nvar_dump\n(\n$ffi\n->\ngettimeofday\n(\nFFI\n::\naddr\n(\n$tv\n),\nFFI\n::\naddr\n(\n$tz\n)));\n// access field of C data structure\nvar_dump\n(\n$tv\n->\ntv_sec\n);\n// print the whole C data structure\nvar_dump\n(\n$tz\n);\n?>"
  },
  {
    "input": "Example #3 Accessing existing C variables",
    "output": "<?php\n// create FFI object, loading libc and exporting errno variable\n$ffi\n=\nFFI\n::\ncdef\n(\n\n\"int errno;\"\n,\n// this is a regular C declaration\n\n\"libc.so.6\"\n);\n// print C's errno\nvar_dump\n(\n$ffi\n->\nerrno\n);\n?>"
  },
  {
    "input": "Example #4 Creating and Modifying C variables",
    "output": "<?php\n// create a new C int variable\n$x\n=\nFFI\n::new(\n\"int\"\n);\nvar_dump\n(\n$x\n->\ncdata\n);\n// simple assignment\n$x\n->\ncdata\n=\n5\n;\nvar_dump\n(\n$x\n->\ncdata\n);\n// compound assignment\n$x\n->\ncdata\n+=\n2\n;\nvar_dump\n(\n$x\n->\ncdata\n);\n?>"
  },
  {
    "input": "Example #5 Working with C arrays",
    "output": "<?php\n// create C data structure\n$a\n=\nFFI\n::new(\n\"long[1024]\"\n);\n// work with it like with a regular PHP array\nfor (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$a\n);\n$i\n++) {\n\n$a\n[\n$i\n] =\n$i\n;\n}\nvar_dump\n(\n$a\n[\n25\n]);\n$sum\n=\n0\n;\nforeach (\n$a\nas\n$n\n) {\n\n$sum\n+=\n$n\n;\n}\nvar_dump\n(\n$sum\n);\nvar_dump\n(\ncount\n(\n$a\n));\nvar_dump\n(\nFFI\n::\nsizeof\n(\n$a\n));\n?>"
  },
  {
    "input": "Example #6 Working with C enums",
    "output": "<?php\n$a\n=\nFFI\n::\ncdef\n(\n'typedef enum _zend_ffi_symbol_kind {\n    ZEND_FFI_SYM_TYPE,\n    ZEND_FFI_SYM_CONST = 2,\n    ZEND_FFI_SYM_VAR,\n    ZEND_FFI_SYM_FUNC\n} zend_ffi_symbol_kind;\n'\n);\nvar_dump\n(\n$a\n->\nZEND_FFI_SYM_TYPE\n);\nvar_dump\n(\n$a\n->\nZEND_FFI_SYM_CONST\n);\nvar_dump\n(\n$a\n->\nZEND_FFI_SYM_VAR\n);\n?>"
  },
  {
    "input": "Example #1 Assigning a PHP Closure to a C function pointer",
    "output": "<?php\n$zend\n=\nFFI\n::\ncdef\n(\n\"\n    typedef int (*zend_write_func_t)(const char *str, size_t str_length);\n    extern zend_write_func_t zend_write;\n\"\n);\n\necho\n\"Hello World 1!\\n\"\n;\n\n$orig_zend_write\n= clone\n$zend\n->\nzend_write\n;\n$zend\n->\nzend_write\n= function(\n$str\n,\n$len\n) {\n    global\n$orig_zend_write\n;\n\n$orig_zend_write\n(\n\"{\\n\\t\"\n,\n3\n);\n\n$ret\n=\n$orig_zend_write\n(\n$str\n,\n$len\n);\n\n$orig_zend_write\n(\n\"}\\n\"\n,\n2\n);\n    return\n$ret\n;\n};\necho\n\"Hello World 2!\\n\"\n;\n$zend\n->\nzend_write\n=\n$orig_zend_write\n;\necho\n\"Hello World 3!\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A opcache_get_status() example",
    "output": "<?php\nvar_dump\n(\nopcache_get_status\n());\n?>"
  },
  {
    "input": "Example #1 Output Control example",
    "output": "<?php\nob_start\n();\necho\n\"Hello\\n\"\n;\nsetcookie\n(\n\"cookiename\"\n,\n\"cookiedata\"\n);\nob_end_flush\n();\n?>"
  },
  {
    "input": "Example #1 Output rewrite example",
    "output": "<?php\n// This code works with PHP 7.1.0, 7.0.10, 5.6.25 and up.\n// HTTP_HOST is default target host. Set manually to make sample code works.\n$_SERVER\n[\n'HTTP_HOST'\n] =\n'php.net'\n;\n// Output rewriter only rewrite form. Add a=href.\n// Tags can be specified tag_name=url_attr, e.g. img=src,iframe=src\n// No space allowed between settings.\n// Form tag is special tag that add hidden input.\nini_set\n(\n'url_rewriter.tags'\n,\n'a=href,form='\n);\nvar_dump\n(\nini_get\n(\n'url_rewriter.tags'\n));\n// This is added to URL and form\noutput_add_rewrite_var\n(\n'test'\n,\n'value'\n);\n?>\n<a href=\"//php.net/index.php?bug=1234\">bug1234</a>\n<form action=\"https://php.net/?bug=1234&edit=1\" method=\"post\">\n <input type=\"text\" name=\"title\" />\n</form>"
  },
  {
    "input": "Example #1 ob_end_clean() example",
    "output": "<?php\nob_start\n();\necho\n'Text that won\\'t get displayed.'\n;\nob_end_clean\n();\n?>"
  },
  {
    "input": "Example #1 A simple ob_get_clean() example",
    "output": "<?php\nob_start\n();\necho\n\"Hello World\"\n;\n$out\n=\nob_get_clean\n();\n$out\n=\nstrtolower\n(\n$out\n);\nvar_dump\n(\n$out\n);\n?>"
  },
  {
    "input": "Example #1 A simple ob_get_contents() example",
    "output": "<?php\nob_start\n();\necho\n\"Hello \"\n;\n$out1\n=\nob_get_contents\n();\necho\n\"World\"\n;\n$out2\n=\nob_get_contents\n();\nob_end_clean\n();\nvar_dump\n(\n$out1\n,\n$out2\n);\n?>"
  },
  {
    "input": "Example #1 ob_get_flush() example",
    "output": "<?php\n//using output_buffering=On\nprint_r\n(\nob_list_handlers\n());\n//save buffer in a file\n$buffer\n=\nob_get_flush\n();\nfile_put_contents\n(\n'buffer.txt'\n,\n$buffer\n);\nprint_r\n(\nob_list_handlers\n());\n?>"
  },
  {
    "input": "Example #1 A simple ob_get_length() example",
    "output": "<?php\nob_start\n();\necho\n\"Hello \"\n;\n$len1\n=\nob_get_length\n();\necho\n\"World\"\n;\n$len2\n=\nob_get_length\n();\nob_end_clean\n();\necho\n$len1\n.\n\", \"\n.\n$len2\n;\n?>"
  },
  {
    "input": "Example #1 ob_list_handlers() example",
    "output": "<?php\n// using output_buffering=On, no output_handler set\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// no callback or null\nob_start\n();\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// anonymous function\nob_start\n(function(\n$string\n) { return\n$string\n; });\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// arrow function\nob_start\n(fn(\n$string\n) =>\n$string\n);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// first class callable\n$firstClassCallable\n=\nuserDefinedFunction\n(...);\nob_start\n([\n$firstClassCallable\n,\n'__invoke'\n]);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// internal (built-in) function\nob_start\n(\n'print_r'\n);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// user-defined function\nfunction\nuserDefinedFunction\n(\n$string\n,\n$flags\n) { return\n$string\n; };\nob_start\n(\n'userDefinedFunction'\n);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\nclass\nMyClass\n{\n    public static function\nstaticHandle\n(\n$string\n) {\n        return\n$string\n;\n    }\n    public static function\nhandle\n(\n$string\n) {\n        return\n$string\n;\n    }\n    public function\n__invoke\n(\n$string\n) {\n        return\n$string\n;\n    }\n}\n// class and static method\nob_start\n([\n'MyClass'\n,\n'staticHandle'\n]);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// object and non-static method\nob_start\n([new\nMyClass\n,\n'handle'\n]);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n// invokable object\nob_start\n(new\nMyClass\n);\nvar_dump\n(\nob_list_handlers\n());\nob_end_flush\n();\n?>"
  },
  {
    "input": "Example #1 User defined callback function example",
    "output": "<?php\nfunction\ncallback\n(\n$buffer\n)\n{\n\n// replace all the apples with oranges\n\nreturn (\nstr_replace\n(\n\"apples\"\n,\n\"oranges\"\n,\n$buffer\n));\n}\nob_start\n(\n\"callback\"\n);\n?>\n<html>\n<body>\n<p>It's like comparing apples to oranges.</p>\n</body>\n</html>\n<?php\nob_end_flush\n();\n?>"
  },
  {
    "input": "Example #2 Creating an unerasable output buffer",
    "output": "<?php\nob_start\n(\nnull\n,\n0\n,\nPHP_OUTPUT_HANDLER_STDFLAGS\n^\nPHP_OUTPUT_HANDLER_REMOVABLE\n);\n?>"
  },
  {
    "input": "Example #1 output_add_rewrite_var() example",
    "output": "<?php\nini_set\n(\n'url_rewriter.tags'\n,\n'a=href,form='\n);\noutput_add_rewrite_var\n(\n'var'\n,\n'value'\n);\n// some links\necho\n'<a href=\"file.php\">link</a>\n<a href=\"http://example.com\">link2</a>'\n;\n// a form\necho\n'<form action=\"script.php\" method=\"post\">\n<input type=\"text\" name=\"var2\" />\n</form>'\n;\nprint_r\n(\nob_list_handlers\n());\n?>"
  },
  {
    "input": "Example #1 output_reset_rewrite_vars() example",
    "output": "<?php\nini_set\n(\n'url_rewriter.tags'\n,\n'a=href'\n);\noutput_add_rewrite_var\n(\n'var'\n,\n'value'\n);\necho\n'<a href=\"file.php\">link</a>'\n;\nob_flush\n();\noutput_reset_rewrite_vars\n();\necho\n'<a href=\"file.php\">link</a>'\n;\n?>"
  },
  {
    "input": "Example #1 assert() example",
    "output": "<?php\nassert\n(\n1\n>\n2\n);\necho\n'Hi!'\n;"
  },
  {
    "input": "Example #2 Using a custom message",
    "output": "<?php\nassert\n(\n1\n>\n2\n,\n\"Expected one to be greater than two\"\n);\necho\n'Hi!'\n;"
  },
  {
    "input": "Example #3 Using a custom exception class",
    "output": "<?php\nclass\nArithmeticAssertionError\nextends\nAssertionError\n{}\nassert\n(\n1\n>\n2\n, new\nArithmeticAssertionError\n(\n\"Expected one to be greater than two\"\n));\necho\n'Hi!'\n;"
  },
  {
    "input": "Example #1 assert_options() example",
    "output": "<?php\n// This is our function to handle\n// assert failures\nfunction\nassert_failure\n(\n$file\n,\n$line\n,\n$assertion\n,\n$message\n)\n{\n    echo\n\"The assertion\n$assertion\n in\n$file\n on line\n$line\n has failed:\n$message\n\"\n;\n}\n// This is our test function\nfunction\ntest_assert\n(\n$parameter\n)\n{\n\nassert\n(\nis_bool\n(\n$parameter\n));\n}\n// Set our assert options\nassert_options\n(\nASSERT_ACTIVE\n,\ntrue\n);\nassert_options\n(\nASSERT_BAIL\n,\ntrue\n);\nassert_options\n(\nASSERT_WARNING\n,\nfalse\n);\nassert_options\n(\nASSERT_CALLBACK\n,\n'assert_failure'\n);\n// Make an assert that would fail\ntest_assert\n(\n1\n);\n// This is never reached due to ASSERT_BAIL\n// being true\necho\n'Never reached'\n;\n?>"
  },
  {
    "input": "Example #1 cli_get_process_title() example",
    "output": "<?php\necho\n\"Process title: \"\n.\ncli_get_process_title\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 cli_set_process_title() example",
    "output": "<?php\n$title\n=\n\"My Amazing PHP Script\"\n;\n$pid\n=\ngetmypid\n();\n// you can use this to see your process title in ps\nif (!\ncli_set_process_title\n(\n$title\n)) {\n    echo\n\"Unable to set process title for PID\n$pid\n...\\n\"\n;\n    exit(\n1\n);\n} else {\n    echo\n\"The process title '\n$title\n' for PID\n$pid\n has been set for your process!\\n\"\n;\n\nsleep\n(\n5\n);\n}\n?>"
  },
  {
    "input": "Example #1 dl() examples",
    "output": "<?php\n// Example loading an extension based on OS\nif (!\nextension_loaded\n(\n'sqlite'\n)) {\n    if (\nstrtoupper\n(\nsubstr\n(\nPHP_OS\n,\n0\n,\n3\n)) ===\n'WIN'\n) {\n\ndl\n(\n'php_sqlite.dll'\n);\n    } else {\n\ndl\n(\n'sqlite.so'\n);\n    }\n}\n// Or using PHP_SHLIB_SUFFIX constant\nif (!\nextension_loaded\n(\n'sqlite'\n)) {\n\n$prefix\n= (\nPHP_SHLIB_SUFFIX\n===\n'dll'\n) ?\n'php_'\n:\n''\n;\n\ndl\n(\n$prefix\n.\n'sqlite.'\n.\nPHP_SHLIB_SUFFIX\n);\n}\n?>"
  },
  {
    "input": "Example #1 extension_loaded() example",
    "output": "<?php\nif (!\nextension_loaded\n(\n'gd'\n)) {\n    if (!\ndl\n(\n'gd.so'\n)) {\n        exit;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A gc_enabled() example",
    "output": "<?php\nif(\ngc_enabled\n())\ngc_collect_cycles\n();\n?>"
  },
  {
    "input": "Example #1 gc_status() Usage",
    "output": "<?php\n// create object tree that needs gc collection\n$a\n= new\nstdClass\n();\n$a\n->\nb\n= [];\nfor (\n$i\n=\n0\n;\n$i\n<\n100000\n;\n$i\n++) {\n\n$b\n= new\nstdClass\n();\n\n$b\n->\na\n=\n$a\n;\n\n$a\n->\nb\n[] =\n$b\n;\n}\nunset(\n$a\n);\nunset(\n$b\n);\ngc_collect_cycles\n();\nvar_dump\n(\ngc_status\n());"
  },
  {
    "input": "Example #1 get_current_user() example",
    "output": "<?php\necho\n'Current script owner: '\n.\nget_current_user\n();\n?>"
  },
  {
    "input": "Example #1 get_defined_constants() Example",
    "output": "<?php\nprint_r\n(\nget_defined_constants\n());\n?>"
  },
  {
    "input": "Example #1 Prints the XML functions",
    "output": "<?php\nprint_r\n(\nget_extension_funcs\n(\n\"xml\"\n));\n?>"
  },
  {
    "input": "Example #1 get_include_path() example",
    "output": "<?php\necho\nget_include_path\n();\n// Or using ini_get()\necho\nini_get\n(\n'include_path'\n);\n?>"
  },
  {
    "input": "Example #1 get_included_files() example",
    "output": "<?php\n// This file is abc.php\ninclude\n'test1.php'\n;\ninclude_once\n'test2.php'\n;\nrequire\n'test3.php'\n;\nrequire_once\n'test4.php'\n;\n$included_files\n=\nget_included_files\n();\nforeach (\n$included_files\nas\n$filename\n) {\n    echo\n\"\n$filename\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 get_loaded_extensions() Example",
    "output": "<?php\nprint_r\n(\nget_loaded_extensions\n());\n?>"
  },
  {
    "input": "Example #1 Unfiltered get_resources()",
    "output": "<?php\n$fp\n=\ntmpfile\n();\nvar_dump\n(\nget_resources\n());\n?>"
  },
  {
    "input": "Example #2 Filtered get_resources()",
    "output": "<?php\n$fp\n=\ntmpfile\n();\nvar_dump\n(\nget_resources\n(\n'stream'\n));\nvar_dump\n(\nget_resources\n(\n'curl'\n));\n?>"
  },
  {
    "input": "Example #1 getenv() Example",
    "output": "<?php\n// Example use of getenv()\n$ip\n=\ngetenv\n(\n'REMOTE_ADDR'\n);\n// Or simply use a Superglobal ($_SERVER or $_ENV)\n$ip\n=\n$_SERVER\n[\n'REMOTE_ADDR'\n];\n// Safely get the value of an environment variable, ignoring whether\n// or not it was set by a SAPI or has been changed with putenv\n$ip\n=\ngetenv\n(\n'REMOTE_ADDR'\n,\ntrue\n) ?:\ngetenv\n(\n'REMOTE_ADDR'\n)\n?>"
  },
  {
    "input": "Example #1 getlastmod() example",
    "output": "<?php\n// outputs e.g. 'Last modified: March 04 1998 20:43:59.'\necho\n\"Last modified: \"\n.\ndate\n(\n\"F d Y H:i:s.\"\n,\ngetlastmod\n());\n?>"
  },
  {
    "input": "Example #1 getopt() example: The basics",
    "output": "<?php\n// Script example.php\n$options\n=\ngetopt\n(\n\"f:hp:\"\n);\nvar_dump\n(\n$options\n);\n?>"
  },
  {
    "input": "Example #2 getopt() example: Introducing long options",
    "output": "<?php\n// Script example.php\n$shortopts\n=\n\"\"\n;\n$shortopts\n.=\n\"f:\"\n;\n// Required value\n$shortopts\n.=\n\"v::\"\n;\n// Optional value\n$shortopts\n.=\n\"abc\"\n;\n// These options do not accept values\n$longopts\n= array(\n\n\"required:\"\n,\n// Required value\n\n\"optional::\"\n,\n// Optional value\n\n\"option\"\n,\n// No value\n\n\"opt\"\n,\n// No value\n);\n$options\n=\ngetopt\n(\n$shortopts\n,\n$longopts\n);\nvar_dump\n(\n$options\n);\n?>"
  },
  {
    "input": "Example #3 getopt() example: Passing multiple options as one",
    "output": "<?php\n// Script example.php\n$options\n=\ngetopt\n(\n\"abc\"\n);\nvar_dump\n(\n$options\n);\n?>"
  },
  {
    "input": "Example #4 getopt() example: Using rest_index",
    "output": "<?php\n// Script example.php\n$rest_index\n=\nnull\n;\n$opts\n=\ngetopt\n(\n'a:b:'\n, [],\n$rest_index\n);\n$pos_args\n=\narray_slice\n(\n$argv\n,\n$rest_index\n);\nvar_dump\n(\n$pos_args\n);"
  },
  {
    "input": "Example #1 getrusage() example",
    "output": "<?php\n$dat\n=\ngetrusage\n();\necho\n$dat\n[\n\"ru_oublock\"\n];\n// number of block output operations\necho\n$dat\n[\n\"ru_inblock\"\n];\n// number of block input operations\necho\n$dat\n[\n\"ru_msgsnd\"\n];\n// number of IPC messages sent\necho\n$dat\n[\n\"ru_msgrcv\"\n];\n// number of IPC messages received\necho\n$dat\n[\n\"ru_maxrss\"\n];\n// maximum resident set size\necho\n$dat\n[\n\"ru_ixrss\"\n];\n// integral shared memory size\necho\n$dat\n[\n\"ru_idrss\"\n];\n// integral unshared data size\necho\n$dat\n[\n\"ru_minflt\"\n];\n// number of page reclaims (soft page faults)\necho\n$dat\n[\n\"ru_majflt\"\n];\n// number of page faults (hard page faults)\necho\n$dat\n[\n\"ru_nsignals\"\n];\n// number of signals received\necho\n$dat\n[\n\"ru_nvcsw\"\n];\n// number of voluntary context switches\necho\n$dat\n[\n\"ru_nivcsw\"\n];\n// number of involuntary context switches\necho\n$dat\n[\n\"ru_nswap\"\n];\n// number of swaps\necho\n$dat\n[\n\"ru_utime.tv_usec\"\n];\n// user time used (microseconds)\necho\n$dat\n[\n\"ru_utime.tv_sec\"\n];\n// user time used (seconds)\necho\n$dat\n[\n\"ru_stime.tv_usec\"\n];\n// system time used (microseconds)\necho\n$dat\n[\n\"ru_stime.tv_sec\"\n];\n// system time used (seconds)\n?>"
  },
  {
    "input": "Example #1 A few ini_get() examples",
    "output": "<?php\n/*\nOur php.ini contains the following settings:\ndisplay_errors = On\nopcache.enable_cli = Off\npost_max_size = 8M\n*/\necho\n'display_errors = '\n.\nini_get\n(\n'display_errors'\n) .\n\"\\n\"\n;\necho\n'opcache.enable_cli = '\n. (int)\nini_get\n(\n'opcache.enable_cli'\n) .\n\"\\n\"\n;\necho\n'post_max_size = '\n.\nini_get\n(\n'post_max_size'\n) .\n\"\\n\"\n;\necho\n'post_max_size + 1 = '\n. (\nrtrim\n(\nini_get\n(\n'post_max_size'\n),\n'KMG'\n) +\n1\n) .\n\"\\n\"\n;\necho\n'post_max_size in bytes = '\n.\nini_parse_quantity\n(\nini_get\n(\n'post_max_size'\n));\n?>"
  },
  {
    "input": "Example #1 ini_get_all() examples",
    "output": "<?php\nprint_r\n(\nini_get_all\n(\n\"pcre\"\n));\nprint_r\n(\nini_get_all\n());\n?>"
  },
  {
    "input": "Example #2 Disabling details",
    "output": "<?php\nprint_r\n(\nini_get_all\n(\n\"pcre\"\n,\nfalse\n));\n// Added in PHP 5.3.0\nprint_r\n(\nini_get_all\n(\nnull\n,\nfalse\n));\n// Added in PHP 5.3.0\n?>"
  },
  {
    "input": "Example #1 A few ini_parse_quantity() examples",
    "output": "<?php\nvar_dump\n(\nini_parse_quantity\n(\n'1024'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'1024M'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'512K'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'0xFFk'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'0b1010k'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'0o1024'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'01024'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'Foobar'\n));\nvar_dump\n(\nini_parse_quantity\n(\n'10F'\n));\n?>"
  },
  {
    "input": "Example #1 ini_restore() example",
    "output": "<?php\n$setting\n=\n'html_errors'\n;\necho\n'Current value for \\''\n.\n$setting\n.\n'\\': '\n.\nini_get\n(\n$setting\n),\nPHP_EOL\n;\nini_set\n(\n$setting\n,\nini_get\n(\n$setting\n) ?\n0\n:\n1\n);\necho\n'New value for \\''\n.\n$setting\n.\n'\\': '\n.\nini_get\n(\n$setting\n),\nPHP_EOL\n;\nini_restore\n(\n$setting\n);\necho\n'Original value for \\''\n.\n$setting\n.\n'\\': '\n.\nini_get\n(\n$setting\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 Setting an ini option",
    "output": "<?php\necho\nini_get\n(\n'display_errors'\n);\nif (!\nini_get\n(\n'display_errors'\n)) {\n\nini_set\n(\n'display_errors'\n,\n'1'\n);\n}\necho\nini_get\n(\n'display_errors'\n);\n?>"
  },
  {
    "input": "Example #1 A memory_get_usage() example",
    "output": "<?php\n// This is only an example, the numbers below will\n// differ depending on your system\necho\nmemory_get_usage\n() .\n\"\\n\"\n;\n// 36640\n$a\n=\nstr_repeat\n(\n\"Hello\"\n,\n4242\n);\necho\nmemory_get_usage\n() .\n\"\\n\"\n;\n// 57960\nunset(\n$a\n);\necho\nmemory_get_usage\n() .\n\"\\n\"\n;\n// 36744\n?>"
  },
  {
    "input": "Example #1 memory_reset_peak_usage() example",
    "output": "<?php\nvar_dump\n(\nmemory_get_peak_usage\n());\n$a\n=\nstr_repeat\n(\n\"Hello\"\n,\n424242\n);\nvar_dump\n(\nmemory_get_peak_usage\n());\nunset(\n$a\n);\nmemory_reset_peak_usage\n();\n$a\n=\nstr_repeat\n(\n\"Hello\"\n,\n2424\n);\nvar_dump\n(\nmemory_get_peak_usage\n());\n?>"
  },
  {
    "input": "Example #1 php_ini_loaded_file() example",
    "output": "<?php\n$inipath\n=\nphp_ini_loaded_file\n();\nif (\n$inipath\n) {\n    echo\n'Loaded php.ini: '\n.\n$inipath\n;\n} else {\n    echo\n'A php.ini file is not loaded'\n;\n}\n?>"
  },
  {
    "input": "Example #1 A simple example to list the returned ini files",
    "output": "<?php\nif (\n$filelist\n=\nphp_ini_scanned_files\n()) {\n    if (\nstrlen\n(\n$filelist\n) >\n0\n) {\n\n$files\n=\nexplode\n(\n','\n,\n$filelist\n);\n        foreach (\n$files\nas\n$file\n) {\n            echo\n\"<li>\"\n.\ntrim\n(\n$file\n) .\n\"</li>\\n\"\n;\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Some php_uname() examples",
    "output": "<?php\necho\nphp_uname\n();\necho\nPHP_OS\n;\n/* Some possible outputs:\nLinux localhost 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686\nLinux\nFreeBSD localhost 3.2-RELEASE #15: Mon Dec 17 08:46:02 GMT 2001\nFreeBSD\nWindows NT XN1 5.1 build 2600\nWINNT\n*/\nif (\nstrtoupper\n(\nsubstr\n(\nPHP_OS\n,\n0\n,\n3\n)) ===\n'WIN'\n) {\n    echo\n'This is a server using Windows!'\n;\n} else {\n    echo\n'This is a server not using Windows!'\n;\n}\n?>"
  },
  {
    "input": "Example #2 A few OS related constant examples",
    "output": "<?php\n// *nix\necho\nDIRECTORY_SEPARATOR\n;\n// /\necho\nPHP_SHLIB_SUFFIX\n;\n// so\necho\nPATH_SEPARATOR\n;\n// :\n// Win*\necho\nDIRECTORY_SEPARATOR\n;\n// \\\necho\nPHP_SHLIB_SUFFIX\n;\n// dll\necho\nPATH_SEPARATOR\n;\n// ;\n?>"
  },
  {
    "input": "Example #1 Prints the general credits",
    "output": "<?php\nphpcredits\n(\nCREDITS_GENERAL\n);\n?>"
  },
  {
    "input": "Example #2 Prints the core developers and the documentation group",
    "output": "<?php\nphpcredits\n(\nCREDITS_GROUP\n|\nCREDITS_DOCS\n|\nCREDITS_FULLPAGE\n);\n?>"
  },
  {
    "input": "Example #3 Printing all the credits",
    "output": "<html>\n <head>\n  <title>My credits page</title>\n </head>\n <body>\n<?php\n// some code of your own\nphpcredits\n(\nCREDITS_ALL\n-\nCREDITS_FULLPAGE\n);\n// some more code\n?>\n </body>\n</html>"
  },
  {
    "input": "Example #1 phpinfo() Example",
    "output": "<?php\n// Show all information, defaults to INFO_ALL\nphpinfo\n();\n// Show just the module information.\n// phpinfo(8) yields identical results.\nphpinfo\n(\nINFO_MODULES\n);\n?>"
  },
  {
    "input": "Example #1 phpversion() example",
    "output": "<?php\n// Prints e.g. 'Current PHP version: 8.3.12'\necho\n'Current PHP version: '\n.\nphpversion\n();\n// Prints e.g. '1.22.3' or nothing if the extension isn't enabled\necho\nphpversion\n(\n'zip'\n);\n?>"
  },
  {
    "input": "Example #2 PHP_VERSION_ID example and usage",
    "output": "<?php\n/**\n * PHP_VERSION_ID is defined as a number, where the higher the number\n * is, the newer a PHP version is used. It's defined as used in the above\n * expression:\n *\n * $version_id = $major_version * 10000 + $minor_version * 100 + $release_version;\n *\n * Now with PHP_VERSION_ID we can check for features this PHP version\n * may have, this doesn't require to use version_compare() everytime\n * you check if the current PHP version may not support a feature.\n *\n * For example, we may here define the PHP_*_VERSION constants thats\n * not available in versions prior to 5.2.7\n */\nif (\nPHP_VERSION_ID\n<\n50207\n) {\n\ndefine\n(\n'PHP_MAJOR_VERSION'\n,\n$version\n[\n0\n]);\n\ndefine\n(\n'PHP_MINOR_VERSION'\n,\n$version\n[\n1\n]);\n\ndefine\n(\n'PHP_RELEASE_VERSION'\n,\n$version\n[\n2\n]);\n\n// and so on, ...\n}\n?>"
  },
  {
    "input": "Example #1 Setting an environment variable",
    "output": "<?php\nputenv\n(\n\"UNIQID=\n$uniqid\n\"\n);\n?>"
  },
  {
    "input": "Example #1 restore_include_path() example",
    "output": "<?php\necho\nget_include_path\n();\n// .:/usr/local/lib/php\nset_include_path\n(\n'/inc'\n);\necho\nget_include_path\n();\n// /inc\nrestore_include_path\n();\n// Or using ini_restore()\nini_restore\n(\n'include_path'\n);\necho\nget_include_path\n();\n// .:/usr/local/lib/php\n?>"
  },
  {
    "input": "Example #1 set_include_path() example",
    "output": "<?php\nset_include_path\n(\n'/usr/lib/pear'\n);\n// Or using ini_set()\nini_set\n(\n'include_path'\n,\n'/usr/lib/pear'\n);\n?>"
  },
  {
    "input": "Example #1 sys_get_temp_dir() example",
    "output": "<?php\n// Create a temporary file in the temporary\n// files directory using sys_get_temp_dir()\n$temp_file\n=\ntempnam\n(\nsys_get_temp_dir\n(),\n'Tux'\n);\necho\n$temp_file\n;\n?>"
  },
  {
    "input": "Example #1 version_compare() examples",
    "output": "<?php\nif (\nversion_compare\n(\nPHP_VERSION\n,\n'7.0.0'\n) >=\n0\n) {\n    echo\n'I am at least PHP version 7.0.0, my version: '\n.\nPHP_VERSION\n.\n\"\\n\"\n;\n}\nif (\nversion_compare\n(\nPHP_VERSION\n,\n'5.3.0'\n) >=\n0\n) {\n    echo\n'I am at least PHP version 5.3.0, my version: '\n.\nPHP_VERSION\n.\n\"\\n\"\n;\n}\nif (\nversion_compare\n(\nPHP_VERSION\n,\n'5.0.0'\n,\n'>='\n)) {\n    echo\n'I am at least PHP version 5.0.0, my version: '\n.\nPHP_VERSION\n.\n\"\\n\"\n;\n}\nif (\nversion_compare\n(\nPHP_VERSION\n,\n'5.0.0'\n,\n'<'\n)) {\n    echo\n'I am still PHP 4, my version: '\n.\nPHP_VERSION\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 zend_thread_id() example",
    "output": "<?php\n$thread_id\n=\nzend_thread_id\n();\necho\n'Current thread id is: '\n.\n$thread_id\n;\n?>"
  },
  {
    "input": "Example #1 zend_version() example",
    "output": "<?php\necho\n\"Zend engine version: \"\n.\nzend_version\n();\n?>"
  },
  {
    "input": "Example #1 Custom Superglobals with runkit.superglobal=_FOO,_BAR in php.ini",
    "output": "<?php\nfunction\nshow_values\n() {\n  echo\n\"Foo is\n$_FOO\n\\n\"\n;\n  echo\n\"Bar is\n$_BAR\n\\n\"\n;\n  echo\n\"Baz is\n$_BAZ\n\\n\"\n;\n}\n$_FOO\n=\n'foo'\n;\n$_BAR\n=\n'bar'\n;\n$_BAZ\n=\n'baz'\n;\n/* Displays foo and bar, but not baz */\nshow_values\n();\n?>"
  },
  {
    "input": "Example #1 A runkit7_function_add() example",
    "output": "<?php\nrunkit7_function_add\n(\n'testme'\n,\n'$a,$b'\n,\n'echo \"The value of a is $a\\n\"; echo \"The value of b is $b\\n\";'\n);\ntestme\n(\n1\n,\n2\n);\n?>"
  },
  {
    "input": "Example #1 A runkit7_function_copy() example",
    "output": "<?php\nfunction\noriginal\n() {\n  echo\n\"In a function\\n\"\n;\n}\nrunkit7_function_copy\n(\n'original'\n,\n'duplicate'\n);\noriginal\n();\nduplicate\n();\n?>"
  },
  {
    "input": "Example #1 A runkit7_function_redefine() example",
    "output": "<?php\nfunction\ntestme\n() {\n  echo\n\"Original Testme Implementation\\n\"\n;\n}\ntestme\n();\nrunkit7_function_redefine\n(\n'testme'\n,\n''\n,\n'echo \"New Testme Implementation\\n\";'\n);\ntestme\n();\n?>"
  },
  {
    "input": "Example #1 runkit7_method_add() example",
    "output": "<?php\nclass\nExample\n{\n    function\nfoo\n() {\n        echo\n\"foo!\\n\"\n;\n    }\n}\n// create an Example object\n$e\n= new\nExample\n();\n// Add a new public method\nrunkit7_method_add\n(\n\n'Example'\n,\n\n'add'\n,\n\n'$num1, $num2'\n,\n\n'return $num1 + $num2;'\n,\n\nRUNKIT7_ACC_PUBLIC\n);\n// add 12 + 4\necho\n$e\n->\nadd\n(\n12\n,\n4\n);\n?>"
  },
  {
    "input": "Example #1 runkit7_method_copy() example",
    "output": "<?php\nclass\nFoo\n{\n    function\nexample\n() {\n        return\n\"foo!\\n\"\n;\n    }\n}\nclass\nBar\n{\n\n// initially, no methods\n}\n// copy the example() method from the Foo class to the Bar class, as baz()\nrunkit7_method_copy\n(\n'Bar'\n,\n'baz'\n,\n'Foo'\n,\n'example'\n);\n// output copied function\necho\nBar\n::\nbaz\n();\n?>"
  },
  {
    "input": "Example #1 runkit7_method_redefine() example",
    "output": "<?php\nclass\nExample\n{\n    function\nfoo\n() {\n        return\n\"foo!\\n\"\n;\n    }\n}\n// create an Example object\n$e\n= new\nExample\n();\n// output Example::foo() (before redefine)\necho\n\"Before: \"\n.\n$e\n->\nfoo\n();\n// Redefine the 'foo' method\nrunkit7_method_redefine\n(\n\n'Example'\n,\n\n'foo'\n,\n\n''\n,\n\n'return \"bar!\\n\";'\n,\n\nRUNKIT7_ACC_PUBLIC\n);\n// output Example::foo() (after redefine)\necho\n\"After: \"\n.\n$e\n->\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 runkit7_method_remove() example",
    "output": "<?php\nclass\nExample\n{\n    function\nfoo\n() {\n        return\n\"foo!\\n\"\n;\n    }\n    function\nbar\n() {\n        return\n\"bar!\\n\"\n;\n    }\n}\n// Remove the 'foo' method\nrunkit7_method_remove\n(\n\n'Example'\n,\n\n'foo'\n);\necho\nimplode\n(\n' '\n,\nget_class_methods\n(\n'Example'\n));\n?>"
  },
  {
    "input": "Example #1 runkit7_method_rename() example",
    "output": "<?php\nclass\nExample\n{\n    function\nfoo\n() {\n        return\n\"foo!\\n\"\n;\n    }\n}\n// Rename the 'foo' method to 'bar'\nrunkit7_method_rename\n(\n\n'Example'\n,\n\n'foo'\n,\n\n'bar'\n);\n// output renamed function\necho (new\nExample\n)->\nbar\n();\n?>"
  },
  {
    "input": "Example #1 runkit7_zval_inspect() example",
    "output": "<?php\n$var\n= new\nDateTime\n();\nvar_dump\n(\nrunkit7_zval_inspect\n(\n$var\n));\n$var\n=\n1\n;\nvar_dump\n(\nrunkit7_zval_inspect\n(\n$var\n));\n?>"
  },
  {
    "input": "Example #1 Basic uopz_add_function() Usage",
    "output": "<?php\nuopz_add_function\n(\n'foo'\n, function () {echo\n'bar'\n;});\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 uopz_allow_exit() example",
    "output": "<?php\nexit(\n1\n);\necho\n1\n;\nuopz_allow_exit\n(\ntrue\n);\nexit(\n2\n);\necho\n2\n;\n?>"
  },
  {
    "input": "Example #1 uopz_backup() example",
    "output": "<?php\nuopz_backup\n(\n\"fgets\"\n);\nuopz_function\n(\n\"fgets\"\n, function(){\n    return\ntrue\n;\n});\nvar_dump\n(\nfgets\n());\n?>"
  },
  {
    "input": "Example #1 uopz_compose() example",
    "output": "<?php\nclass\nmyClass\n{}\ntrait\nmyTrait\n{}\ninterface\nmyInterface\n{}\nuopz_compose\n(\n\nComposed\n::class, [\n\nmyClass\n::class,\n\nmyTrait\n::class,\n\nmyInterface\n::class\n    ], [\n\n\"__construct\"\n=> function() {\n\n/* ... */\n\n}\n]);\nvar_dump\n(\n\nclass_uses\n(\nComposed\n::class),\n\nclass_parents\n(\nComposed\n::class),\n\nclass_implements\n(\nComposed\n::class));\n?>"
  },
  {
    "input": "Example #1 uopz_copy() example",
    "output": "<?php\n$strtotime\n=\nuopz_copy\n(\n'strtotime'\n);\nuopz_function\n(\n\"strtotime\"\n, function(\n$arg1\n,\n$arg2\n) use(\n$strtotime\n) {\n\n/* can call original strtotime from here */\n\nvar_dump\n(\n$arg1\n);\n});\nvar_dump\n(\nstrtotime\n(\n'dummy'\n));\n?>"
  },
  {
    "input": "Example #1 Basic uopz_del_function() Usage",
    "output": "<?php\nuopz_add_function\n(\n'foo'\n, function () {echo\n'bar'\n;});\nvar_dump\n(\nfunction_exists\n(\n'foo'\n));\nuopz_del_function\n(\n'foo'\n);\nvar_dump\n(\nfunction_exists\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 uopz_delete() example",
    "output": "<?php\nuopz_delete\n(\n\"strlen\"\n);\necho\nstrlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #2 uopz_delete() class example",
    "output": "<?php\nclass\nMy\n{\n    public static function\nstrlen\n(\n$arg\n) {\n        return\nstrlen\n(\n$arg\n);\n    }\n}\nuopz_delete\n(\nMy\n::class,\n\"strlen\"\n);\necho\nMy\n::\nstrlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #1 uopz_extend() example",
    "output": "<?php\nclass\nA\n{}\nclass\nB\n{}\nuopz_extend\n(\nA\n::class,\nB\n::class);\nvar_dump\n(\nclass_parents\n(\nA\n::class));\n?>"
  },
  {
    "input": "Example #1 uopz_flags() example",
    "output": "<?php\nclass\nTest\n{\n    public function\nmethod\n() {\n        return\n__CLASS__\n;\n    }\n}\n$flags\n=\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n);\nvar_dump\n((bool) (\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n) &\nZEND_ACC_PRIVATE\n));\nvar_dump\n((bool) (\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n) &\nZEND_ACC_STATIC\n));\nvar_dump\n(\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n,\n$flags\n|\nZEND_ACC_STATIC\n|\nZEND_ACC_PRIVATE\n));\nvar_dump\n((bool) (\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n) &\nZEND_ACC_PRIVATE\n));\nvar_dump\n((bool) (\nuopz_flags\n(\n\"Test\"\n,\n\"method\"\n) &\nZEND_ACC_STATIC\n));\n?>"
  },
  {
    "input": "Example #2 \"Unfinalize\" a Class",
    "output": "<?php\nfinal class\nMyClass\n{\n}\n$flags\n=\nuopz_flags\n(\nMyClass\n::class,\n''\n);\nuopz_flags\n(\nMyClass\n::class,\n''\n,\n$flags\n& ~\nZEND_ACC_FINAL\n);\nvar_dump\n((new\nReflectionClass\n(\nMyClass\n::class))->\nisFinal\n());\n?>"
  },
  {
    "input": "Example #1 uopz_function() example",
    "output": "<?php\nuopz_function\n(\n\"my_strlen\"\n, function(\n$arg\n) {\n    return\nstrlen\n(\n$arg\n);\n});\necho\nmy_strlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #2 uopz_function() class example",
    "output": "<?php\nclass\nMy\n{}\nuopz_function\n(\nMy\n::class,\n\"strlen\"\n, function(\n$arg\n) {\n    return\nstrlen\n(\n$arg\n);\n},\nZEND_ACC_STATIC\n);\necho\nMy\n::\nstrlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #1 uopz_get_exit_status() example",
    "output": "<?php\nexit(\n123\n);\necho\nuopz_get_exit_status\n();\n?>"
  },
  {
    "input": "Example #1 Basic uopz_get_hook() Usage",
    "output": "<?php\nfunction\nfoo\n() {\n    echo\n'foo'\n;\n}\nuopz_set_hook\n(\n'foo'\n, function () {echo\n'bar'\n;});\nvar_dump\n(\nuopz_get_hook\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 uopz_get_mock() example",
    "output": "<?php\nclass\nA\n{\n    public static function\nwho\n() {\n        echo\n\"A\"\n;\n    }\n}\nclass\nmockA\n{\n    public static function\nwho\n() {\n        echo\n\"mockA\"\n;\n    }\n}\nuopz_set_mock\n(\nA\n::class,\nmockA\n::class);\necho\nuopz_get_mock\n(\nA\n::class);\n?>"
  },
  {
    "input": "Example #1 Basic uopz_get_property() Usage",
    "output": "<?php\nclass\nFoo\n{\n    private static\n$staticBar\n=\n10\n;\n    private\n$bar\n=\n100\n;\n}\n$foo\n= new\nFoo\n;\nvar_dump\n(\nuopz_get_property\n(\n'Foo'\n,\n'staticBar'\n));\nvar_dump\n(\nuopz_get_property\n(\n$foo\n,\n'bar'\n));\n?>"
  },
  {
    "input": "Example #1 uopz_get_return() example",
    "output": "<?php\nuopz_set_return\n(\n\"strlen\"\n,\n42\n);\necho\nuopz_get_return\n(\n\"strlen\"\n);\n?>"
  },
  {
    "input": "Example #1 Basic uopz_get_static() Usage",
    "output": "<?php\nfunction\nfoo\n() {\n    static\n$bar\n=\n'baz'\n;\n}\nvar_dump\n(\nuopz_get_static\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 uopz_implement() example",
    "output": "<?php\ninterface\nmyInterface\n{}\nclass\nmyClass\n{}\nuopz_implement\n(\nmyClass\n::class,\nmyInterface\n::class);\nvar_dump\n(\nclass_implements\n(\nmyClass\n::class));\n?>"
  },
  {
    "input": "Example #1 uopz_overload() example",
    "output": "<?php\nuopz_overload\n(\nZEND_EXIT\n, function(){});\nexit();\necho\n\"Hello World\"\n;\n?>"
  },
  {
    "input": "Example #1 uopz_redefine() example",
    "output": "<?php\ndefine\n(\n\"MY\"\n,\n100\n);\nuopz_redefine\n(\n\"MY\"\n,\n1000\n);\necho\nMY\n;\n?>"
  },
  {
    "input": "Example #1 uopz_rename() example",
    "output": "<?php\nuopz_rename\n(\n\"strlen\"\n,\n\"original_strlen\"\n);\necho\noriginal_strlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #2 uopz_rename() class example",
    "output": "<?php\nclass\nMy\n{\n    public function\nstrlen\n(\n$arg\n) {\n        return\nstrlen\n(\n$arg\n);\n    }\n}\nuopz_rename\n(\nMy\n::class,\n\"strlen\"\n,\n\"original_strlen\"\n);\necho\nMy\n::\noriginal_strlen\n(\n\"Hello World\"\n);\n?>"
  },
  {
    "input": "Example #1 uopz_restore() example",
    "output": "<?php\nuopz_backup\n(\n\"fgets\"\n);\nuopz_function\n(\n\"fgets\"\n, function(){\n    return\ntrue\n;\n});\nvar_dump\n(\nfgets\n());\nuopz_restore\n(\n'fgets'\n);\nfgets\n();\n?>"
  },
  {
    "input": "Example #1 Basic uopz_set_hook() Usage",
    "output": "<?php\nfunction\nfoo\n() {\n    echo\n'foo'\n;\n}\nuopz_set_hook\n(\n'foo'\n, function () {echo\n'bar'\n;});\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 uopz_set_mock() example",
    "output": "<?php\nclass\nA\n{\n    public function\nwho\n() {\n        echo\n\"A\"\n;\n    }\n}\nclass\nmockA\n{\n    public function\nwho\n() {\n        echo\n\"mockA\"\n;\n    }\n}\nuopz_set_mock\n(\nA\n::class,\nmockA\n::class);\n(new\nA\n)->\nwho\n();\n?>"
  },
  {
    "input": "Example #2 uopz_set_mock() example",
    "output": "<?php\nclass\nA\n{\n    public function\nwho\n() {\n        echo\n\"A\"\n;\n    }\n}\nuopz_set_mock\n(\nA\n::class, new class {\n                            public function\nwho\n() {\n                                echo\n\"mockA\"\n;\n                            }\n                        });\n(new\nA\n)->\nwho\n();\n?>"
  },
  {
    "input": "Example #1 Basic uopz_set_property() Usage",
    "output": "<?php\nclass\nFoo\n{\n   private static\n$staticBar\n;\n   private\n$bar\n;\n   public static function\ntestStaticBar\n() {\n      return\nself\n::\n$staticBar\n;\n   }\n   public function\ntestBar\n() {\n      return\n$this\n->\nbar\n;\n   }\n}\n$foo\n= new\nFoo\n;\nuopz_set_property\n(\n'Foo'\n,\n'staticBar'\n,\n10\n);\nuopz_set_property\n(\n$foo\n,\n'bar'\n,\n100\n);\nvar_dump\n(\nFoo\n::\ntestStaticBar\n());\nvar_dump\n(\n$foo\n->\ntestBar\n());\n?>"
  },
  {
    "input": "Example #1 uopz_set_return() example",
    "output": "<?php\nuopz_set_return\n(\n\"strlen\"\n,\n42\n);\necho\nstrlen\n(\n\"Banana\"\n);\n?>"
  },
  {
    "input": "Example #2 uopz_set_return() example",
    "output": "<?php\nuopz_set_return\n(\n\"strlen\"\n, function(\n$str\n) { return\nstrlen\n(\n$str\n) *\n2\n; },\ntrue\n);\necho\nstrlen\n(\n\"Banana\"\n);\n?>"
  },
  {
    "input": "Example #3 uopz_set_return() class example",
    "output": "<?php\nclass\nMy\n{\n    public static function\nstrlen\n(\n$arg\n) {\n        return\nstrlen\n(\n$arg\n);\n    }\n}\nuopz_set_return\n(\nMy\n::class,\n\"strlen\"\n, function(\n$str\n) { return\nstrlen\n(\n$str\n) *\n2\n; },\ntrue\n);\necho\nMy\n::\nstrlen\n(\n\"Banana\"\n);\n?>"
  },
  {
    "input": "Example #1 Basic uopz_set_static() Usage",
    "output": "<?php\nfunction\nfoo\n() {\n    static\n$bar\n=\n'baz'\n;\n\nvar_dump\n(\n$bar\n);\n}\nuopz_set_static\n(\n'foo'\n, [\n'bar'\n=>\n'qux'\n]);\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 uopz_undefine() example",
    "output": "<?php\ndefine\n(\n\"MY\"\n,\ntrue\n);\nuopz_undefine\n(\n\"MY\"\n);\nvar_dump\n(\ndefined\n(\n\"MY\"\n));\n?>"
  },
  {
    "input": "Example #1 Basic uopz_unset_hook() Usage",
    "output": "<?php\nfunction\nfoo\n() {\n    echo\n'foo'\n;\n}\nuopz_set_hook\n(\n'foo'\n, function () {echo\n'bar'\n;});\nfoo\n();\necho\nPHP_EOL\n;\nuopz_unset_hook\n(\n'foo'\n);\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 uopz_unset_mock() example",
    "output": "<?php\nclass\nA\n{\n    public static function\nwho\n() {\n        echo\n\"A\"\n;\n    }\n}\nclass\nmockA\n{\n    public static function\nwho\n() {\n        echo\n\"mockA\"\n;\n    }\n}\nuopz_set_mock\n(\nA\n::class,\nmockA\n::class);\nuopz_unset_mock\n(\nA\n::class);\nA\n::\nwho\n();\n?>"
  },
  {
    "input": "Example #1 uopz_unset_return() example",
    "output": "<?php\nuopz_set_return\n(\n\"strlen\"\n,\n42\n);\n$len\n=\nstrlen\n(\n\"Banana\"\n);\nuopz_unset_return\n(\n\"strlen\"\n);\necho\n$len\n+\nstrlen\n(\n\"Banana\"\n);\n?>"
  },
  {
    "input": "Example #1 Authentication configuration for wincache.php",
    "output": "<?php\n/**\n * ======================== CONFIGURATION SETTINGS ==============================\n * If you do not want to use authentication for this page, set USE_AUTHENTICATION to 0.\n * If you use authentication then replace the default password.\n */\ndefine\n(\n'USE_AUTHENTICATION'\n,\n1\n);\ndefine\n(\n'USERNAME'\n,\n'wincache'\n);\ndefine\n(\n'PASSWORD'\n,\n'wincache'\n);\n/**\n * The Basic PHP authentication will work only when IIS is configured to support\n * Anonymous Authentication' and nothing else. If IIS is configured to support/use\n * any other kind of authentication like Basic/Negotiate/Digest etc, this will not work.\n * In that case use the array below to define the names of users in your\n * domain/network/workgroup which you want to grant access to.\n */\n$user_allowed\n= array(\n'DOMAIN\\user1'\n,\n'DOMAIN\\user2'\n,\n'DOMAIN\\user3'\n);\n/**\n * If the array contains string 'all', then all the users authenticated by IIS\n * will have access to the page. Uncomment the below line and comment above line\n * to grant access to all users who gets authenticated by IIS.\n */\n/* $user_allowed = array('all'); */\n/** ===================== END OF CONFIGURATION SETTINGS ========================== */\n?>"
  },
  {
    "input": "Example #1 A wincache_fcache_fileinfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_fcache_fileinfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_fcache_meminfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_fcache_meminfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 Using wincache_lock()",
    "output": "<?php\n$fp\n=\nfopen\n(\n\"/tmp/lock.txt\"\n,\n\"r+\"\n);\nif (\nwincache_lock\n(\n“lock_txt_lock”\n)) {\n// do an exclusive lock\n\nftruncate\n(\n$fp\n,\n0\n);\n// truncate file\n\nfwrite\n(\n$fp\n,\n\"Write something here\\n\"\n);\n\nwincache_unlock\n(\n“lock_txt_lock”\n);\n// release the lock\n} else {\n    echo\n\"Couldn't get the lock!\"\n;\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 A wincache_ocache_fileinfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_ocache_fileinfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_ocache_meminfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_ocache_meminfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_refresh_if_changed() example",
    "output": "<?php\n$filename\n=\n'C:\\inetpub\\wwwroot\\config.php'\n;\n$handle\n=\nfopen\n(\n$filename\n,\n'w+'\n);\nif (\n$handle\n===\nFALSE\n) die(\n'Failed to open file '\n.\n$filename\n.\n' for writing'\n);\nfwrite\n(\n$handle\n,\n'<?php $setting=something; ?>'\n);\nfclose\n(\n$handle\n);\nwincache_refresh_if_changed\n(array(\n$filename\n));\n?>"
  },
  {
    "input": "Example #1 A wincache_rplist_fileinfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_rplist_fileinfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_rplist_meminfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_rplist_meminfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_scache_info() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_scache_info\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 A wincache_scache_meminfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_scache_meminfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 wincache_ucache_add() with key as a string",
    "output": "<?php\n$bar\n=\n'BAR'\n;\nvar_dump\n(\nwincache_ucache_add\n(\n'foo'\n,\n$bar\n));\nvar_dump\n(\nwincache_ucache_add\n(\n'foo'\n,\n$bar\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #2 wincache_ucache_add() with key as an array",
    "output": "<?php\n$colors_array\n= array(\n'green'\n=>\n'5'\n,\n'Blue'\n=>\n'6'\n,\n'yellow'\n=>\n'7'\n,\n'cyan'\n=>\n'8'\n);\nvar_dump\n(\nwincache_ucache_add\n(\n$colors_array\n));\nvar_dump\n(\nwincache_ucache_add\n(\n$colors_array\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'Blue'\n));\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_cas()",
    "output": "<?php\nwincache_ucache_set\n(\n'counter'\n,\n2922\n);\nvar_dump\n(\nwincache_ucache_cas\n(\n'counter'\n,\n2922\n,\n1\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'counter'\n));\n?>"
  },
  {
    "input": "Example #1 using wincache_ucache_clear()",
    "output": "<?php\nwincache_ucache_set\n(\n'green'\n,\n1\n);\nwincache_ucache_set\n(\n'red'\n,\n2\n);\nwincache_ucache_set\n(\n'orange'\n,\n4\n);\nwincache_ucache_set\n(\n'blue'\n,\n8\n);\nwincache_ucache_set\n(\n'cyan'\n,\n16\n);\n$array1\n= array(\n'green'\n,\n'red'\n,\n'orange'\n,\n'blue'\n,\n'cyan'\n);\nvar_dump\n(\nwincache_ucache_get\n(\n$array1\n));\nvar_dump\n(\nwincache_ucache_clear\n());\nvar_dump\n(\nwincache_ucache_get\n(\n$array1\n));\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_dec()",
    "output": "<?php\nwincache_ucache_set\n(\n'counter'\n,\n1\n);\nvar_dump\n(\nwincache_ucache_dec\n(\n'counter'\n,\n2923\n,\n$success\n));\nvar_dump\n(\n$success\n);\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_delete() with key as a string",
    "output": "<?php\nwincache_ucache_set\n(\n'foo'\n,\n'bar'\n);\nvar_dump\n(\nwincache_ucache_delete\n(\n'foo'\n));\nvar_dump\n(\nwincache_ucache_exists\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #2 Usingwincache_ucache_delete() with key as an array",
    "output": "<?php\n$array1\n= array(\n'green'\n=>\n'5'\n,\n'blue'\n=>\n'6'\n,\n'yellow'\n=>\n'7'\n,\n'cyan'\n=>\n'8'\n);\nwincache_ucache_set\n(\n$array1\n);\n$array2\n= array(\n'green'\n,\n'blue'\n,\n'yellow'\n,\n'cyan'\n);\nvar_dump\n(\nwincache_ucache_delete\n(\n$array2\n));\n?>"
  },
  {
    "input": "Example #3 Using wincache_ucache_delete() with key as an array where some elements cannot be deleted",
    "output": "<?php\n$array1\n= array(\n'green'\n=>\n'5'\n,\n'blue'\n=>\n'6'\n,\n'yellow'\n=>\n'7'\n,\n'cyan'\n=>\n'8'\n);\nwincache_ucache_set\n(\n$array1\n);\n$array2\n= array(\n'orange'\n,\n'red'\n,\n'yellow'\n,\n'cyan'\n);\nvar_dump\n(\nwincache_ucache_delete\n(\n$array2\n));\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_exists()",
    "output": "<?php\nif (!\nwincache_ucache_exists\n(\n'green'\n))\n\nwincache_ucache_set\n(\n'green'\n,\n1\n);\nvar_dump\n(\nwincache_ucache_exists\n(\n'green'\n));\n?>"
  },
  {
    "input": "Example #1 wincache_ucache_get() with key as a string",
    "output": "<?php\nwincache_ucache_add\n(\n'color'\n,\n'blue'\n);\nvar_dump\n(\nwincache_ucache_get\n(\n'color'\n,\n$success\n));\nvar_dump\n(\n$success\n);\n?>"
  },
  {
    "input": "Example #2 wincache_ucache_get() with key as an array",
    "output": "<?php\n$array1\n= array(\n'green'\n=>\n'5'\n,\n'Blue'\n=>\n'6'\n,\n'yellow'\n=>\n'7'\n,\n'cyan'\n=>\n'8'\n);\nwincache_ucache_set\n(\n$array1\n);\n$array2\n= array(\n'green'\n,\n'Blue'\n,\n'yellow'\n,\n'cyan'\n);\nvar_dump\n(\nwincache_ucache_get\n(\n$array2\n,\n$success\n));\nvar_dump\n(\n$success\n);\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_inc()",
    "output": "<?php\nwincache_ucache_set\n(\n'counter'\n,\n1\n);\nvar_dump\n(\nwincache_ucache_inc\n(\n'counter'\n,\n2921\n,\n$success\n));\nvar_dump\n(\n$success\n);\n?>"
  },
  {
    "input": "Example #1 Using wincache_ucache_info()",
    "output": "<?php\nwincache_ucache_get\n(\n'green'\n);\nwincache_ucache_set\n(\n'green'\n,\n2922\n);\nwincache_ucache_get\n(\n'green'\n);\nwincache_ucache_get\n(\n'green'\n);\nwincache_ucache_get\n(\n'green'\n);\nprint_r\n(\nwincache_ucache_info\n());\n?>"
  },
  {
    "input": "Example #1 A wincache_ucache_meminfo() example",
    "output": "<pre>\n<?php\nprint_r\n(\nwincache_ucache_meminfo\n());\n?>\n</pre>"
  },
  {
    "input": "Example #1 wincache_ucache_set() with key as a string",
    "output": "<?php\n$bar\n=\n'BAR'\n;\nvar_dump\n(\nwincache_ucache_set\n(\n'foo'\n,\n$bar\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'foo'\n));\n$bar1\n=\n'BAR1'\n;\nvar_dump\n(\nwincache_ucache_set\n(\n'foo'\n,\n$bar1\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #2 wincache_ucache_set() with key as an array",
    "output": "<?php\n$colors_array\n= array(\n'green'\n=>\n'5'\n,\n'Blue'\n=>\n'6'\n,\n'yellow'\n=>\n'7'\n,\n'cyan'\n=>\n'8'\n);\nvar_dump\n(\nwincache_ucache_set\n(\n$colors_array\n));\nvar_dump\n(\nwincache_ucache_set\n(\n$colors_array\n));\nvar_dump\n(\nwincache_ucache_get\n(\n'Blue'\n));\n?>"
  },
  {
    "input": "Example #1 Using wincache_unlock()",
    "output": "<?php\n$fp\n=\nfopen\n(\n\"/tmp/lock.txt\"\n,\n\"r+\"\n);\nif (\nwincache_lock\n(\n“lock_txt_lock”\n)) {\n// do an exclusive lock\n\nftruncate\n(\n$fp\n,\n0\n);\n// truncate file\n\nfwrite\n(\n$fp\n,\n\"Write something here\\n\"\n);\n\nwincache_unlock\n(\n“lock_txt_lock”\n);\n// release the lock\n} else {\n    echo\n\"Couldn't get the lock!\"\n;\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 xhprof_disable() example",
    "output": "<?php\nxhprof_enable\n();\n$foo\n=\nstrlen\n(\n\"foo bar\"\n);\n$xhprof_data\n=\nxhprof_disable\n();\nprint_r\n(\n$xhprof_data\n);\n?>"
  },
  {
    "input": "Example #1 xhprof_enable() examples",
    "output": "<?php\n// 1. elapsed time + memory + CPU profiling; and ignore built-in (internal) functions\nxhprof_enable\n(\nXHPROF_FLAGS_NO_BUILTINS\n|\nXHPROF_FLAGS_CPU\n|\nXHPROF_FLAGS_MEMORY\n);\n// 2. elapsed time profiling; ignore call_user_func* during profiling\nxhprof_enable\n(\n\n0\n,\n    array(\n'ignored_functions'\n=>  array(\n'call_user_func'\n,\n\n'call_user_func_array'\n)));\n\n// 3. elapsed time + memory profiling; ignore call_user_func* during profiling\nxhprof_enable\n(\n\nXHPROF_FLAGS_MEMORY\n,\n    array(\n'ignored_functions'\n=>  array(\n'call_user_func'\n,\n\n'call_user_func_array'\n)));\n?>"
  },
  {
    "input": "Example #1 xhprof_sample_disable() example",
    "output": "<?php\nxhprof_sample_enable\n();\nfor (\n$i\n=\n0\n;\n$i\n<=\n10000\n;\n$i\n++) {\n\n$a\n=\nstrlen\n(\n$i\n);\n\n$b\n=\n$i\n*\n$a\n;\n\n$c\n=\nrand\n();\n}\n$xhprof_data\n=\nxhprof_sample_disable\n();\nprint_r\n(\n$xhprof_data\n);\n?>"
  },
  {
    "input": "Example #1 Make sure the item is stored",
    "output": "while(!$yac->set(\"key\", \"vale));"
  },
  {
    "input": "Example #1 Using CHAP passwords",
    "output": "<?php\n// Firstly, we'll create an authentication handle and request.\n$radh\n=\nradius_auth_open\n();\nradius_add_server\n(\n$radh\n,\n$server\n,\n$port\n,\n$secret\n,\n3\n,\n3\n);\nradius_create_request\n(\n$radh\n,\nRADIUS_ACCESS_REQUEST\n);\n// Assuming $password contains the plaintext password, we now:\n// Generate a challenge.\n$challenge\n=\nmt_rand\n();\n// Specify a CHAP identifier.\n$ident\n=\n1\n;\n// Add the Chap-Password attribute.\n$cp\n=\nhash\n(\n'md5'\n,\npack\n(\n'Ca*'\n,\n$ident\n,\n$password\n.\n$challenge\n),\ntrue\n);\nradius_put_attr\n(\n$radh\n,\nRADIUS_CHAP_PASSWORD\n,\npack\n(\n'C'\n,\n$ident\n).\n$cp\n);\n// Add the Chap-Challenge attribute.\nradius_put_attr\n(\n$radh\n,\nRADIUS_CHAP_CHALLENGE\n,\n$challenge\n);\n/* From here, you would add the remaining attributes and\n * call radius_send_request(). */\n?>"
  },
  {
    "input": "Example #1 radius_acct_open() example",
    "output": "<?php\n$res\n=\nradius_acct_open\n()\n    or die (\n\"Could not create handle\"\n);\nprint\n\"Handle successfully created\"\n;\n?>"
  },
  {
    "input": "Example #1 radius_add_server() example",
    "output": "<?php\nif (!\nradius_add_server\n(\n$res\n,\n'radius.example.com'\n,\n1812\n,\n'testing123'\n,\n3\n,\n3\n)) {\n    echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br>\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 radius_auth_open() example",
    "output": "<?php\n$radh\n=\nradius_auth_open\n()\n    or die (\n\"Could not create handle\"\n);\necho\n\"Handle successfully created\"\n;\n?>"
  },
  {
    "input": "Example #1 radius_create_request() example",
    "output": "<?php\nif (!\nradius_create_request\n(\n$res\n,\nRADIUS_ACCESS_REQUEST\n)) {\n    echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br />\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 radius_cvt_addr() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\n    switch (\n$attr\n) {\n    case\nRADIUS_FRAMED_IP_ADDRESS\n:\n\n$ip\n=\nradius_cvt_addr\n(\n$data\n);\n        echo\n\"IP:\n$ip\n<br>\\n\"\n;\n        break;\n    case\nRADIUS_FRAMED_IP_NETMASK\n:\n\n$mask\n=\nradius_cvt_addr\n(\n$data\n);\n        echo\n\"MASK:\n$mask\n<br>\\n\"\n;\n        break;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 radius_cvt_int() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\n    switch (\n$attr\n) {\n    case\nRADIUS_FRAMED_MTU\n:\n\n$mtu\n=\nradius_cvt_int\n(\n$data\n);\n        echo\n\"MTU:\n$mtu\n<br>\\n\"\n;\n        break;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 radius_cvt_string() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\n    switch (\n$attr\n) {\n    case\nRADIUS_FILTER_ID\n:\n\n$id\n=\nradius_cvt_string\n(\n$data\n);\n        echo\n\"Filter ID:\n$id\n<br>\\n\"\n;\n        break;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 radius_get_attr() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\nprintf\n(\n\"Got Attr:%d %d Bytes %s\\n\"\n,\n$attr\n,\nstrlen\n(\n$data\n),\nbin2hex\n(\n$data\n));\n}\n?>"
  },
  {
    "input": "Example #1 radius_get_tagged_attr_data() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\n$tag\n=\nradius_get_tagged_attr_tag\n(\n$data\n);\n\n$value\n=\nradius_get_tagged_attr_data\n(\n$data\n);\n\nprintf\n(\n\"Got tagged attribute with tag %d and value %s\\n\"\n,\n$tag\n,\n$value\n);\n}\n?>"
  },
  {
    "input": "Example #1 radius_get_tagged_attr_tag() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\n$tag\n=\nradius_get_tagged_attr_tag\n(\n$data\n);\n\n$value\n=\nradius_get_tagged_attr_data\n(\n$data\n);\n\nprintf\n(\n\"Got tagged attribute with tag %d and value %s\\n\"\n,\n$tag\n,\n$value\n);\n}\n?>"
  },
  {
    "input": "Example #1 radius_get_vendor_attr() example",
    "output": "<?php\nwhile (\n$resa\n=\nradius_get_attr\n(\n$res\n)) {\n    if (!\nis_array\n(\n$resa\n)) {\n\nprintf\n(\n\"Error getting attribute: %s\\n\"\n,\nradius_strerror\n(\n$res\n));\n        exit;\n    }\n\n$attr\n=\n$resa\n[\n'attr'\n];\n\n$data\n=\n$resa\n[\n'data'\n];\n\nprintf\n(\n\"Got Attr:%d %d Bytes %s\\n\"\n,\n$attr\n,\nstrlen\n(\n$data\n),\nbin2hex\n(\n$data\n));\n    if (\n$attr\n==\nRADIUS_VENDOR_SPECIFIC\n) {\n\n$resv\n=\nradius_get_vendor_attr\n(\n$data\n);\n        if (\nis_array\n(\n$resv\n)) {\n\n$vendor\n=\n$resv\n[\n'vendor'\n];\n\n$attrv\n=\n$resv\n[\n'attr'\n];\n\n$datav\n=\n$resv\n[\n'data'\n];\n\nprintf\n(\n\"Got Vendor Attr:%d %d Bytes %s\\n\"\n,\n$attrv\n,\nstrlen\n(\n$datav\n),\nbin2hex\n(\n$datav\n));\n        }\n\n    }\n}\n?>"
  },
  {
    "input": "Example #1 radius_put_attr() example",
    "output": "<?php\nmt_srand\n(\ntime\n());\n$chall\n=\nmt_rand\n();\n$chapval\n=\nhash\n(\n'md5'\n,\npack\n(\n'Ca*'\n,\n1\n,\n'sepp'\n.\n$chall\n));\n$pass\n=\npack\n(\n'CH*'\n,\n1\n,\n$chapval\n);\nif (!\nradius_put_attr\n(\n$res\n,\nRADIUS_CHAP_PASSWORD\n,\n$pass\n)) {\n    echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br />\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 radius_put_int() example",
    "output": "<?php\nif (!\nradius_put_int\n(\n$res\n,\nRAD_FRAMED_PROTOCOL\n,\nRAD_PPP\n)) {\n   echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br />\"\n;\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 radius_put_string() example",
    "output": "<?php\nif (!\nradius_put_string\n(\n$res\n,\nRADIUS_USER_NAME\n,\n'billy'\n)) {\n    echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br />\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 radius_put_vendor_attr() example",
    "output": "<?php\nif (!\nradius_put_vendor_attr\n(\n$res\n,\nRADIUS_VENDOR_MICROSOFT\n,\nRAD_MICROSOFT_MS_CHAP_CHALLENGE\n,\n$challenge\n)) {\n    echo\n'RadiusError:'\n.\nradius_strerror\n(\n$res\n).\n\"\\n<br />\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 readline() Example",
    "output": "<?php\n//get 3 commands from user\nfor (\n$i\n=\n0\n;\n$i\n<\n3\n;\n$i\n++) {\n\n$line\n=\nreadline\n(\n\"Command: \"\n);\n\nreadline_add_history\n(\n$line\n);\n}\n//dump history\nprint_r\n(\nreadline_list_history\n());\n//dump variables\nprint_r\n(\nreadline_info\n());\n?>"
  },
  {
    "input": "Example #1 Readline Callback Interface Example",
    "output": "<?php\nfunction\nrl_callback\n(\n$ret\n)\n{\n    global\n$c\n,\n$prompting\n;\n    echo\n\"You entered:\n$ret\n\\n\"\n;\n\n$c\n++;\n    if (\n$c\n>\n10\n) {\n\n$prompting\n=\nfalse\n;\n\nreadline_callback_handler_remove\n();\n    } else {\n\nreadline_callback_handler_install\n(\n\"[\n$c\n] Enter something: \"\n,\n'rl_callback'\n);\n    }\n}\n$c\n=\n1\n;\n$prompting\n=\ntrue\n;\nreadline_callback_handler_install\n(\n\"[\n$c\n] Enter something: \"\n,\n'rl_callback'\n);\nwhile (\n$prompting\n) {\n\n$w\n=\nNULL\n;\n\n$e\n=\nNULL\n;\n\n$n\n=\nstream_select\n(\n$r\n= array(\nSTDIN\n),\n$w\n,\n$e\n,\nnull\n);\n    if (\n$n\n&&\nin_array\n(\nSTDIN\n,\n$r\n)) {\n\n// read a character, will call the callback when a newline is entered\n\nreadline_callback_read_char\n();\n    }\n}\necho\n\"Prompting disabled. All done.\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Small bzip2 Example",
    "output": "<?php\n$filename\n=\n\"/tmp/testfile.bz2\"\n;\n$str\n=\n\"This is a test string.\\n\"\n;\n// open file for writing\n$bz\n=\nbzopen\n(\n$filename\n,\n\"w\"\n);\n// write string to file\nbzwrite\n(\n$bz\n,\n$str\n);\n// close file\nbzclose\n(\n$bz\n);\n// open file for reading\n$bz\n=\nbzopen\n(\n$filename\n,\n\"r\"\n);\n// read 10 characters\necho\nbzread\n(\n$bz\n,\n10\n);\n// output until end of the file (or the next 1024 char) and close it.\necho\nbzread\n(\n$bz\n);\nbzclose\n(\n$bz\n);\n?>"
  },
  {
    "input": "Example #1 Compressing data",
    "output": "<?php\n$str\n=\n\"sample data\"\n;\n$bzstr\n=\nbzcompress\n(\n$str\n,\n9\n);\necho\n$bzstr\n;\n?>"
  },
  {
    "input": "Example #1 Decompressing a String",
    "output": "<?php\n$start_str\n=\n\"This is not an honest face?\"\n;\n$bzstr\n=\nbzcompress\n(\n$start_str\n);\necho\n\"Compressed String: \"\n;\necho\n$bzstr\n;\necho\n\"\\n<br />\\n\"\n;\n$str\n=\nbzdecompress\n(\n$bzstr\n);\necho\n\"Decompressed String: \"\n;\necho\n$str\n;\necho\n\"\\n<br />\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 bzerror() example",
    "output": "<?php\n$error\n=\nbzerror\n(\n$bz\n);\necho\n$error\n[\n\"errno\"\n];\necho\n$error\n[\n\"errstr\"\n];\n?>"
  },
  {
    "input": "Example #1 bzopen() example",
    "output": "<?php\n$file\n=\n\"/tmp/foo.bz2\"\n;\n$bz\n=\nbzopen\n(\n$file\n,\n\"r\"\n) or die(\n\"Couldn't open\n$file\n for reading\"\n);\nbzclose\n(\n$bz\n);\n?>"
  },
  {
    "input": "Example #1 bzread() example",
    "output": "<?php\n$file\n=\n\"/tmp/foo.bz2\"\n;\n$bz\n=\nbzopen\n(\n$file\n,\n\"r\"\n) or die(\n\"Couldn't open\n$file\n\"\n);\n$decompressed_file\n=\n''\n;\nwhile (!\nfeof\n(\n$bz\n)) {\n\n$decompressed_file\n.=\nbzread\n(\n$bz\n,\n4096\n);\n}\nbzclose\n(\n$bz\n);\necho\n\"The contents of\n$file\n are: <br />\\n\"\n;\necho\n$decompressed_file\n;\n?>"
  },
  {
    "input": "Example #1 bzwrite() example",
    "output": "<?php\n$str\n=\n\"uncompressed data\"\n;\n$bz\n=\nbzopen\n(\n\"/tmp/foo.bz2\"\n,\n\"w\"\n);\nbzwrite\n(\n$bz\n,\n$str\n,\nstrlen\n(\n$str\n));\nbzclose\n(\n$bz\n);\n?>"
  },
  {
    "input": "Example #1 Using an external file",
    "output": "<?php\n\ninclude\n'/path/to/external/file.php'\n;\n\n?>"
  },
  {
    "input": "Example #2 Using a file within a phar archive",
    "output": "<?php\n\ninclude\n'phar:///path/to/myphar.phar/file.php'\n;\n\n?>"
  },
  {
    "input": "Example #3 Converting a phar archive from phar to tar file format",
    "output": "<?php\n $phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$pgz\n=\n$phar\n->\nconvertToExecutable\n(\nPhar\n::\nTAR\n,\nPhar\n::\nGZ\n);\n// makes myphar.phar.tar.gz\n\n?>"
  },
  {
    "input": "Example #1 A Phar::addEmptyDir() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPhar\n(\n'/path/to/phar.phar'\n);\n\n$a\n->\naddEmptyDir\n(\n'/full/path/to/file'\n);\n\n// demonstrates how this file is stored\n\n$b\n=\n$a\n[\n'full/path/to/file'\n]->\nisDir\n();\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::addFile() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPhar\n(\n'/path/to/phar.phar'\n);\n\n$a\n->\naddFile\n(\n'/full/path/to/file'\n);\n\n// demonstrates how this file is stored\n\n$b\n=\n$a\n[\n'full/path/to/file'\n]->\ngetContent\n();\n\n$a\n->\naddFile\n(\n'/full/path/to/file'\n,\n'my/file.txt'\n);\n\n$c\n=\n$a\n[\n'my/file.txt'\n]->\ngetContent\n();\n\n// demonstrate URL usage\n\n$a\n->\naddFile\n(\n'http://www.example.com'\n,\n'example.html'\n);\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::addFromString() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPhar\n(\n'/path/to/phar.phar'\n);\n\n$a\n->\naddFromString\n(\n'path/to/file.txt'\n,\n'my simple file'\n);\n\n$b\n=\n$a\n[\n'path/to/file.txt'\n]->\ngetContent\n();\n\n// to add contents from a stream handle for large files, use offsetSet()\n\n$c\n=\nfopen\n(\n'/path/to/hugefile.bin'\n);\n\n$a\n[\n'largefile.bin'\n] =\n$c\n;\n\nfclose\n(\n$c\n);\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::apiVersion() example",
    "output": "<?php\necho\nPhar\n::\napiVersion\n();\n?>"
  },
  {
    "input": "Example #1 A Phar::canCompress() example",
    "output": "<?php\nif (\nPhar\n::\ncanCompress\n()) {\n    echo\nfile_get_contents\n(\n'phar://compressedphar.phar/internal/file.txt'\n);\n} else {\n    echo\n'no compression available'\n;\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::canWrite() example",
    "output": "<?php\nif (\nPhar\n::\ncanWrite\n()) {\n\nfile_put_contents\n(\n'phar://myphar.phar/file.txt'\n,\n'hi there'\n);\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::compress() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n$p1\n=\n$p\n->\ncompress\n(\nPhar\n::\nGZ\n);\n// copies to /path/to/my.phar.gz\n$p2\n=\n$p\n->\ncompress\n(\nPhar\n::\nBZ2\n);\n// copies to /path/to/my.phar.bz2\n$p3\n=\n$p2\n->\ncompress\n(\nPhar\n::\nNONE\n);\n// exception: /path/to/my.phar already exists\n?>"
  },
  {
    "input": "Example #1 A Phar::compressFiles() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n$p\n->\ncompressFiles\n(\nPhar\n::\nGZ\n);\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::__construct() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\nFilesystemIterator\n::\nCURRENT_AS_FILEINFO\n|\nFilesystemIterator\n::\nKEY_AS_FILENAME\n,\n\n'my.phar'\n);\n} catch (\nUnexpectedValueException $e\n) {\n    die(\n'Could not open my.phar'\n);\n} catch (\nBadMethodCallException $e\n) {\n    echo\n'technically, this cannot happen'\n;\n}\n// this works now\necho\nfile_get_contents\n(\n'phar://my.phar/example.txt'\n);\n// and works as if we had typed\necho\nfile_get_contents\n(\n'phar:///path/to/my.phar/example.txt'\n);\n?>"
  },
  {
    "input": "Example #1 A Phar::createDefaultStub() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$phar\n->\nsetStub\n(\n$phar\n->\ncreateDefaultStub\n(\n'cli.php'\n,\n'web/index.php'\n));\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::decompress() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar.gz'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n$p3\n=\n$p2\n->\ndecompress\n();\n// creates /path/to/my.phar\n?>"
  },
  {
    "input": "Example #1 A Phar::decompressFiles() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n$p\n->\ncompressFiles\n(\nPhar\n::\nGZ\n);\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n$p\n->\ndecompressFiles\n();\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::delMetaData() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n\n$phar\n->\nsetMetadata\n(\n\"hi there\"\n);\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n\n$phar\n->\ndelMetadata\n();\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::delete() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$phar\n->\ndelete\n(\n'unlink/me.php'\n);\n\n// this is equivalent to:\n\nunlink\n(\n'phar://myphar.phar/unlink/me.php'\n);\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::extractTo() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$phar\n->\nextractTo\n(\n'/full/path'\n);\n// extract all files\n\n$phar\n->\nextractTo\n(\n'/another/path'\n,\n'file.txt'\n);\n// extract only file.txt\n\n$phar\n->\nextractTo\n(\n'/this/path'\n,\n        array(\n'file1.txt'\n,\n'file2.txt'\n));\n// extract 2 files only\n\n$phar\n->\nextractTo\n(\n'/third/path'\n,\nnull\n,\ntrue\n);\n// extract all files, and overwrite\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::getStub() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\necho\n$p\n->\ngetStub\n();\necho\n\"==NEXT==\\n\"\n;\n$p\n->\nsetStub\n(\n\"<?php\nfunction __autoload(\n$class\n)\n{\n    include 'phar://' . str_replace('_', '/',\n$class\n);\n}\nPhar::mapPhar('myphar.phar');\ninclude 'phar://myphar.phar/startup.php';\n__HALT_COMPILER(); ?>\"\n);\necho\n$p\n->\ngetStub\n();\n?>"
  },
  {
    "input": "Example #1 A Phar::hasMetadata() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\nvar_dump\n(\n$phar\n->\nhasMetadata\n());\n\n$phar\n->\nsetMetadata\n(array(\n'thing'\n=>\n'hi'\n));\n\nvar_dump\n(\n$phar\n->\nhasMetadata\n());\n\n$phar\n->\ndelMetadata\n();\n\nvar_dump\n(\n$phar\n->\nhasMetadata\n());\n} catch (\nException $e\n) {\n\n// handle error\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::interceptFileFuncs() example",
    "output": "<?php\nPhar\n::\ninterceptFileFuncs\n();\ninclude\n'phar://'\n.\n__FILE__\n.\n'/file.php'\n;\n?>"
  },
  {
    "input": "Example #2 A Phar::interceptFileFuncs() example",
    "output": "<?php\necho\nfile_get_contents\n(\n'file2.txt'\n);\n?>"
  },
  {
    "input": "Example #1 A Phar::isCompressed() example",
    "output": "<?php\ntry {\n\n$phar1\n= new\nPhar\n(\n'myphar.zip.phar'\n);\n\nvar_dump\n(\n$phar1\n->\nisCompressed\n());\n\n$phar2\n= new\nPhar\n(\n'myuncompressed.tar.phar'\n);\n\nvar_dump\n(\n$phar2\n->\nisCompressed\n());\n\n$phar2\n->\ncompress\n(\nPhar\n::\nGZ\n);\n\nvar_dump\n(\n$phar2\n->\nisCompressed\n() ==\nPhar\n::\nGZ\n);\n} catch (\nException $e\n) {\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::mungServer() example",
    "output": "<?php\n// example stub\nPhar\n::\nmungServer\n(array(\n'REQUEST_URI'\n));\nPhar\n::\nwebPhar\n();\n__HALT_COMPILER();\n?>"
  },
  {
    "input": "Example #1 A Phar::offsetExists() example",
    "output": "<?php\n$p\n= new\nPhar\n(\ndirname\n(\n__FILE__\n) .\n'/my.phar'\n,\n0\n,\n'my.phar'\n);\n$p\n[\n'firstfile.txt'\n] =\n'first file'\n;\n$p\n[\n'secondfile.txt'\n] =\n'second file'\n;\n// the next set of lines call offsetExists() indirectly\nvar_dump\n(isset(\n$p\n[\n'firstfile.txt'\n]));\nvar_dump\n(isset(\n$p\n[\n'nothere.txt'\n]));\n?>"
  },
  {
    "input": "Example #1 A Phar::offsetUnset() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\ntry {\n\n// deletes file.txt from my.phar by calling offsetUnset\n\nunset(\n$p\n[\n'file.txt'\n]);\n} catch (\nException $e\n) {\n    echo\n'Could not delete file.txt: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::setAlias() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$phar\n->\nsetAlias\n(\n'myp.phar'\n);\n} catch (\nException $e\n) {\n\n// handle error\n}\n?>"
  },
  {
    "input": "Example #1 A Phar::unlinkArchive() example",
    "output": "<?php\n// simple usage\nPhar\n::\nunlinkArchive\n(\n'/path/to/my.phar'\n);\n// more common example:\n$p\n= new\nPhar\n(\n'my.phar'\n);\n$fp\n=\nfopen\n(\n'phar://my.phar/file.txt'\n,\n'r'\n);\n// this creates 'my.phar.gz'\n$gp\n=\n$p\n->\ncompress\n(\nPhar\n::\nGZ\n);\n// remove all references to the archive\nunset(\n$p\n);\nfclose\n(\n$fp\n);\n// now remove all traces of the archive\nPhar\n::\nunlinkArchive\n(\n'my.phar'\n);\n?>"
  },
  {
    "input": "Example #1 A PharData::addEmptyDir() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPharData\n(\n'/path/to/my.tar'\n);\n\n$a\n->\naddEmptyDir\n(\n'/full/path/to/file'\n);\n\n// demonstrates how this file is stored\n\n$b\n=\n$a\n[\n'full/path/to/file'\n]->\nisDir\n();\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::addFile() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPharData\n(\n'/path/to/my.tar'\n);\n\n$a\n->\naddFile\n(\n'/full/path/to/file'\n);\n\n// demonstrates how this file is stored\n\n$b\n=\n$a\n[\n'full/path/to/file'\n]->\ngetContent\n();\n\n$a\n->\naddFile\n(\n'/full/path/to/file'\n,\n'my/file.txt'\n);\n\n$c\n=\n$a\n[\n'my/file.txt'\n]->\ngetContent\n();\n\n// demonstrate URL usage\n\n$a\n->\naddFile\n(\n'http://www.example.com'\n,\n'example.html'\n);\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::addFromString() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPharData\n(\n'/path/to/my.tar'\n);\n\n$a\n->\naddFromString\n(\n'path/to/file.txt'\n,\n'my simple file'\n);\n\n$b\n=\n$a\n[\n'path/to/file.txt'\n]->\ngetContent\n();\n\n// to add contents from a stream handle for large files, use offsetSet()\n\n$c\n=\nfopen\n(\n'/path/to/hugefile.bin'\n);\n\n$a\n[\n'largefile.bin'\n] =\n$c\n;\n\nfclose\n(\n$c\n);\n} catch (\nException $e\n) {\n\n// handle errors here\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::compress() example",
    "output": "<?php\n$p\n= new\nPharData\n(\n'/path/to/my.tar'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n$p1\n=\n$p\n->\ncompress\n(\nPhar\n::\nGZ\n);\n// copies to /path/to/my.tar.gz\n$p2\n=\n$p\n->\ncompress\n(\nPhar\n::\nBZ2\n);\n// copies to /path/to/my.tar.bz2\n$p3\n=\n$p2\n->\ncompress\n(\nPhar\n::\nNONE\n);\n// exception: /path/to/my.tar already exists\n?>"
  },
  {
    "input": "Example #1 A PharData::compressFiles() example",
    "output": "<?php\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n$p\n->\ncompressFiles\n(\nPhar\n::\nGZ\n);\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::__construct() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPharData\n(\n'/path/to/my.tar'\n,\nPhar\n::\nCURRENT_AS_FILEINFO\n|\nPhar\n::\nKEY_AS_FILENAME\n);\n} catch (\nUnexpectedValueException $e\n) {\n    die(\n'Could not open my.tar'\n);\n} catch (\nBadMethodCallException $e\n) {\n    echo\n'technically, this cannot happen'\n;\n}\necho\nfile_get_contents\n(\n'phar:///path/to/my.tar/example.txt'\n);\n?>"
  },
  {
    "input": "Example #1 A PharData::decompress() example",
    "output": "<?php\n$p\n= new\nPharData\n(\n'/path/to/my.tar.gz'\n);\n$p\n->\ndecompress\n();\n// creates /path/to/my.tar\n?>"
  },
  {
    "input": "Example #1 A PharData::decompressFiles() example",
    "output": "<?php\n$p\n= new\nPharData\n(\n'/path/to/my.zip'\n);\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n$p\n->\ncompressFiles\n(\nPhar\n::\nGZ\n);\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n$p\n->\ndecompressFiles\n();\nforeach (\n$p\nas\n$file\n) {\n\nvar_dump\n(\n$file\n->\ngetFileName\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nGZ\n));\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::delMetaData() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPharData\n(\n'myphar.zip'\n);\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n\n$phar\n->\nsetMetadata\n(\n\"hi there\"\n);\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n\n$phar\n->\ndelMetadata\n();\n\nvar_dump\n(\n$phar\n->\ngetMetadata\n());\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::delete() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPharData\n(\n'myphar.zip'\n);\n\n$phar\n->\ndelete\n(\n'unlink/me.php'\n);\n\n// this is equivalent to:\n\nunlink\n(\n'phar://myphar.phar/unlink/me.php'\n);\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::extractTo() example",
    "output": "<?php\ntry {\n\n$phar\n= new\nPharData\n(\n'myphar.tar'\n);\n\n$phar\n->\nextractTo\n(\n'/full/path'\n);\n// extract all files\n\n$phar\n->\nextractTo\n(\n'/another/path'\n,\n'file.txt'\n);\n// extract only file.txt\n\n$phar\n->\nextractTo\n(\n'/this/path'\n,\n        array(\n'file1.txt'\n,\n'file2.txt'\n));\n// extract 2 files only\n\n$phar\n->\nextractTo\n(\n'/third/path'\n,\nnull\n,\ntrue\n);\n// extract all files, and overwrite\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A PharData::offsetUnset() example",
    "output": "<?php\n$p\n= new\nPharData\n(\n'/path/to/my.zip'\n);\ntry {\n\n// deletes file.txt from my.zip by calling offsetUnset\n\nunset(\n$p\n[\n'file.txt'\n]);\n} catch (\nException $e\n) {\n    echo\n'Could not delete file.txt: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::compress() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n\n$p\n[\n'myfile.txt'\n]->\ncompress\n(\nPhar\n::\nBZ2\n);\n\nvar_dump\n(\n$file\n->\nisCompressed\n(\nPhar\n::\nBZ2\n));\n} catch (\nException $e\n) {\n    echo\n'Create/modify operations on my.phar failed: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::decompress() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n\n$file\n->\ncompress\n(\nPhar\n::\nGZ\n);\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\n$p\n[\n'myfile.txt'\n]->\ndecompress\n();\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n} catch (\nException $e\n) {\n    echo\n'Create/modify failed for my.phar: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::delMetaData() example",
    "output": "<?php\ntry {\n\n$a\n= new\nPhar\n(\n'myphar.phar'\n);\n\n$a\n[\n'hi'\n] =\n'hi'\n;\n\nvar_dump\n(\n$a\n[\n'hi'\n]->\ndelMetadata\n());\n\n$a\n[\n'hi'\n]->\nsetMetadata\n(\n'there'\n);\n\nvar_dump\n(\n$a\n[\n'hi'\n]->\ndelMetadata\n());\n\nvar_dump\n(\n$a\n[\n'hi'\n]->\ndelMetadata\n());\n} catch (\nException $e\n) {\n\n// handle errors\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::getCompressedSize() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n    echo\n$file\n->\ngetCompressedSize\n();\n} catch (\nException $e\n) {\n    echo\n'Write operations failed on my.phar: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::getPharFlags() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n\nvar_dump\n(\n$file\n->\ngetPharFlags\n());\n} catch (\nException $e\n) {\n    echo\n'Could not create/modify my.phar: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::isCRCChecked() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n\nvar_dump\n(\n$file\n->\nisCRCChecked\n());\n} catch (\nException $e\n) {\n    echo\n'Create/modify operations failed on my.phar: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PharFileInfo::isCompressed() example",
    "output": "<?php\ntry {\n\n$p\n= new\nPhar\n(\n'/path/to/my.phar'\n,\n0\n,\n'my.phar'\n);\n\n$p\n[\n'myfile.txt'\n] =\n'hi'\n;\n\n$p\n[\n'myfile2.txt'\n] =\n'hi'\n;\n\n$p\n[\n'myfile2.txt'\n]->\nsetCompressedGZ\n();\n\n$file\n=\n$p\n[\n'myfile.txt'\n];\n\n$file2\n=\n$p\n[\n'myfile2.txt'\n];\n\nvar_dump\n(\n$file\n->\nisCompressed\n());\n\nvar_dump\n(\n$file2\n->\nisCompressed\n());\n} catch (\nException $e\n) {\n    echo\n'Create/modify on phar my.phar failed: '\n,\n$e\n;\n}\n?>"
  },
  {
    "input": "Example #1 On-the-fly decompression",
    "output": "<?php\nif (!\narray_key_exists\n(\n\"i\"\n,\n$_GET\n) || !\nis_numeric\n(\n$_GET\n[\n\"i\"\n]))\n    die(\n\"Index unspecified or non-numeric\"\n);\n$index\n= (int)\n$_GET\n[\n\"i\"\n];\n\n$arch\n=\nRarArchive\n::\nopen\n(\n\"example.rar\"\n);\nif (\n$arch\n===\nFALSE\n)\n    die(\n\"Cannot open example.rar\"\n);\n$entries\n=\n$arch\n->\ngetEntries\n();\nif (\n$entries\n===\nFALSE\n)\n    die(\n\"Cannot retrieve entries\"\n);\nif (!\narray_key_exists\n(\n$index\n,\n$entries\n))\n    die(\n\"No such index:\n$index\n\"\n);\n$orfilename\n=\n$entries\n[\n$index\n]->\ngetName\n();\n//UTF-8 encoded\n$filesize\n=\n$entries\n[\n$index\n]->\ngetUnpackedSize\n();\n/* you could check HTTP_IF_MODIFIED_SINCE here and compare with\n * $entries[$index]->getFileTime(). You could also send a\n * \"Last modified\" header */\n$fp\n=\n$entries\n[\n$index\n]->\ngetStream\n();\nif (\n$fp\n===\nFALSE\n)\n    die(\n\"Cannot open file with index\n$index\n insided the archive.\"\n);\n$arch\n->\nclose\n();\n//no longer needed; stream is independent\nfunction\ndetectUserAgent\n() {\n    if (!\narray_key_exists\n(\n'HTTP_USER_AGENT'\n,\n$_SERVER\n))\n        return\n\"Other\"\n;\n\n\n$uas\n=\n$_SERVER\n[\n'HTTP_USER_AGENT'\n];\n    if (\npreg_match\n(\n\"@Opera/@\"\n,\n$uas\n))\n        return\n\"Opera\"\n;\n    if (\npreg_match\n(\n\"@Firefox/@\"\n,\n$uas\n))\n        return\n\"Firefox\"\n;\n    if (\npreg_match\n(\n\"@Chrome/@\"\n,\n$uas\n))\n        return\n\"Chrome\"\n;\n    if (\npreg_match\n(\n\"@MSIE ([0-9.]+);@\"\n,\n$uas\n,\n$matches\n)) {\n        if (((float)\n$matches\n[\n1\n]) >=\n7.0\n)\n            return\n\"IE\"\n;\n    }\n\n    return\n\"Other\"\n;\n}\n/*\n * We have 3 options:\n * - For FF and Opera, which support RFC 2231, use that format.\n * - For IE and Chrome, use attwithfnrawpctenclong\n *   (http://greenbytes.de/tech/tc2231/#attwithfnrawpctenclong)\n * - For the others, convert to ISO-8859-1, if possible\n */\n$formatRFC2231\n=\n'Content-Disposition: attachment; filename*=UTF-8\\'\\'%s'\n;\n$formatDef\n=\n'Content-Disposition: attachment; filename=\"%s\"'\n;\nswitch (\ndetectUserAgent\n()) {\n    case\n\"Opera\"\n:\n    case\n\"Firefox\"\n:\n\n$orfilename\n=\nrawurlencode\n(\n$orfilename\n);\n\n$format\n=\n$formatRFC2231\n;\n        break;\n    case\n\"IE\"\n:\n    case\n\"Chrome\"\n:\n\n$orfilename\n=\nrawurlencode\n(\n$orfilename\n);\n\n$format\n=\n$formatDef\n;\n        break;\n    default:\n        if (\nfunction_exists\n(\n'iconv'\n))\n\n$orfilename\n=\n                @\niconv\n(\n\"UTF-8\"\n,\n\"ISO-8859-1//TRANSLIT\"\n,\n$orfilename\n);\n\n$format\n=\n$formatDef\n;\n}\nheader\n(\nsprintf\n(\n$format\n,\n$orfilename\n));\n//cannot send error messages from now on (headers already sent)\n//replace by real content type, perhaps infering from the file extension\n$contentType\n=\n\"application/octet-stream\"\n;\nheader\n(\n\"Content-Type:\n$contentType\n\"\n);\nheader\n(\n\"Content-Transfer-Encoding: binary\"\n);\nheader\n(\n\"Content-Length:\n$filesize\n\"\n);\nif (\n$_SERVER\n[\n'REQUEST_METHOD'\n] ==\n\"HEAD\"\n)\n    die();\n\nwhile (!\nfeof\n(\n$fp\n)) {\n\n$s\n= @\nfread\n(\n$fp\n,\n8192\n);\n    if (\n$s\n===\nfalse\n)\n        break;\n//useless to send error messages\n\n\necho\n$s\n;\n}\n?>"
  },
  {
    "input": "Example #2 RAR extension filesystem extraction example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Can't open Rar archive\"\n);\n$entries\n=\nrar_list\n(\n$rar_file\n);\nforeach (\n$entries\nas\n$entry\n) {\n    echo\n'Filename: '\n.\n$entry\n->\ngetName\n() .\n\"\\n\"\n;\n    echo\n'Packed size: '\n.\n$entry\n->\ngetPackedSize\n() .\n\"\\n\"\n;\n    echo\n'Unpacked size: '\n.\n$entry\n->\ngetUnpackedSize\n() .\n\"\\n\"\n;\n\n$entry\n->\nextract\n(\n'/dir/extract/to/'\n);\n}\nrar_close\n(\n$rar_file\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'latest_winrar.rar'\n);\necho\n$rar_arch\n.\n\"\\n\"\n;\n$rar_arch\n->\nclose\n();\necho\n$rar_arch\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$rar_arch\n=\nrar_open\n(\n'latest_winrar.rar'\n);\necho\n$rar_arch\n.\n\"\\n\"\n;\nrar_close\n(\n$rar_arch\n);\necho\n$rar_arch\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'commented.rar'\n);\necho\n$rar_arch\n->\ngetComment\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$rar_arch\n=\nrar_open\n(\n'commented.rar'\n);\necho\nrar_comment_get\n(\n$rar_arch\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'solid.rar'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Could not open RAR archive.\"\n);\n$rar_entries\n=\n$rar_arch\n->\ngetEntries\n();\nif (\n$rar_entries\n===\nFALSE\n)\n    die(\n\"Could not retrieve entries.\"\n);\necho\n\"Found \"\n.\ncount\n(\n$rar_entries\n) .\n\" entries.\\n\"\n;\nforeach (\n$rar_entries\nas\n$e\n) {\n    echo\n$e\n;\n    echo\n\"\\n\"\n;\n}\n$rar_arch\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$rar_arch\n=\nrar_open\n(\n'solid.rar'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Could not open RAR archive.\"\n);\n$rar_entries\n=\nrar_list\n(\n$rar_arch\n);\nif (\n$rar_entries\n===\nFALSE\n)\n    die(\n\"Could retrieve entries.\"\n);\necho\n\"Found \"\n.\ncount\n(\n$rar_entries\n) .\n\" entries.\\n\"\n;\nforeach (\n$rar_entries\nas\n$e\n) {\n    echo\n$e\n;\n    echo\n\"\\n\"\n;\n}\nrar_close\n(\n$rar_arch\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'solid.rar'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Could not open RAR archive.\"\n);\n$rar_entry\n=\n$rar_arch\n->\ngetEntry\n(\n'tese.txt'\n);\nif (\n$rar_entry\n===\nFALSE\n)\n    die(\n\"Could not get such entry\"\n);\necho\nget_class\n(\n$rar_entry\n).\n\"\\n\"\n;\necho\n$rar_entry\n;\n$rar_arch\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$rar_arch\n=\nrar_open\n(\n'solid.rar'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Could not open RAR archive.\"\n);\n$rar_entry\n=\nrar_entry_get\n(\n$rar_arch\n,\n'tese.txt'\n);\nif (\n$rar_entry\n===\nFALSE\n)\n    die(\n\"Could not get such entry\"\n);\necho\nget_class\n(\n$rar_entry\n).\n\"\\n\"\n;\necho\n$rar_entry\n;\nrar_close\n(\n$rar_arch\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nfunction\nretnull\n() { return\nnull\n; }\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/multi_broken.part1.rar\"\n;\n/* Third argument is used to omit notice */\n$arch\n=\nRarArchive\n::\nopen\n(\n$file\n,\nnull\n,\n'retnull'\n);\nvar_dump\n(\n$arch\n->\nisBroken\n());\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nfunction\nretnull\n() { return\nnull\n; }\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/multi_broken.part1.rar\"\n;\n/* Third argument is used to omit notice */\n$arch\n=\nrar_open\n(\n$file\n,\nnull\n,\n'retnull'\n);\nvar_dump\n(\nrar_broken_is\n(\n$arch\n));\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$arch1\n=\nRarArchive\n::\nopen\n(\n\"store_method.rar\"\n);\n$arch2\n=\nRarArchive\n::\nopen\n(\n\"solid.rar\"\n);\necho\n\"\n$arch1\n: \"\n. (\n$arch1\n->\nisSolid\n()?\n'yes'\n:\n'no'\n) .\n\"\\n\"\n;\necho\n\"\n$arch2\n: \"\n. (\n$arch2\n->\nisSolid\n()?\n'yes'\n:\n'no'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$arch1\n=\nrar_open\n(\n\"store_method.rar\"\n);\n$arch2\n=\nrar_open\n(\n\"solid.rar\"\n);\necho\n\"\n$arch1\n: \"\n. (\nrar_solid_is\n(\n$arch1\n)?\n'yes'\n:\n'no'\n) .\n\"\\n\"\n;\necho\n\"\n$arch2\n: \"\n. (\nrar_solid_is\n(\n$arch2\n)?\n'yes'\n:\n'no'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'encrypted_headers.rar'\n,\n'samplepassword'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Failed opening file\"\n);\n\n$entries\n=\n$rar_arch\n->\ngetEntries\n();\nif (\n$entries\n===\nFALSE\n)\n    die(\n\"Failed fetching entries\"\n);\necho\n\"Found \"\n.\ncount\n(\n$entries\n) .\n\" files.\\n\"\n;\nif (empty(\n$entries\n))\n    die(\n\"No valid entries found.\"\n);\n\n$stream\n=\nreset\n(\n$entries\n)->\ngetStream\n();\nif (\n$stream\n===\nFALSE\n)\n    die(\n\"Failed opening first file\"\n);\n$rar_arch\n->\nclose\n();\necho\n\"Content of first one follows:\\n\"\n;\necho\nstream_get_contents\n(\n$stream\n);\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$rar_arch\n=\nrar_open\n(\n'encrypted_headers.rar'\n,\n'samplepassword'\n);\nif (\n$rar_arch\n===\nFALSE\n)\n    die(\n\"Failed opening file\"\n);\n\n$entries\n=\nrar_list\n(\n$rar_arch\n);\nif (\n$entries\n===\nFALSE\n)\n    die(\n\"Failed fetching entries\"\n);\necho\n\"Found \"\n.\ncount\n(\n$entries\n) .\n\" files.\\n\"\n;\nif (empty(\n$entries\n))\n    die(\n\"No valid entries found.\"\n);\n\n$stream\n=\nreset\n(\n$entries\n)->\ngetStream\n();\nif (\n$stream\n===\nFALSE\n)\n    die(\n\"Failed opening first file\"\n);\nrar_close\n(\n$rar_arch\n);\necho\n\"Content of first one follows:\\n\"\n;\necho\nstream_get_contents\n(\n$stream\n);\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #3 Volume Callback",
    "output": "<?php\n/* In this example, there's a volume named multi_broken.part1.rar\n * whose next volume is named multi.part2.rar */\nfunction\nresolve\n(\n$vol\n) {\n    if (\npreg_match\n(\n'/_broken/'\n,\n$vol\n))\n        return\nstr_replace\n(\n'_broken'\n,\n''\n,\n$vol\n);\n    else\n        return\nnull\n;\n}\n$rar_file1\n=\nrar_open\n(\ndirname\n(\n__FILE__\n).\n'/multi_broken.part1.rar'\n,\nnull\n,\n'resolve'\n);\n$entry\n=\n$rar_file1\n->\ngetEntry\n(\n'file2.txt'\n);\n$entry\n->\nextract\n(\nnull\n,\ndirname\n(\n__FILE__\n) .\n\"/temp_file2.txt\"\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nfunction\nretnull\n() { return\nnull\n; }\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/multi_broken.part1.rar\"\n;\n/* Third argument omits \"volume not found\" message */\n$a\n=\nRarArchive\n::\nopen\n(\n$file\n,\nnull\n,\n'retnull'\n);\n$a\n->\nsetAllowBroken\n(\ntrue\n);\nforeach (\n$a\n->\ngetEntries\n() as\n$e\n) {\n    echo\n\"\n$e\n\\n\"\n;\n}\nvar_dump\n(\ncount\n(\n$a\n));\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nfunction\nretnull\n() { return\nnull\n; }\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/multi_broken.part1.rar\"\n;\n/* Third argument omits \"volume not found\" message */\n$a\n=\nrar_open\n(\n$file\n,\nnull\n,\n'retnull'\n);\nrar_allow_broken_set\n(\n$a\n,\ntrue\n);\nforeach (\nrar_list\n(\n$a\n) as\n$e\n) {\n    echo\n\"\n$e\n\\n\"\n;\n}\nvar_dump\n(\ncount\n(\n$a\n));\n?>"
  },
  {
    "input": "Example #1 RarArchive::__toString() example",
    "output": "<?php\n$rar_arch\n=\nRarArchive\n::\nopen\n(\n'latest_winrar.rar'\n);\necho\n$rar_arch\n.\n\"\\n\"\n;\n$rar_arch\n->\nclose\n();\necho\n$rar_arch\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 RarEntry::extract() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\n$entry\n->\nextract\n(\n'/dir/to'\n);\n// create /dir/to/Dir/file.txt\n$entry\n->\nextract\n(\nfalse\n,\n'/dir/to/new_name.txt'\n);\n// create /dir/to/new_name.txt\n?>"
  },
  {
    "input": "Example #2 How to extract all files in archive:",
    "output": "<?php\n/* example by Erik Jenssen aka erix */\n$filename\n=\n\"foobar.rar\"\n;\n$filepath\n=\n\"/home/foo/bar/\"\n;\n$rar_file\n=\nrar_open\n(\n$filepath\n.\n$filename\n);\n$list\n=\nrar_list\n(\n$rar_file\n);\nforeach(\n$list\nas\n$file\n) {\n\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n$file\n);\n\n$entry\n->\nextract\n(\n\".\"\n);\n// extract to the current dir\n}\nrar_close\n(\n$rar_file\n);\n?>"
  },
  {
    "input": "Example #1 RarEntry::getAttr() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Can't open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'dir/in/the/archive'\n) or die(\n\"Can't find such entry\"\n);\n$host_os\n=\n$entry\n->\ngetHostOs\n();\n$attr\n=\n$entry\n->\ngetAttr\n();\nswitch(\n$host_os\n) {\n    case\nRAR_HOST_MSDOS\n:\n    case\nRAR_HOST_OS2\n:\n    case\nRAR_HOST_WIN32\n:\n    case\nRAR_HOST_MACOS\n:\n\nprintf\n(\n\"%c%c%c%c%c%c\\n\"\n,\n                (\n$attr\n&\n0x08\n) ?\n'V'\n:\n'.'\n,\n                (\n$attr\n&\n0x10\n) ?\n'D'\n:\n'.'\n,\n                (\n$attr\n&\n0x01\n) ?\n'R'\n:\n'.'\n,\n                (\n$attr\n&\n0x02\n) ?\n'H'\n:\n'.'\n,\n                (\n$attr\n&\n0x04\n) ?\n'S'\n:\n'.'\n,\n                (\n$attr\n&\n0x20\n) ?\n'A'\n:\n'.'\n);\n        break;\n    case\nRAR_HOST_UNIX\n:\n    case\nRAR_HOST_BEOS\n:\n        switch (\n$attr\n&\n0xF000\n)\n        {\n            case\n0x4000\n:\n\nprintf\n(\n\"d\"\n);\n                break;\n            case\n0xA000\n:\n\nprintf\n(\n\"l\"\n);\n                break;\n            default:\n\nprintf\n(\n\"-\"\n);\n                break;\n        }\n\nprintf\n(\n\"%c%c%c%c%c%c%c%c%c\\n\"\n,\n                (\n$attr\n&\n0x0100\n) ?\n'r'\n:\n'-'\n,\n                (\n$attr\n&\n0x0080\n) ?\n'w'\n:\n'-'\n,\n                (\n$attr\n&\n0x0040\n) ? ((\n$attr\n&\n0x0800\n) ?\n's'\n:\n'x'\n):((\n$attr\n&\n0x0800\n) ?\n'S'\n:\n'-'\n),\n                (\n$attr\n&\n0x0020\n) ?\n'r'\n:\n'-'\n,\n                (\n$attr\n&\n0x0010\n) ?\n'w'\n:\n'-'\n,\n                (\n$attr\n&\n0x0008\n) ? ((\n$attr\n&\n0x0400\n) ?\n's'\n:\n'x'\n):((\n$attr\n&\n0x0400\n) ?\n'S'\n:\n'-'\n),\n                (\n$attr\n&\n0x0004\n) ?\n'r'\n:\n'-'\n,\n                (\n$attr\n&\n0x0002\n) ?\n'w'\n:\n'-'\n,\n                (\n$attr\n&\n0x0001\n) ?\n'x'\n:\n'-'\n);\n        break;\n}\nrar_close\n(\n$rar_file\n);\n?>"
  },
  {
    "input": "Example #1 RarEntry::getHostOs() example (version >= 2.0.0)",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\nswitch (\n$entry\n->\ngetHostOs\n()) {\n    case\nRarEntry\n::\nHOST_MSDOS\n:\n        echo\n\"MS-DOS\\n\"\n;\n        break;\n    case\nRarEntry\n::\nHOST_OS2\n:\n        echo\n\"OS2\\n\"\n;\n        break;\n    case\nRarEntry\n::\nHOST_WIN32\n:\n        echo\n\"Win32\\n\"\n;\n        break;\n    case\nRarEntry\n::\nHOST_MACOS\n:\n        echo\n\"MacOS\\n\"\n;\n        break;\n    case\nRarEntry\n::\nHOST_UNIX\n:\n        echo\n\"Unix/Linux\\n\"\n;\n        break;\n    case\nRarEntry\n::\nHOST_BEOS\n:\n        echo\n\"BeOS\\n\"\n;\n        break;\n}\n?>"
  },
  {
    "input": "Example #2 RarEntry::getHostOs() example (version <= 1.0.0)",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\nswitch (\n$entry\n->\ngetHostOs\n()) {\n    case\nRAR_HOST_MSDOS\n:\n        echo\n\"MS-DOS\\n\"\n;\n        break;\n    case\nRAR_HOST_OS2\n:\n        echo\n\"OS2\\n\"\n;\n        break;\n    case\nRAR_HOST_WIN32\n:\n        echo\n\"Win32\\n\"\n;\n        break;\n    case\nRAR_HOST_MACOS\n:\n        echo\n\"MacOS\\n\"\n;\n        break;\n    case\nRAR_HOST_UNIX\n:\n        echo\n\"Unix/Linux\\n\"\n;\n        break;\n    case\nRAR_HOST_BEOS\n:\n        echo\n\"BeOS\\n\"\n;\n        break;\n}\n?>"
  },
  {
    "input": "Example #1 RarEntry::getMethod() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\necho\n\"Method number: \"\n.\n$entry\n->\ngetMethod\n();\n?>"
  },
  {
    "input": "Example #1 RarEntry::getName() example",
    "output": "<?php\n//this example is safe even in pages not encoded in UTF-8\n//for those encoded in UTF-8, the call to mb_convert_encoding is unnecessary\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\necho\n\"Entry name: \"\n.\nmb_convert_encoding\n(\n\nhtmlentities\n(\n\n$entry\n->\ngetName\n(),\n\nENT_COMPAT\n,\n\n\"UTF-8\"\n\n),\n\n\"HTML-ENTITIES\"\n,\n\n\"UTF-8\"\n);\n?>"
  },
  {
    "input": "Example #1 RarEntry::getPackedSize() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\necho\n\"Packed size of \"\n.\n$entry\n->\ngetName\n() .\n\" = \"\n.\n$entry\n->\ngetPackedSize\n() .\n\" bytes\"\n;\n?>"
  },
  {
    "input": "Example #1 RarEntry::getStream() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n);\nif (\n$rar_file\n===\nfalse\n)\n    die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n);\nif (\n$entry\n===\nfalse\n)\n    die(\n\"Failed to find such entry\"\n);\n$stream\n=\n$entry\n->\ngetStream\n();\nif (\n$stream\n===\nfalse\n)\n    die(\n\"Failed to obtain stream.\"\n);\nrar_close\n(\n$rar_file\n);\n//stream is independent from file\nwhile (!\nfeof\n(\n$stream\n)) {\n\n$buff\n=\nfread\n(\n$stream\n,\n8192\n);\n    if (\n$buff\n!==\nfalse\n)\n        echo\n$buff\n;\n    else\n        break;\n//fread error\n}\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 RarEntry::getUnpackedSize() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\necho\n\"Unpacked size of \"\n.\n$entry\n->\ngetName\n() .\n\" = \"\n.\n$entry\n->\ngetPackedSize\n() .\n\" bytes\"\n;\n?>"
  },
  {
    "input": "Example #1 RarEntry::getVersion() example",
    "output": "<?php\n$rar_file\n=\nrar_open\n(\n'example.rar'\n) or die(\n\"Failed to open Rar archive\"\n);\n$entry\n=\nrar_entry_get\n(\n$rar_file\n,\n'Dir/file.txt'\n) or die(\n\"Failed to find such entry\"\n);\necho\n\"Rar version required for unpacking: \"\n.\n$entry\n->\ngetVersion\n();\n?>"
  },
  {
    "input": "Example #1 RarException::isUsingExceptions() example",
    "output": "<?php\n//The default is not to use exceptions\nvar_dump\n(\nRarException\n::\nisUsingExceptions\n());\n?>"
  },
  {
    "input": "Example #1 RarException::setUsingExceptions() example",
    "output": "<?php\nvar_dump\n(\nRarException\n::\nisUsingExceptions\n());\n$arch\n=\nRarArchive\n::\nopen\n(\n\"does_not_exist.rar\"\n);\nvar_dump\n(\n$arch\n);\nRarException\n::\nsetUsingExceptions\n(\ntrue\n);\nvar_dump\n(\nRarException\n::\nisUsingExceptions\n());\n$arch\n=\nRarArchive\n::\nopen\n(\n\"does_not_exist.rar\"\n);\nvar_dump\n(\n$arch\n);\n//not reached\n?>"
  },
  {
    "input": "Example #1 Create a Zip archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\n$filename\n=\n\"./test112.zip\"\n;\nif (\n$zip\n->\nopen\n(\n$filename\n,\nZipArchive\n::\nCREATE\n)!==\nTRUE\n) {\n    exit(\n\"cannot open <\n$filename\n>\\n\"\n);\n}\n$zip\n->\naddFromString\n(\n\"testfilephp.txt\"\n.\ntime\n(),\n\"#1 This is a test string added as testfilephp.txt.\\n\"\n);\n$zip\n->\naddFromString\n(\n\"testfilephp2.txt\"\n.\ntime\n(),\n\"#2 This is a test string added as testfilephp2.txt.\\n\"\n);\n$zip\n->\naddFile\n(\n$thisdir\n.\n\"/too.php\"\n,\n\"/testfromfile.php\"\n);\necho\n\"numfiles: \"\n.\n$zip\n->\nnumFiles\n.\n\"\\n\"\n;\necho\n\"status:\"\n.\n$zip\n->\nstatus\n.\n\"\\n\"\n;\n$zip\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Dump the archive details and listing",
    "output": "<?php\n$za\n= new\nZipArchive\n();\n$za\n->\nopen\n(\n'test_with_comment.zip'\n);\nprint_r\n(\n$za\n);\nvar_dump\n(\n$za\n);\necho\n\"numFiles: \"\n.\n$za\n->\nnumFiles\n.\n\"\\n\"\n;\necho\n\"status: \"\n.\n$za\n->\nstatus\n.\n\"\\n\"\n;\necho\n\"statusSys: \"\n.\n$za\n->\nstatusSys\n.\n\"\\n\"\n;\necho\n\"filename: \"\n.\n$za\n->\nfilename\n.\n\"\\n\"\n;\necho\n\"comment: \"\n.\n$za\n->\ncomment\n.\n\"\\n\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n$za\n->\nnumFiles\n;\n$i\n++) {\n    echo\n\"index:\n$i\n\\n\"\n;\n\nprint_r\n(\n$za\n->\nstatIndex\n(\n$i\n));\n}\necho\n\"numFile:\"\n.\n$za\n->\nnumFiles\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Zip stream wrapper, read an OpenOffice meta info",
    "output": "<?php\n$reader\n= new\nXMLReader\n();\n$reader\n->\nopen\n(\n'zip://'\n.\ndirname\n(\n__FILE__\n) .\n'/test.odt#meta.xml'\n);\n$odt_meta\n= array();\nwhile (\n$reader\n->\nread\n()) {\n    if (\n$reader\n->\nnodeType\n==\nXMLREADER\n::\nELEMENT\n) {\n\n$elm\n=\n$reader\n->\nname\n;\n    } else {\n        if (\n$reader\n->\nnodeType\n==\nXMLREADER\n::\nEND_ELEMENT\n&&\n$reader\n->\nname\n==\n'office:meta'\n) {\n            break;\n        }\n        if (!\ntrim\n(\n$reader\n->\nvalue\n)) {\n            continue;\n        }\n\n$odt_meta\n[\n$elm\n] =\n$reader\n->\nvalue\n;\n    }\n}\nprint_r\n(\n$odt_meta\n);\n?>"
  },
  {
    "input": "Example #4 Zip Usage Example",
    "output": "<?php\n$zip\n=\nzip_open\n(\n\"/tmp/test2.zip\"\n);\nif (\n$zip\n) {\n    while (\n$zip_entry\n=\nzip_read\n(\n$zip\n)) {\n        echo\n\"Name:               \"\n.\nzip_entry_name\n(\n$zip_entry\n) .\n\"\\n\"\n;\n        echo\n\"Actual Filesize:    \"\n.\nzip_entry_filesize\n(\n$zip_entry\n) .\n\"\\n\"\n;\n        echo\n\"Compressed Size:    \"\n.\nzip_entry_compressedsize\n(\n$zip_entry\n) .\n\"\\n\"\n;\n        echo\n\"Compression Method: \"\n.\nzip_entry_compressionmethod\n(\n$zip_entry\n) .\n\"\\n\"\n;\n        if (\nzip_entry_open\n(\n$zip\n,\n$zip_entry\n,\n\"r\"\n)) {\n            echo\n\"File Contents:\\n\"\n;\n\n$buf\n=\nzip_entry_read\n(\n$zip_entry\n,\nzip_entry_filesize\n(\n$zip_entry\n));\n            echo\n\"\n$buf\n\\n\"\n;\n\nzip_entry_close\n(\n$zip_entry\n);\n        }\n        echo\n\"\\n\"\n;\n    }\n\nzip_close\n(\n$zip\n);\n}\n?>"
  },
  {
    "input": "Example #1 Create a new directory in an archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n    if(\n$zip\n->\naddEmptyDir\n(\n'newDirectory'\n)) {\n        echo\n'Created a new root directory'\n;\n    } else {\n        echo\n'Could not create the directory'\n;\n    }\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Open and add",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n'/path/to/index.txt'\n,\n'newname.txt'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Add an entry to a new archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'test.txt'\n,\n'file content goes here'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #2 Add file to a directory inside an archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'dir/test.txt'\n,\n'file content goes here'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Delete file from archive using its index",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\ndeleteIndex\n(\n2\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Deleting a file and directory from an archive, using names",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test1.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\ndeleteName\n(\n'testfromfile.php'\n);\n\n$zip\n->\ndeleteName\n(\n'testDir/'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Extract all entries",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\nextractTo\n(\n'/my/destination/dir/'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #2 Extract two entries",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test_im.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nextractTo\n(\n'/my/destination/dir/'\n, array(\n'pear_item.gif'\n,\n'testfromfile.php'\n));\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dump an archive comment",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test_with_comment.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\nvar_dump\n(\n$zip\n->\ngetArchiveComment\n());\n\n/* Or using the archive property */\n\nvar_dump\n(\n$zip\n->\ncomment\n);\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Test if archive is a torrentzip format",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\ntrue\n) {\n\nvar_dump\n(\n$zip\n->\ngetArchiveFlag\n(\nZipArchive\n::\nAFL_IS_TORRENTZIP\n));\n} else {\n    echo\n'Failed, code: '\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dump an entry comment",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test1.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\nvar_dump\n(\n$zip\n->\ngetCommentIndex\n(\n1\n));\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dump an entry comment",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test1.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\nvar_dump\n(\n$zip\n->\ngetCommentName\n(\n'test/entry1.txt'\n));\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Extract all entries with Unix rights",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n    for (\n$idx\n=\n0\n;\n$s\n=\n$zip\n->\nstatIndex\n(\n$idx\n) ;\n$idx\n++) {\n        if (\n$zip\n->\nextractTo\n(\n'.'\n,\n$s\n[\n'name'\n])) {\n            if (\n$zip\n->\ngetExternalAttributesIndex\n(\n$idx\n,\n$opsys\n,\n$attr\n)\n                &&\n$opsys\n==\nZipArchive\n::\nOPSYS_UNIX\n) {\n\nchmod\n(\n$s\n[\n'name'\n], (\n$attr\n>>\n16\n) &\n0777\n);\n            }\n        }\n    }\n\n$zip\n->\nclose\n();\n    echo\n\"Ok\\n\"\n;\n} else {\n    echo\n\"KO\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Get the file contents",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n    echo\n$zip\n->\ngetFromIndex\n(\n2\n);\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Get the file contents",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test1.zip'\n) ===\nTRUE\n) {\n    echo\n$zip\n->\ngetFromName\n(\n'testfromfile.php'\n);\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #2 Convert an image from a zip entry",
    "output": "<?php\n$z\n= new\nZipArchive\n();\nif (\n$z\n->\nopen\n(\ndirname\n(\n__FILE__\n) .\n'/test_im.zip'\n)) {\n\n$im_string\n=\n$z\n->\ngetFromName\n(\n\"pear_item.gif\"\n);\n\n$im\n=\nimagecreatefromstring\n(\n$im_string\n);\n\nimagepng\n(\n$im\n,\n'b.png'\n);\n}\n?>"
  },
  {
    "input": "Example #1 ZipArchive::getNameIndex() example",
    "output": "<?php\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ==\nTRUE\n) {\n for (\n$i\n=\n0\n;\n$i\n<\n$zip\n->\nnumFiles\n;\n$i\n++) {\n\n$filename\n=\n$zip\n->\ngetNameIndex\n(\n$i\n);\n\n// ...\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 Get the entry contents with fread() and store it",
    "output": "<?php\n$contents\n=\n''\n;\n$z\n= new\nZipArchive\n();\nif (\n$z\n->\nopen\n(\n'test.zip'\n)) {\n\n$fp\n=\n$z\n->\ngetStream\n(\n'test'\n);\n    if(!\n$fp\n) exit(\n\"failed\\n\"\n);\n    while (!\nfeof\n(\n$fp\n)) {\n\n$contents\n.=\nfread\n(\n$fp\n,\n2\n);\n    }\n\nfclose\n(\n$fp\n);\n\nfile_put_contents\n(\n't'\n,\n$contents\n);\n    echo\n\"done.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Same as the previous example but with fopen() and the zip\n     stream wrapper",
    "output": "<?php\n$contents\n=\n''\n;\n$fp\n=\nfopen\n(\n'zip://'\n.\ndirname\n(\n__FILE__\n) .\n'/test.zip#test'\n,\n'r'\n);\nif (!\n$fp\n) {\n    exit(\n\"cannot open\\n\"\n);\n}\nwhile (!\nfeof\n(\n$fp\n)) {\n\n$contents\n.=\nfread\n(\n$fp\n,\n2\n);\n}\necho\n\"\n$contents\n\\n\"\n;\nfclose\n(\n$fp\n);\necho\n\"done.\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Stream wrapper and image, can be used with the xml function\n     as well",
    "output": "<?php\n$im\n=\nimagecreatefromgif\n(\n'zip://'\n.\ndirname\n(\n__FILE__\n) .\n'/test_im.zip#pear_item.gif'\n);\nimagepng\n(\n$im\n,\n'a.png'\n);\n?>"
  },
  {
    "input": "Example #1 Get the entry contents with fread() and store it",
    "output": "<?php\n$contents\n=\n''\n;\n$z\n= new\nZipArchive\n();\nif (\n$z\n->\nopen\n(\n'test.zip'\n)) {\n\n$fp\n=\n$z\n->\ngetStreamIndex\n(\n1\n,\nZipArchive\n::\nFL_UNCHANGED\n);\n    if(!\n$fp\n) die(\n$z\n->\ngetStatusString\n());\n    echo\nstream_get_contents\n(\n$fp\n);\n\nfclose\n(\n$fp\n);\n}\n?>"
  },
  {
    "input": "Example #1 Get the entry contents with fread() and store it",
    "output": "<?php\n$contents\n=\n''\n;\n$z\n= new\nZipArchive\n();\nif (\n$z\n->\nopen\n(\n'test.zip'\n)) {\n\n$fp\n=\n$z\n->\ngetStreamName\n(\n'test'\n,\nZipArchive\n::\nFL_UNCHANGED\n);\n    if(!\n$fp\n) die(\n$z\n->\ngetStatusString\n());\n    echo\nstream_get_contents\n(\n$fp\n);\n\nfclose\n(\n$fp\n);\n}\n?>"
  },
  {
    "input": "Example #1 Create an archive and then use it with ZipArchive::locateName()",
    "output": "<?php\n$file\n=\n'testlocate.zip'\n;\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n$file\n,\nZipArchive\n::\nCREATE\n) !==\nTRUE\n) {\n    exit(\n'failed'\n);\n}\n$zip\n->\naddFromString\n(\n'entry1.txt'\n,\n'entry #1'\n);\n$zip\n->\naddFromString\n(\n'entry2.txt'\n,\n'entry #2'\n);\n$zip\n->\naddFromString\n(\n'dir/entry2d.txt'\n,\n'entry #2'\n);\nif (\n$zip\n->\nstatus\n!==\nZipArchive\n::\nER_OK\n) {\n    echo\n\"failed to write zip\\n\"\n;\n}\n$zip\n->\nclose\n();\nif (\n$zip\n->\nopen\n(\n$file\n) !==\nTRUE\n) {\n    exit(\n'failed'\n);\n}\necho\n$zip\n->\nlocateName\n(\n'entry1.txt'\n) .\n\"\\n\"\n;\necho\n$zip\n->\nlocateName\n(\n'eNtry2.txt'\n) .\n\"\\n\"\n;\necho\n$zip\n->\nlocateName\n(\n'eNtry2.txt'\n,\nZipArchive\n::\nFL_NOCASE\n) .\n\"\\n\"\n;\necho\n$zip\n->\nlocateName\n(\n'enTRy2d.txt'\n,\nZipArchive\n::\nFL_NOCASE\n|\nZipArchive\n::\nFL_NODIR\n) .\n\"\\n\"\n;\n$zip\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 Open and extract",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n    echo\n'ok'\n;\n\n$zip\n->\nextractTo\n(\n'test'\n);\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #2 Create an archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'test.txt'\n,\n'file content goes here'\n);\n\n$zip\n->\naddFile\n(\n'data.txt'\n,\n'entryname.txt'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #3 Create an temporary archive",
    "output": "<?php\n$name\n=\ntempnam\n(\nsys_get_temp_dir\n(),\n\"FOO\"\n);\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n$name\n,\nZipArchive\n::\nOVERWRITE\n);\n/* truncate as empty file is not valid */\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n'data.txt'\n,\n'entryname.txt'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Archive a file",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\nif (\n$zip\n->\nopen\n(\n'php.zip'\n,\nZipArchive\n::\nCREATE\n|\nZipArchive\n::\nOVERWRITE\n)) {\n\n$zip\n->\naddFile\n(\nPHP_BINARY\n,\n'php'\n);\n\n$zip\n->\nregisterCancelCallback\n(function () {\n        return (\n$someruncondition\n? -\n1\n:\n0\n);\n    });\n\n$zip\n->\nclose\n();\n}"
  },
  {
    "input": "Example #1 Archive a file",
    "output": "$zip = new ZipArchive();\nif ($zip->open('php.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE)) {\n    $zip->addFile(PHP_BINARY, 'php');\n    $zip->registerProgressCallback(0.05, function ($r) {\n        printf(\"%d%%\\n\", $r * 100);\n    });\n    $zip->close();\n}"
  },
  {
    "input": "Example #1 Rename one entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nrenameIndex\n(\n2\n,\n'newname.txt'\n);\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Rename one entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nrenameName\n(\n'currentname.txt'\n,\n'newname.txt'\n);\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Open and replace",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\nif (\n$zip\n->\nopen\n(\n'test.zip'\n) ===\nTRUE\n) {\n\n$zip\n->\nreplaceFile\n(\n'/path/to/index.txt'\n,\n1\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Create an archive and set a comment",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'test.txt'\n,\n'file content goes here'\n);\n\n$zip\n->\nsetArchiveComment\n(\n'new archive comment'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Create a torrentzip archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nsetArchiveFlag\n(\nZipArchive\n::\nAFL_WANT_TORRENTZIP\n,\n1\n);\n\n$zip\n->\naddFromString\n(\n'test.txt'\n,\n'file content goes here'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Open an archive and set a comment for an entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nsetCommentIndex\n(\n2\n,\n'new entry comment'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Open an archive and set a comment for an entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\nsetCommentName\n(\n'entry1.txt'\n,\n'new entry comment'\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Add files with different compression methods to an archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'foo'\n,\n'Some text'\n);\n\n$zip\n->\naddFromString\n(\n'bar'\n,\n'Some other text'\n);\n\n$zip\n->\nsetCompressionIndex\n(\n0\n,\nZipArchive\n::\nCM_STORE\n);\n\n$zip\n->\nsetCompressionIndex\n(\n1\n,\nZipArchive\n::\nCM_DEFLATE\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Add files with different compression methods to an archive",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFromString\n(\n'foo'\n,\n'Some text'\n);\n\n$zip\n->\naddFromString\n(\n'bar'\n,\n'Some other text'\n);\n\n$zip\n->\nsetCompressionName\n(\n'foo'\n,\nZipArchive\n::\nCM_STORE\n);\n\n$zip\n->\nsetCompressionName\n(\n'bar'\n,\nZipArchive\n::\nCM_DEFLATE\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #2 Add file and set compression method",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n);\nif (\n$res\n===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n'foo.jpg'\n,\n'bar.jpg'\n);\n\n$zip\n->\nsetCompressionName\n(\n'bar.jpg'\n,\nZipArchive\n::\nCM_XZ\n);\n\n$zip\n->\nclose\n();\n    echo\n'ok'\n;\n} else {\n    echo\n'failed'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Archive and encrypt a file",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\nif (\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n) ===\nTRUE\n) {\n\n$zip\n->\nsetPassword\n(\n'secret'\n);\n\n$zip\n->\naddFile\n(\n'text.txt'\n);\n\n$zip\n->\nsetEncryptionName\n(\n'text.txt'\n,\nZipArchive\n::\nEM_AES_256\n);\n\n$zip\n->\nclose\n();\n    echo\n\"Ok\\n\"\n;\n} else {\n    echo\n\"KO\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Archive a file, with its Unix rights",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\n$stat\n=\nstat\n(\n$filename\n=\n'test.txt'\n);\nif (\nis_array\n(\n$stat\n) &&\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n) ===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n$filename\n);\n\n$zip\n->\nsetExternalAttributesName\n(\n$filename\n,\nZipArchive\n::\nOPSYS_UNIX\n,\n$stat\n[\n'mode'\n] <<\n16\n);\n\n$zip\n->\nclose\n();\n    echo\n\"Ok\\n\"\n;\n} else {\n    echo\n\"KO\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Archive a file",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\nif (\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n) ===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n'text.txt'\n);\n\n$zip\n->\nsetMtimeIndex\n(\n0\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n12\n,\n25\n,\n2019\n));\n\n$zip\n->\nclose\n();\n    echo\n\"Ok\\n\"\n;\n} else {\n    echo\n\"KO\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Archive a file",
    "output": "<?php\n$zip\n= new\nZipArchive\n();\nif (\n$zip\n->\nopen\n(\n'test.zip'\n,\nZipArchive\n::\nCREATE\n) ===\nTRUE\n) {\n\n$zip\n->\naddFile\n(\n'text.txt'\n);\n\n$zip\n->\nsetMtimeName\n(\n'text.txt'\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n12\n,\n25\n,\n2019\n));\n\n$zip\n->\nclose\n();\n    echo\n\"Ok\\n\"\n;\n} else {\n    echo\n\"KO\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dump the stat info of an entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\nprint_r\n(\n$zip\n->\nstatIndex\n(\n3\n));\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dump the stat info of an entry",
    "output": "<?php\n$zip\n= new\nZipArchive\n;\n$res\n=\n$zip\n->\nopen\n(\n'test.zip'\n);\nif (\n$res\n===\nTRUE\n) {\n\nprint_r\n(\n$zip\n->\nstatName\n(\n'foobar/baz'\n));\n\n$zip\n->\nclose\n();\n} else {\n    echo\n'failed, code:'\n.\n$res\n;\n}\n?>"
  },
  {
    "input": "Example #1 Small Zlib Example",
    "output": "<?php\n$filename\n=\ntempnam\n(\n'/tmp'\n,\n'zlibtest'\n) .\n'.gz'\n;\necho\n\"<html>\\n<head></head>\\n<body>\\n<pre>\\n\"\n;\n$s\n=\n\"Only a test, test, test, test, test, test, test, test!\\n\"\n;\n// open file for writing with maximum compression\n$zp\n=\ngzopen\n(\n$filename\n,\n\"w9\"\n);\n// write string to file\ngzwrite\n(\n$zp\n,\n$s\n);\n// close file\ngzclose\n(\n$zp\n);\n// open file for reading\n$zp\n=\ngzopen\n(\n$filename\n,\n\"r\"\n);\n// read 3 char\necho\ngzread\n(\n$zp\n,\n3\n);\n// output until end of the file and close it.\ngzpassthru\n(\n$zp\n);\ngzclose\n(\n$zp\n);\necho\n\"\\n\"\n;\n// open file and print content (the 2nd time).\nif (\nreadgzfile\n(\n$filename\n) !=\nstrlen\n(\n$s\n)) {\n        echo\n\"Error with zlib functions!\"\n;\n}\nunlink\n(\n$filename\n);\necho\n\"</pre>\\n</body>\\n</html>\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Working with the incremental compression and decompression API",
    "output": "<?php\n// Perform GZIP compression:\n$deflateContext\n=\ndeflate_init\n(\nZLIB_ENCODING_GZIP\n);\n$compressed\n=\ndeflate_add\n(\n$deflateContext\n,\n\"Data to compress\"\n,\nZLIB_NO_FLUSH\n);\n$compressed\n.=\ndeflate_add\n(\n$deflateContext\n,\n\", more data\"\n,\nZLIB_NO_FLUSH\n);\n$compressed\n.=\ndeflate_add\n(\n$deflateContext\n,\n\", and even more data!\"\n,\nZLIB_FINISH\n);\n// Perform GZIP decompression:\n$inflateContext\n=\ninflate_init\n(\nZLIB_ENCODING_GZIP\n);\n$uncompressed\n=\ninflate_add\n(\n$inflateContext\n,\n$compressed\n,\nZLIB_NO_FLUSH\n);\n$uncompressed\n.=\ninflate_add\n(\n$inflateContext\n,\nNULL\n,\nZLIB_FINISH\n);\necho\n$uncompressed\n;\n?>"
  },
  {
    "input": "Example #1 gzclose() example",
    "output": "<?php\n$gz\n=\ngzopen\n(\n'somefile.gz'\n,\n'w9'\n);\ngzputs\n(\n$gz\n,\n'I was added to somefile.gz'\n);\ngzclose\n(\n$gz\n);\n?>"
  },
  {
    "input": "Example #1 gzcompress() example",
    "output": "<?php\n$compressed\n=\ngzcompress\n(\n'Compress me'\n,\n9\n);\necho\n$compressed\n;\n?>"
  },
  {
    "input": "Example #1 gzdeflate() example",
    "output": "<?php\n$compressed\n=\ngzdeflate\n(\n'Compress me'\n,\n9\n);\necho\n$compressed\n;\n?>"
  },
  {
    "input": "Example #1 Creating a gzip file",
    "output": "<?php\n$data\n=\nfile_get_contents\n(\n\"bigfile.txt\"\n);\n$gzdata\n=\ngzencode\n(\n$data\n,\n9\n);\nfile_put_contents\n(\n\"bigfile.txt.gz\"\n,\n$gzdata\n);\n?>"
  },
  {
    "input": "Example #1 gzeof() example",
    "output": "<?php\n$gz\n=\ngzopen\n(\n'somefile.gz'\n,\n'r'\n);\nwhile (!\ngzeof\n(\n$gz\n)) {\n  echo\ngzgetc\n(\n$gz\n);\n}\ngzclose\n(\n$gz\n);\n?>"
  },
  {
    "input": "Example #1 gzfile() example",
    "output": "<?php\n$lines\n=\ngzfile\n(\n'somefile.gz'\n);\nforeach (\n$lines\nas\n$line\n) {\n    echo\n$line\n;\n}\n?>"
  },
  {
    "input": "Example #1 gzgetc() example",
    "output": "<?php\n$gz\n=\ngzopen\n(\n'somefile.gz'\n,\n'r'\n);\nwhile (!\ngzeof\n(\n$gz\n)) {\n  echo\ngzgetc\n(\n$gz\n);\n}\ngzclose\n(\n$gz\n);\n?>"
  },
  {
    "input": "Example #1 gzgets() example",
    "output": "<?php\n$handle\n=\ngzopen\n(\n'somefile.gz'\n,\n'r'\n);\nwhile (!\ngzeof\n(\n$handle\n)) {\n\n$buffer\n=\ngzgets\n(\n$handle\n,\n4096\n);\n   echo\n$buffer\n;\n}\ngzclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 gzgetss() example",
    "output": "<?php\n$handle\n=\ngzopen\n(\n'somefile.gz'\n,\n'r'\n);\nwhile (!\ngzeof\n(\n$handle\n)) {\n\n$buffer\n=\ngzgetss\n(\n$handle\n,\n4096\n);\n   echo\n$buffer\n;\n}\ngzclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 gzinflate() example",
    "output": "<?php\n$compressed\n=\ngzdeflate\n(\n'Compress me'\n,\n9\n);\n$uncompressed\n=\ngzinflate\n(\n$compressed\n);\necho\n$uncompressed\n;\n?>"
  },
  {
    "input": "Example #1 gzopen() Example",
    "output": "<?php\n$fp\n=\ngzopen\n(\n\"/tmp/file.gz\"\n,\n\"r\"\n);\n?>"
  },
  {
    "input": "Example #1 gzpassthru() example",
    "output": "<?php\n$fp\n=\ngzopen\n(\n'file.gz'\n,\n'r'\n);\ngzpassthru\n(\n$fp\n);\ngzclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 gzread() example",
    "output": "<?php\n// get contents of a gz-file into a string\n$filename\n=\n\"/usr/local/something.txt.gz\"\n;\n$zd\n=\ngzopen\n(\n$filename\n,\n\"r\"\n);\n$contents\n=\ngzread\n(\n$zd\n,\n10000\n);\ngzclose\n(\n$zd\n);\n?>"
  },
  {
    "input": "Example #1 gzseek() example",
    "output": "<?php\n$gz\n=\ngzopen\n(\n'somefile.gz'\n,\n'r'\n);\ngzseek\n(\n$gz\n,\n2\n);\necho\ngzgetc\n(\n$gz\n);\ngzclose\n(\n$gz\n);\n?>"
  },
  {
    "input": "Example #1 gzuncompress() example",
    "output": "<?php\n$compressed\n=\ngzcompress\n(\n'Compress me'\n,\n9\n);\n$uncompressed\n=\ngzuncompress\n(\n$compressed\n);\necho\n$uncompressed\n;\n?>"
  },
  {
    "input": "Example #1 gzwrite() example",
    "output": "<?php\n$string\n=\n'Some information to compress'\n;\n$gz\n=\ngzopen\n(\n'somefile.gz'\n,\n'w9'\n);\ngzwrite\n(\n$gz\n,\n$string\n);\ngzclose\n(\n$gz\n);\n?>"
  },
  {
    "input": "Example #1 ob_gzhandler() example",
    "output": "<?php\nob_start\n(\n\"ob_gzhandler\"\n);\n?>\n<html>\n<body>\n<p>This should be a compressed page.</p>\n</body>\n</html>"
  },
  {
    "input": "Example #1 zlib_encode() example",
    "output": "<?php\n$str\n=\n'hello world'\n;\n$enc\n=\nzlib_encode\n(\n$str\n,\nZLIB_ENCODING_DEFLATE\n);\necho\nbin2hex\n(\n$enc\n);\n?>"
  },
  {
    "input": "Example #1 A hash() example",
    "output": "<?php\necho\nhash\n(\n'sha256'\n,\n'The quick brown fox jumped over the lazy dog.'\n);\n?>"
  },
  {
    "input": "Example #1 hash_copy() example",
    "output": "<?php\n$context\n=\nhash_init\n(\n\"sha256\"\n);\nhash_update\n(\n$context\n,\n\"The quick brown fox \"\n);\n/* copy context to be able to continue using it */\n$copy_context\n=\nhash_copy\n(\n$context\n);\necho\nhash_final\n(\n$context\n),\n\"\\n\"\n;\nhash_update\n(\n$copy_context\n,\n\"jumped over the lazy dog.\"\n);\necho\nhash_final\n(\n$copy_context\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 hash_equals() example",
    "output": "<?php\n$secretKey\n=\n'8uRhAeH89naXfFXKGOEj'\n;\n// Value and signature are provided by the user, e.g. within the URL\n// and retrieved using $_GET.\n$value\n=\n'username=rasmuslerdorf'\n;\n$signature\n=\n'8c35009d3b50caf7f5d2c1e031842e6b7823a1bb781d33c5237cd27b57b5f327'\n;\nif (\nhash_equals\n(\nhash_hmac\n(\n'sha256'\n,\n$value\n,\n$secretKey\n),\n$signature\n)) {\n    echo\n\"The value is correctly signed.\"\n,\nPHP_EOL\n;\n} else {\n    echo\n\"The value was tampered with.\"\n,\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Using hash_file()",
    "output": "<?php\n/* Create a file to calculate hash of */\nfile_put_contents\n(\n'example.txt'\n,\n'The quick brown fox jumped over the lazy dog.'\n);\necho\nhash_file\n(\n'sha256'\n,\n'example.txt'\n);\n?>"
  },
  {
    "input": "Example #1 hash_hkdf() example",
    "output": "<?php\n// Generate a random key, and salt to strengthen it during derivation.\n$inputKey\n=\nrandom_bytes\n(\n32\n);\n$salt\n=\nrandom_bytes\n(\n16\n);\n// Derive a pair of separate keys, using the same input created above.\n$encryptionKey\n=\nhash_hkdf\n(\n'sha256'\n,\n$inputKey\n,\n32\n,\n'aes-256-encryption'\n,\n$salt\n);\n$authenticationKey\n=\nhash_hkdf\n(\n'sha256'\n,\n$inputKey\n,\n32\n,\n'sha-256-authentication'\n,\n$salt\n);\nvar_dump\n(\n$encryptionKey\n!==\n$authenticationKey\n);\n// bool(true)\n?>"
  },
  {
    "input": "Example #1 hash_hmac() example",
    "output": "<?php\necho\nhash_hmac\n(\n'sha256'\n,\n'The quick brown fox jumped over the lazy dog.'\n,\n'secret'\n);\n?>"
  },
  {
    "input": "Example #1 hash_hmac_algos() example",
    "output": "<?php\nprint_r\n(\nhash_hmac_algos\n());"
  },
  {
    "input": "Example #1 hash_hmac_file() example",
    "output": "<?php\n/* Create a file to calculate hash of */\nfile_put_contents\n(\n'example.txt'\n,\n'The quick brown fox jumped over the lazy dog.'\n);\necho\nhash_hmac_file\n(\n'sha256'\n,\n'example.txt'\n,\n'secret'\n);\n?>"
  },
  {
    "input": "Example #1 Incremental hashing example",
    "output": "<?php\n$hash\n=\nhash\n(\n'sha256'\n,\n'The quick brown fox jumped over the lazy dog.'\n);\n$ctx\n=\nhash_init\n(\n'sha256'\n);\nhash_update\n(\n$ctx\n,\n'The quick brown fox '\n);\nhash_update\n(\n$ctx\n,\n'jumped over the lazy dog.'\n);\n$incremental_hash\n=\nhash_final\n(\n$ctx\n);\necho\n$incremental_hash\n,\nPHP_EOL\n;\nvar_dump\n(\n$hash\n===\n$incremental_hash\n);\n?>"
  },
  {
    "input": "Example #1 hash_pbkdf2() example, basic usage",
    "output": "<?php\n$password\n=\n\"password\"\n;\n$iterations\n=\n600000\n;\n// Generate a cryptographically secure random salt using random_bytes()\n$salt\n=\nrandom_bytes\n(\n16\n);\n$hash\n=\nhash_pbkdf2\n(\n\"sha256\"\n,\n$password\n,\n$salt\n,\n$iterations\n,\n20\n);\nvar_dump\n(\n$hash\n);\n// for raw binary, the $length needs to be halved for equivalent results\n$hash\n=\nhash_pbkdf2\n(\n\"sha256\"\n,\n$password\n,\n$salt\n,\n$iterations\n,\n10\n,\ntrue\n);\nvar_dump\n(\nbin2hex\n(\n$hash\n));\n?>"
  },
  {
    "input": "Example #1 hash_update_stream() example",
    "output": "<?php\n$fp\n=\ntmpfile\n();\nfwrite\n(\n$fp\n,\n'jumped over the lazy dog.'\n);\nrewind\n(\n$fp\n);\n$ctx\n=\nhash_init\n(\n'sha256'\n);\nhash_update\n(\n$ctx\n,\n'The quick brown fox '\n);\nhash_update_stream\n(\n$ctx\n,\n$fp\n);\necho\nhash_final\n(\n$ctx\n);\n?>"
  },
  {
    "input": "Example #1 mcrypt_create_iv() Example",
    "output": "<?php\n    $size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_CAST_256\n,\nMCRYPT_MODE_CFB\n);\n\n$iv\n=\nmcrypt_create_iv\n(\n$size\n,\nMCRYPT_DEV_RANDOM\n);\n?>"
  },
  {
    "input": "Example #1 mcrypt_enc_get_algorithms_name() example",
    "output": "<?php\n$td\n=\nmcrypt_module_open\n(\nMCRYPT_CAST_256\n,\n''\n,\nMCRYPT_MODE_CFB\n,\n''\n);\necho\nmcrypt_enc_get_algorithms_name\n(\n$td\n).\n\"\\n\"\n;\n$td\n=\nmcrypt_module_open\n(\n'cast-256'\n,\n''\n,\nMCRYPT_MODE_CFB\n,\n''\n);\necho\nmcrypt_enc_get_algorithms_name\n(\n$td\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mcrypt_enc_get_modes_name() example",
    "output": "<?php\n$td\n=\nmcrypt_module_open\n(\nMCRYPT_CAST_256\n,\n''\n,\nMCRYPT_MODE_CFB\n,\n''\n);\necho\nmcrypt_enc_get_modes_name\n(\n$td\n).\n\"\\n\"\n;\n$td\n=\nmcrypt_module_open\n(\n'cast-256'\n,\n''\n,\n'ecb'\n,\n''\n);\necho\nmcrypt_enc_get_modes_name\n(\n$td\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mcrypt_enc_get_supported_key_sizes() example",
    "output": "<?php\n    $td\n=\nmcrypt_module_open\n(\n'rijndael-256'\n,\n''\n,\n'ecb'\n,\n''\n);\n\nvar_dump\n(\nmcrypt_enc_get_supported_key_sizes\n(\n$td\n));\n?>"
  },
  {
    "input": "Example #1 mcrypt_encrypt() Example",
    "output": "<?php\n\n# --- ENCRYPTION ---\n    # the key should be random binary, use scrypt, bcrypt or PBKDF2 to\n    # convert a string into a key\n    # key is specified using hexadecimal\n\n$key\n=\npack\n(\n'H*'\n,\n\"bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3\"\n);\n\n\n# show key size use either 16, 24 or 32 byte keys for AES-128, 192\n    # and 256 respectively\n\n$key_size\n=\nstrlen\n(\n$key\n);\n    echo\n\"Key size: \"\n.\n$key_size\n.\n\"\\n\"\n;\n\n\n$plaintext\n=\n\"This string was AES-256 / CBC / ZeroBytePadding encrypted.\"\n;\n\n# create a random IV to use with CBC encoding\n\n$iv_size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_RIJNDAEL_128\n,\nMCRYPT_MODE_CBC\n);\n\n$iv\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_RAND\n);\n\n\n# creates a cipher text compatible with AES (Rijndael block size = 128)\n    # to keep the text confidential\n    # only suitable for encoded input that never ends with value 00h\n    # (because of default zero padding)\n\n$ciphertext\n=\nmcrypt_encrypt\n(\nMCRYPT_RIJNDAEL_128\n,\n$key\n,\n\n$plaintext\n,\nMCRYPT_MODE_CBC\n,\n$iv\n);\n\n# prepend the IV for it to be available for decryption\n\n$ciphertext\n=\n$iv\n.\n$ciphertext\n;\n\n\n# encode the resulting cipher text so it can be represented by a string\n\n$ciphertext_base64\n=\nbase64_encode\n(\n$ciphertext\n);\n    echo\n$ciphertext_base64\n.\n\"\\n\"\n;\n\n# === WARNING ===\n    # Resulting cipher text has no integrity or authenticity added\n    # and is not protected against padding oracle attacks.\n\n    # --- DECRYPTION ---\n\n\n$ciphertext_dec\n=\nbase64_decode\n(\n$ciphertext_base64\n);\n\n\n# retrieves the IV, iv_size should be created using mcrypt_get_iv_size()\n\n$iv_dec\n=\nsubstr\n(\n$ciphertext_dec\n,\n0\n,\n$iv_size\n);\n\n\n# retrieves the cipher text (everything except the $iv_size in the front)\n\n$ciphertext_dec\n=\nsubstr\n(\n$ciphertext_dec\n,\n$iv_size\n);\n\n# may remove 00h valued characters from end of plain text\n\n$plaintext_dec\n=\nmcrypt_decrypt\n(\nMCRYPT_RIJNDAEL_128\n,\n$key\n,\n\n$ciphertext_dec\n,\nMCRYPT_MODE_CBC\n,\n$iv_dec\n);\n\n    echo\n$plaintext_dec\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mcrypt_get_cipher_name() Example",
    "output": "<?php\n   $cipher\n=\nMCRYPT_TripleDES\n;\n   echo\nmcrypt_get_cipher_name\n(\n$cipher\n);\n?>"
  },
  {
    "input": "Example #1 mcrypt_get_iv_size() Example",
    "output": "<?php\n\necho\nmcrypt_get_iv_size\n(\nMCRYPT_CAST_256\n,\nMCRYPT_MODE_CFB\n) .\n\"\\n\"\n;\n    echo\nmcrypt_get_iv_size\n(\n'des'\n,\n'ecb'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mcrypt_get_key_size() Example",
    "output": "<?php\n\necho\nmcrypt_get_key_size\n(\n'tripledes'\n,\n'ecb'\n);\n?>"
  },
  {
    "input": "Example #1 mcrypt_list_algorithms() Example",
    "output": "<?php\n$algorithms\n=\nmcrypt_list_algorithms\n();\nprint_r\n(\n$algorithms\n);\n?>"
  },
  {
    "input": "Example #1 mcrypt_list_modes() Example",
    "output": "<?php\n    $modes\n=\nmcrypt_list_modes\n();\n    foreach (\n$modes\nas\n$mode\n) {\n        echo\n\"\n$mode\n <br />\\n\"\n;\n    }\n?>"
  },
  {
    "input": "Example #1 mcrypt_module_open() Examples",
    "output": "<?php\n    $td\n=\nmcrypt_module_open\n(\nMCRYPT_DES\n,\n''\n,\n\nMCRYPT_MODE_ECB\n,\n'/usr/lib/mcrypt-modes'\n);\n\n$td\n=\nmcrypt_module_open\n(\n'rijndael-256'\n,\n''\n,\n'ofb'\n,\n''\n);\n?>"
  },
  {
    "input": "Example #2 Using mcrypt_module_open() in encryption",
    "output": "<?php\n\n/* Open the cipher */\n\n$td\n=\nmcrypt_module_open\n(\n'rijndael-256'\n,\n''\n,\n'ofb'\n,\n''\n);\n\n/* Create the IV and determine the keysize length, use MCRYPT_RAND\n     * on Windows instead */\n\n$iv\n=\nmcrypt_create_iv\n(\nmcrypt_enc_get_iv_size\n(\n$td\n),\nMCRYPT_DEV_RANDOM\n);\n\n$ks\n=\nmcrypt_enc_get_key_size\n(\n$td\n);\n\n/* Create key (example only: MD5 is not a good hash algorithm for this) */\n\n$key\n=\nsubstr\n(\nhash\n(\n'md5'\n,\n'very secret key'\n),\n0\n,\n$ks\n);\n\n/* Intialize encryption */\n\nmcrypt_generic_init\n(\n$td\n,\n$key\n,\n$iv\n);\n\n/* Encrypt data */\n\n$encrypted\n=\nmcrypt_generic\n(\n$td\n,\n'This is very important data'\n);\n\n/* Terminate encryption handler */\n\nmcrypt_generic_deinit\n(\n$td\n);\n\n/* Initialize encryption module for decryption */\n\nmcrypt_generic_init\n(\n$td\n,\n$key\n,\n$iv\n);\n\n/* Decrypt encrypted string */\n\n$decrypted\n=\nmdecrypt_generic\n(\n$td\n,\n$encrypted\n);\n\n/* Terminate decryption handle and close module */\n\nmcrypt_generic_deinit\n(\n$td\n);\n\nmcrypt_module_close\n(\n$td\n);\n\n/* Show string */\n\necho\ntrim\n(\n$decrypted\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mcrypt_module_self_test() example",
    "output": "<?php\nvar_dump\n(\nmcrypt_module_self_test\n(\nMCRYPT_RIJNDAEL_128\n)) .\n\"\\n\"\n;\nvar_dump\n(\nmcrypt_module_self_test\n(\nMCRYPT_BOGUS_CYPHER\n));\n?>"
  },
  {
    "input": "Example #1 mdecrypt_generic() Example",
    "output": "<?php\n\n/* Data */\n\n$key\n=\n'this is a very long key, even too long for the cipher'\n;\n\n$plain_text\n=\n'very important data'\n;\n\n/* Open module, and create IV */\n\n$td\n=\nmcrypt_module_open\n(\n'des'\n,\n''\n,\n'ecb'\n,\n''\n);\n\n$key\n=\nsubstr\n(\n$key\n,\n0\n,\nmcrypt_enc_get_key_size\n(\n$td\n));\n\n$iv_size\n=\nmcrypt_enc_get_iv_size\n(\n$td\n);\n\n$iv\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_RAND\n);\n\n/* Initialize encryption handle */\n\nif (\nmcrypt_generic_init\n(\n$td\n,\n$key\n,\n$iv\n) != -\n1\n) {\n\n/* Encrypt data */\n\n$c_t\n=\nmcrypt_generic\n(\n$td\n,\n$plain_text\n);\n\nmcrypt_generic_deinit\n(\n$td\n);\n\n/* Reinitialize buffers for decryption */\n\nmcrypt_generic_init\n(\n$td\n,\n$key\n,\n$iv\n);\n\n$p_t\n=\nmdecrypt_generic\n(\n$td\n,\n$c_t\n);\n\n/* Clean up */\n\nmcrypt_generic_deinit\n(\n$td\n);\n\nmcrypt_module_close\n(\n$td\n);\n    }\n    if (\nstrncmp\n(\n$p_t\n,\n$plain_text\n,\nstrlen\n(\n$plain_text\n)) ==\n0\n) {\n        echo\n\"ok\\n\"\n;\n    } else {\n        echo\n\"error\\n\"\n;\n    }\n?>"
  },
  {
    "input": "Example #1 Computes the MD5 digest and hmac and print it out as hex",
    "output": "<?php\n$input\n=\n\"what do ya want for nothing?\"\n;\n$hash\n=\nmhash\n(\nMHASH_MD5\n,\n$input\n);\necho\n\"The hash is \"\n.\nbin2hex\n(\n$hash\n) .\n\"<br />\\n\"\n;\n$hash\n=\nmhash\n(\nMHASH_MD5\n,\n$input\n,\n\"Jefe\"\n);\necho\n\"The hmac is \"\n.\nbin2hex\n(\n$hash\n) .\n\"<br />\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Traversing all hashes",
    "output": "<?php\n$nr\n=\nmhash_count\n();\nfor (\n$i\n=\n0\n;\n$i\n<=\n$nr\n;\n$i\n++) {\n    echo\nsprintf\n(\n\"The blocksize of %s is %d\\n\"\n,\n\nmhash_get_hash_name\n(\n$i\n),\n\nmhash_get_block_size\n(\n$i\n));\n}\n?>"
  },
  {
    "input": "Example #1 mhash_get_block_size() Example",
    "output": "<?php\necho\nmhash_get_block_size\n(\nMHASH_MD5\n);\n// 16\n?>"
  },
  {
    "input": "Example #1 mhash_get_hash_name() Example",
    "output": "<?php\necho\nmhash_get_hash_name\n(\nMHASH_MD5\n);\n// MD5\n?>"
  },
  {
    "input": "Example #1 openssl_cipher_iv_length() example",
    "output": "<?php\n$method\n=\n'AES-128-CBC'\n;\n$ivlen\n=\nopenssl_cipher_iv_length\n(\n$method\n);\necho\n$ivlen\n;\n?>"
  },
  {
    "input": "Example #1 openssl_cipher_key_length() example",
    "output": "<?php\n$method\n=\n'AES-128-CBC'\n;\nvar_dump\n(\nopenssl_cipher_key_length\n(\n$method\n));\n?>"
  },
  {
    "input": "Example #1 openssl_cms_sign() example",
    "output": "<?php\nopenssl_cms_sign\n(\n'input.txt'\n,\n'output.txt'\n,\n'file://cert.pem'\n,\n'file://privkey.pem'\n,\nnull\n,\nOPENSSL_CMS_BINARY\n,\nOPENSSL_ENCODING_DER\n,\n'chain.pem'\n);\n?>"
  },
  {
    "input": "Example #1 openssl_csr_export() example",
    "output": "<?php\n$subject\n= array(\n\n\"commonName\"\n=>\n\"example.com\"\n,\n);\n$private_key\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n$configargs\n= array(\n\n'digest_alg'\n=>\n'sha256WithRSAEncryption'\n);\n$csr\n=\nopenssl_csr_new\n(\n$subject\n,\n$private_key\n,\n$configargs\n);\nopenssl_csr_export\n(\n$csr\n,\n$csr_string\n);\necho\n$csr_string\n;\n?>"
  },
  {
    "input": "Example #1 openssl_csr_export_to_file() example",
    "output": "<?php\n$subject\n= array(\n\n\"commonName\"\n=>\n\"example.com\"\n,\n);\n$private_key\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n$csr\n=\nopenssl_csr_new\n(\n$subject\n,\n$private_key\n, array(\n'digest_alg'\n=>\n'sha384'\n) );\nopenssl_pkey_export_to_file\n(\n$private_key\n,\n'example-priv.key'\n);\n// Along with the subject, the CSR contains the public key corresponding to the private key\nopenssl_csr_export_to_file\n(\n$csr\n,\n'example-csr.pem'\n);\n?>"
  },
  {
    "input": "Example #1 openssl_csr_get_public_key() example",
    "output": "<?php\n$subject\n= array(\n\n\"commonName\"\n=>\n\"example.com\"\n,\n);\n$private_key\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n$csr\n=\nopenssl_csr_new\n(\n$subject\n,\n$private_key\n, array(\n'digest_alg'\n=>\n'sha256'\n) );\n$public_key\n=\nopenssl_csr_get_public_key\n(\n$csr\n);\n$info\n=\nopenssl_pkey_get_details\n(\n$public_key\n);\necho\n$info\n[\n'key'\n];\n?>"
  },
  {
    "input": "Example #1 openssl_csr_get_subject() example",
    "output": "<?php\n$subject\n= array(\n\n\"countryName\"\n=>\n\"CA\"\n,\n\n\"stateOrProvinceName\"\n=>\n\"Alberta\"\n,\n\n\"localityName\"\n=>\n\"Calgary\"\n,\n\n\"organizationName\"\n=>\n\"XYZ Widgets Inc\"\n,\n\n\"organizationalUnitName\"\n=>\n\"PHP Documentation Team\"\n,\n\n\"commonName\"\n=>\n\"Wez Furlong\"\n,\n\n\"emailAddress\"\n=>\n\"wez@example.com\"\n,\n);\n$private_key\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n$configargs\n= array(\n\n'digest_alg'\n=>\n'sha512WithRSAEncryption'\n);\n$csr\n=\nopenssl_csr_new\n(\n$subject\n,\n$privkey\n,\n$configargs\n);\nprint_r\n(\nopenssl_csr_get_subject\n(\n$csr\n));\n?>"
  },
  {
    "input": "Example #1 Creating a self-signed certificate",
    "output": "<?php\n// for SSL server certificates the commonName is the domain name to be secured\n// for S/MIME email certificates the commonName is the owner of the email address\n// location and identification fields refer to the owner of domain or email subject to be secured\n$dn\n= array(\n\n\"countryName\"\n=>\n\"GB\"\n,\n\n\"stateOrProvinceName\"\n=>\n\"Somerset\"\n,\n\n\"localityName\"\n=>\n\"Glastonbury\"\n,\n\n\"organizationName\"\n=>\n\"The Brain Room Limited\"\n,\n\n\"organizationalUnitName\"\n=>\n\"PHP Documentation Team\"\n,\n\n\"commonName\"\n=>\n\"Wez Furlong\"\n,\n\n\"emailAddress\"\n=>\n\"wez@example.com\"\n);\n// Generate a new private (and public) key pair\n$privkey\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n// Generate a certificate signing request\n$csr\n=\nopenssl_csr_new\n(\n$dn\n,\n$privkey\n, array(\n'digest_alg'\n=>\n'sha256'\n));\n// Generate a self-signed cert, valid for 365 days\n$x509\n=\nopenssl_csr_sign\n(\n$csr\n,\nnull\n,\n$privkey\n,\n$days\n=\n365\n, array(\n'digest_alg'\n=>\n'sha256'\n));\n// Save your private key, CSR and self-signed cert for later use\nopenssl_csr_export\n(\n$csr\n,\n$csrout\n) and\nvar_dump\n(\n$csrout\n);\nopenssl_x509_export\n(\n$x509\n,\n$certout\n) and\nvar_dump\n(\n$certout\n);\nopenssl_pkey_export\n(\n$privkey\n,\n$pkeyout\n,\n\"mypassword\"\n) and\nvar_dump\n(\n$pkeyout\n);\n// Show any errors that occurred here\nwhile ((\n$e\n=\nopenssl_error_string\n()) !==\nfalse\n) {\n    echo\n$e\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Creating a self-signed ECC certificate (as of PHP 7.1.0)",
    "output": "<?php\n$subject\n= array(\n\n\"commonName\"\n=>\n\"docs.php.net\"\n,\n);\n// Generate a new private (and public) key pair\n$private_key\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_EC\n,\n\n\"curve_name\"\n=>\n'prime256v1'\n,\n));\n// Generate a certificate signing request\n$csr\n=\nopenssl_csr_new\n(\n$subject\n,\n$private_key\n, array(\n'digest_alg'\n=>\n'sha384'\n));\n// Generate self-signed EC cert\n$x509\n=\nopenssl_csr_sign\n(\n$csr\n,\nnull\n,\n$private_key\n,\n$days\n=\n365\n, array(\n'digest_alg'\n=>\n'sha384'\n));\nopenssl_x509_export_to_file\n(\n$x509\n,\n'ecc-cert.pem'\n);\nopenssl_pkey_export_to_file\n(\n$private_key\n,\n'ecc-private.key'\n);\n?>"
  },
  {
    "input": "Example #1 openssl_csr_sign() example - signing a\n     CSR (how to implement your own CA)",
    "output": "<?php\n// Let's assume that this script is set to receive a CSR that has\n// been pasted into a textarea from another page\n$csrdata\n=\n$_POST\n[\n\"CSR\"\n];\n// We will sign the request using our own \"certificate authority\"\n// certificate.  You can use any certificate to sign another, but\n// the process is worthless unless the signing certificate is trusted\n// by the software/users that will deal with the newly signed certificate\n// We need our CA cert and its private key\n$cacert\n=\n\"file://path/to/ca.crt\"\n;\n$privkey\n= array(\n\"file://path/to/ca.key\"\n,\n\"your_ca_key_passphrase\"\n);\n$usercert\n=\nopenssl_csr_sign\n(\n$csrdata\n,\n$cacert\n,\n$privkey\n,\n365\n, array(\n'digest_alg'\n=>\n'sha256'\n) );\n// Now display the generated certificate so that the user can\n// copy and paste it into their local configuration (such as a file\n// to hold the certificate for their SSL server)\nopenssl_x509_export\n(\n$usercert\n,\n$certout\n);\necho\n$certout\n;\n// Show any errors that occurred here\nwhile ((\n$e\n=\nopenssl_error_string\n()) !==\nfalse\n) {\n    echo\n$e\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 AES Authenticated Encryption in GCM mode example for PHP 7.1+",
    "output": "<?php\n//$key should have been previously generated in a cryptographically safe way, like openssl_random_pseudo_bytes\n$plaintext\n=\n\"message to be encrypted\"\n;\n$cipher\n=\n\"aes-128-gcm\"\n;\nif (\nin_array\n(\n$cipher\n,\nopenssl_get_cipher_methods\n()))\n{\n\n$ivlen\n=\nopenssl_cipher_iv_length\n(\n$cipher\n);\n\n$iv\n=\nopenssl_random_pseudo_bytes\n(\n$ivlen\n);\n\n$ciphertext\n=\nopenssl_encrypt\n(\n$plaintext\n,\n$cipher\n,\n$key\n,\n$options\n=\n0\n,\n$iv\n,\n$tag\n);\n\n//store $cipher, $iv, and $tag for decryption later\n\n$original_plaintext\n=\nopenssl_decrypt\n(\n$ciphertext\n,\n$cipher\n,\n$key\n,\n$options\n=\n0\n,\n$iv\n,\n$tag\n);\n    echo\n$original_plaintext\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 AES Authenticated Encryption example prior to PHP 7.1",
    "output": "<?php\n//$key previously generated safely, ie: openssl_random_pseudo_bytes\n$plaintext\n=\n\"message to be encrypted\"\n;\n$ivlen\n=\nopenssl_cipher_iv_length\n(\n$cipher\n=\n\"AES-128-CBC\"\n);\n$iv\n=\nopenssl_random_pseudo_bytes\n(\n$ivlen\n);\n$ciphertext_raw\n=\nopenssl_encrypt\n(\n$plaintext\n,\n$cipher\n,\n$key\n,\n$options\n=\nOPENSSL_RAW_DATA\n,\n$iv\n);\n$hmac\n=\nhash_hmac\n(\n'sha256'\n,\n$ciphertext_raw\n,\n$key\n,\n$as_binary\n=\ntrue\n);\n$ciphertext\n=\nbase64_encode\n(\n$iv\n.\n$hmac\n.\n$ciphertext_raw\n);\n//decrypt later....\n$c\n=\nbase64_decode\n(\n$ciphertext\n);\n$ivlen\n=\nopenssl_cipher_iv_length\n(\n$cipher\n=\n\"AES-128-CBC\"\n);\n$iv\n=\nsubstr\n(\n$c\n,\n0\n,\n$ivlen\n);\n$hmac\n=\nsubstr\n(\n$c\n,\n$ivlen\n,\n$sha2len\n=\n32\n);\n$ciphertext_raw\n=\nsubstr\n(\n$c\n,\n$ivlen\n+\n$sha2len\n);\n$original_plaintext\n=\nopenssl_decrypt\n(\n$ciphertext_raw\n,\n$cipher\n,\n$key\n,\n$options\n=\nOPENSSL_RAW_DATA\n,\n$iv\n);\n$calcmac\n=\nhash_hmac\n(\n'sha256'\n,\n$ciphertext_raw\n,\n$key\n,\n$as_binary\n=\ntrue\n);\nif (\nhash_equals\n(\n$hmac\n,\n$calcmac\n))\n// timing attack safe comparison\n{\n    echo\n$original_plaintext\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_error_string() example",
    "output": "<?php\n// lets assume you just called an openssl function that failed\nwhile (\n$msg\n=\nopenssl_error_string\n())\n    echo\n$msg\n.\n\"<br />\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 openssl_get_cert_locations() example",
    "output": "<?php\nvar_dump\n(\nopenssl_get_cert_locations\n());\n?>"
  },
  {
    "input": "Example #1 openssl_get_curve_names() example",
    "output": "<?php\n$curve_names\n=\nopenssl_get_curve_names\n();\nprint_r\n(\n$curve_names\n);\n?>"
  },
  {
    "input": "Example #1 openssl_open() example",
    "output": "<?php\n// $sealed, $env_key and $iv are assumed to contain the sealed data, our\n// envelope key and IV. All given to us by the sealer.\n// Fetch private key from file located in private_key.pem\n$pkey\n=\nopenssl_get_privatekey\n(\n\"file://private_key.pem\"\n);\n// Decrypt the data and store it in $open\nif (\nopenssl_open\n(\n$sealed\n,\n$open\n,\n$env_key\n,\n$pkey\n,\n'AES256'\n,\n$iv\n)) {\n    echo\n\"Here is the opened data: \"\n,\n$open\n;\n} else {\n    echo\n\"Failed to open data\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_pbkdf2() example",
    "output": "<?php\n$password\n=\n'password'\n;\n$salt\n=\nopenssl_random_pseudo_bytes\n(\n16\n);\n$keyLength\n=\n20\n;\n$iterations\n=\n600000\n;\n$generated_key\n=\nopenssl_pbkdf2\n(\n$password\n,\n$salt\n,\n$keyLength\n,\n$iterations\n,\n'sha256'\n);\necho\nbin2hex\n(\n$generated_key\n).\n\"\\n\"\n;\necho\nbase64_encode\n(\n$generated_key\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 openssl_pkcs12_read() example",
    "output": "<?php\nif (!\n$cert_store\n=\nfile_get_contents\n(\n\"/certs/file.p12\"\n)) {\n    echo\n\"Error: Unable to read the cert file\\n\"\n;\n    exit;\n}\nif (\nopenssl_pkcs12_read\n(\n$cert_store\n,\n$cert_info\n,\n\"my_secret_pass\"\n)) {\n    echo\n\"Certificate Information\\n\"\n;\n\nprint_r\n(\n$cert_info\n);\n} else {\n    echo\n\"Error: Unable to read the cert store.\\n\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_pkcs7_decrypt() example",
    "output": "<?php\n// $cert and $key are assumed to contain your personal certificate and private\n// key pair, and that you are the recipient of an S/MIME message\n$infilename\n=\n\"encrypted.msg\"\n;\n// this file holds your encrypted message\n$outfilename\n=\n\"decrypted.msg\"\n;\n// make sure you can write to this file\nif (\nopenssl_pkcs7_decrypt\n(\n$infilename\n,\n$outfilename\n,\n$cert\n,\n$key\n)) {\n    echo\n\"decrypted!\"\n;\n} else {\n    echo\n\"failed to decrypt!\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_pkcs7_encrypt() example",
    "output": "<?php\n// the message you want to encrypt and send to your secret agent\n// in the field, known as nighthawk.  You have his certificate\n// in the file nighthawk.pem\n$data\n= <<<EOD\nNighthawk,\nTop secret, for your eyes only!\nThe enemy is closing in! Meet me at the cafe at 8.30am\nto collect your forged passport!\nHQ\nEOD;\n// load key\n$key\n=\nfile_get_contents\n(\n\"nighthawk.pem\"\n);\n// save message to file\n$fp\n=\nfopen\n(\n\"msg.txt\"\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n$data\n);\nfclose\n(\n$fp\n);\n// encrypt it\nif (\nopenssl_pkcs7_encrypt\n(\n\"msg.txt\"\n,\n\"enc.txt\"\n,\n$key\n,\n    array(\n\"To\"\n=>\n\"nighthawk@example.com\"\n,\n// keyed syntax\n\n\"From: HQ <hq@example.com>\"\n,\n// indexed syntax\n\n\"Subject\"\n=>\n\"Eyes only\"\n))) {\n\n// message encrypted - send it!\n\nexec\n(\nini_get\n(\n\"sendmail_path\"\n) .\n\" < enc.txt\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 Get a PEM array from a P7B file",
    "output": "<?php\n$file\n=\n'certs.p7b'\n;\n$f\n=\nfile_get_contents\n(\n$file\n);\n$p7\n= array();\n$r\n=\nopenssl_pkcs7_read\n(\n$f\n,\n$p7\n);\nif (\n$r\n===\nfalse\n) {\n\nprintf\n(\n\"ERROR: %s is not a proper p7b file\"\n.\nPHP_EOL\n,\n$file\n);\n        for(\n$e\n=\nopenssl_error_string\n(),\n$i\n=\n0\n;\n$e\n;\n$e\n=\nopenssl_error_string\n(),\n$i\n++)\n\nprintf\n(\n\"SSL l%d: %s\"\n.\nPHP_EOL\n,\n$i\n,\n$e\n);\n    exit(\n1\n);\n}\nprint_r\n(\n$p7\n);\n?>"
  },
  {
    "input": "Example #1 openssl_pkcs7_sign() example",
    "output": "<?php\n// the message you want to sign so that recipient can be sure it was you that\n// sent it\n$data\n= <<<EOD\nYou have my authorization to spend $10,000 on dinner expenses.\nThe CEO\nEOD;\n// save message to file\n$fp\n=\nfopen\n(\n\"msg.txt\"\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n$data\n);\nfclose\n(\n$fp\n);\n// encrypt it\nif (\nopenssl_pkcs7_sign\n(\n\"msg.txt\"\n,\n\"signed.txt\"\n,\n\"file://mycert.pem\"\n,\n    array(\n\"file://mycert.pem\"\n,\n\"mypassphrase\"\n),\n    array(\n\"To\"\n=>\n\"joes@example.com\"\n,\n// keyed syntax\n\n\"From: HQ <ceo@example.com>\"\n,\n// indexed syntax\n\n\"Subject\"\n=>\n\"Eyes only\"\n)\n    )) {\n\n// message signed - send it!\n\nexec\n(\nini_get\n(\n\"sendmail_path\"\n) .\n\" < signed.txt\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 openssl_pkey_derive() example",
    "output": "<?php\n// Load in private key\n$priv\n=\nopenssl_pkey_get_private\n(\n\"-----BEGIN PRIVATE KEY-----\nMIICJgIBADCCARcGCSqGSIb3DQEDATCCAQgCggEBAJLxRCaZ933uW+AXmabHFDDy\nupojBIRlbmQLJZfigDaSA1f9YOTsIv+WwVFTX/J1mtCyx9uBcz0Nt2kmVwxWuc2f\nVtCEMPsmLsVXX7xRUFLpyX1Y1IYGBVXQOoOvLWYQjpZgnx47Pkh1Ok1+smffztfC\n0DCNt4KorWrbsPcmqBejXHN79KvWFjZmXOksRiNu/Bn76RiqvofC4z8Ri3kHXQG2\n197JGZzzFXHadGC3xbkg8UxsNbYhVMKbm0iANfafUH7/hoS9UjAVQYtvwe7YNiW/\nHnyfVCrKwcc7sadd8Iphh+3lf5P1AhaQEAMytanrzq9RDXKBxuvpSJifRYasZYsC\nAQIEggEEAoIBAGwAYC2E81Y1U2Aox0U7u1+vBcbht/OO87tutMvc4NTLf6NLPHsW\ncPqBixs+3rSn4fADzAIvdLBmogjtiIZoB6qyHrllF/2xwTVGEeYaZIupQH3bMK2b\n6eUvnpuu4Ytksiz6VpXBBRMrIsj3frM+zUtnq8vKUr+TbjV2qyKR8l3eNDwzqz30\ndlbKh9kIhZafclHfRVfyp+fVSKPfgrRAcLUgAbsVjOjPeJ90xQ4DTMZ6vjiv6tHM\nhkSjJIcGhRtSBzVF/cT38GyCeTmiIA/dRz2d70lWrqDQCdp9ArijgnpjNKAAulSY\nCirnMsGZTDGmLOHg4xOZ5FEAzZI2sFNLlcw=\n-----END PRIVATE KEY-----\n\"\n);\n// Load in public key\n$pub\n=\nopenssl_pkey_get_public\n(\n\"-----BEGIN PUBLIC KEY-----\nMIICJDCCARcGCSqGSIb3DQEDATCCAQgCggEBAJLxRCaZ933uW+AXmabHFDDyupoj\nBIRlbmQLJZfigDaSA1f9YOTsIv+WwVFTX/J1mtCyx9uBcz0Nt2kmVwxWuc2fVtCE\nMPsmLsVXX7xRUFLpyX1Y1IYGBVXQOoOvLWYQjpZgnx47Pkh1Ok1+smffztfC0DCN\nt4KorWrbsPcmqBejXHN79KvWFjZmXOksRiNu/Bn76RiqvofC4z8Ri3kHXQG2197J\nGZzzFXHadGC3xbkg8UxsNbYhVMKbm0iANfafUH7/hoS9UjAVQYtvwe7YNiW/Hnyf\nVCrKwcc7sadd8Iphh+3lf5P1AhaQEAMytanrzq9RDXKBxuvpSJifRYasZYsCAQID\nggEFAAKCAQAiCSBpxvGgsTorxAWtcAlSmzAJnJxFgSPef0g7OjhESytnc8G2QYmx\novMt5KVergcitztWh08hZQUdAYm4rI+zMlAFDdN8LWwBT/mGKSzRkWeprd8E7mvy\nucqC1YXCMqmIwPySvLQUB/Dl8kgau7BLAnIJm8VP+MVrn8g9gghD0qRCgPgtEaDV\nvocfgnOU43rhKnIgO0cHOKtw2qybSFB8QuZrYugq4j8Bwkrzh6rdMMeyMl/ej5Aj\nc0wamOzuBDtXt0T9+Fx3khHaowjCc7xJZRgZCxg43SbqMWJ9lUg94I7+LTX61Gyv\ndtlkbGbtoDOnxeNnN93gwQZngGYZYciu\n-----END PUBLIC KEY-----\n\"\n);\n// Outputs the hex version of the derived key\necho\nbin2hex\n(\nopenssl_pkey_derive\n(\n$pub\n,\n$priv\n));"
  },
  {
    "input": "Example #1 Obtain the public key from a private key",
    "output": "<?php\n$private_key\n=\nopenssl_pkey_new\n();\n$public_key_pem\n=\nopenssl_pkey_get_details\n(\n$private_key\n)[\n'key'\n];\necho\n$public_key_pem\n,\nPHP_EOL\n;\n$public_key\n=\nopenssl_pkey_get_public\n(\n$public_key_pem\n);\nvar_dump\n(\n$public_key\n);\n?>"
  },
  {
    "input": "Example #2 Generating RSA key from parameters",
    "output": "<?php\n$nhex\n=\n\"BBF82F090682CE9C2338AC2B9DA871F7368D07EED41043A440D6B6F07454F51F\"\n.\n\n\"B8DFBAAF035C02AB61EA48CEEB6FCD4876ED520D60E1EC4619719D8A5B8B807F\"\n.\n\n\"AFB8E0A3DFC737723EE6B4B7D93A2584EE6A649D060953748834B2454598394E\"\n.\n\n\"E0AAB12D7B61A51F527A9A41F6C1687FE2537298CA2A8F5946F8E5FD091DBDCB\"\n;\n$ehex\n=\n\"11\"\n;\n$dhex\n=\n\"A5DAFC5341FAF289C4B988DB30C1CDF83F31251E0668B42784813801579641B2\"\n.\n\n\"9410B3C7998D6BC465745E5C392669D6870DA2C082A939E37FDCB82EC93EDAC9\"\n.\n\n\"7FF3AD5950ACCFBC111C76F1A9529444E56AAF68C56C092CD38DC3BEF5D20A93\"\n.\n\n\"9926ED4F74A13EDDFBE1A1CECC4894AF9428C2B7B8883FE4463A4BC85B1CB3C1\"\n;\n$phex\n=\n\"EECFAE81B1B9B3C908810B10A1B5600199EB9F44AEF4FDA493B81A9E3D84F632\"\n.\n\n\"124EF0236E5D1E3B7E28FAE7AA040A2D5B252176459D1F397541BA2A58FB6599\"\n;\n$qhex\n=\n\"C97FB1F027F453F6341233EAAAD1D9353F6C42D08866B1D05A0F2035028B9D86\"\n.\n\n\"9840B41666B42E92EA0DA3B43204B5CFCE3352524D0416A5A441E700AF461503\"\n;\n$dphex\n=\n\"11\"\n;\n$dqhex\n=\n\"11\"\n;\n$qinvhex\n=\n\"b06c4fdabb6301198d265bdbae9423b380f271f73453885093077fcd39e2119f\"\n.\n\n\"c98632154f5883b167a967bf402b4e9e2e0f9656e698ea3666edfb25798039f7\"\n;\n$rsa\n=\nopenssl_pkey_new\n([\n\n'rsa'\n=> [\n\n'n'\n=>\nhex2bin\n(\n$nhex\n),\n\n'e'\n=>\nhex2bin\n(\n$ehex\n),\n\n'd'\n=>\nhex2bin\n(\n$dhex\n),\n\n'p'\n=>\nhex2bin\n(\n$phex\n),\n\n'q'\n=>\nhex2bin\n(\n$qhex\n),\n\n'dmp1'\n=>\nhex2bin\n(\n$dphex\n),\n\n'dmq1'\n=>\nhex2bin\n(\n$dqhex\n),\n\n'iqmp'\n=>\nhex2bin\n(\n$qinvhex\n),\n    ],\n]);\n$details\n=\nopenssl_pkey_get_details\n(\n$rsa\n);\nvar_dump\n(\n$details\n);\n?>"
  },
  {
    "input": "Example #1 openssl_random_pseudo_bytes() example",
    "output": "<?php\nfor (\n$i\n=\n1\n;\n$i\n<=\n4\n;\n$i\n++) {\n\n$bytes\n=\nopenssl_random_pseudo_bytes\n(\n$i\n,\n$cstrong\n);\n\n$hex\n=\nbin2hex\n(\n$bytes\n);\n    echo\n\"Lengths: Bytes:\n$i\n and Hex: \"\n.\nstrlen\n(\n$hex\n) .\nPHP_EOL\n;\n\nvar_dump\n(\n$hex\n);\n\nvar_dump\n(\n$cstrong\n);\n    echo\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_seal() example",
    "output": "<?php\n// $data is assumed to contain the data to be sealed\n$data\n=\n\"test\"\n;\n// fetch public keys\n$pk1\n=\nopenssl_get_publickey\n(\n\"file://cert1.pem\"\n);\n$pk2\n=\nopenssl_get_publickey\n(\n\"file://cert2.pem\"\n);\n// seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys\n// $ekeys[0] and $ekeys[1] respectively.\nif (\nopenssl_seal\n(\n$data\n,\n$sealed\n,\n$ekeys\n, array(\n$pk1\n,\n$pk2\n),\n'AES256'\n,\n$iv\n) >\n0\n) {\n\n// possibly store the $sealed and $iv values and use later in openssl_open\n\necho\n\"success\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 openssl_sign() example",
    "output": "<?php\n// $data is assumed to contain the data to be signed\n// fetch private key from file and ready it\n$pkeyid\n=\nopenssl_pkey_get_private\n(\n\"file://src/openssl-0.9.6/demos/sign/key.pem\"\n);\n// compute signature\nopenssl_sign\n(\n$data\n,\n$signature\n,\n$pkeyid\n);\n// free the key from memory\nopenssl_free_key\n(\n$pkeyid\n);\n?>"
  },
  {
    "input": "Example #2 openssl_sign() example",
    "output": "<?php\n//data you want to sign\n$data\n=\n'my data'\n;\n//create new private and public key\n$new_key_pair\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\nopenssl_pkey_export\n(\n$new_key_pair\n,\n$private_key_pem\n);\n$details\n=\nopenssl_pkey_get_details\n(\n$new_key_pair\n);\n$public_key_pem\n=\n$details\n[\n'key'\n];\n//create signature\nopenssl_sign\n(\n$data\n,\n$signature\n,\n$private_key_pem\n,\nOPENSSL_ALGO_SHA256\n);\n//save for later\nfile_put_contents\n(\n'private_key.pem'\n,\n$private_key_pem\n);\nfile_put_contents\n(\n'public_key.pem'\n,\n$public_key_pem\n);\nfile_put_contents\n(\n'signature.dat'\n,\n$signature\n);\n//verify signature\n$r\n=\nopenssl_verify\n(\n$data\n,\n$signature\n,\n$public_key_pem\n,\n\"sha256WithRSAEncryption\"\n);\nvar_dump\n(\n$r\n);\n?>"
  },
  {
    "input": "Example #1 openssl_verify() example",
    "output": "<?php\n// $data and $signature are assumed to contain the data and the signature\n// fetch public key from certificate and ready it\n$pubkeyid\n=\nopenssl_pkey_get_public\n(\n\"file://src/openssl-0.9.6/demos/sign/cert.pem\"\n);\n// state whether signature is okay or not\n$ok\n=\nopenssl_verify\n(\n$data\n,\n$signature\n,\n$pubkeyid\n);\nif (\n$ok\n==\n1\n) {\n    echo\n\"good\"\n;\n} elseif (\n$ok\n==\n0\n) {\n    echo\n\"bad\"\n;\n} else {\n    echo\n\"ugly, error checking signature\"\n;\n}\n// free the key from memory\nopenssl_free_key\n(\n$pubkeyid\n);\n?>"
  },
  {
    "input": "Example #2 openssl_verify() example",
    "output": "<?php\n//data you want to sign\n$data\n=\n'my data'\n;\n//create new private and public key\n$private_key_res\n=\nopenssl_pkey_new\n(array(\n\n\"private_key_bits\"\n=>\n2048\n,\n\n\"private_key_type\"\n=>\nOPENSSL_KEYTYPE_RSA\n,\n));\n$details\n=\nopenssl_pkey_get_details\n(\n$private_key_res\n);\n$public_key_res\n=\nopenssl_pkey_get_public\n(\n$details\n[\n'key'\n]);\n//create signature\nopenssl_sign\n(\n$data\n,\n$signature\n,\n$private_key_res\n,\n\"sha256WithRSAEncryption\"\n);\n//verify signature\n$ok\n=\nopenssl_verify\n(\n$data\n,\n$signature\n,\n$public_key_res\n,\nOPENSSL_ALGO_SHA256\n);\nif (\n$ok\n==\n1\n) {\n    echo\n\"valid\"\n;\n} elseif (\n$ok\n==\n0\n) {\n    echo\n\"invalid\"\n;\n} else {\n    echo\n\"error: \"\n.\nopenssl_error_string\n();\n}\n?>"
  },
  {
    "input": "Example #1 openssl_x509_verify() example",
    "output": "<?php\n$hostname\n=\n\"news.php.net\"\n;\n$ssloptions\n= array(\n\n\"capture_peer_cert\"\n=>\ntrue\n,\n\n\"capture_peer_cert_chain\"\n=>\ntrue\n,\n\n\"allow_self_signed\"\n=>\nfalse\n,\n\n\"CN_match\"\n=>\n$hostname\n,\n\n\"verify_peer\"\n=>\ntrue\n,\n\n\"SNI_enabled\"\n=>\ntrue\n,\n\n\"SNI_server_name\"\n=>\n$hostname\n,\n);\n\n$ctx\n=\nstream_context_create\n( array(\n\"ssl\"\n=>\n$ssloptions\n) );\n$result\n=\nstream_socket_client\n(\n\"ssl://\n$hostname\n:443\"\n,\n$errno\n,\n$errstr\n,\n30\n,\nSTREAM_CLIENT_CONNECT\n,\n$ctx\n);\n$cont\n=\nstream_context_get_params\n(\n$result\n);\n$x509\n=\n$cont\n[\n\"options\"\n][\n\"ssl\"\n][\n\"peer_certificate\"\n];\n$certparsed\n=\nopenssl_x509_parse\n(\n$x509\n);\nforeach(\n$cont\n[\n\"options\"\n][\n\"ssl\"\n][\n\"peer_certificate_chain\"\n] as\n$chaincert\n)\n{\n\n$chainparsed\n=\nopenssl_x509_parse\n(\n$chaincert\n);\n\n$chain_public_key\n=\nopenssl_get_publickey\n(\n$chaincert\n);\n\n$r\n=\nopenssl_x509_verify\n(\n$x509\n,\n$chain_public_key\n);\n    if (\n$r\n==\n1\n)\n    {\n        echo\n$certparsed\n[\n'subject'\n][\n'CN'\n];\n        echo\n\" was digitally signed by \"\n;\n        echo\n$chainparsed\n[\n'subject'\n][\n'CN'\n].\n\"\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Basic password_algos() usage",
    "output": "<?php\nprint_r\n(\npassword_algos\n());\n?>"
  },
  {
    "input": "Example #1 password_hash() example",
    "output": "<?php\n/**\n * We just want to hash our password using the current DEFAULT algorithm.\n * This is presently BCRYPT, and will produce a 60 character result.\n *\n * Beware that DEFAULT may change over time, so you would want to prepare\n * By allowing your storage to expand past 60 characters (255 would be good)\n */\necho\npassword_hash\n(\n\"rasmuslerdorf\"\n,\nPASSWORD_DEFAULT\n);\n?>"
  },
  {
    "input": "Example #2 password_hash() example setting cost manually",
    "output": "<?php\n/**\n * In this case, we want to increase the default cost for BCRYPT to 12.\n * Note that we also switched to BCRYPT, which will always be 60 characters.\n */\n$options\n= [\n\n'cost'\n=>\n12\n,\n];\necho\npassword_hash\n(\n\"rasmuslerdorf\"\n,\nPASSWORD_BCRYPT\n,\n$options\n);\n?>"
  },
  {
    "input": "Example #3 password_hash() example finding a good cost",
    "output": "<?php\n/**\n * This code will benchmark your server to determine how high of a cost you can\n * afford. You want to set the highest cost that you can without slowing down\n * you server too much. 10 is a good baseline, and more is good if your servers\n * are fast enough. The code below aims for ≤ 350 milliseconds stretching time,\n * which is an appropriate delay for systems handling interactive logins.\n */\n$timeTarget\n=\n0.350\n;\n// 350 milliseconds\n$cost\n=\n10\n;\ndo {\n\n$cost\n++;\n\n$start\n=\nmicrotime\n(\ntrue\n);\n\npassword_hash\n(\n\"test\"\n,\nPASSWORD_BCRYPT\n, [\n\"cost\"\n=>\n$cost\n]);\n\n$end\n=\nmicrotime\n(\ntrue\n);\n} while ((\n$end\n-\n$start\n) <\n$timeTarget\n);\necho\n\"Appropriate Cost Found: \"\n.\n$cost\n;\n?>"
  },
  {
    "input": "Example #4 password_hash() example using Argon2i",
    "output": "<?php\necho\n'Argon2i hash: '\n.\npassword_hash\n(\n'rasmuslerdorf'\n,\nPASSWORD_ARGON2I\n);\n?>"
  },
  {
    "input": "Example #1 Usage of password_needs_rehash()",
    "output": "<?php\n$password\n=\n'rasmuslerdorf'\n;\n$hash\n=\n'$2y$10$YCFsG6elYca568hBi2pZ0.3LDL5wjgxct1N8w/oLR/jfHsiQwCqTS'\n;\n$algorithm\n=\nPASSWORD_BCRYPT\n;\n// bcrypt's cost parameter can change over time as hardware improves\n$options\n= [\n'cost'\n=>\n12\n];\n// Verify stored hash against plain-text password\nif (\npassword_verify\n(\n$password\n,\n$hash\n)) {\n\n// Check if either the algorithm or the options have changed\n\nif (\npassword_needs_rehash\n(\n$hash\n,\n$algorithm\n,\n$options\n)) {\n\n// If so, create a new hash, and replace the old one\n\n$newHash\n=\npassword_hash\n(\n$password\n,\n$algorithm\n,\n$options\n);\n\n// Update the user record with the $newHash\n\n}\n\n// Perform the login.\n}\n?>"
  },
  {
    "input": "Example #1 RNP clearsign example",
    "output": "<?php\n// init FFI object\n$ffi\n=\nrnp_ffi_create\n(\n'GPG'\n,\n'GPG'\n);\n// generate RSA key\n$key\n=\nrnp_op_generate_key\n(\n$ffi\n,\n'test@example.com'\n,\n'RSA'\n);\n// sign\n$data\n=\n\"Example text to sign\"\n;\n$signature\n=\nrnp_op_sign_cleartext\n(\n$ffi\n,\n$data\n, array(\n$key\n));\necho\n$signature\n;\n// destroy FFI object\nrnp_ffi_destroy\n(\n$ffi\n);\n?>"
  },
  {
    "input": "Example #1 simple callback function example",
    "output": "<?php\nfunction\npassword_callback\n(\nstring $key_fp\n,\nstring $pgp_context\n,\nstring\n&\n$password\n)\n{\n\n$password\n=\n\"password\"\n;\n    return\ntrue\n;\n}\n$ffi\n=\nrnp_ffi_create\n(\n'GPG'\n,\n'GPG'\n);\nrnp_ffi_set_pass_provider\n(\n$ffi\n,\n'password_callback'\n);"
  },
  {
    "input": "Example #1 sodium_crypto_box_seal() example",
    "output": "<?php\n$keypair\n=\nsodium_crypto_box_keypair\n();\n$public_key\n=\nsodium_crypto_box_publickey\n(\n$keypair\n);\n// Obfuscated plaintext to make the example more fun\n$plaintext_b64\n=\n\"V3JpdGluZyBzb2Z0d2FyZSBpbiBQSFAgY2FuIGJlIGEgZGVsaWdodCE=\"\n;\n$decoded_plaintext\n=\nsodium_base642bin\n(\n$plaintext_b64\n,\nSODIUM_BASE64_VARIANT_ORIGINAL\n);\n$sealed\n=\nsodium_crypto_box_seal\n(\n$decoded_plaintext\n,\n$public_key\n);\nvar_dump\n(\nbase64_encode\n(\n$sealed\n));\n$opened\n=\nsodium_crypto_box_seal_open\n(\n$sealed\n,\n$keypair\n);\nvar_dump\n(\n$opened\n);\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_box_seal_open() example",
    "output": "<?php\n// Ciphertext is not sensitive; base64_decode is fine\n$sealed_b64\n=\n\"oRBXXAV4iQBrxlV4A21Bord8Yo/D8ZlrIIGNyaRCcGBfpz0map52I3xq6l+CST+1NSgQkbV+HiYyFjXWiWiaCGupGf+zl4bgWj/A9Adtem7Jt3h3emrMsLw=\"\n;\n$sealed\n=\nbase64_decode\n(\n$sealed_b64\n);\n// Keypair contains a cryptographic secret; use a timing-safe decoder\n$keypair_b64\n=\n\"KZkF8wnB7bnC2aXB3lFOqCTc0Z6MllvaQb9ASVG8o2/MsewkuE4u1uaEgTzSakeiYyIW8DGj+02/L3cWIbs9bQ==\"\n;\n$keypair\n=\nsodium_base642bin\n(\n$keypair_b64\n,\nSODIUM_BASE64_VARIANT_ORIGINAL\n);\n$opened\n=\nsodium_crypto_box_seal_open\n(\n$sealed\n,\n$keypair\n);\nvar_dump\n(\n$opened\n);\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_add() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_from_hash() example",
    "output": "<?php\n$hashes\n=\nsodium_hex2bin\n(\n\n'5d1be09e3d0c82fc538112490e35701979d99e06ca3e2b5b54bffe8b4dc772c1'\n.\n\n'4d98b696a1bbfb5ca32c436cc61c16563790306c79eaca7705668b47dffe5bb6'\n);\nvar_dump\n(\nsodium_bin2hex\n(\nsodium_crypto_core_ristretto255_from_hash\n(\n$hashes\n)));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_is_valid_point() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$bar\n=\nsodium_crypto_scalarmult_ristretto255_base\n(\n$foo\n);\nvar_dump\n(\nsodium_crypto_core_ristretto255_is_valid_point\n(\n$bar\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_random() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_scalar_add() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_scalar_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_scalar_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_scalar_invert() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$inverted\n=\nsodium_crypto_core_ristretto255_scalar_invert\n(\n$foo\n);\n$reInverted\n=\nsodium_crypto_core_ristretto255_scalar_invert\n(\n$inverted\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$reInverted\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_scalar_negate() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$negate\n=\nsodium_crypto_core_ristretto255_scalar_negate\n(\n$foo\n);\n$reNegate\n=\nsodium_crypto_core_ristretto255_scalar_negate\n(\n$negate\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$reNegate\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_scalar_random() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_scalar_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_scalar_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_scalar_sub() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_scalar_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_scalar_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_scalar_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_core_ristretto255_sub() example",
    "output": "<?php\n$foo\n=\nsodium_crypto_core_ristretto255_random\n();\n$bar\n=\nsodium_crypto_core_ristretto255_random\n();\n$value\n=\nsodium_crypto_core_ristretto255_add\n(\n$foo\n,\n$bar\n);\n$value\n=\nsodium_crypto_core_ristretto255_sub\n(\n$value\n,\n$bar\n);\nvar_dump\n(\nhash_equals\n(\n$foo\n,\n$value\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_generichash_final() example",
    "output": "<?php\n$messages\n= [\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n16\n)];\n$state\n=\nsodium_crypto_generichash_init\n(\n''\n,\n32\n);\nforeach (\n$messages\nas\n$message\n) {\n\nsodium_crypto_generichash_update\n(\n$state\n,\n$message\n);\n}\n$final\n=\nsodium_crypto_generichash_final\n(\n$state\n,\n32\n);\nvar_dump\n(\nsodium_bin2hex\n(\n$final\n));\n$allAtOnce\n=\nsodium_crypto_generichash\n(\nimplode\n(\n''\n,\n$messages\n));\nvar_dump\n(\nsodium_bin2hex\n(\n$allAtOnce\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_generichash_init() example",
    "output": "<?php\n$messages\n= [\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n16\n)];\n$state\n=\nsodium_crypto_generichash_init\n(\n''\n,\n32\n);\nforeach (\n$messages\nas\n$message\n) {\n\nsodium_crypto_generichash_update\n(\n$state\n,\n$message\n);\n}\n$final\n=\nsodium_crypto_generichash_final\n(\n$state\n,\n32\n);\nvar_dump\n(\nsodium_bin2hex\n(\n$final\n));\n$allAtOnce\n=\nsodium_crypto_generichash\n(\nimplode\n(\n''\n,\n$messages\n));\nvar_dump\n(\nsodium_bin2hex\n(\n$allAtOnce\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_generichash_update() example",
    "output": "<?php\n$messages\n= [\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n32\n),\nrandom_bytes\n(\n16\n)];\n$state\n=\nsodium_crypto_generichash_init\n();\nforeach (\n$messages\nas\n$message\n) {\n\nsodium_crypto_generichash_update\n(\n$state\n,\n$message\n);\n}\n$final\n=\nsodium_crypto_generichash_final\n(\n$state\n);\nvar_dump\n(\nsodium_bin2hex\n(\n$final\n));\n$allAtOnce\n=\nsodium_crypto_generichash\n(\nimplode\n(\n''\n,\n$messages\n));\nvar_dump\n(\nsodium_bin2hex\n(\n$allAtOnce\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_pwhash() example",
    "output": "<?php\n//Need to keep the salt if we're ever going to be able to check this password\n$salt\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_PWHASH_SALTBYTES\n);\n//Using bin2hex to keep output readable\necho\nbin2hex\n(\n\nsodium_crypto_pwhash\n(\n\n16\n,\n// == 128 bits\n\n'password'\n,\n\n$salt\n,\n\nSODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE\n,\n\nSODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE\n,\n\nSODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13\n\n)\n);\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_pwhash_str() example",
    "output": "<?php\n$password\n=\n'password'\n;\necho\nsodium_crypto_pwhash_str\n(\n\n$password\n,\n\nSODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE\n,\n\nSODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE\n);"
  },
  {
    "input": "Example #1 sodium_crypto_secretbox() example",
    "output": "<?php\n// The $key must be kept confidential\n$key\n=\nsodium_crypto_secretbox_keygen\n();\n// Do not reuse $nonce with the same key\n$nonce\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_SECRETBOX_NONCEBYTES\n);\n$plaintext\n=\n\"message to be encrypted\"\n;\n$ciphertext\n=\nsodium_crypto_secretbox\n(\n$plaintext\n,\n$nonce\n,\n$key\n);\nvar_dump\n(\nbin2hex\n(\n$ciphertext\n));\n// The same nonce and key are required to decrypt the $ciphertext\nvar_dump\n(\nsodium_crypto_secretbox_open\n(\n$ciphertext\n,\n$nonce\n,\n$key\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_secretbox_keygen() example",
    "output": "<?php\n$key\n=\nsodium_crypto_secretbox_keygen\n();\nvar_dump\n(\nsodium_bin2hex\n(\n$key\n) );\n?>"
  },
  {
    "input": "Example #2 \n     Comparing sodium_crypto_secretbox_keygen()\n     with random_bytes()",
    "output": "<?php\n$key\n=\nsodium_crypto_secretbox_keygen\n();\n$bytes\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_SECRETBOX_KEYBYTES\n);\nvar_dump\n(\nmb_strlen\n(\n$key\n,\n'8bit'\n) ===\nmb_strlen\n(\n$bytes\n,\n'8bit'\n) );\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_secretbox_open() example",
    "output": "<?php\n// The $key must be kept confidential\n$key\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_SECRETBOX_KEYBYTES\n);\n// Do not reuse $nonce with the same key\n$nonce\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_SECRETBOX_NONCEBYTES\n);\n$ciphertext\n=\nsodium_crypto_secretbox\n(\n'message to be encrypted'\n,\n$nonce\n,\n$key\n);\n// The same nonce and key are required to decrypt the $ciphertext\n$plaintext\n=\nsodium_crypto_secretbox_open\n(\n$ciphertext\n,\n$nonce\n,\n$key\n);\nif (\n$plaintext\n!==\nfalse\n) {\n    echo\n$plaintext\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_secretstream_xchacha20poly1305_init_pull() example",
    "output": "<?php\nfunction\ndecrypt_file\n(\nstring $inputFilePath\n,\nstring $outputFilePath\n,\nstring $key\n):\nvoid\n{\n\n$inputFile\n=\nfopen\n(\n$inputFilePath\n,\n'rb'\n);\n\n$outputFile\n=\nfopen\n(\n$outputFilePath\n,\n'wb'\n);\n\n$header\n=\nfread\n(\n$inputFile\n,\n24\n);\n\n$state\n=\nsodium_crypto_secretstream_xchacha20poly1305_init_pull\n(\n$header\n,\n$key\n);\n\n$inputFileSize\n=\nfstat\n(\n$inputFile\n)[\n'size'\n];\n\n// Decrypt the file and write its contents to the output file:\n\nfor (\n$i\n=\n24\n;\n$i\n<\n$inputFileSize\n;\n$i\n+=\n8192\n) {\n\n$ctxt_chunk\n=\nfread\n(\n$inputFile\n,\n8192\n);\n\n// We're not using $tag, but in real protocols you can use this on encrypt to e.g.\n        // trigger a re-key or indicate the end of file. Then, on decrypt, you can assert\n        // this behavior.\n\n[\n$ptxt_chunk\n,\n$tag\n] =\nsodium_crypto_secretstream_xchacha20poly1305_pull\n(\n$state\n,\n$ctxt_chunk\n);\n\nfwrite\n(\n$outputFile\n,\n$ptxt_chunk\n);\n    }\n\nsodium_memzero\n(\n$state\n);\n\nfclose\n(\n$inputFile\n);\n\nfclose\n(\n$outputFile\n);\n}\n// sodium_crypto_secretstream_xchacha20poly1305_keygen()\n$key\n=\nsodium_base642bin\n(\n'MS0lzb7HC+thY6jY01pkTE/cwsQxnRq0/2L1eL4Hxn8='\n,\nSODIUM_BASE64_VARIANT_ORIGINAL\n);\n$example\n=\nsodium_hex2bin\n(\n'971e33b255f0990ef3931caf761c59136efa77b434832f28ec719e3ff73f5aec38b3bba1574ab5b70a8844d8da36a668e802cfea2c'\n);\nfile_put_contents\n(\n'hello.enc'\n,\n$example\n);\ndecrypt_file\n(\n'hello.enc'\n,\n'hello.txt.decrypted'\n,\n$key\n);\nvar_dump\n(\nfile_get_contents\n(\n'hello.txt.decrypted'\n));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_secretstream_xchacha20poly1305_init_push() example",
    "output": "<?php\nfunction\nencrypt_file\n(\nstring $inputFilePath\n,\nstring $outputFilePath\n,\nstring $key\n):\nvoid\n{\n    [\n$state\n,\n$header\n] =\nsodium_crypto_secretstream_xchacha20poly1305_init_push\n(\n$key\n);\n\n$inputFile\n=\nfopen\n(\n$inputFilePath\n,\n'rb'\n);\n\n$outputFile\n=\nfopen\n(\n$outputFilePath\n,\n'wb'\n);\n\n// Write the header:\n\nfwrite\n(\n$outputFile\n,\n$header\n);\n\n$inputFileSize\n=\nfstat\n(\n$inputFile\n)[\n'size'\n];\n\n// Encrypt the file and write its contents to the output file:\n\nfor (\n$i\n=\n0\n;\n$i\n<\n$inputFileSize\n;\n$i\n+=\n8175\n) {\n\n$ptxt_chunk\n=\nfread\n(\n$inputFile\n,\n8175\n);\n\n$ctxt_chunk\n=\nsodium_crypto_secretstream_xchacha20poly1305_push\n(\n$state\n,\n$ptxt_chunk\n);\n\nfwrite\n(\n$outputFile\n,\n$ctxt_chunk\n);\n    }\n\nsodium_memzero\n(\n$state\n);\n\nfclose\n(\n$inputFile\n);\n\nfclose\n(\n$outputFile\n);\n}\n// sodium_crypto_secretstream_xchacha20poly1305_keygen()\n$key\n=\nsodium_base642bin\n(\n'MS0lzb7HC+thY6jY01pkTE/cwsQxnRq0/2L1eL4Hxn8='\n,\nSODIUM_BASE64_VARIANT_ORIGINAL\n);\nfile_put_contents\n(\n'hello.txt'\n,\n'Hello world!'\n);\nencrypt_file\n(\n'hello.txt'\n,\n'hello.txt.encrypted'\n,\n$key\n);\nvar_dump\n(\nsodium_bin2hex\n(\nfile_get_contents\n(\n'hello.txt.encrypted'\n)));\n?>"
  },
  {
    "input": "Example #1 sodium_crypto_stream_xchacha20_xor_ic() example",
    "output": "<?php\n$n2\n=\nrandom_bytes\n(\nSODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES\n);\n$left\n=\nstr_repeat\n(\n\"\\x01\"\n,\n64\n);\n$right\n=\nstr_repeat\n(\n\"\\xfe\"\n,\n64\n);\n// All at once:\n$stream7_unified\n=\nsodium_crypto_stream_xchacha20_xor\n(\n$left\n.\n$right\n,\n$n2\n,\n$key\n);\n// Piecewise, with initial counter:\n$stream7_left\n=\nsodium_crypto_stream_xchacha20_xor_ic\n(\n$left\n,\n$n2\n,\n0\n,\n$key\n);\n$stream7_right\n=\nsodium_crypto_stream_xchacha20_xor_ic\n(\n$right\n,\n$n2\n,\n1\n,\n$key\n);\n$stream7_concat\n=\n$stream7_left\n.\n$stream7_right\n;\nvar_dump\n(\nstrlen\n(\n$stream7_concat\n));\nvar_dump\n(\n$stream7_unified\n===\n$stream7_concat\n);\n?>"
  },
  {
    "input": "Example #1 A crypt_checksalt() example",
    "output": "<?php\n// Generate a salt for a legacy method\n$salt\n=\ncrypt_gensalt\n(\nCRYPT_PREFIX_STD_DES\n);\n// Check the salt\n$test\n=\ncrypt_checksalt\n(\n$salt\n);\nvar_dump\n(\n$test\n===\nCRYPT_SALT_METHOD_LEGACY\n);\n// Generate a salt for default method\n$salt\n=\ncrypt_gensalt\n();\n// Check the salt\n$test\n=\ncrypt_checksalt\n(\n$salt\n);\nvar_dump\n(\n$test\n===\nCRYPT_SALT_OK\n);\n?>"
  },
  {
    "input": "Example #1 A crypt_gensalt() example",
    "output": "<?php\n// Generate the salt\n$salt\n=\ncrypt_gensalt\n(\nCRYPT_PREFIX_BLOWFISH\n);\n// Hash the password\n$hash\n=\ncrypt\n(\n\"secret\"\n,\n$salt\n);\n// Check the hash\n$test\n=\nhash_equals\n(\ncrypt\n(\n\"secret\"\n,\n$hash\n),\n$hash\n);\nvar_dump\n(\n$salt\n,\n$hash\n,\n$test\n);\n?>"
  },
  {
    "input": "Example #1 A crypt_preferred_method() example",
    "output": "<?php\nvar_dump\n(\ncrypt_preferred_method\n());\n?>"
  },
  {
    "input": "Example #1 DBA example",
    "output": "<?php\n$id\n=\ndba_open\n(\n\"/tmp/test.db\"\n,\n\"n\"\n,\n\"db2\"\n);\nif (!\n$id\n) {\n    echo\n\"dba_open failed\\n\"\n;\n    exit;\n}\ndba_replace\n(\n\"key\"\n,\n\"This is an example!\"\n,\n$id\n);\nif (\ndba_exists\n(\n\"key\"\n,\n$id\n)) {\n    echo\ndba_fetch\n(\n\"key\"\n,\n$id\n);\n\ndba_delete\n(\n\"key\"\n,\n$id\n);\n}\ndba_close\n(\n$id\n);\n?>"
  },
  {
    "input": "Example #2 Traversing a database",
    "output": "<?php\n// ...open database...\n$key\n=\ndba_firstkey\n(\n$id\n);\nwhile (\n$key\n!==\nfalse\n) {\n    if (\ntrue\n) {\n// remember the key to perform some action later\n\n$handle_later\n[] =\n$key\n;\n    }\n\n$key\n=\ndba_nextkey\n(\n$id\n);\n}\nforeach (\n$handle_later\nas\n$val\n) {\n\ndba_delete\n(\n$val\n,\n$id\n);\n}\n?>"
  },
  {
    "input": "Example #1 dba_handlers() Example",
    "output": "<?php\necho\n\"Available DBA handlers:\\n\"\n;\nforeach (\ndba_handlers\n(\ntrue\n) as\n$handler_name\n=>\n$handler_version\n) {\n\n// clean the versions\n\n$handler_version\n=\nstr_replace\n(\n'$'\n,\n''\n,\n$handler_version\n);\n  echo\n\" -\n$handler_name\n:\n$handler_version\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 List Privileges for a Column",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$privileges\n=\nodbc_columnprivileges\n(\n$conn\n,\n'TutorialDB'\n,\n'dbo'\n,\n'test'\n,\n'id'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$privileges\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 List Columns of a Table",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$columns\n=\nodbc_columns\n(\n$conn\n,\n'TutorialDB'\n,\n'dbo'\n,\n'test'\n,\n'%'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$columns\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 DSN-less connections",
    "output": "<?php\n// Microsoft SQL Server using the SQL Native Client 10.0 ODBC Driver - allows connection to SQL 7, 2000, 2005 and 2008\n$connection\n=\nodbc_connect\n(\n\"Driver={SQL Server Native Client 10.0};Server=\n$server\n;Database=\n$database\n;\"\n,\n$user\n,\n$password\n);\n// Microsoft Access\n$connection\n=\nodbc_connect\n(\n\"Driver={Microsoft Access Driver (*.mdb)};Dbq=\n$mdbFilename\n\"\n,\n$user\n,\n$password\n);\n// Microsoft Excel\n$excelFile\n=\nrealpath\n(\n'C:/ExcelData.xls'\n);\n$excelDir\n=\ndirname\n(\n$excelFile\n);\n$connection\n=\nodbc_connect\n(\n\"Driver={Microsoft Excel Driver (*.xls)};DriverId=790;Dbq=\n$excelFile\n;DefaultDir=\n$excelDir\n\"\n,\n''\n,\n''\n);\n?>"
  },
  {
    "input": "Example #1 List available DSNs",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n'dsn'\n,\n'user'\n,\n'pass'\n);\n$dsn_info\n=\nodbc_data_source\n(\n$conn\n,\nSQL_FETCH_FIRST\n);\nwhile (\n$dsn_info\n) {\n\nprint_r\n(\n$dsn_info\n);\n\n$dsn_info\n=\nodbc_data_source\n(\n$conn\n,\nSQL_FETCH_NEXT\n);\n}\n?>"
  },
  {
    "input": "Example #1 odbc_fetch_into() examples",
    "output": "<?php\n$rc\n=\nodbc_fetch_into\n(\n$res_id\n,\n$my_array\n);\n?>"
  },
  {
    "input": "Example #1 odbc_next_result()",
    "output": "<?php\n$r_Connection\n=\nodbc_connect\n(\n$dsn\n,\n$username\n,\n$password\n);\n$s_SQL\n= <<<END_SQL\nSELECT 'A'\nSELECT 'B'\nSELECT 'C'\nEND_SQL;\n$r_Results\n=\nodbc_exec\n(\n$r_Connection\n,\n$s_SQL\n);\n$a_Row1\n=\nodbc_fetch_array\n(\n$r_Results\n);\n$a_Row2\n=\nodbc_fetch_array\n(\n$r_Results\n);\necho\n\"Dump first result set\"\n;\nvar_dump\n(\n$a_Row1\n,\n$a_Row2\n);\necho\n\"Get second results set \"\n;\nvar_dump\n(\nodbc_next_result\n(\n$r_Results\n));\n$a_Row1\n=\nodbc_fetch_array\n(\n$r_Results\n);\n$a_Row2\n=\nodbc_fetch_array\n(\n$r_Results\n);\necho\n\"Dump second result set \"\n;\nvar_dump\n(\n$a_Row1\n,\n$a_Row2\n);\necho\n\"Get third results set \"\n;\nvar_dump\n(\nodbc_next_result\n(\n$r_Results\n));\n$a_Row1\n=\nodbc_fetch_array\n(\n$r_Results\n);\n$a_Row2\n=\nodbc_fetch_array\n(\n$r_Results\n);\necho\n\"Dump third result set \"\n;\nvar_dump\n(\n$a_Row1\n,\n$a_Row2\n);\necho\n\"Try for a fourth result set \"\n;\nvar_dump\n(\nodbc_next_result\n(\n$r_Results\n));\n?>"
  },
  {
    "input": "Example #1 List primary Keys of a Column",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$primarykeys\n=\nodbc_primarykeys\n(\n$conn\n,\n'TutorialDB'\n,\n'dbo'\n,\n'TEST'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$primarykeys\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 List Columns of a stored Procedure",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$columns\n=\nodbc_procedurecolumns\n(\n$conn\n,\n'TutorialDB'\n,\n'dbo'\n,\n'GetEmployeeSalesYTD;1'\n,\n'%'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$columns\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 List stored Procedures of a Database",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$procedures\n=\nodbc_procedures\n(\n$conn\n,\n$catalog\n,\n$schema\n,\n'%'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$procedures\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 odbc_result() examples",
    "output": "<?php\n$item_3\n=\nodbc_result\n(\n$Query_ID\n,\n3\n);\n$item_val\n=\nodbc_result\n(\n$Query_ID\n,\n\"val\"\n);\n?>"
  },
  {
    "input": "Example #1 odbc_setoption() examples",
    "output": "<?php\n// 1. Option 102 of SQLSetConnectOption() is SQL_AUTOCOMMIT.\n//    Value 1 of SQL_AUTOCOMMIT is SQL_AUTOCOMMIT_ON.\n//    This example has the same effect as\n//    odbc_autocommit($conn, true);\nodbc_setoption\n(\n$conn\n,\n1\n,\n102\n,\n1\n);\n// 2. Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT.\n//    This example sets the query to timeout after 30 seconds.\n$result\n=\nodbc_prepare\n(\n$conn\n,\n$sql\n);\nodbc_setoption\n(\n$result\n,\n2\n,\n0\n,\n30\n);\nodbc_execute\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 List Statistics of a Table",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$statistics\n=\nodbc_statistics\n(\n$conn\n,\n'TutorialDB'\n,\n'dbo'\n,\n'TEST'\n,\nSQL_INDEX_UNIQUE\n,\nSQL_QUICK\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$statistics\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 List Privileges of a Table",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$privileges\n=\nodbc_tableprivileges\n(\n$conn\n,\n'SalesOrders'\n,\n'dbo'\n,\n'Orders'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$privileges\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 List Tables in a Catalog",
    "output": "<?php\n$conn\n=\nodbc_connect\n(\n$dsn\n,\n$user\n,\n$pass\n);\n$tables\n=\nodbc_tables\n(\n$conn\n,\n'SalesOrders'\n,\n'dbo'\n,\n'%'\n,\n'TABLE'\n);\nwhile ((\n$row\n=\nodbc_fetch_array\n(\n$tables\n))) {\n\nprint_r\n(\n$row\n);\n    break;\n// further rows omitted for brevity\n}\n?>"
  },
  {
    "input": "Example #1 using PDO::ATTR_DRIVER_NAME",
    "output": "<?php\nif (\n$db\n->\ngetAttribute\n(\nPDO\n::\nATTR_DRIVER_NAME\n) ==\n'mysql'\n) {\n  echo\n\"Running on mysql; doing something mysql specific here\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Connecting to MySQL",
    "output": "<?php\n$dbh\n= new\nPDO\n(\n'mysql:host=localhost;dbname=test'\n,\n$user\n,\n$pass\n);\n?>"
  },
  {
    "input": "Example #2 Handling connection errors",
    "output": "<?php\ntry {\n\n$dbh\n= new\nPDO\n(\n'mysql:host=localhost;dbname=test'\n,\n$user\n,\n$pass\n);\n} catch (\nPDOException $e\n) {\n\n// attempt to retry the connection after some timeout for example\n}"
  },
  {
    "input": "Example #3 Closing a connection",
    "output": "<?php\n$dbh\n= new\nPDO\n(\n'mysql:host=localhost;dbname=test'\n,\n$user\n,\n$pass\n);\n// use the connection here\n$sth\n=\n$dbh\n->\nquery\n(\n'SELECT * FROM foo'\n);\n// and now we're done; close it\n$sth\n=\nnull\n;\n$dbh\n=\nnull\n;\n?>"
  },
  {
    "input": "Example #4 Persistent connections",
    "output": "<?php\n$dbh\n= new\nPDO\n(\n'mysql:host=localhost;dbname=test'\n,\n$user\n,\n$pass\n, array(\n\nPDO\n::\nATTR_PERSISTENT\n=>\ntrue\n));\n?>"
  },
  {
    "input": "Example #6 Invalid use of placeholder",
    "output": "<?php\n$stmt\n=\n$dbh\n->\nprepare\n(\n\"SELECT * FROM REGISTRY where name LIKE '%?%'\"\n);\n$stmt\n->\nexecute\n([\n$_GET\n[\n'name'\n]]);\n// placeholder must be used in the place of the whole value\n$stmt\n=\n$dbh\n->\nprepare\n(\n\"SELECT * FROM REGISTRY where name LIKE ?\"\n);\n$stmt\n->\nexecute\n([\n\"%\n$_GET\n[\nname\n]\n%\"\n]);\n?>"
  },
  {
    "input": "Example #1 Create a PDO instance and set the error mode",
    "output": "<?php\n$dsn\n=\n'mysql:dbname=testdb;host=127.0.0.1'\n;\n$user\n=\n'dbuser'\n;\n$password\n=\n'dbpass'\n;\n$dbh\n= new\nPDO\n(\n$dsn\n,\n$user\n,\n$password\n);\n$dbh\n->\nsetAttribute\n(\nPDO\n::\nATTR_ERRMODE\n,\nPDO\n::\nERRMODE_EXCEPTION\n);\n// This will cause PDO to throw a PDOException (when the table doesn't exist)\n$dbh\n->\nquery\n(\n\"SELECT wrongcolumn FROM wrongtable\"\n);"
  },
  {
    "input": "Example #2 Create a PDO instance and set the error mode from the constructor",
    "output": "<?php\n$dsn\n=\n'mysql:dbname=test;host=127.0.0.1'\n;\n$user\n=\n'googleguy'\n;\n$password\n=\n'googleguy'\n;\n$dbh\n= new\nPDO\n(\n$dsn\n,\n$user\n,\n$password\n, array(\nPDO\n::\nATTR_ERRMODE\n=>\nPDO\n::\nERRMODE_WARNING\n));\n// This will cause PDO to throw an error of level E_WARNING instead of an exception (when the table doesn't exist)\n$dbh\n->\nquery\n(\n\"SELECT wrongcolumn FROM wrongtable\"\n);"
  },
  {
    "input": "Example #1 Committing a basic transaction",
    "output": "<?php\n/* Begin a transaction, turning off autocommit */\n$dbh\n->\nbeginTransaction\n();\n/* Insert multiple records on an all-or-nothing basis */\n$sql\n=\n'INSERT INTO fruit\n    (name, colour, calories)\n    VALUES (?, ?, ?)'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n$sql\n);\nforeach (\n$fruits\nas\n$fruit\n) {\n\n$sth\n->\nexecute\n(array(\n\n$fruit\n->\nname\n,\n\n$fruit\n->\ncolour\n,\n\n$fruit\n->\ncalories\n,\n    ));\n}\n/* Commit the changes */\n$dbh\n->\ncommit\n();\n/* Database connection is now back in autocommit mode */\n?>"
  },
  {
    "input": "Example #2 Committing a DDL transaction",
    "output": "<?php\n/* Begin a transaction, turning off autocommit */\n$dbh\n->\nbeginTransaction\n();\n/* Change the database schema */\n$sth\n=\n$dbh\n->\nexec\n(\n\"DROP TABLE fruit\"\n);\n/* Commit the changes */\n$dbh\n->\ncommit\n();\n/* Database connection is now back in autocommit mode */\n?>"
  },
  {
    "input": "Example #1 Create a PDO instance via driver invocation",
    "output": "<?php\n$dsn\n=\n'mysql:dbname=testdb;host=127.0.0.1'\n;\n$user\n=\n'dbuser'\n;\n$password\n=\n'dbpass'\n;\n$dbh\n= new\nPDO\n(\n$dsn\n,\n$user\n,\n$password\n);\n?>"
  },
  {
    "input": "Example #1 Retrieving an SQLSTATE code",
    "output": "<?php\n/* Provoke an error -- the BONES table does not exist */\n$dbh\n->\nexec\n(\n\"INSERT INTO bones(skull) VALUES ('lucy')\"\n);\necho\n\"\\nPDO::errorCode(): \"\n,\n$dbh\n->\nerrorCode\n();\n?>"
  },
  {
    "input": "Example #1 Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database",
    "output": "<?php\n/* Provoke an error -- bogus SQL syntax */\n$stmt\n=\n$dbh\n->\nprepare\n(\n'bogus sql'\n);\nif (!\n$stmt\n) {\n    echo\n\"\\nPDO::errorInfo():\\n\"\n;\n\nprint_r\n(\n$dbh\n->\nerrorInfo\n());\n}\n?>"
  },
  {
    "input": "Example #1 Retrieving database connection attributes",
    "output": "<?php\n$conn\n= new\nPDO\n(\n'odbc:sample'\n,\n'db2inst1'\n,\n'ibmdb2'\n);\n$attributes\n= array(\n\n\"AUTOCOMMIT\"\n,\n\"ERRMODE\"\n,\n\"CASE\"\n,\n\"CLIENT_VERSION\"\n,\n\"CONNECTION_STATUS\"\n,\n\n\"ORACLE_NULLS\"\n,\n\"PERSISTENT\"\n,\n\"PREFETCH\"\n,\n\"SERVER_INFO\"\n,\n\"SERVER_VERSION\"\n,\n\n\"TIMEOUT\"\n);\nforeach (\n$attributes\nas\n$val\n) {\n    echo\n\"PDO::ATTR_\n$val\n: \"\n;\n    echo\n$conn\n->\ngetAttribute\n(\nconstant\n(\n\"PDO::ATTR_\n$val\n\"\n)) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A PDO::getAvailableDrivers() example",
    "output": "<?php\nprint_r\n(\nPDO\n::\ngetAvailableDrivers\n());\n?>"
  },
  {
    "input": "Example #1 SQL statement template with named parameters",
    "output": "<?php\n/* Execute a prepared statement by passing an array of values */\n$sql\n=\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n$sql\n, [\nPDO\n::\nATTR_CURSOR\n=>\nPDO\n::\nCURSOR_FWDONLY\n]);\n$sth\n->\nexecute\n([\n'calories'\n=>\n150\n,\n'colour'\n=>\n'red'\n]);\n$red\n=\n$sth\n->\nfetchAll\n();\n/* Array keys can be prefixed with colons \":\" too (optional) */\n$sth\n->\nexecute\n([\n':calories'\n=>\n175\n,\n':colour'\n=>\n'yellow'\n]);\n$yellow\n=\n$sth\n->\nfetchAll\n();\n?>"
  },
  {
    "input": "Example #2 SQL statement template with question mark parameters",
    "output": "<?php\n/* Execute a prepared statement by passing an array of values */\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nexecute\n([\n150\n,\n'red'\n]);\n$red\n=\n$sth\n->\nfetchAll\n();\n$sth\n->\nexecute\n([\n175\n,\n'yellow'\n]);\n$yellow\n=\n$sth\n->\nfetchAll\n();\n?>"
  },
  {
    "input": "Example #3 SQL statement template with question mark escaped",
    "output": "<?php\n/* note: this is only valid on PostgreSQL databases */\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT * FROM issues WHERE tag::jsonb ?? ?'\n);\n$sth\n->\nexecute\n([\n'feature'\n]);\n$featureIssues\n=\n$sth\n->\nfetchAll\n();\n$sth\n->\nexecute\n([\n'performance'\n]);\n$performanceIssues\n=\n$sth\n->\nfetchAll\n();\n?>"
  },
  {
    "input": "Example #1 SQL with no placeholders can be executed using PDO::query()",
    "output": "<?php\n$sql\n=\n'SELECT name, color, calories FROM fruit ORDER BY name'\n;\nforeach (\n$conn\n->\nquery\n(\n$sql\n) as\n$row\n) {\n    print\n$row\n[\n'name'\n] .\n\"\\t\"\n;\n    print\n$row\n[\n'color'\n] .\n\"\\t\"\n;\n    print\n$row\n[\n'calories'\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Quoting a normal string",
    "output": "<?php\n$conn\n= new\nPDO\n(\n'sqlite:/home/lynn/music.sql3'\n);\n/* Simple string */\n$string\n=\n'Nice'\n;\nprint\n\"Unquoted string:\n$string\n\\n\"\n;\nprint\n\"Quoted string: \"\n.\n$conn\n->\nquote\n(\n$string\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Quoting a dangerous string",
    "output": "<?php\n$conn\n= new\nPDO\n(\n'sqlite:/home/lynn/music.sql3'\n);\n/* Dangerous string */\n$string\n=\n'Naughty \\' string'\n;\nprint\n\"Unquoted string:\n$string\n\\n\"\n;\nprint\n\"Quoted string:\"\n.\n$conn\n->\nquote\n(\n$string\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Quoting a complex string",
    "output": "<?php\n$conn\n= new\nPDO\n(\n'sqlite:/home/lynn/music.sql3'\n);\n/* Complex string */\n$string\n=\n\"Co'mpl''ex \\\"st'\\\"ring\"\n;\nprint\n\"Unquoted string:\n$string\n\\n\"\n;\nprint\n\"Quoted string: \"\n.\n$conn\n->\nquote\n(\n$string\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Execute a prepared statement with named placeholders",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour'\n);\n$sth\n->\nbindParam\n(\n'calories'\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n/* Names can be prefixed with colons \":\" too (optional) */\n$sth\n->\nbindParam\n(\n':colour'\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #2 Execute a prepared statement with question mark placeholders",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nbindParam\n(\n1\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n$sth\n->\nbindParam\n(\n2\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #3 Call a stored procedure with an INOUT parameter",
    "output": "<?php\n/* Call a stored procedure with an INOUT parameter */\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'CALL puree_fruit(?)'\n);\n$sth\n->\nbindParam\n(\n1\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n|\nPDO\n::\nPARAM_INPUT_OUTPUT\n,\n12\n);\n$sth\n->\nexecute\n();\nprint\n\"After pureeing fruit, the colour is:\n$colour\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Execute a prepared statement with named placeholders",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour'\n);\n/* Sets a parameter value using its name */\n$sth\n->\nbindValue\n(\n'calories'\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n/* Optionally, parameter names can also be prefixed with colons \":\" */\n$sth\n->\nbindValue\n(\n':colour'\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #2 Execute a prepared statement with question mark placeholders",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nbindValue\n(\n1\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n$sth\n->\nbindValue\n(\n2\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 PDOStatement::debugDumpParams() example with named parameters",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour'\n);\n$sth\n->\nbindParam\n(\n':calories'\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n$sth\n->\nbindValue\n(\n':colour'\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n,\n12\n);\n$sth\n->\nexecute\n();\n$sth\n->\ndebugDumpParams\n();\n?>"
  },
  {
    "input": "Example #2 PDOStatement::debugDumpParams() example with unnamed parameters",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$name\n=\n'apple'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nbindParam\n(\n1\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n$sth\n->\nbindValue\n(\n2\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n);\n$sth\n->\nexecute\n();\n$sth\n->\ndebugDumpParams\n();\n?>"
  },
  {
    "input": "Example #1 Retrieving an SQLSTATE code",
    "output": "<?php\n/* Provoke an error -- the BONES table does not exist */\n$err\n=\n$dbh\n->\nprepare\n(\n'SELECT skull FROM bones'\n);\n$err\n->\nexecute\n();\necho\n\"\\nPDOStatement::errorCode(): \"\n;\nprint\n$err\n->\nerrorCode\n();\n?>"
  },
  {
    "input": "Example #1 Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database",
    "output": "<?php\n/* Provoke an error -- the BONES table does not exist */\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT skull FROM bones'\n);\n$sth\n->\nexecute\n();\necho\n\"\\nPDOStatement::errorInfo():\\n\"\n;\n$arr\n=\n$sth\n->\nerrorInfo\n();\nprint_r\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 Execute a prepared statement with a bound variable and value",
    "output": "<?php\n/* Execute a prepared statement by binding a variable and value */\n$calories\n=\n150\n;\n$colour\n=\n'gre'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour LIKE :colour'\n);\n$sth\n->\nbindParam\n(\n'calories'\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n/* Names can be prefixed with colons \":\" too (optional) */\n$sth\n->\nbindValue\n(\n':colour'\n,\n\"%\n$colour\n%\"\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #2 Execute a prepared statement with an array of named values",
    "output": "<?php\n/* Execute a prepared statement by passing an array of insert values */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour'\n);\n$sth\n->\nexecute\n(array(\n'calories'\n=>\n$calories\n,\n'colour'\n=>\n$colour\n));\n/* Array keys can be prefixed with colons \":\" too (optional) */\n$sth\n->\nexecute\n(array(\n':calories'\n=>\n$calories\n,\n':colour'\n=>\n$colour\n));\n?>"
  },
  {
    "input": "Example #3 Execute a prepared statement with an array of positional values",
    "output": "<?php\n/* Execute a prepared statement by passing an array of insert values */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nexecute\n(array(\n$calories\n,\n$colour\n));\n?>"
  },
  {
    "input": "Example #4 Execute a prepared statement with variables bound to positional placeholders",
    "output": "<?php\n/* Execute a prepared statement by binding PHP variables */\n$calories\n=\n150\n;\n$colour\n=\n'red'\n;\n$sth\n=\n$dbh\n->\nprepare\n(\n'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?'\n);\n$sth\n->\nbindParam\n(\n1\n,\n$calories\n,\nPDO\n::\nPARAM_INT\n);\n$sth\n->\nbindParam\n(\n2\n,\n$colour\n,\nPDO\n::\nPARAM_STR\n,\n12\n);\n$sth\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #5 Execute a prepared statement using array for IN clause",
    "output": "<?php\n/* Execute a prepared statement using an array of values for an IN clause */\n$params\n= array(\n1\n,\n21\n,\n63\n,\n171\n);\n/* Create a string for the parameter placeholders filled to the number of params */\n$place_holders\n=\n'?'\n.\nstr_repeat\n(\n', ?'\n,\ncount\n(\n$params\n) -\n1\n);\n/*\n    This prepares the statement with enough unnamed placeholders for every value\n    in our $params array. The values of the $params array are then bound to the\n    placeholders in the prepared statement when the statement is executed.\n    This is not the same thing as using PDOStatement::bindParam() since this\n    requires a reference to the variable. PDOStatement::execute() only binds\n    by value instead.\n*/\n$sth\n=\n$dbh\n->\nprepare\n(\n\"SELECT id, name FROM contacts WHERE id IN (\n$place_holders\n)\"\n);\n$sth\n->\nexecute\n(\n$params\n);\n?>"
  },
  {
    "input": "Example #1 Fetching rows using different fetch styles",
    "output": "<?php\n$sth\n=\n$dbh\n->\nprepare\n(\n\"SELECT name, colour FROM fruit\"\n);\n$sth\n->\nexecute\n();\n/* Exercise PDOStatement::fetch styles */\nprint\n\"PDO::FETCH_ASSOC: \"\n;\nprint\n\"Return next row as an array indexed by column name\\n\"\n;\n$result\n=\n$sth\n->\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n);\nprint_r\n(\n$result\n);\nprint\n\"\\n\"\n;\nprint\n\"PDO::FETCH_BOTH: \"\n;\nprint\n\"Return next row as an array indexed by both column name and number\\n\"\n;\n$result\n=\n$sth\n->\nfetch\n(\nPDO\n::\nFETCH_BOTH\n);\nprint_r\n(\n$result\n);\nprint\n\"\\n\"\n;\nprint\n\"PDO::FETCH_LAZY: \"\n;\nprint\n\"Return next row as a PDORow object with column names as properties\\n\"\n;\n$result\n=\n$sth\n->\nfetch\n(\nPDO\n::\nFETCH_LAZY\n);\nprint_r\n(\n$result\n);\nprint\n\"\\n\"\n;\nprint\n\"PDO::FETCH_OBJ: \"\n;\nprint\n\"Return next row as an anonymous object with column names as properties\\n\"\n;\n$result\n=\n$sth\n->\nfetch\n(\nPDO\n::\nFETCH_OBJ\n);\nprint\n$result\n->\nname\n;\nprint\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Fetching rows with a scrollable cursor",
    "output": "<?php\nfunction\nreadDataForwards\n(\n$dbh\n) {\n\n$sql\n=\n'SELECT hand, won, bet FROM mynumbers ORDER BY BET'\n;\n\n$stmt\n=\n$dbh\n->\nprepare\n(\n$sql\n, array(\nPDO\n::\nATTR_CURSOR\n=>\nPDO\n::\nCURSOR_SCROLL\n));\n\n$stmt\n->\nexecute\n();\n    while (\n$row\n=\n$stmt\n->\nfetch\n(\nPDO\n::\nFETCH_NUM\n,\nPDO\n::\nFETCH_ORI_NEXT\n)) {\n\n$data\n=\n$row\n[\n0\n] .\n\"\\t\"\n.\n$row\n[\n1\n] .\n\"\\t\"\n.\n$row\n[\n2\n] .\n\"\\n\"\n;\n        print\n$data\n;\n    }\n}\nfunction\nreadDataBackwards\n(\n$dbh\n) {\n\n$sql\n=\n'SELECT hand, won, bet FROM mynumbers ORDER BY bet'\n;\n\n$stmt\n=\n$dbh\n->\nprepare\n(\n$sql\n, array(\nPDO\n::\nATTR_CURSOR\n=>\nPDO\n::\nCURSOR_SCROLL\n));\n\n$stmt\n->\nexecute\n();\n\n$row\n=\n$stmt\n->\nfetch\n(\nPDO\n::\nFETCH_NUM\n,\nPDO\n::\nFETCH_ORI_LAST\n);\n    do {\n\n$data\n=\n$row\n[\n0\n] .\n\"\\t\"\n.\n$row\n[\n1\n] .\n\"\\t\"\n.\n$row\n[\n2\n] .\n\"\\n\"\n;\n        print\n$data\n;\n    } while (\n$row\n=\n$stmt\n->\nfetch\n(\nPDO\n::\nFETCH_NUM\n,\nPDO\n::\nFETCH_ORI_PRIOR\n));\n}\nprint\n\"Reading forwards:\\n\"\n;\nreadDataForwards\n(\n$conn\n);\nprint\n\"Reading backwards:\\n\"\n;\nreadDataBackwards\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 Fetch all remaining rows in a result set",
    "output": "<?php\n$sth\n=\n$dbh\n->\nprepare\n(\n\"SELECT name, colour FROM fruit\"\n);\n$sth\n->\nexecute\n();\n/* Fetch all of the remaining rows in the result set */\nprint\n\"Fetch all of the remaining rows in the result set:\\n\"\n;\n$result\n=\n$sth\n->\nfetchAll\n();\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 Return first column of the next row",
    "output": "<?php\n$sth\n=\n$dbh\n->\nprepare\n(\n\"SELECT name, colour FROM fruit\"\n);\n$sth\n->\nexecute\n();\nprint\n\"Fetch the first column from the first row in the result set:\\n\"\n;\n$result\n=\n$sth\n->\nfetchColumn\n();\nprint\n\"name =\n$result\n\\n\"\n;\nprint\n\"Fetch the second column from the second row in the result set:\\n\"\n;\n$result\n=\n$sth\n->\nfetchColumn\n(\n1\n);\nprint\n\"colour =\n$result\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Insert LOBs in CUBRID PDO",
    "output": "<?php\n$fp\n=\nfopen\n(\n'lob_test.png'\n,\n'rb'\n);\n$sql_stmt\n=\n\"INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)\"\n;\n$stmt\n=\n$dbh\n->\nprepare\n(\n$sql_stmt\n);\n$ret\n=\n$stmt\n->\nbindParam\n(\n1\n,\n$fp\n,\nPDO\n::\nPARAM_LOB\n);\n$ret\n=\n$stmt\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #2 Fetch LOBs in CUBRID PDO",
    "output": "<?php\n$sql_stmt\n=\n\"SELECT content FROM lob_test WHERE name='lob_test.png'\"\n;\n$stmt\n=\n$dbh\n->\nprepare\n(\n$sql_stmt\n);\n$stmt\n->\nexecute\n();\n$result\n=\n$stmt\n->\nfetch\n(\nPDO\n::\nFETCH_NUM\n);\nheader\n(\n\"Content-Type: image/png\"\n);\nfpassthru\n(\n$result\n[\n0\n]);\n?>"
  },
  {
    "input": "Example #3 Insert set in CUBRID PDO with default data type.",
    "output": "<?php\n$conn_str\n=\n\"cubrid:dbname=demodb;host=localhost;port=33000\"\n;\n$cubrid_pdo\n= new\nPDO\n(\n$conn_str\n,\n'dba'\n,\n''\n);\n$cubrid_pdo\n->\nexec\n(\n\"DROP TABLE if exists test_tbl\"\n);\n$cubrid_pdo\n->\nexec\n(\n\"CREATE TABLE test_tbl (col_1 SET(VARCHAR))\"\n);\n$sql_stmt_insert\n=\n\"INSERT INTO test_tbl VALUES (?);\"\n;\n$stmt\n=\n$cubrid_pdo\n->\nprepare\n(\n$sql_stmt_insert\n);\n$data\n= array(\n\"abc\"\n,\n\"def\"\n,\n\"ghi\"\n);\n$ret\n=\n$stmt\n->\nbindParam\n(\n1\n,\n$data\n,\nPDO\n::\nPARAM_NULL\n);\n$ret\n=\n$stmt\n->\nexecute\n();\nvar_Dump\n(\n$ret\n);\n?>"
  },
  {
    "input": "Example #4 Specify data type when insert set in CUBRID PDO",
    "output": "<?php\n$conn_str\n=\n\"cubrid:dbname=demodb;host=localhost;port=33000\"\n;\n$cubrid_pdo\n= new\nPDO\n(\n$conn_str\n,\n'dba'\n,\n''\n);\n$cubrid_pdo\n->\nexec\n(\n\"DROP TABLE if exists test_tbl\"\n);\n$cubrid_pdo\n->\nexec\n(\n\"CREATE TABLE test_tbl (col_1 SET(int))\"\n);\n$sql_stmt_insert\n=\n\"INSERT INTO test_tbl VALUES (?);\"\n;\n$stmt\n=\n$cubrid_pdo\n->\nprepare\n(\n$sql_stmt_insert\n);\n$data\n= array(\n1\n,\n2\n,\n3\n,\n4\n);\n$ret\n=\n$stmt\n->\nbindParam\n(\n1\n,\n$data\n,\n0\n,\n0\n,\n\"int\"\n);\n$ret\n=\n$stmt\n->\nexecute\n();\nvar_Dump\n(\n$ret\n);\n?>"
  },
  {
    "input": "Example #1 Setting MySQL unbuffered mode",
    "output": "<?php\n$pdo\n= new\nPdo\\Mysql\n(\n\"mysql:host=localhost;dbname=world\"\n,\n'my_user'\n,\n'my_password'\n);\n$pdo\n->\nsetAttribute\n(\nPDO\n::\nMYSQL_ATTR_USE_BUFFERED_QUERY\n,\nfalse\n);\n$unbufferedResult\n=\n$pdo\n->\nquery\n(\n\"SELECT Name FROM City\"\n);\nforeach (\n$unbufferedResult\nas\n$row\n) {\n    echo\n$row\n[\n'Name'\n] .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Pdo\\Mysql::getWarningCount() example",
    "output": "<?php\n$conn\n=\nPDO\n::\nconnect\n(\n\"mysql:host=localhost;dbname=test;charset=utf8mb4\"\n,\n'user'\n,\n'password'\n);\n$conn\n->\nquery\n(\n'SELECT 42/0'\n);\nif (\n$conn\n->\ngetWarningCount\n() >\n0\n) {\n\n$result\n=\n$conn\n->\nquery\n(\n\"SHOW WARNINGS\"\n);\n\n$row\n=\n$result\n->\nfetch\n();\n\nprintf\n(\n\"%s (%d): %s\\n\"\n,\n$row\n[\n0\n],\n$row\n[\n1\n],\n$row\n[\n2\n]);\n}\n?>"
  },
  {
    "input": "Example #1 Pdo\\Pgsql::escapeIdentifier() example",
    "output": "<?php\n$pdo\n= new\nPdo\\Pgsql\n(\n'pgsql:dbname=test host=localhost'\n,\n$user\n,\n$pass\n);\n$unescapedTableName\n=\n'UnescapedTableName'\n;\n$pdo\n->\nexec\n(\n\"CREATE TABLE\n$unescapedTableName\n ()\"\n);\n$escapedTableName\n=\n$pdo\n->\nescapeIdentifier\n(\n'EscapedTableName'\n);\n$pdo\n->\nexec\n(\n\"CREATE TABLE\n$escapedTableName\n ()\"\n);\n$statement\n=\n$pdo\n->\nquery\n(\n\n\"SELECT relname FROM pg_stat_user_tables WHERE relname ilike '%tablename'\"\n);\nvar_export\n(\n$statement\n->\nfetchAll\n(\nPDO\n::\nFETCH_COLUMN\n,\n0\n));\n$tableNameWithSymbols\n=\n'Table-Name-With-Symbols'\n;\n$pdo\n->\nexec\n(\n\"CREATE TABLE\n$tableNameWithSymbols\n ()\"\n);\n?>"
  },
  {
    "input": "Example #1 Pdo\\Pgsql::setNoticeCallback() example",
    "output": "<?php\n$pdo\n= new\nPdo\\Pgsql\n(\n'pgsql:dbname=test host=localhost'\n,\n$user\n,\n$pass\n);\n$pdo\n->\nexec\n(\n'CREATE TABLE parent(id int primary key)'\n);\n$pdo\n->\nexec\n(\n'CREATE TABLE child(id int references parent)'\n);\n$pdo\n->\nsetNoticeCallback\n(function (\n$message\n) {\n    echo\n$message\n;\n});\n$pdo\n->\nexec\n(\n'TRUNCATE parent CASCADE'\n);\n?>"
  },
  {
    "input": "Example #1 Pdo\\Sqlite::createCollation() example",
    "output": "<?php\n$db\n= new\nPdo\\Sqlite\n(\n'sqlite::memory:'\n);\n$db\n->\nexec\n(\n\"CREATE TABLE test (col1 string)\"\n);\n$db\n->\nexec\n(\n\"INSERT INTO test VALUES ('a1')\"\n);\n$db\n->\nexec\n(\n\"INSERT INTO test VALUES ('a10')\"\n);\n$db\n->\nexec\n(\n\"INSERT INTO test VALUES ('a2')\"\n);\n$db\n->\nsqliteCreateCollation\n(\n'NATURAL_CMP'\n,\n'strnatcmp'\n);\nforeach (\n$db\n->\nquery\n(\n\"SELECT col1 FROM test ORDER BY col1\"\n) as\n$row\n) {\n  echo\n$row\n[\n'col1'\n] .\n\"\\n\"\n;\n}\necho\n\"\\n\"\n;\nforeach (\n$db\n->\nquery\n(\n\"SELECT col1 FROM test ORDER BY col1 COLLATE NATURAL_CMP\"\n) as\n$row\n) {\n  echo\n$row\n[\n'col1'\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Example of Data Retrieval",
    "output": "<html>\n    <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=euc-kr\">\n    </head>\n    <body>\n    <center>\n    <table border=2>\n\n<?php\n\n/**\n         * Set server information for CUBRID connection. host_ip is the IP\n         * address where the CUBRID Broker is installed (localhost in this\n         * example), and host_port is the port number of the CUBRID Broker.\n         * The port number is the default given during the installation.\n         * For details, see \"Administrator's Guide.\"\n         */\n\n$host_ip\n=\n\"localhost\"\n;\n\n$host_port\n=\n33000\n;\n\n$db_name\n=\n\"demodb\"\n;\n\n/**\n         * Connect to CUBRID Server. Do not make the actual connection, but\n         * only retain the connection information. The reason for not making\n         * the actual connection is to handle transaction more efficiently\n         * in the 3-tier architecture.\n         */\n\n$cubrid_con\n= @\ncubrid_connect\n(\n$host_ip\n,\n$host_port\n,\n$db_name\n);\n\n        if (!\n$cubrid_con\n) {\n            echo\n\"Database Connection Error\"\n;\n            exit;\n        }\n\n?>\n\n<?php\n        $sql\n=\n\"select sports, count(players) as players from event group by sports\"\n;\n\n/**\n         * Request the CUBRID Server for the results of the SQL statement.\n         * Now make the actual connection to the CUBRID Server.\n         */\n\n$result\n=\ncubrid_execute\n(\n$cubrid_con\n,\n$sql\n);\n\n        if (\n$result\n) {\n\n/**\n             * Get the column names from the result set created by the SQL query.\n             */\n\n$columns\n=\ncubrid_column_names\n(\n$result\n);\n\n/**\n             * Get the number of columns in the result set created by the SQL query.\n             */\n\n$num_fields\n=\ncubrid_num_cols\n(\n$result\n);\n\n/**\n             * List the column names of the result set on the screen.\n             */\n\necho\n\"<tr>\"\n;\n\n            while (list(\n$key\n,\n$colname\n) =\neach\n(\n$columns\n)) {\n                echo\n\"<td align=center>\n$colname\n</td>\"\n;\n            }\n\n            echo\n\"</tr>\"\n;\n\n\n/**\n             * Get the results from the result set.\n             */\n\nwhile (\n$row\n=\ncubrid_fetch\n(\n$result\n)) {\n                echo\n\"<tr>\"\n;\n\n                for (\n$i\n=\n0\n;\n$i\n<\n$num_fields\n;\n$i\n++) {\n                    echo\n\"<td align=center>\"\n;\n                    echo\n$row\n[\n$i\n];\n                    echo\n\"</td>\"\n;\n                }\n\n                echo\n\"</tr>\"\n;\n            }\n        }\n\n/**\n         * The PHP module in the CUBRID runs in a 3-tier architecture. Even when\n         * calling SELECT for transaction processing, it is processed as a part\n         * of the transaction. Therefore, the transaction needs to be rolled back\n         * by calling commit or rollback even though SELECT was called for smooth\n         * performance.\n         */\n\ncubrid_commit\n(\n$cubrid_con\n);\n\ncubrid_disconnect\n(\n$cubrid_con\n);\n\n?>\n    </body>\n    </html>"
  },
  {
    "input": "Example #2 Example of Data Insertion",
    "output": "<html>\n    <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=euc- kr\">\n    </head>\n    <body>\n    <center>\n    <table border=2>\n\n<?php\n\n/**\n         * host_ip is the IP address where the CUBRID Broker is installed\n         * host_port is the port number of the CUBRID Broker\n         * db_name is the name of CUBRID Database\n         */\n\n$host_ip\n=\n\"localhost\"\n;\n\n$host_port\n=\n33000\n;\n\n$db_name\n=\n\"demodb\"\n;\n\n$cubrid_con\n= @\ncubrid_connect\n(\n$host_ip\n,\n$host_port\n,\n$db_name\n);\n\n        if (!\n$cubrid_con\n) {\n            echo\n\"Database Connection Error\"\n;\n            exit;\n        }\n\n?>\n\n<?php\n        $sql\n=\n\"insert into olympic (host_year,host_nation,host_city,\"\n\n.\n\"opening_date,closing_date) values (2008, 'China', 'Beijing',\"\n\n.\n\"to_date('08-08-2008','mm-dd- yyyy'),to_date('08-24-2008','mm-dd-yyyy')) ;\"\n;\n\n$result\n=\ncubrid_execute\n(\n$cubrid_con\n,\n$sql\n);\n        if (\n$result\n) {\n\n/**\n             * Handled successfully, so commit.\n             */\n\ncubrid_commit\n(\n$cubrid_con\n);\n            echo\n\"Inserted successfully \"\n;\n        } else {\n\n/**\n             * Error occurred, so the error message is output and rollback is called.\n             */\n\necho\ncubrid_error_msg\n();\n\ncubrid_rollback\n(\n$cubrid_con\n);\n        }\n\ncubrid_disconnect\n(\n$cubrid_con\n);\n\n?>\n    </body>\n    </html>"
  },
  {
    "input": "Example #1 cubrid_bind() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT code FROM event WHERE sports='Basketball' and gender='M'\"\n);\n$row\n=\ncubrid_fetch_array\n(\n$result\n,\nCUBRID_ASSOC\n);\n$event_code\n=\n$row\n[\n\"code\"\n];\ncubrid_close_request\n(\n$result\n);\n$game_req\n=\ncubrid_prepare\n(\n$conn\n,\n\"SELECT athlete_code FROM game WHERE host_year=1992 and event_code=? and nation_code='USA'\"\n);\ncubrid_bind\n(\n$game_req\n,\n1\n,\n$event_code\n,\n\"number\"\n);\ncubrid_execute\n(\n$game_req\n);\nprintf\n(\n\"--- Dream Team (1992 United States men's Olympic basketball team) ---\\n\"\n);\nwhile (\n$athlete_code\n=\ncubrid_fetch_array\n(\n$game_req\n,\nCUBRID_NUM\n)) {\n\n$athlete_req\n=\ncubrid_prepare\n(\n$conn\n,\n\"SELECT name FROM athlete WHERE code=? AND nation_code='USA' AND event='Basketball' AND gender='M'\"\n);\n\ncubrid_bind\n(\n$athlete_req\n,\n1\n,\n$athlete_code\n[\n0\n],\n\"number\"\n);\n\ncubrid_execute\n(\n$athlete_req\n);\n\n$row\n=\ncubrid_fetch_assoc\n(\n$athlete_req\n);\n\nprintf\n(\n\"%s\\n\"\n,\n$row\n[\n\"name\"\n]);\n}\ncubrid_close_request\n(\n$game_req\n);\ncubrid_close_request\n(\n$athlete_req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 cubrid_bind() BLOB/CLOB example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\nif (\n$con\n) {\n\ncubrid_execute\n(\n$con\n,\n\"DROP TABLE if exists php_cubrid_lob_test\"\n);\n\ncubrid_execute\n(\n$con\n,\n\"CREATE TABLE php_cubrid_lob_test (doc_content CLOB)\"\n);\n\n$sql\n=\n\"INSERT INTO php_cubrid_lob_test(doc_content) VALUES(?)\"\n;\n\n$req\n=\ncubrid_prepare\n(\n$con\n,\n$sql\n);\n\n$fp\n=\nfopen\n(\n\"book.txt\"\n,\n\"rb\"\n);\n\ncubrid_bind\n(\n$req\n,\n1\n,\n$fp\n,\n\"clob\"\n);\n\ncubrid_execute\n(\n$req\n);\n}\n?>"
  },
  {
    "input": "Example #3 cubrid_bind() BLOB/CLOB example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\nif (\n$con\n) {\n\ncubrid_execute\n(\n$con\n,\n\"DROP TABLE if exists php_cubrid_lob_test\"\n);\n\ncubrid_execute\n(\n$con\n,\n\"CREATE TABLE php_cubrid_lob_test (image BLOB)\"\n);\n\n$sql\n=\n\"INSERT INTO php_cubrid_lob_test(image) VALUES(?)\"\n;\n\n$req\n=\ncubrid_prepare\n(\n$con\n,\n$sql\n);\n\ncubrid_bind\n(\n$req\n,\n1\n,\n\"cubrid_logo.png\"\n,\n\"blob\"\n);\n\ncubrid_execute\n(\n$req\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_close_prepare() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select * from members\"\n,\n\nCUBRID_INCLUDE_OID\n|\nCUBRID_ASYNC\n);\n   if (\n$req\n) {\n      while ( list (\n$id\n,\n$name\n) =\ncubrid_fetch\n(\n$req\n) ){\n         echo\n$id\n;\n         echo\n$name\n;\n      }\n\ncubrid_close_prepare\n(\n$req\n);\n// or you can use cubrid_close_request($req)\n\n}\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_close_request() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select * from members\"\n,\n\nCUBRID_INCLUDE_OID\n|\nCUBRID_ASYNC\n);\n   if (\n$req\n) {\n      while ( list (\n$id\n,\n$name\n) =\ncubrid_fetch\n(\n$req\n) ){\n         echo\n$id\n;\n         echo\n$name\n;\n      }\n\ncubrid_close_request\n(\n$req\n);\n// or you can use cubrid_close_prepare($req)\n\n}\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_col_get() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\n$size\n=\ncubrid_col_size\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$size\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_col_size() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\n$size\n=\ncubrid_col_size\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$size\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_column_names() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$column_names\n=\ncubrid_column_names\n(\n$result\n);\n$column_types\n=\ncubrid_column_types\n(\n$result\n);\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n\"Column Names\"\n,\n\"Column Types\"\n,\n\"Column Maxlen\"\n);\nfor(\n$i\n=\n0\n,\n$size\n=\ncount\n(\n$column_names\n);\n$i\n<\n$size\n;\n$i\n++) {\n\n$column_len\n=\ncubrid_field_len\n(\n$result\n,\n$i\n);\n\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n$column_names\n[\n$i\n],\n$column_types\n[\n$i\n],\n$column_len\n);\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_column_types() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$column_names\n=\ncubrid_column_names\n(\n$result\n);\n$column_types\n=\ncubrid_column_types\n(\n$result\n);\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n\"Column Names\"\n,\n\"Column Types\"\n,\n\"Column Maxlen\"\n);\nfor(\n$i\n=\n0\n,\n$size\n=\ncount\n(\n$column_names\n);\n$i\n<\n$size\n;\n$i\n++) {\n\n$column_len\n=\ncubrid_field_len\n(\n$result\n,\n$i\n);\n\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n$column_names\n[\n$i\n],\n$column_types\n[\n$i\n],\n$column_len\n);\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_commit() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE publishers\"\n);\n$sql\n= <<<EOD\nCREATE TABLE publishers(\npub_id CHAR(3),\npub_name VARCHAR(20),\ncity VARCHAR(15),\nstate CHAR(2),\ncountry VARCHAR(15)\n)\nEOD;\ncubrid_set_autocommit\n(\n$conn\n,\nfalse\n);\nif (!\ncubrid_execute\n(\n$conn\n,\n$sql\n)) {\n\nprintf\n(\n\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\"\n,\ncubrid_error_code_facility\n(),\ncubrid_error_code\n(),\ncubrid_error_msg\n());\n\ncubrid_disconnect\n(\n$conn\n);\n    exit;\n}\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO publishers VALUES(?, ?, ?, ?, ?)\"\n);\n$id_list\n= array(\n\"P01\"\n,\n\"P02\"\n,\n\"P03\"\n,\n\"P04\"\n);\n$name_list\n= array(\n\"Abatis Publishers\"\n,\n\"Core Dump Books\"\n,\n\"Schadenfreude Press\"\n,\n\"Tenterhooks Press\"\n);\n$city_list\n= array(\n\"New York\"\n,\n\"San Francisco\"\n,\n\"Hamburg\"\n,\n\"Berkeley\"\n);\n$state_list\n= array(\n\"NY\"\n,\n\"CA\"\n,\nNULL\n,\n\"CA\"\n);\n$country_list\n= array(\n\"USA\"\n,\n\"USA\"\n,\n\"Germany\"\n,\n\"USA\"\n);\nfor (\n$i\n=\n0\n,\n$size\n=\ncount\n(\n$id_list\n);\n$i\n<\n$size\n;\n$i\n++) {\n\ncubrid_bind\n(\n$req\n,\n1\n,\n$id_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n2\n,\n$name_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n3\n,\n$city_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n4\n,\n$state_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n5\n,\n$country_list\n[\n$i\n]);\n    if (!(\n$ret\n=\ncubrid_execute\n(\n$req\n))) {\n        break;\n    }\n}\nif (!\n$ret\n) {\n\ncubrid_rollback\n(\n$conn\n);\n} else {\n\ncubrid_commit\n(\n$conn\n);\n\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM publishers\"\n);\n    while (\n$result\n=\ncubrid_fetch_assoc\n(\n$req\n)) {\n\nprintf\n(\n\"%-3s %-20s %-15s %-3s %-15s\\n\"\n,\n\n$result\n[\n\"pub_id\"\n],\n$result\n[\n\"pub_name\"\n],\n$result\n[\n\"city\"\n],\n$result\n[\n\"state\"\n],\n$result\n[\n\"country\"\n]);\n    }\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_connect() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_connect_with_url() url without properties example",
    "output": "<?php\n$conn_url\n=\n\"CUBRID:localhost:33000:demodb:dba::\"\n;\n$con\n=\ncubrid_connect_with_url\n(\n$conn_url\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\ncubrid_execute\n(\n$con\n,\n\"create table person(id int,name char(16))\"\n);\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #2 cubrid_connect_with_url() url with properties example",
    "output": "<?php\n$conn_url\n=\n\"CUBRID:127.0.0.1:33000:demodb:dba::?login_timeout=100\"\n;\n$con\n=\ncubrid_connect_with_url\n(\n$conn_url\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\ncubrid_execute\n(\n$con\n,\n\"create table person(id int,name char(16))\"\n);\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_current_oid() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n,\nCUBRID_INCLUDE_OID\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$res\n=\ncubrid_get\n(\n$conn\n,\n$oid\n);\nprint_r\n(\n$res\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_disconnect() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"create table person(id int,name char(10))\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_drop() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\nprintf\n(\n\"--- Before Drop: ---\\n\"\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n);\nvar_dump\n(\n$attr\n);\nif (\ncubrid_drop\n(\n$conn\n,\n$oid\n)) {\n\ncubrid_commit\n(\n$conn\n);\n} else {\n\ncubrid_rollback\n(\n$conn\n);\n}\ncubrid_close_request\n(\n$req\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\nprintf\n(\n\"\\n--- After Drop: ---\\n\"\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_error_code() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"SELECT * FROM code WHERE s_name=?\"\n);\n$req\n= @\ncubrid_execute\n(\n$req\n);\nif (!\n$req\n) {\n\nprintf\n(\n\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\"\n,\n\ncubrid_error_code_facility\n(),\ncubrid_error_code\n(),\ncubrid_error_msg\n());\n\ncubrid_disconnect\n(\n$conn\n);\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_error_code_facility() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n= @\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM unknown\"\n);\nif (!\n$req\n) {\n\nprintf\n(\n\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\"\n,\n\ncubrid_error_code_facility\n(),\ncubrid_error_code\n(),\ncubrid_error_msg\n());\n\ncubrid_disconnect\n(\n$conn\n);\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_error_msg() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\nif (!@\ncubrid_schema\n(\n$conn\n,\n100000\n)) {\n\nprintf\n(\n\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\"\n,\n\ncubrid_error_code_facility\n(),\ncubrid_error_code\n(),\ncubrid_error_msg\n());\n\ncubrid_disconnect\n(\n$conn\n);\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_execute() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT code FROM event WHERE name='100m Butterfly' and gender='M'\"\n,\nCUBRID_ASYNC\n);\n$row\n=\ncubrid_fetch_array\n(\n$result\n,\nCUBRID_ASSOC\n);\n$event_code\n=\n$row\n[\n\"code\"\n];\ncubrid_close_request\n(\n$result\n);\n$history_req\n=\ncubrid_prepare\n(\n$conn\n,\n\"SELECT * FROM history WHERE event_code=?\"\n);\ncubrid_bind\n(\n$history_req\n,\n1\n,\n$event_code\n,\n\"number\"\n);\ncubrid_execute\n(\n$history_req\n);\nprintf\n(\n\"%-20s %-9s %-10s %-5s\\n\"\n,\n\"athlete\"\n,\n\"host_year\"\n,\n\"score\"\n,\n\"unit\"\n);\nwhile (\n$row\n=\ncubrid_fetch_array\n(\n$history_req\n,\nCUBRID_ASSOC\n)) {\n\nprintf\n(\n\"%-20s %-9s %-10s %-5s\\n\"\n,\n\n$row\n[\n\"athlete\"\n],\n$row\n[\n\"host_year\"\n],\n$row\n[\n\"score\"\n],\n$row\n[\n\"unit\"\n]);\n}\ncubrid_close_request\n(\n$history_req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM stadium WHERE nation_code='GRE' AND seats > 10000\"\n);\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\"name\"\n,\n\"area\"\n,\n\"seats\"\n,\n\"address\"\n);\nwhile (\n$row\n=\ncubrid_fetch\n(\n$req\n)) {\n\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\n$row\n[\n\"name\"\n],\n$row\n[\n\"area\"\n],\n$row\n[\n\"seats\"\n],\n$row\n[\n\"address\"\n]);\n}\n// if you want to operate lob object, you can use cubrid_fetch($req, CUBRID_LOB)\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_free_result() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM history WHERE host_year=2004 ORDER BY event_code\"\n);\n$row\n=\ncubrid_fetch_assoc\n(\n$req\n);\nvar_dump\n(\n$row\n);\ncubrid_free_result\n(\n$req\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_charset() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\nif (!\n$con\n)\n{\n    die(\n'Could not connect.'\n);\n}\nprintf\n(\n\"CUBRID current charset: %s\\n\"\n,\ncubrid_get_charset\n(\n$con\n));\n?>"
  },
  {
    "input": "Example #1 cubrid_get_class_name() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n,\nCUBRID_INCLUDE_OID\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$class_name\n=\ncubrid_get_class_name\n(\n$conn\n,\n$oid\n);\nprint_r\n(\n$class_name\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_client_info() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33088\n,\n\"demodb\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_db_parameter() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33088\n,\n\"demodb\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_query_timeout() example",
    "output": "<?php\n$host\n=\n\"localhost\"\n;\n$port\n=\n33000\n;\n$db\n=\n\"demodb\"\n;\n$conn\n=\ncubrid_connect_with_url\n(\n\"CUBRID:\n$host\n:\n$port\n:\n$db\n:::?login_timeout=50000&query_timeout=5000&disconnect_on_query_timeout=yes\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$timeout\n=\ncubrid_get_query_timeout\n(\n$req\n);\nvar_dump\n(\n$timeout\n);\ncubrid_set_query_timeout\n(\n$req\n,\n1000\n);\n$timeout\n=\ncubrid_get_query_timeout\n(\n$req\n);\nvar_dump\n(\n$timeout\n);\ncubrid_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_server_info() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33088\n,\n\"demodb\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_insert_id() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE cubrid_test\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE cubrid_test (d int AUTO_INCREMENT(1, 2), t varchar)\"\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n10\n;\n$i\n++) {\n\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO cubrid_test(t) VALUES('cubrid_test')\"\n);\n}\n$id\n=\ncubrid_insert_id\n();\nvar_dump\n(\n$id\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_is_instance() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$sql\n= <<<EOD\nSELECT host_year, medal, game_date\nFROM game\nWHERE athlete_code IN\n    (SELECT code FROM athlete WHERE name='Thorpe Ian');\nEOD;\n$req\n=\ncubrid_execute\n(\n$conn\n,\n$sql\n,\nCUBRID_INCLUDE_OID\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$res\n=\ncubrid_is_instance\n(\n$conn\n,\n$oid\n);\nif (\n$res\n==\n1\n) {\n    echo\n\"Instance pointed by\n$oid\n exists.\\n\"\n;\n} else if (\n$res\n==\n0\n){\n    echo\n\"Instance pointed by\n$oid\n doesn't exist.\\n\"\n;\n} else {\n    echo\n\"error\\n\"\n;\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob_close() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists doc\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE doc (id INT, doc_content CLOB)\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO doc VALUES (5,'hello,cubrid')\"\n);\n$lobs\n=\ncubrid_lob_get\n(\n$conn\n,\n\"SELECT doc_content FROM doc WHERE id=5\"\n);\necho\n\"Doc size: \"\n.\ncubrid_lob_size\n(\n$lobs\n[\n0\n]).\n\" bytes\"\n;\ncubrid_lob_export\n(\n$conn\n,\n$lobs\n[\n0\n],\n\"doc_5.txt\"\n);\ncubrid_lob_close\n(\n$lobs\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob_export() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists doc\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE doc (id INT, doc_content CLOB)\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO doc VALUES (5,'hello,cubrid')\"\n);\n$lobs\n=\ncubrid_lob_get\n(\n$conn\n,\n\"SELECT doc_content FROM doc WHERE id=5\"\n);\necho\n\"Doc size: \"\n.\ncubrid_lob_size\n(\n$lobs\n[\n0\n]).\n\" bytes\"\n;\ncubrid_lob_export\n(\n$conn\n,\n$lobs\n[\n0\n],\n\"doc_5.txt\"\n);\ncubrid_lob_close\n(\n$lobs\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob_get() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists doc\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE doc (id INT, doc_content CLOB)\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO doc VALUES (5,'hello,cubrid')\"\n);\n$lobs\n=\ncubrid_lob_get\n(\n$conn\n,\n\"SELECT doc_content FROM doc WHERE id=5\"\n);\necho\n\"Doc size: \"\n.\ncubrid_lob_size\n(\n$lobs\n[\n0\n]).\n\" bytes\"\n;\ncubrid_lob_export\n(\n$conn\n,\n$lobs\n[\n0\n],\n\"doc_5.txt\"\n);\ncubrid_lob_close\n(\n$lobs\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob_send() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists doc\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE doc (id INT, doc_content CLOB)\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO doc VALUES (5,'hello,cubrid')\"\n);\n$lobs\n=\ncubrid_lob_get\n(\n$conn\n,\n\"SELECT doc_content FROM doc WHERE id=5\"\n);\ncubrid_lob_send\n(\n$conn\n,\n$lobs\n[\n0\n]);\ncubrid_lob_close\n(\n$lobs\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob_size() example",
    "output": "<?php\n$lobs\n=\ncubrid_lob_get\n(\n$con\n,\n\"SELECT doc_content FROM doc WHERE doc_id=5\"\n);\necho\n\"Doc size:\"\n.\ncubrid_lob_size\n(\n$lobs\n[\n0\n]);\ncubrid_lob_export\n(\n$conn\n,\n$lobs\n[\n0\n],\n\"doc_5.txt\"\n);\ncubrid_lob_close\n(\n$lobs\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_bind() example",
    "output": "<?php\n// Table: test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES (?, ?)\"\n);\ncubrid_bind\n(\n$req\n,\n1\n,\n3\n);\n$lob\n=\ncubrid_lob2_new\n(\n$conn\n,\n'CLOB'\n);\ncubrid_lob2_bind\n(\n$req\n,\n2\n,\n$lob\n);\ncubrid_execute\n(\n$req\n);\ncubrid_bind\n(\n$req\n,\n1\n,\n4\n);\ncubrid_lob2_bind\n(\n$req\n,\n2\n,\n'CUBRID LOB2 TEST'\n,\n'CLOB'\n);\ncubrid_execute\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_export() example",
    "output": "<?php\n// Table: test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists doc\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE doc (id INT, doc_content CLOB)\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO doc VALUES (5,'hello,cubrid')\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"select * from doc\"\n);\ncubrid_execute\n(\n$req\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$row\n=\ncubrid_fetch\n(\n$req\n,\nCUBRID_NUM\n|\nCUBRID_LOB\n);\ncubrid_lob2_export\n(\n$row\n[\n1\n],\n\"doc_3.txt\"\n);\ncubrid_lob2_close\n(\n$row\n[\n1\n]);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_export() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES (?, ?)\"\n);\ncubrid_bind\n(\n$req\n,\n1\n,\n1\n);\n$lob\n=\ncubrid_lob2_new\n(\n$conn\n,\n\"clob\"\n);\ncubrid_lob2_import\n(\n$lob\n,\n\"doc_1.txt\"\n);\ncubrid_lob2_bind\n(\n$req\n,\n2\n,\n$lob\n,\n'CLOB'\n);\n// or cubrid_lob2_bind($req, 2, $lob);\ncubrid_execute\n(\n$req\n);\ncubrid_lob2_close\n(\n$lob\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_read() example 1",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"public\"\n,\n\"\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"select * from test_lob\"\n);\n$row\n=\ncubrid_fetch_row\n(\n$req\n,\nCUBRID_LOB\n);\nprint\n\"position now is \"\n.\ncubrid_lob2_tell\n(\n$row\n[\n1\n]) .\n\"\\n\"\n;\ncubrid_lob2_seek\n(\n$row\n[\n1\n],\n10\n,\nCUBRID_CURSOR_FIRST\n);\nprint\n\"\\nposition after moving farword is \"\n.\ncubrid_lob2_tell\n(\n$row\n[\n1\n]) .\n\"\\n\"\n;\n$data\n=\ncubrid_lob2_read\n(\n$row\n[\n1\n],\n12\n);\nprint\n\"\\nposition after reading is \"\n.\ncubrid_lob2_tell\n(\n$row\n[\n1\n]) .\n\"\\n\"\n;\nprint\n$data\n.\n\"\\n\"\n;\ncubrid_lob2_seek\n(\n$row\n[\n1\n],\n5\n,\nCUBRID_CURSOR_CURRENT\n);\nprint\n\"\\nposition after moving again is \"\n.\ncubrid_lob2_tell\n(\n$row\n[\n1\n]) .\n\"\\n\"\n;\n$data\n=\ncubrid_lob2_read\n(\n$row\n[\n1\n],\n20\n);\nprint\n$data\n.\n\"\\n\"\n;\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 cubrid_lob2_read() example 2",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"select * from test_lob\"\n);\n$row\n=\ncubrid_fetch_row\n(\n$req\n,\nCUBRID_LOB\n);\nwhile (\ntrue\n) {\n    if (\n$data\n=\ncubrid_lob2_read\n(\n$row\n[\n1\n],\n1024\n)) {\n        print\n$data\n.\n\"\\n\"\n;\n    }\n    elseif (\n$data\n===\nfalse\n) {\n        print\n\"There is no more data\\n\"\n;\n        break;\n    }\n    else {\n        print\n\"There must some errors\\n\"\n;\n        break;\n    }\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_seek() example",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES(2, ?)\"\n);\n$lob\n=\ncubrid_lob2_new\n(\n$conn\n,\n'CLOB'\n);\n$len\n=\ncubrid_lob2_write\n(\n$lob\n,\n\"Hello world\"\n);\ncubrid_lob2_seek\n(\n$lob\n,\n0\n,\nCUBRID_CURSOR_LAST\n);\ncubrid_lob2_write\n(\n$lob\n,\n\"beautiful\"\n);\ncubrid_lob2_seek\n(\n$lob\n,\n15\n,\nCUBRID_CURSOR_FIRST\n);\n$data\n=\ncubrid_lob2_read\n(\n$lob\n,\n5\n);\necho\n$data\n.\n\"\\n\"\n;\ncubrid_lob2_bind\n(\n$req\n,\n1\n,\n$lob\n);\ncubrid_execute\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_seek64() example",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n// Data length of doc_1.txt should be greater than 20101029056306120215.\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES (?, ?)\"\n);\ncubrid_bind\n(\n$req\n,\n1\n,\n1\n);\n$lob\n=\ncubrid_lob2_new\n(\n$conn\n,\n\"clob\"\n);\ncubrid_lob2_import\n(\n$lob\n,\n\"doc_1.txt\"\n);\ncubrid_lob2_bind\n(\n$req\n,\n2\n,\n$lob\n,\n'CLOB'\n);\n// or cubrid_lob2_bind($req, 2, $lob);\ncubrid_execute\n(\n$req\n);\ncubrid_lob2_close\n(\n$lob\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"select * from test_lob\"\n);\n$row\n=\ncubrid_fetch_row\n(\n$req\n,\nCUBRID_LOB\n);\n$lob\n=\n$row\n[\n1\n];\ncubrid_lob2_seek64\n(\n$lob\n,\n\"20101029056306120215\"\n,\nCUBRID_CURSOR_FIRST\n);\n$data\n=\ncubrid_lob2_read\n(\n$lob\n,\n20\n);\necho\n$data\n.\n\"\\n\"\n;\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lob2_write() example 1",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES(2, ?)\"\n);\n$lob\n=\ncubrid_lob2_new\n(\n$conn\n,\n'CLOB'\n);\n$len\n=\ncubrid_lob2_write\n(\n$lob\n,\n\"Hello world\"\n);\ncubrid_lob2_bind\n(\n$req\n,\n1\n,\n$lob\n);\ncubrid_execute\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 cubrid_lob2_write() example 2",
    "output": "<?php\n// test_lob (id INT, contents CLOB)\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE if exists test_lob\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE test_lob (id INT, contents CLOB)\"\n);\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO test_lob VALUES(1, ?)\"\n);\n$lob1\n=\ncubrid_lob2_new\n(\n$conn\n,\n'CLOB'\n);\n$len\n=\ncubrid_lob2_write\n(\n$lob1\n,\n\"cubrid php driver\"\n);\ncubrid_lob2_bind\n(\n$req\n,\n1\n,\n$lob1\n);\ncubrid_execute\n(\n$req\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"select * from test_lob\"\n);\n$row\n=\ncubrid_fetch_row\n(\n$req\n,\nCUBRID_LOB\n);\n$lob2\n=\n$row\n[\n1\n];\ncubrid_lob2_seek\n(\n$lob2\n,\n0\n,\nCUBRID_CURSOR_LAST\n);\n$pos\n=\ncubrid_lob2_tell\n(\n$lob2\n);\nprint\n\"pos before write:\n$pos\n\\n\"\n;\ncubrid_lob2_write\n(\n$lob2\n,\n\"Hello world\"\n);\n$pos\n=\ncubrid_lob2_tell\n(\n$lob2\n);\nprint\n\"pos after write:\n$pos\n\\n\"\n;\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lock_read() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\ncubrid_lock_read\n(\n$conn\n,\n$oid\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\n$attr\n=\ncubrid_get\n(\n$conn\n,\n$oid\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_lock_write() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\ncubrid_lock_write\n(\n$conn\n,\n$oid\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_put\n(\n$conn\n,\n$oid\n,\n\"b\"\n, array(\n2\n,\n4\n,\n8\n));\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_move_cursor() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"127.0.0.1\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_LAST\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_CURRENT\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_next_result() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"127.0.0.1\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$sql_stmt\n=\n\"SELECT * FROM code; SELECT * FROM history WHERE host_year=2004 AND event_code=20281\"\n;\n$res\n=\ncubrid_execute\n(\n$conn\n,\n$sql_stmt\n,\nCUBRID_EXEC_QUERY_ALL\n);\nget_result_info\n(\n$res\n);\ncubrid_next_result\n(\n$res\n);\nget_result_info\n(\n$res\n);\nfunction\nget_result_info\n(\n$req\n)\n{\n\nprintf\n(\n\"\\n------------ get_result_info --------------------\\n\"\n);\n\n$row_num\n=\ncubrid_num_rows\n(\n$req\n);\n\n$col_num\n=\ncubrid_num_cols\n(\n$req\n);\n\n$column_name_list\n=\ncubrid_column_names\n(\n$req\n);\n\n$column_type_list\n=\ncubrid_column_types\n(\n$req\n);\n\n$column_last_name\n=\ncubrid_field_name\n(\n$req\n,\n$col_num\n-\n1\n);\n\n$column_last_table\n=\ncubrid_field_table\n(\n$req\n,\n$col_num\n-\n1\n);\n\n$column_last_type\n=\ncubrid_field_type\n(\n$req\n,\n$col_num\n-\n1\n);\n\n$column_last_len\n=\ncubrid_field_len\n(\n$req\n,\n$col_num\n-\n1\n);\n\n$column_1_flags\n=\ncubrid_field_flags\n(\n$req\n,\n1\n);\n\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"Row count:\"\n,\n$row_num\n);\n\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"Column count:\"\n,\n$col_num\n);\n\nprintf\n(\n\"\\n\"\n);\n\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n\"Column Names\"\n,\n\"Column Types\"\n,\n\"Column Len\"\n);\n\nprintf\n(\n\"------------------------------------------------------------------------------\\n\"\n);\n\n$size\n=\ncount\n(\n$column_name_list\n);\n    for(\n$i\n=\n0\n;\n$i\n<\n$size\n;\n$i\n++) {\n\n$column_len\n=\ncubrid_field_len\n(\n$req\n,\n$i\n);\n\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n$column_name_list\n[\n$i\n],\n$column_type_list\n[\n$i\n],\n$column_len\n);\n    }\n\nprintf\n(\n\"\\n\\n\"\n);\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Last Column Name:\"\n,\n$column_last_name\n);\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Last Column Table:\"\n,\n$column_last_table\n);\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Last Column Type:\"\n,\n$column_last_type\n);\n\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"Last Column Len:\"\n,\n$column_last_len\n);\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Second Column Flags:\"\n,\n$column_1_flags\n);\n\nprintf\n(\n\"\\n\\n\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_num_cols() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$row_num\n=\ncubrid_num_rows\n(\n$req\n);\n$col_num\n=\ncubrid_num_cols\n(\n$req\n);\nprintf\n(\n\"Row Num: %d\\nColumn Num: %d\\n\"\n,\n$row_num\n,\n$col_num\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_num_rows() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$row_num\n=\ncubrid_num_rows\n(\n$req\n);\n$col_num\n=\ncubrid_num_cols\n(\n$req\n);\nprintf\n(\n\"Row Num: %d\\nColumn Num: %d\\n\"\n,\n$row_num\n,\n$col_num\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_connect() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_pconnect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_pconnect_with_url() url without properties example",
    "output": "<?php\n$conn_url\n=\n\"CUBRID:127.0.0.1:33000:demodb:dba::\"\n;\n$con\n=\ncubrid_pconnect_with_url\n(\n$conn_url\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\ncubrid_execute\n(\n$con\n,\n\"create table person(id int,name char(16))\"\n);\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #2 cubrid_pconnect_with_url() url with properties example",
    "output": "<?php\n$conn_url\n=\n\"CUBRID:127.0.0.1:33000:demodb:dba::?althost=10.34.63.132:33088&rctime=100\"\n;\n$con\n=\ncubrid_pconnect_with_url\n(\n$conn_url\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_disconnect\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_prepare() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$sql\n= <<<EOD\nSELECT g.event_code, e.name\nFROM game g\nJOIN event e ON g.event_code=e.code\nWHERE host_year = ? AND event_code NOT IN (SELECT event_code FROM game WHERE host_year=?) GROUP BY event_code;\nEOD;\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n$sql\n);\ncubrid_bind\n(\n$req\n,\n1\n,\n2004\n);\ncubrid_bind\n(\n$req\n,\n2\n,\n2000\n);\ncubrid_execute\n(\n$req\n);\n$row_num\n=\ncubrid_num_rows\n(\n$req\n);\nprintf\n(\n\"There are %d event that exits in 2004 olympic but not in 2000. For example:\\n\\n\"\n,\n$row_num\n);\nprintf\n(\n\"%-15s %s\\n\"\n,\n\"Event_code\"\n,\n\"Event_name\"\n);\nprintf\n(\n\"----------------------------\\n\"\n);\n$row\n=\ncubrid_fetch_assoc\n(\n$req\n);\nprintf\n(\n\"%-15d %s\\n\"\n,\n$row\n[\n\"event_code\"\n],\n$row\n[\n\"name\"\n]);\n$row\n=\ncubrid_fetch_assoc\n(\n$req\n);\nprintf\n(\n\"%-15d %s\\n\"\n,\n$row\n[\n\"event_code\"\n],\n$row\n[\n\"name\"\n]);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_put() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_put\n(\n$conn\n,\n$oid\n,\n\"b\"\n, array(\n2\n,\n4\n,\n8\n));\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_rollback() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"127.0.0.1\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\ncubrid_set_autocommit\n(\n$conn\n,\nfalse\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE publishers\"\n);\n$sql\n= <<<EOD\nCREATE TABLE publishers(\npub_id CHAR(3),\npub_name VARCHAR(20),\ncity VARCHAR(15),\nstate CHAR(2),\ncountry VARCHAR(15)\n)\nEOD;\nif (!\ncubrid_execute\n(\n$conn\n,\n$sql\n)) {\n\nprintf\n(\n\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\"\n,\ncubrid_error_code_facility\n(),\ncubrid_error_code\n(),\ncubrid_error_msg\n());\n\ncubrid_disconnect\n(\n$conn\n);\n    exit;\n}\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n\"INSERT INTO publishers VALUES(?, ?, ?, ?, ?)\"\n);\n$id_list\n= array(\n\"P01\"\n,\n\"P02\"\n,\n\"P03\"\n,\n\"P04\"\n);\n$name_list\n= array(\n\"Abatis Publishers\"\n,\n\"Core Dump Books\"\n,\n\"Schadenfreude Press\"\n,\n\"Tenterhooks Press\"\n);\n$city_list\n= array(\n\"New York\"\n,\n\"San Francisco\"\n,\n\"Hamburg\"\n,\n\"Berkeley\"\n);\n$state_list\n= array(\n\"NY\"\n,\n\"CA\"\n,\nNULL\n,\n\"CA\"\n);\n$country_list\n= array(\n\"USA\"\n,\n\"USA\"\n,\n\"Germany\"\n,\n\"USA\"\n);\nfor (\n$i\n=\n0\n,\n$size\n=\ncount\n(\n$id_list\n);\n$i\n<\n$size\n;\n$i\n++) {\n\ncubrid_bind\n(\n$req\n,\n1\n,\n$id_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n2\n,\n$name_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n3\n,\n$city_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n4\n,\n$state_list\n[\n$i\n]);\n\ncubrid_bind\n(\n$req\n,\n5\n,\n$country_list\n[\n$i\n]);\n    if (!(\n$ret\n=\ncubrid_execute\n(\n$req\n))) {\n        break;\n    }\n}\nif (!\n$ret\n) {\n\ncubrid_rollback\n(\n$conn\n);\n} else {\n\ncubrid_commit\n(\n$conn\n);\n\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM publishers\"\n);\n    while (\n$result\n=\ncubrid_fetch_assoc\n(\n$req\n)) {\n\nprintf\n(\n\"%-3s %-20s %-15s %-3s %-15s\\n\"\n,\n\n$result\n[\n\"pub_id\"\n],\n$result\n[\n\"pub_name\"\n],\n$result\n[\n\"city\"\n],\n$result\n[\n\"state\"\n],\n$result\n[\n\"country\"\n]);\n    }\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_schema() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\nprintf\n(\n\"\\n--- Primary Key ---\\n\"\n);\n$pk\n=\ncubrid_schema\n(\n$conn\n,\nCUBRID_SCH_PRIMARY_KEY\n,\n\"game\"\n);\nvar_dump\n(\n$pk\n);\nprintf\n(\n\"\\n--- Foreign Keys ---\\n\"\n);\n$fk\n=\ncubrid_schema\n(\n$conn\n,\nCUBRID_SCH_IMPORTED_KEYS\n,\n\"game\"\n);\nvar_dump\n(\n$fk\n);\nprintf\n(\n\"\\n--- Column Attribute ---\\n\"\n);\n$attr\n=\ncubrid_schema\n(\n$conn\n,\nCUBRID_SCH_ATTRIBUTE\n,\n\"stadium\"\n,\n\"area\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_seq_drop() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_seq_drop\n(\n$conn\n,\n$oid\n,\n\"c\"\n,\n4\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_seq_insert() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_seq_insert\n(\n$conn\n,\n$oid\n,\n\"c\"\n,\n5\n,\n\"44\"\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_seq_put() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_seq_put\n(\n$conn\n,\n$oid\n,\n\"c\"\n,\n1\n,\n\"111\"\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"c\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_set_add() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_set_add\n(\n$conn\n,\n$oid\n,\n\"b\"\n,\n\"4\"\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_get_db_parameter() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n$params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nvar_dump\n(\n$params\n);\ncubrid_set_autocommit\n(\n$conn\n,\nCUBRID_AUTOCOMMIT_TRUE\n);\ncubrid_set_db_parameter\n(\n$conn\n,\nCUBRID_PARAM_ISOLATION_LEVEL\n,\n2\n);\n$params_new\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nvar_dump\n(\n$params_new\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_set_drop() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n,\n\"dba\"\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE foo\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM foo\"\n,\nCUBRID_INCLUDE_OID\n);\ncubrid_move_cursor\n(\n$req\n,\n1\n,\nCUBRID_CURSOR_FIRST\n);\n$oid\n=\ncubrid_current_oid\n(\n$req\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_set_drop\n(\n$conn\n,\n$oid\n,\n\"b\"\n,\n\"1\"\n);\n$attr\n=\ncubrid_col_get\n(\n$conn\n,\n$oid\n,\n\"b\"\n);\nvar_dump\n(\n$attr\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_version() example",
    "output": "<?php\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID PHP Version:\"\n,\ncubrid_version\n());\nprintf\n(\n\"\\n\"\n);\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33088\n,\n\"demodb\"\n,\n\"dba\"\n);\nif (!\n$conn\n) {\n    die(\n'Connect Error ('\n.\ncubrid_error_code\n() .\n')'\n.\ncubrid_error_msg\n());\n}\n$db_params\n=\ncubrid_get_db_parameter\n(\n$conn\n);\nwhile (list(\n$param_name\n,\n$param_value\n) =\neach\n(\n$db_params\n)) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\n$param_name\n,\n$param_value\n);\n}\nprintf\n(\n\"\\n\"\n);\n$server_info\n=\ncubrid_get_server_info\n(\n$conn\n);\n$client_info\n=\ncubrid_get_client_info\n();\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Server Info:\"\n,\n$server_info\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Client Info:\"\n,\n$client_info\n);\nprintf\n(\n\"\\n\"\n);\n$charset\n=\ncubrid_get_charset\n(\n$conn\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"CUBRID Charset:\"\n,\n$charset\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_affected_rows() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n'localhost'\n,\n33000\n,\n'demodb'\n,\n'dba'\n,\n''\n);\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE IF EXISTS cubrid_test\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE cubrid_test (d varchar)\"\n);\n$sql_stmt\n=\n\"INSERT INTO cubrid_test(d) VALUES('php-test')\"\n;\n$req\n=\ncubrid_prepare\n(\n$conn\n,\n$sql_stmt\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n10\n;\n$i\n++) {\n\ncubrid_execute\n(\n$req\n);\n}\ncubrid_commit\n(\n$conn\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"DELETE FROM cubrid_test WHERE d='php-test'\"\n,\nCUBRID_ASYNC\n);\nvar_dump\n(\ncubrid_affected_rows\n());\nvar_dump\n(\ncubrid_affected_rows\n(\n$conn\n));\nvar_dump\n(\ncubrid_affected_rows\n(\n$req\n));\ncubrid_disconnect\n(\n$conn\n);\nprint\n\"done!\"\n;\n?>"
  },
  {
    "input": "Example #1 cubrid_client_encoding() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\nif (!\n$con\n)\n{\n    die(\n'Could not connect.'\n);\n}\nprintf\n(\n\"CUBRID current charset: %s\\n\"\n,\ncubrid_client_encoding\n(\n$con\n));\n?>"
  },
  {
    "input": "Example #1 cubrid_close() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\nif (\n$con\n) {\n   echo\n\"connected successfully\"\n;\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person values(1,'James')\"\n);\n   if (\n$req\n) {\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   } else {\n\ncubrid_rollback\n(\n$con\n);\n   }\n\ncubrid_close\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_data_seek() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"127.0.0.1\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\ncubrid_data_seek\n(\n$req\n,\n0\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_data_seek\n(\n$req\n,\n2\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_data_seek\n(\n$req\n,\n4\n);\n$result\n=\ncubrid_fetch_row\n(\n$req\n);\nvar_dump\n(\n$result\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_db_name() example",
    "output": "<?php\nerror_reporting\n(\nE_ALL\n);\n$conn\n=\ncubrid_connect\n(\n'localhost'\n,\n33000\n,\n'demodb'\n,\n'dba'\n,\n''\n);\n$db_list\n=\ncubrid_list_dbs\n(\n$conn\n);\n$i\n=\n0\n;\n$cnt\n=\ncount\n(\n$db_list\n);\nwhile (\n$i\n<\n$cnt\n) {\n    echo\ncubrid_db_name\n(\n$db_list\n,\n$i\n) .\n\"\\n\"\n;\n\n$i\n++;\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_errno() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n'localhost'\n,\n33000\n,\n'demodb'\n,\n'dba'\n,\n''\n);\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select id, name from person\"\n);\nif (\n$req\n) {\n    while (list (\n$id\n,\n$name\n) =\ncubrid_fetch\n(\n$req\n))\n    echo\n$id\n,\n$name\n;\n} else {\n    echo\n\"Error Code: \"\n,\ncubrid_errno\n(\n$con\n);\n    echo\n\"Error Message: \"\n,\ncubrid_error\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_error() example",
    "output": "<?php\n$con\n=\ncubrid_connect\n(\n'localhost'\n,\n33000\n,\n'demodb'\n,\n'dba'\n,\n''\n);\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select id, name from person\"\n);\nif (\n$req\n) {\n    while (list (\n$id\n,\n$name\n) =\ncubrid_fetch\n(\n$req\n))\n    echo\n$id\n,\n$name\n;\n} else {\n    echo\n\"Error Code: \"\n,\ncubrid_errno\n(\n$con\n);\n    echo\n\"Error Message: \"\n,\ncubrid_error\n(\n$con\n);\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_array() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\"\n);\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\"name\"\n,\n\"area\"\n,\n\"seats\"\n,\n\"address\"\n);\nwhile (\n$row\n=\ncubrid_fetch_array\n(\n$req\n,\nCUBRID_NUM\n)) {\n\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n$row\n[\n0\n],\n$row\n[\n1\n],\n$row\n[\n2\n],\n$row\n[\n3\n]);\n}\n// if you want to operate LOB object, you can use cubrid_fetch_array($req, CUBRID_NUM | CUBRID_LOB)\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_assoc() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\"\n);\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\"name\"\n,\n\"area\"\n,\n\"seats\"\n,\n\"address\"\n);\nwhile (\n$row\n=\ncubrid_fetch_assoc\n(\n$req\n)) {\n\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\n$row\n[\n\"name\"\n],\n$row\n[\n\"area\"\n],\n$row\n[\n\"seats\"\n],\n$row\n[\n\"address\"\n]);\n}\n// if you want to operate LOB object, you can use cubrid_fetch_assoc($req, CUBRID_LOB)\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_field() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT event_code,athlete_code,nation_code,game_date FROM game WHERE host_year=1988 and event_code=20001;\"\n);\nvar_dump\n(\ncubrid_fetch_row\n(\n$req\n));\ncubrid_field_seek\n(\n$req\n,\n1\n);\n$field\n=\ncubrid_fetch_field\n(\n$req\n);\nprintf\n(\n\"\\n--- Field Properties ---\\n\"\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"name:\"\n,\n$field\n->\nname\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"table:\"\n,\n$field\n->\ntable\n);\nprintf\n(\n\"%-30s \\\"%s\\\"\\n\"\n,\n\"default value:\"\n,\n$field\n->\ndef\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"max length:\"\n,\n$field\n->\nmax_length\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"not null:\"\n,\n$field\n->\nnot_null\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"primary key:\"\n,\n$field\n->\nprimary_key\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"unique key:\"\n,\n$field\n->\nunique_key\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"multiple key:\"\n,\n$field\n->\nmultiple_key\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"numeric:\"\n,\n$field\n->\nnumeric\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"blob:\"\n,\n$field\n->\nblob\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"type:\"\n,\n$field\n->\ntype\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"unsigned:\"\n,\n$field\n->\nunsigned\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"zerofill:\"\n,\n$field\n->\nzerofill\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_lengths() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$row\n=\ncubrid_fetch_row\n(\n$result\n);\nprint_r\n(\n$row\n);\n$lens\n=\ncubrid_fetch_lengths\n(\n$result\n);\nprint_r\n(\n$lens\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_object() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$res\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\nvar_dump\n(\ncubrid_fetch_object\n(\n$res\n));\n// if you want to operate LOB object, you can use cubrid_fetch_object($res, CUBRID_LOB)\nclass\ndemodb_code\n{\n    public\n$s_name\n=\nnull\n;\n    public\n$f_name\n=\nnull\n;\n    public function\ntoString\n() {\n\nvar_dump\n(\n$this\n);\n    }\n}\nvar_dump\n(\ncubrid_fetch_object\n(\n$res\n,\n\"demodb_code\"\n));\n// if you want to operate LOB object, you can use cubrid_fetch_object($res, \"demodb_code\", CUBRID_LOB)\nclass\ndemodb_code_construct\nextends\ndemodb_code\n{\n    public function\n__construct\n(\n$s\n,\n$f\n) {\n\n$this\n->\ns_name\n=\n$s\n;\n\n$this\n->\nf_name\n=\n$f\n;\n    }\n}\nvar_dump\n(\ncubrid_fetch_object\n(\n$res\n,\n'demodb_code_construct'\n, array(\n's_name'\n,\n'f_name'\n)));\n// if you want to operate LOB object, you can use cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name'), CUBRID_LOB)\nvar_dump\n(\ncubrid_fetch_object\n(\n$res\n));\ncubrid_close_request\n(\n$res\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_fetch_row() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\"\n);\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n\"name\"\n,\n\"area\"\n,\n\"seats\"\n,\n\"address\"\n);\nwhile (\n$row\n=\ncubrid_fetch_row\n(\n$req\n)) {\n\nprintf\n(\n\"%-40s %-10s %-6s %-20s\\n\"\n,\n$row\n[\n0\n],\n$row\n[\n1\n],\n$row\n[\n2\n],\n$row\n[\n3\n]);\n}\n// if you want to operate LOB object, you can use cubrid_fetch_row($req, CUBRID_LOB)\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_flags() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$col_num\n=\ncubrid_num_cols\n(\n$result\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Field Name\"\n,\n\"Field Flags\"\n);\nfor(\n$i\n=\n0\n;\n$i\n<\n$col_num\n;\n$i\n++) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\ncubrid_field_name\n(\n$result\n,\n$i\n),\ncubrid_field_flags\n(\n$result\n,\n$i\n));\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_len() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$column_names\n=\ncubrid_column_names\n(\n$result\n);\n$column_types\n=\ncubrid_column_types\n(\n$result\n);\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n\"Column Names\"\n,\n\"Column Types\"\n,\n\"Column Maxlen\"\n);\nfor(\n$i\n=\n0\n,\n$size\n=\ncount\n(\n$column_names\n);\n$i\n<\n$size\n;\n$i\n++) {\n\n$column_len\n=\ncubrid_field_len\n(\n$result\n,\n$i\n);\n\nprintf\n(\n\"%-30s %-30s %-15s\\n\"\n,\n$column_names\n[\n$i\n],\n$column_types\n[\n$i\n],\n$column_len\n);\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_name() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\"\n);\n$col_num\n=\ncubrid_num_cols\n(\n$result\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"Field Name\"\n,\n\"Field Flags\"\n);\nfor(\n$i\n=\n0\n;\n$i\n<\n$col_num\n;\n$i\n++) {\n\nprintf\n(\n\"%-30s %s\\n\"\n,\ncubrid_field_name\n(\n$result\n,\n$i\n),\ncubrid_field_flags\n(\n$result\n,\n$i\n));\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_seek() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT event_code,athlete_code,nation_code,game_date FROM game WHERE host_year=1988 and event_code=20001;\"\n);\nvar_dump\n(\ncubrid_fetch_row\n(\n$req\n));\ncubrid_field_seek\n(\n$req\n,\n1\n);\n$field\n=\ncubrid_fetch_field\n(\n$req\n);\nprintf\n(\n\"\\n--- Field Properties ---\\n\"\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"name:\"\n,\n$field\n->\nname\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"table:\"\n,\n$field\n->\ntable\n);\nprintf\n(\n\"%-30s \\\"%s\\\"\\n\"\n,\n\"default value:\"\n,\n$field\n->\ndef\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"max length:\"\n,\n$field\n->\nmax_length\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"not null:\"\n,\n$field\n->\nnot_null\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"unique key:\"\n,\n$field\n->\nunique_key\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"multiple key:\"\n,\n$field\n->\nmultiple_key\n);\nprintf\n(\n\"%-30s %d\\n\"\n,\n\"numeric:\"\n,\n$field\n->\nnumeric\n);\nprintf\n(\n\"%-30s %s\\n\"\n,\n\"type:\"\n,\n$field\n->\ntype\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_table() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$col_num\n=\ncubrid_num_cols\n(\n$result\n);\nprintf\n(\n\"%-15s %-15s %s\\n\"\n,\n\"Field Table\"\n,\n\"Field Name\"\n,\n\"Field Type\"\n);\nfor(\n$i\n=\n0\n;\n$i\n<\n$col_num\n;\n$i\n++) {\n\nprintf\n(\n\"%-15s %-15s %s\\n\"\n,\n\ncubrid_field_table\n(\n$result\n,\n$i\n),\ncubrid_field_name\n(\n$result\n,\n$i\n),\ncubrid_field_type\n(\n$result\n,\n$i\n));\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_field_type() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$result\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$col_num\n=\ncubrid_num_cols\n(\n$result\n);\nprintf\n(\n\"%-15s %-15s %s\\n\"\n,\n\"Field Table\"\n,\n\"Field Name\"\n,\n\"Field Type\"\n);\nfor(\n$i\n=\n0\n;\n$i\n<\n$col_num\n;\n$i\n++) {\n\nprintf\n(\n\"%-15s %-15s %s\\n\"\n,\n\ncubrid_field_table\n(\n$result\n,\n$i\n),\ncubrid_field_name\n(\n$result\n,\n$i\n),\ncubrid_field_type\n(\n$result\n,\n$i\n));\n}\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_list_dbs() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$db_list\n=\ncubrid_list_dbs\n(\n$conn\n);\nvar_dump\n(\n$db_list\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_num_fields() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$row_num\n=\ncubrid_num_rows\n(\n$req\n);\n$col_num\n=\ncubrid_num_fields\n(\n$req\n);\nprintf\n(\n\"Row Num: %d\\nColumn Num: %d\\n\"\n,\n$row_num\n,\n$col_num\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_ping() example",
    "output": "<?php\nset_time_limit\n(\n0\n);\n$conn\n=\ncubrid_connect\n(\n'localhost'\n,\n33000\n,\n'demodb'\n);\n/* Assuming this query will take a long time */\n$sql\n=\n\"select * from athlete\"\n;\n$result\n=\ncubrid_query\n(\n$sql\n);\nif (!\n$result\n) {\n    echo\n'Query #1 failed, exiting.'\n;\n    exit;\n}\n/* Make sure the connection is still alive, if not, try to reconnect */\nif (!\ncubrid_ping\n(\n$conn\n)) {\n    echo\n'Lost connection, exiting after query #1'\n;\n    exit;\n}\ncubrid_free_result\n(\n$result\n);\n/* So the connection is still alive, let's run another query */\n$sql2\n=\n\"select * from code\"\n;\n$result2\n=\ncubrid_query\n(\n$sql2\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_real_escape_string() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$unescaped_str\n=\n' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'\n;\n$escaped_str\n=\ncubrid_real_escape_string\n(\n$unescaped_str\n);\n$len\n=\nstrlen\n(\n$unescaped_str\n);\n@\ncubrid_execute\n(\n$conn\n,\n\"DROP TABLE cubrid_test\"\n);\ncubrid_execute\n(\n$conn\n,\n\"CREATE TABLE cubrid_test (t char(\n$len\n))\"\n);\ncubrid_execute\n(\n$conn\n,\n\"INSERT INTO cubrid_test (t) VALUES('\n$escaped_str\n')\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM cubrid_test\"\n);\n$row\n=\ncubrid_fetch_assoc\n(\n$req\n);\nvar_dump\n(\n$row\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_result() example",
    "output": "<?php\n$conn\n=\ncubrid_connect\n(\n\"localhost\"\n,\n33000\n,\n\"demodb\"\n);\n$req\n=\ncubrid_execute\n(\n$conn\n,\n\"SELECT * FROM code\"\n);\n$result\n=\ncubrid_result\n(\n$req\n,\n0\n);\nvar_dump\n(\n$result\n);\n$result\n=\ncubrid_result\n(\n$req\n,\n0\n,\n1\n);\nvar_dump\n(\n$result\n);\n$result\n=\ncubrid_result\n(\n$req\n,\n5\n,\n\"f_name\"\n);\nvar_dump\n(\n$result\n);\ncubrid_close_request\n(\n$req\n);\ncubrid_disconnect\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_unbuffered_query() example",
    "output": "<?php\n    $link\n=\ncubrid_connect\n(\n\"localhost\"\n,\n30000\n,\n\"demodb\"\n,\n\"dba\"\n,\n\"\"\n);\n    if (!\n$link\n)\n    {\n        die(\n'Could not connect.'\n);\n    }\n\n$query\n=\n\"select * from code\"\n;\n\n$result\n=\ncubrid_unbuffered_query\n(\n$query\n,\n$link\n);\n    while (\n$row\n=\ncubrid_fetch\n(\n$result\n))\n    {\n\nvar_dump\n(\n$row\n);\n    }\n\ncubrid_close_request\n(\n$result\n);\n\ncubrid_disconnect\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 cubrid_load_from_glo() example",
    "output": "<?php\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select image from person where id=1\"\n);\nif (\n$req\n) {\n   list (\n$oid\n) =\ncubrid_fetch\n(\n$req\n);\n\ncubrid_close_request\n(\n$req\n);\n\n$res\n=\ncubrid_load_from_glo\n(\n$con\n,\n$oid\n,\n\"output.jpg\"\n);\n   if (\n$res\n) {\n      echo\n\"image changed successfully\"\n;\n   }\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_new_glo() example",
    "output": "<?php\n$oid\n=\ncubrid_new_glo\n(\n$con\n,\n\"glo\"\n,\n\"input.jpg\"\n);\nif (\n$oid\n){\n\n// the type of column \"image\" is \"object\"\n\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"insert into person(image) values(\n$oid\n)\"\n);\n   if (\n$req\n) {\n      echo\n\"image inserted successfully\"\n;\n\ncubrid_close_request\n(\n$req\n);\n\ncubrid_commit\n(\n$con\n);\n   }\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_save_to_glo() example",
    "output": "<?php\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select image from person where id=1\"\n);\nif (\n$req\n) {\n   list (\n$oid\n) =\ncubrid_fetch\n(\n$req\n);\n\ncubrid_close_request\n(\n$req\n);\n\n$res\n=\ncubrid_save_to_glo\n(\n$con\n,\n$oid\n,\n\"input.jpg\"\n);\n   if (\n$res\n) {\n      echo\n\"image changed successfully\"\n;\n   }\n}\n?>"
  },
  {
    "input": "Example #1 cubrid_send_glo() example",
    "output": "<?php\n$req\n=\ncubrid_execute\n(\n$con\n,\n\"select image from person where id =1\"\n);\nif (\n$req\n) {\n  list (\n$oid\n) =\ncubrid_fetch\n(\n$req\n);\n\ncubrid_close_request\n(\n$req\n);\n\nHeader\n(\n\"Content-type: image/jpeg\"\n);\n\ncubrid_send_glo\n(\n$con\n,\n$oid\n);\n}\n?>"
  },
  {
    "input": "Example #1 Inserting a record in a dBase database",
    "output": "<?php\n// open in read-write mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n2\n);\nif (\n$db\n) {\n\ndbase_add_record\n(\n$db\n, array(\n\ndate\n(\n'Ymd'\n),\n\n'Maxim Topolov'\n,\n\n'23'\n,\n\n'max@example.com'\n,\n\n'T'\n));\n\ndbase_close\n(\n$db\n);\n}\n?>"
  },
  {
    "input": "Example #1 Closing a dBase database file",
    "output": "<?php\n// open in read-only mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n0\n);\nif (\n$db\n) {\n\n// read some data ..\n\n\ndbase_close\n(\n$db\n);\n}\n?>"
  },
  {
    "input": "Example #1 Creating a dBase database file",
    "output": "<?php\n// database \"definition\"\n$def\n= array(\n  array(\n\"date\"\n,\n\"D\"\n),\n  array(\n\"name\"\n,\n\"C\"\n,\n50\n),\n  array(\n\"age\"\n,\n\"N\"\n,\n3\n,\n0\n),\n  array(\n\"email\"\n,\n\"C\"\n,\n128\n),\n  array(\n\"ismember\"\n,\n\"L\"\n)\n);\n// creation\nif (!\ndbase_create\n(\n'/tmp/test.dbf'\n,\n$def\n)) {\n  echo\n\"Error, can't create the database\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Showing header information for a dBase database file",
    "output": "<?php\n// Path to dbase file\n$db_path\n=\n\"/tmp/test.dbf\"\n;\n// Open dbase file\n$dbh\n=\ndbase_open\n(\n$db_path\n,\n0\n)\n  or die(\n\"Error! Could not open dbase database file '\n$db_path\n'.\"\n);\n// Get column information\n$column_info\n=\ndbase_get_header_info\n(\n$dbh\n);\n// Display information\nprint_r\n(\n$column_info\n);\n?>"
  },
  {
    "input": "Example #1 Listing all the registered members in the database",
    "output": "<?php\n// open in read-only mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n0\n);\nif (\n$db\n) {\n\n$record_numbers\n=\ndbase_numrecords\n(\n$db\n);\n  for (\n$i\n=\n1\n;\n$i\n<=\n$record_numbers\n;\n$i\n++) {\n\n$row\n=\ndbase_get_record_with_names\n(\n$db\n,\n$i\n);\n      if (\n$row\n[\n'ismember'\n] ==\n1\n) {\n          echo\n\"Member #\n$i\n: \"\n.\ntrim\n(\n$row\n[\n'name'\n]) .\n\"\\n\"\n;\n      }\n  }\n}\n?>"
  },
  {
    "input": "Example #1 dbase_numfields() Example",
    "output": "<?php\n$rec\n=\ndbase_get_record\n(\n$db\n,\n$recno\n);\n$nf\n=\ndbase_numfields\n(\n$db\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$nf\n;\n$i\n++) {\n  echo\n$rec\n[\n$i\n],\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Looping over all the records of the database",
    "output": "<?php\n// open in read-only mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n0\n);\nif (\n$db\n) {\n\n$record_numbers\n=\ndbase_numrecords\n(\n$db\n);\n  for (\n$i\n=\n1\n;\n$i\n<=\n$record_numbers\n;\n$i\n++) {\n\n$record\n=\ndbase_get_record\n(\n$db\n,\n$i\n);\n      if (!\n$record\n[\n'deleted'\n]) {\n\n// do something with the $record\n\n} else {\n\n// do something with the deleted $record or ignore it\n\n}\n  }\n}\n?>"
  },
  {
    "input": "Example #1 Opening a dBase database file",
    "output": "<?php\n// open in read-only mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n0\n);\nif (\n$db\n) {\n\n// read some data ..\n\n\ndbase_close\n(\n$db\n);\n}\n?>"
  },
  {
    "input": "Example #1 Emptying a dBase database",
    "output": "<?php\n// open in read-write mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n2\n);\nif (\n$db\n) {\n\n$record_numbers\n=\ndbase_numrecords\n(\n$db\n);\n  for (\n$i\n=\n1\n;\n$i\n<=\n$record_numbers\n;\n$i\n++) {\n\ndbase_delete_record\n(\n$db\n,\n$i\n);\n  }\n\n// expunge the database\n\ndbase_pack\n(\n$db\n);\n}\n?>"
  },
  {
    "input": "Example #1 Updating a record in the database",
    "output": "<?php\n// open in read-write mode\n$db\n=\ndbase_open\n(\n'/tmp/test.dbf'\n,\n2\n);\nif (\n$db\n) {\n\n// gets the old row\n\n$row\n=\ndbase_get_record_with_names\n(\n$db\n,\n1\n);\n\n\n// remove the 'deleted' entry\n\nunset(\n$row\n[\n'deleted'\n]);\n\n\n// Update the date field with the current timestamp\n\n$row\n[\n'date'\n] =\ndate\n(\n'Ymd'\n);\n\n\n// convert the row to an indexed array\n\n$row\n=\narray_values\n(\n$row\n);\n\n// Replace the record\n\ndbase_replace_record\n(\n$db\n,\n$row\n,\n1\n);\n\ndbase_close\n(\n$db\n);\n}\n?>"
  },
  {
    "input": "Example #1 ibase_backup() example",
    "output": "<?php\n// Attach to database server by ip address and port\n$service\n=\nibase_service_attach\n(\n'10.1.11.200/3050'\n,\n'sysdba'\n,\n'masterkey'\n);\n// Start the backup process on database server\n// Backup employee database using full path to /srv/backup/employees.fbk\n// Don't use any special arguments\nibase_backup\n(\n$service\n,\n'/srv/firebird/employees.fdb'\n,\n'/srv/backup/employees.fbk'\n);\n// Free the attached connection\nibase_service_detach\n(\n$service\n);\n?>"
  },
  {
    "input": "Example #2 ibase_backup() example with arguments",
    "output": "<?php\n// Attach to database server by name and default port\n$service\n=\nibase_service_attach\n(\n'fb-server.contoso.local'\n,\n'sysdba'\n,\n'masterkey'\n);\n// Start the backup process on database server\n// Backup employee database using alias to /srv/backup/employees.fbk.\n// Backup only the metadata. Don't create a transportable backup.\nibase_backup\n(\n$service\n,\n'employees.fdb'\n,\n'/srv/backup/employees.fbk'\n,\nIBASE_BKP_METADATA_ONLY\n|\nIBASE_BKP_NON_TRANSPORTABLE\n);\n// Free the attached connection\nibase_service_detach\n(\n$service\n);\n?>"
  },
  {
    "input": "Example #1 ibase_blob_get() example",
    "output": "<?php\n$result\n=\nibase_query\n(\n\"SELECT blob_value FROM table\"\n);\n$data\n=\nibase_fetch_object\n(\n$result\n);\n$blob_data\n=\nibase_blob_info\n(\n$data\n->\nBLOB_VALUE\n);\n$blob_hndl\n=\nibase_blob_open\n(\n$data\n->\nBLOB_VALUE\n);\necho\nibase_blob_get\n(\n$blob_hndl\n,\n$blob_data\n[\n0\n]);\n?>"
  },
  {
    "input": "Example #1 ibase_blob_import() example",
    "output": "<?php\n$dbh\n=\nibase_connect\n(\n$host\n,\n$username\n,\n$password\n);\n$filename\n=\n'/tmp/bar'\n;\n$fd\n=\nfopen\n(\n$filename\n,\n'r'\n);\nif (\n$fd\n) {\n\n$blob\n=\nibase_blob_import\n(\n$dbh\n,\n$fd\n);\n\nfclose\n(\n$fd\n);\n    if (!\nis_string\n(\n$blob\n)) {\n\n// import failed\n\n} else {\n\n$query\n=\n\"INSERT INTO foo (name, data) VALUES ('\n$filename\n', ?)\"\n;\n\n$prepared\n=\nibase_prepare\n(\n$dbh\n,\n$query\n);\n        if (!\nibase_execute\n(\n$prepared\n,\n$blob\n)) {\n\n// record insertion failed\n\n}\n    }\n} else {\n\n// unable to open the data file\n}\n?>"
  },
  {
    "input": "Example #1 ibase_connect() example",
    "output": "<?php\n$host\n=\n'localhost:/path/to/your.gdb'\n;\n$dbh\n=\nibase_connect\n(\n$host\n,\n$username\n,\n$password\n);\n$stmt\n=\n'SELECT * FROM tblname'\n;\n$sth\n=\nibase_query\n(\n$dbh\n,\n$stmt\n);\nwhile (\n$row\n=\nibase_fetch_object\n(\n$sth\n)) {\n    echo\n$row\n->\nemail\n,\n\"\\n\"\n;\n}\nibase_free_result\n(\n$sth\n);\nibase_close\n(\n$dbh\n);\n?>"
  },
  {
    "input": "Example #1 ibase_execute() example",
    "output": "<?php\n$dbh\n=\nibase_connect\n(\n$host\n,\n$username\n,\n$password\n);\n$updates\n= array(\n\n1\n=>\n'Eric'\n,\n\n5\n=>\n'Filip'\n,\n\n7\n=>\n'Larry'\n);\n$query\n=\nibase_prepare\n(\n$dbh\n,\n\"UPDATE FOO SET BAR = ? WHERE BAZ = ?\"\n);\nforeach (\n$updates\nas\n$baz\n=>\n$bar\n) {\n\nibase_execute\n(\n$query\n,\n$bar\n,\n$baz\n);\n}\n?>"
  },
  {
    "input": "Example #1 ibase_fetch_object() example",
    "output": "<?php\n$dbh\n=\nibase_connect\n(\n$host\n,\n$username\n,\n$password\n);\n$stmt\n=\n'SELECT * FROM tblname'\n;\n$sth\n=\nibase_query\n(\n$dbh\n,\n$stmt\n);\nwhile (\n$row\n=\nibase_fetch_object\n(\n$sth\n)) {\n    echo\n$row\n->\nemail\n.\n\"\\n\"\n;\n}\nibase_close\n(\n$dbh\n);\n?>"
  },
  {
    "input": "Example #1 ibase_field_info() example",
    "output": "<?php\n$rs\n=\nibase_query\n(\n\"SELECT * FROM tablename\"\n);\n$coln\n=\nibase_num_fields\n(\n$rs\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$coln\n;\n$i\n++) {\n\n$col_info\n=\nibase_field_info\n(\n$rs\n,\n$i\n);\n    echo\n\"name: \"\n.\n$col_info\n[\n'name'\n].\n\"\\n\"\n;\n    echo\n\"alias: \"\n.\n$col_info\n[\n'alias'\n].\n\"\\n\"\n;\n    echo\n\"relation: \"\n.\n$col_info\n[\n'relation'\n].\n\"\\n\"\n;\n    echo\n\"length: \"\n.\n$col_info\n[\n'length'\n].\n\"\\n\"\n;\n    echo\n\"type: \"\n.\n$col_info\n[\n'type'\n].\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ibase_name_result() example",
    "output": "<?php\n$result\n=\nibase_query\n(\n\"SELECT field1,field2 FROM table FOR UPDATE\"\n);\nibase_name_result\n(\n$result\n,\n\"my_cursor\"\n);\n$updateqry\n=\nibase_prepare\n(\n\"UPDATE table SET field2 = ? WHERE CURRENT OF my_cursor\"\n);\nfor (\n$i\n=\n0\n;\nibase_fetch_row\n(\n$result\n); ++\n$i\n) {\n\nibase_execute\n(\n$updateqry\n,\n$i\n);\n}\n?>"
  },
  {
    "input": "Example #1 ibase_num_fields() example",
    "output": "<?php\n$rs\n=\nibase_query\n(\n\"SELECT * FROM tablename\"\n);\n$coln\n=\nibase_num_fields\n(\n$rs\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$coln\n;\n$i\n++) {\n\n$col_info\n=\nibase_field_info\n(\n$rs\n,\n$i\n);\n    echo\n\"name: \"\n.\n$col_info\n[\n'name'\n] .\n\"\\n\"\n;\n    echo\n\"alias: \"\n.\n$col_info\n[\n'alias'\n] .\n\"\\n\"\n;\n    echo\n\"relation: \"\n.\n$col_info\n[\n'relation'\n] .\n\"\\n\"\n;\n    echo\n\"length: \"\n.\n$col_info\n[\n'length'\n] .\n\"\\n\"\n;\n    echo\n\"type: \"\n.\n$col_info\n[\n'type'\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ibase_query() example",
    "output": "<?php\n$host\n=\n'localhost:/path/to/your.gdb'\n;\n$dbh\n=\nibase_connect\n(\n$host\n,\n$username\n,\n$password\n);\n$stmt\n=\n'SELECT * FROM tblname'\n;\n$sth\n=\nibase_query\n(\n$dbh\n,\n$stmt\n) or die(\nibase_errmsg\n());\n?>"
  },
  {
    "input": "Example #1 ibase_restore() example",
    "output": "<?php\n// Attach to database server by ip address and port\n$service\n=\nibase_service_attach\n(\n'10.1.11.200/3050'\n,\n'sysdba'\n,\n'masterkey'\n);\n// Start the restore process on database server\n// Restore employee backup to the new emps.fdb database\n// Don't use any special arguments\nibase_restore\n(\n$service\n,\n'/srv/backup/employees.fbk'\n,\n'/srv/firebird/emps.fdb'\n);\n// Free the attached connection\nibase_service_detach\n(\n$service\n);\n?>"
  },
  {
    "input": "Example #2 ibase_restore() example with arguments",
    "output": "<?php\n// Attach to database server by name and default port\n$service\n=\nibase_service_attach\n(\n'fb-server.contoso.local'\n,\n'sysdba'\n,\n'masterkey'\n);\n// Start the restore process on database server\n// Restore to employee database using alias.\n// Restore without indixes. Replace existing database.\nibase_restore\n(\n$service\n,\n'/srv/backup/employees.fbk'\n,\n'employees.fdb'\n,\nIBASE_RES_DEACTIVATE_IDX\n|\nIBASE_RES_REPLACE\n);\n// Free the attached connection\nibase_service_detach\n(\n$service\n);\n?>"
  },
  {
    "input": "Example #1 ibase_service_attach() example",
    "output": "<?php\n\n// Attach to the remote Firebird server\n\nif ((\n$service\n=\nibase_service_attach\n(\n'10.1.1.254/3050'\n,\n'sysdba'\n,\n'masterkey'\n)) !=\nFALSE\n) {\n\n// Successfully attached.\n        // Output the info\n\necho\n\"Server version: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_SERVER_VERSION\n) .\n\"\\n\"\n;\n        echo\n\"Server implementation: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_IMPLEMENTATION\n) .\n\"\\n\"\n;\n        echo\n\"Server users: \"\n.\nprint_r\n(\nibase_server_info\n(\n$service\n,\nIBASE_SVC_GET_USERS\n),\ntrue\n) .\n\"\\n\"\n;\n        echo\n\"Server directory: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_GET_ENV\n) .\n\"\\n\"\n;\n        echo\n\"Server lock path: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_GET_ENV_LOCK\n) .\n\"\\n\"\n;\n        echo\n\"Server lib path: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_GET_ENV_MSG\n) .\n\"\\n\"\n;\n        echo\n\"Path of user db: \"\n.\nibase_server_info\n(\n$service\n,\nIBASE_SVC_USER_DBPATH\n) .\n\"\\n\"\n;\n        echo\n\"Established connections: \"\n.\nprint_r\n(\nibase_server_info\n(\n$service\n,\nIBASE_SVC_SVR_DB_INFO\n),\ntrue\n) .\n\"\\n\"\n;\n\n// Detach from server (disconnect)\n\nibase_service_detach\n(\n$service\n);\n    }\n    else {\n\n// Output message on error\n\n$conn_error\n=\nibase_errmsg\n();\n        die(\n$conn_error\n);\n    }\n?>"
  },
  {
    "input": "Example #1 ibase_service_attach() example",
    "output": "<?php\n\n// Attach to the remote Firebird server by ip address\n\nif ((\n$service\n=\nibase_service_attach\n(\n'10.1.1.199'\n,\n'sysdba'\n,\n'masterkey'\n)) !=\nFALSE\n) {\n\n\n// Successfully attached.\n        // Fetch server version (something like 'LI-V3.0.4.33054 Firebird 3.0')\n\n$server_version\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_SERVER_VERSION\n);\n\n// Fetch server implementation (something like 'Firebird/Linux/AMD/Intel/x64')\n\n$server_implementation\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_IMPLEMENTATION\n);\n\n// Detach from server (disconnect)\n\nibase_service_detach\n(\n$service\n);\n\n// Output the info\n\necho\n\"Server version: \"\n.\n$server_version\n.\n\"<br/>\"\n;\n        echo\n\"Server implementation: \"\n.\n$server_implementation\n;\n    }\n    else {\n\n// Output message on error\n\n$conn_error\n=\nibase_errmsg\n();\n        die(\n$conn_error\n);\n    }\n?>"
  },
  {
    "input": "Example #2 ibase_service_attach() example using hostname/port syntax",
    "output": "<?php\n\n// Attach to the remote Firebird server by name. Use Port 3050.\n\nif ((\n$service\n=\nibase_service_attach\n(\n'FB-SRV-01.contoso.local/3050'\n,\n'sysdba'\n,\n'masterkey'\n)) !=\nFALSE\n) {\n\n\n// Successfully attached.\n        // Fetch server version (something like 'LI-V3.0.4.33054 Firebird 3.0')\n\n$server_version\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_SERVER_VERSION\n);\n\n// Fetch server implementation (something like 'Firebird/Linux/AMD/Intel/x64')\n\n$server_implementation\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_IMPLEMENTATION\n);\n\n// Detach from server (disconnect)\n\nibase_service_detach\n(\n$service\n);\n\n// Output the info\n\necho\n\"Server version: \"\n.\n$server_version\n.\n\"<br/>\"\n;\n        echo\n\"Server implementation: \"\n.\n$server_implementation\n;\n    }\n    else {\n\n// Output message on error\n\n$conn_error\n=\nibase_errmsg\n();\n        die(\n$conn_error\n);\n    }\n?>"
  },
  {
    "input": "Example #1 ibase_service_detach() example",
    "output": "<?php\n\n// Attach to the remote Firebird server by ip address\n\nif ((\n$service\n=\nibase_service_attach\n(\n'10.1.1.199'\n,\n'sysdba'\n,\n'masterkey'\n)) !=\nFALSE\n) {\n\n\n// Successfully attached.\n        // Fetch server version (something like 'LI-V3.0.4.33054 Firebird 3.0')\n\n$server_version\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_SERVER_VERSION\n);\n\n// Fetch server implementation (something like 'Firebird/Linux/AMD/Intel/x64')\n\n$server_implementation\n=\nibase_server_info\n(\n$service\n,\nIBASE_SVC_IMPLEMENTATION\n);\n\n// Detach from server (disconnect)\n\nif(\nibase_service_detach\n(\n$service\n) ==\nFALSE\n) {\n            echo\n\"Error on service detach.\"\n;\n        }\n        else {\n            echo\n\"Successfully detached from service.\"\n;\n        }\n    }\n    else {\n\n// Output message on error\n\n$conn_error\n=\nibase_errmsg\n();\n        die(\n$conn_error\n);\n    }\n?>"
  },
  {
    "input": "Example #1 ibase_set_event_handler() example",
    "output": "<?php\nfunction\nevent_handler\n(\n$event_name\n,\n$link\n)\n{\n    if (\n$event_name\n==\n\"NEW ORDER\"\n) {\n\n// process new order\n\nibase_query\n(\n$link\n,\n\"UPDATE orders SET status='handled'\"\n);\n    } else if (\n$event_name\n==\n\"DB_SHUTDOWN\"\n) {\n\n// free event handler\n\nreturn\nfalse\n;\n    }\n}\nibase_set_event_handler\n(\n$link\n,\n\"event_handler\"\n,\n\"NEW_ORDER\"\n,\n\"DB_SHUTDOWN\"\n);\n?>"
  },
  {
    "input": "Example #1 Setting and retrieving parameters through a connection resource",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$user\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n);\necho\n\"Client attributes passed through connection string:\\n\"\n;\n/* Create the associative options array with valid key-value pairs */\n/* Assign the attributes through connection string */\n/* Access the options specified */\n$options1\n= array(\n'userid'\n=>\n'db2inst1'\n);\n$conn1\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n,\n$options1\n);\n$val\n=\ndb2_get_option\n(\n$conn1\n,\n'userid'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options2\n= array(\n'acctstr'\n=>\n'account'\n);\n$conn2\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n,\n$options2\n);\n$val\n=\ndb2_get_option\n(\n$conn2\n,\n'acctstr'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options3\n= array(\n'applname'\n=>\n'myapp'\n);\n$conn3\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n,\n$options3\n);\n$val\n=\ndb2_get_option\n(\n$conn3\n,\n'applname'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options4\n= array(\n'wrkstnname'\n=>\n'workstation'\n);\n$conn4\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n,\n$options4\n);\n$val\n=\ndb2_get_option\n(\n$conn4\n,\n'wrkstnname'\n);\necho\n$val\n.\n\"\\n\"\n;\necho\n\"Client attributes passed post-connection:\\n\"\n;\n/* Create the associative options array with valid key-value pairs */\n/* Assign the attributes after a connection is made */\n/* Access the options specified */\n$options5\n= array(\n'userid'\n=>\n'db2inst1'\n);\n$conn5\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n);\n$rc\n=\ndb2_set_option\n(\n$conn5\n,\n$options5\n,\n1\n);\n$val\n=\ndb2_get_option\n(\n$conn5\n,\n'userid'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options6\n= array(\n'acctstr'\n=>\n'account'\n);\n$conn6\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n);\n$rc\n=\ndb2_set_option\n(\n$conn6\n,\n$options6\n,\n1\n);\n$val\n=\ndb2_get_option\n(\n$conn6\n,\n'acctstr'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options7\n= array(\n'applname'\n=>\n'myapp'\n);\n$conn7\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n);\n$rc\n=\ndb2_set_option\n(\n$conn7\n,\n$options7\n,\n1\n);\n$val\n=\ndb2_get_option\n(\n$conn7\n,\n'applname'\n);\necho\n$val\n.\n\"\\n\"\n;\n$options8\n= array(\n'wrkstnname'\n=>\n'workstation'\n);\n$conn8\n=\ndb2_connect\n(\n$database\n,\n$user\n,\n$password\n);\n$rc\n=\ndb2_set_option\n(\n$conn8\n,\n$options8\n,\n1\n);\n$val\n=\ndb2_get_option\n(\n$conn8\n,\n'wrkstnname'\n);\necho\n$val\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Setting one parameter with a connection resource",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_ON\n);\n/* Call the function using the correct resource, options array, and type values */\n$result\n=\ndb2_set_option\n(\n$conn\n,\n$options\n,\n1\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #2 Setting multiple parameters with a connection resource",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_OFF\n,\n\n'binmode'\n=>\nDB2_PASSTHRU\n,\n\n'db2_attr_case'\n=>\nDB2_CASE_UPPER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n/* Call the function using the correct resource, options array, and type values */\n$result\n=\ndb2_set_option\n(\n$conn\n,\n$options\n,\n1\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #3 Setting multiple parameters with an invalid key",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_OFF\n,\n\n'MY_INVALID_KEY'\n=>\nDB2_PASSTHRU\n,\n\n'db2_attr_case'\n=>\nDB2_CASE_UPPER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n/* Call the function using the correct resource, options array, and type values */\n$result\n=\ndb2_set_option\n(\n$conn\n,\n$options\n,\n1\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #4 Setting multiple parameters with an invalid value",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_OFF\n,\n\n'binmode'\n=>\n'INVALID_VALUE'\n,\n\n'db2_attr_case'\n=>\nDB2_CASE_UPPER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n/* Call the function using the correct resource, options array, and type values */\n$result\n=\ndb2_set_option\n(\n$conn\n,\n$options\n,\n1\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #5 Setting multiple parameters with a connection resource and the wrong type",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_OFF\n,\n\n'binmode'\n=>\nDB2_PASSTHRU\n,\n\n'db2_attr_case'\n=>\nDB2_CASE_UPPER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n/* Call the function using the correct resource, options array, and the wrong type value */\n$result\n=\ndb2_set_option\n(\n$conn\n,\n$options\n,\n2\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #6 Setting multiple parameters with the wrong resource",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'autocommit'\n=>\nDB2_AUTOCOMMIT_OFF\n,\n\n'binmode'\n=>\nDB2_PASSTHRU\n,\n\n'db2_attr_case'\n=>\nDB2_CASE_UPPER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n$stmt\n=\ndb2_prepare\n(\n$conn\n,\n'SELECT * FROM EMPLOYEE'\n);\n/* Call the function using the wrong resource, and the correct options array, and type values */\n$result\n=\ndb2_set_option\n(\n$stmt\n,\n$options\n,\n1\n);\n/* Check if all options could be set correctly */\nif(\n$result\n)\n{\n  echo\n'Options Set Successfully'\n;\n}\nelse\n{\n  echo\n'Could Not Set Options'\n;\n}\n?>"
  },
  {
    "input": "Example #7 Putting it all together",
    "output": "<?php\n/* Database Connection Parameters */\n$database\n=\n'SAMPLE'\n;\n$hostname\n=\n'localhost'\n;\n$port\n=\n50000\n;\n$protocol\n=\n'TCPIP'\n;\n$username\n=\n'db2inst1'\n;\n$password\n=\n'ibmdb2'\n;\n/* Connection String */\n$conn_string\n=\n\"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=\n$database\n;\"\n;\n$conn_string\n.=\n\"HOSTNAME=\n$hostname\n;PORT=\n$port\n;PROTOCOL=\n$protocol\n;\"\n;\n$conn_string\n.=\n\"UID=\n$username\n;PWD=\n$password\n;\"\n;\n/* Obtain Connection Resource */\n$conn\n=\ndb2_connect\n(\n$conn_string\n,\n''\n,\n''\n);\n/* Create the associative options array with valid key-value pairs */\n$options\n= array(\n'db2_attr_case'\n=>\nDB2_CASE_LOWER\n,\n\n'cursor'\n=>\nDB2_SCROLLABLE\n);\n$stmt\n=\ndb2_prepare\n(\n$conn\n,\n'SELECT * FROM EMPLOYEE WHERE EMPNO = ? OR EMPNO = ?'\n);\n/* Call the function using the correct resource, options array, and type values */\n$option_result\n=\ndb2_set_option\n(\n$stmt\n,\n$options\n,\n2\n);\n$result\n=\ndb2_execute\n(\n$stmt\n, array(\n'000130'\n,\n'000140'\n));\n/* Get Row 2 before Row 1 since Scrollable Cursor */\nprint_r\n(\ndb2_fetch_assoc\n(\n$stmt\n,\n2\n));\nprint\n'<br /><br />'\n;\nprint_r\n(\ndb2_fetch_assoc\n(\n$stmt\n,\n1\n));\n?>"
  },
  {
    "input": "Example #8 i5/OS cursors are read-only",
    "output": "<?php\n  $conn\n=\ndb2_connect\n(\n\"\"\n,\n\"\"\n,\n\"\"\n, array(\n\"i5_lib\"\n=>\n\"nobody\"\n));\n\n$stmt\n=\ndb2_prepare\n(\n$conn\n,\n'select * from names where first = ?'\n);\n\n$name\n=\n\"first2\"\n;\n\ndb2_bind_param\n(\n$stmt\n,\n1\n,\n\"name\"\n,\nDB2_PARAM_IN\n);\n\n$options\n= array(\n\"i5_fetch_only\"\n=>\nDB2_I5_FETCH_ON\n);\n\ndb2_set_option\n(\n$stmt\n,\n$options\n,\n0\n);\n  if (\ndb2_execute\n(\n$stmt\n)) {\n    while (\n$row\n=\ndb2_fetch_array\n(\n$stmt\n)) {\n      echo\n\"\n{\n$row\n[\n0\n]}\n\n{\n$row\n[\n1\n]}\n\"\n;\n    }\n  }\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::executeBulkWrite() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n();\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n,\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n,\n'x'\n=>\n2\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'x'\n=>\n1\n]], [\n'multi'\n=>\nfalse\n,\n'upsert'\n=>\nfalse\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'x'\n=>\n3\n]], [\n'multi'\n=>\nfalse\n,\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'_id'\n=>\n3\n], [\n'$set'\n=> [\n'x'\n=>\n3\n]], [\n'multi'\n=>\nfalse\n,\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n,\n'x'\n=>\n2\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n], [\n'limit'\n=>\n1\n]);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n,\n100\n);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\nprintf\n(\n\"Inserted %d document(s)\\n\"\n,\n$result\n->\ngetInsertedCount\n());\nprintf\n(\n\"Matched  %d document(s)\\n\"\n,\n$result\n->\ngetMatchedCount\n());\nprintf\n(\n\"Updated  %d document(s)\\n\"\n,\n$result\n->\ngetModifiedCount\n());\nprintf\n(\n\"Upserted %d document(s)\\n\"\n,\n$result\n->\ngetUpsertedCount\n());\nprintf\n(\n\"Deleted  %d document(s)\\n\"\n,\n$result\n->\ngetDeletedCount\n());\nforeach (\n$result\n->\ngetUpsertedIds\n() as\n$index\n=>\n$id\n) {\n\nprintf\n(\n'upsertedId[%d]: '\n,\n$index\n);\n\nvar_dump\n(\n$id\n);\n}\n/* If the WriteConcern could not be fulfilled */\nif (\n$writeConcernError\n=\n$result\n->\ngetWriteConcernError\n()) {\n\nprintf\n(\n\"%s (%d): %s\\n\"\n,\n$writeConcernError\n->\ngetMessage\n(),\n$writeConcernError\n->\ngetCode\n(),\nvar_export\n(\n$writeConcernError\n->\ngetInfo\n(),\ntrue\n));\n}\n/* If a write could not happen at all */\nforeach (\n$result\n->\ngetWriteErrors\n() as\n$writeError\n) {\n\nprintf\n(\n\"Operation#%d: %s (%d)\\n\"\n,\n$writeError\n->\ngetIndex\n(),\n$writeError\n->\ngetMessage\n(),\n$writeError\n->\ngetCode\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::executeCommand() with a command returning a single result document",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$command\n= new\nMongoDB\\Driver\\Command\n([\n'ping'\n=>\n1\n]);\ntry {\n\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n'admin'\n,\n$command\n);\n} catch(\nMongoDB\\Driver\\Exception $e\n) {\n    echo\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n    exit;\n}\n/* The ping command returns a single result document, so we need to access the\n * first result in the cursor. */\n$response\n=\n$cursor\n->\ntoArray\n()[\n0\n];\nvar_dump\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\Manager::executeCommand() with a command returning a cursor",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n,\n'y'\n=>\n'foo'\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n,\n'y'\n=>\n'bar'\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n,\n'y'\n=>\n'bar'\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$command\n= new\nMongoDB\\Driver\\Command\n([\n\n'aggregate'\n=>\n'collection'\n,\n\n'pipeline'\n=> [\n        [\n'$group'\n=> [\n'_id'\n=>\n'$y'\n,\n'sum'\n=> [\n'$sum'\n=>\n'$x'\n]]],\n    ],\n\n'cursor'\n=> new\nstdClass\n,\n]);\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n'db'\n,\n$command\n);\n/* The aggregate command can optionally return its results in a cursor instead\n * of a single result document. In this case, we can iterate on the cursor\n * directly to access those results. */\nforeach (\n$cursor\nas\n$document\n) {\n\nvar_dump\n(\n$document\n);\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::executeQuery() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$filter\n= [\n'x'\n=> [\n'$gt'\n=>\n1\n]];\n$options\n= [\n\n'projection'\n=> [\n'_id'\n=>\n0\n],\n\n'sort'\n=> [\n'x'\n=> -\n1\n],\n];\n$query\n= new\nMongoDB\\Driver\\Query\n(\n$filter\n,\n$options\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\nforeach (\n$cursor\nas\n$document\n) {\n\nvar_dump\n(\n$document\n);\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::getReadConcern() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\nvar_dump\n(\n$manager\n->\ngetReadConcern\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017/?readConcernLevel=local'\n);\nvar_dump\n(\n$manager\n->\ngetReadConcern\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::getReadPreference() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\nvar_dump\n(\n$manager\n->\ngetReadPreference\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017/?readPreference=secondaryPreferred&readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags='\n);\nvar_dump\n(\n$manager\n->\ngetReadPreference\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::getServers() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n/* The driver connects to the database server lazily, so Manager::getServers()\n * may initially return an empty array. */\nvar_dump\n(\n$manager\n->\ngetServers\n());\n$command\n= new\nMongoDB\\Driver\\Command\n([\n'ping'\n=>\n1\n]);\n$manager\n->\nexecuteCommand\n(\n'db'\n,\n$command\n);\nvar_dump\n(\n$manager\n->\ngetServers\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Manager::getWriteConcern() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\nvar_dump\n(\n$manager\n->\ngetWriteConcern\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017/?w=majority&wtimeoutMS=2000'\n);\nvar_dump\n(\n$manager\n->\ngetWriteConcern\n());\n?>"
  },
  {
    "input": "Example #1 Composing MongoDB\\Driver\\Command to provide a helper to create collections",
    "output": "<?php\nclass\nCreateCollection\n{\n    protected\n$cmd\n= array();\n    function\n__construct\n(\n$collectionName\n) {\n\n$this\n->\ncmd\n[\n\"create\"\n] = (string)\n$collectionName\n;\n    }\n    function\nsetCappedCollection\n(\n$maxBytes\n,\n$maxDocuments\n=\nfalse\n) {\n\n$this\n->\ncmd\n[\n\"capped\"\n] =\ntrue\n;\n\n$this\n->\ncmd\n[\n\"size\"\n]   = (int)\n$maxBytes\n;\n        if (\n$maxDocuments\n) {\n\n$this\n->\ncmd\n[\n\"max\"\n] = (int)\n$maxDocuments\n;\n        }\n    }\n    function\nusePowerOf2Sizes\n(\n$bool\n) {\n        if (\n$bool\n) {\n\n$this\n->\ncmd\n[\n\"flags\"\n] =\n1\n;\n        } else {\n\n$this\n->\ncmd\n[\n\"flags\"\n] =\n0\n;\n        }\n    }\n    function\nsetFlags\n(\n$flags\n) {\n\n$this\n->\ncmd\n[\n\"flags\"\n] = (int)\n$flags\n;\n    }\n    function\ngetCommand\n() {\n        return new\nMongoDB\\Driver\\Command\n(\n$this\n->\ncmd\n);\n    }\n    function\ngetCollectionName\n() {\n        return\n$this\n->\ncmd\n[\n\"create\"\n];\n    }\n}\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$createCollection\n= new\nCreateCollection\n(\n\"cappedCollection\"\n);\n$createCollection\n->\nsetCappedCollection\n(\n64\n*\n1024\n);\ntry {\n\n$command\n=\n$createCollection\n->\ngetCommand\n();\n\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n\"databaseName\"\n,\n$command\n);\n\n$response\n=\n$cursor\n->\ntoArray\n()[\n0\n];\n\nvar_dump\n(\n$response\n);\n\n$collstats\n= [\n\"collstats\"\n=>\n$createCollection\n->\ngetCollectionName\n()];\n\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n\"databaseName\"\n, new\nMongoDB\\Driver\\Command\n(\n$collstats\n));\n\n$response\n=\n$cursor\n->\ntoArray\n()[\n0\n];\n\nvar_dump\n(\n$response\n);\n} catch(\nMongoDB\\Driver\\Exception $e\n) {\n    echo\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Command::__construct() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$command\n= new\nMongoDB\\Driver\\Command\n(array(\n\"buildinfo\"\n=>\n1\n));\ntry {\n\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n\"admin\"\n,\n$command\n);\n\n$response\n=\n$cursor\n->\ntoArray\n()[\n0\n];\n} catch(\nMongoDB\\Driver\\Exception $e\n) {\n    echo\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n    exit;\n}\nvar_dump\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Query::__construct() example",
    "output": "<?php\n/* Select only documents authord by \"bjori\" with at least 100 views */\n$filter\n= [\n\n'author'\n=>\n'bjori'\n,\n\n'views'\n=> [\n\n'$gte'\n=>\n100\n,\n    ],\n];\n$options\n= [\n\n/* Only return the following fields in the matching documents */\n\n'projection'\n=> [\n\n'title'\n=>\n1\n,\n\n'article'\n=>\n1\n,\n    ],\n\n/* Return the documents in descending order of views */\n\n'sort'\n=> [\n\n'views'\n=> -\n1\n\n],\n];\n$query\n= new\nMongoDB\\Driver\\Query\n(\n$filter\n,\n$options\n);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$readPreference\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'databaseName.collectionName'\n,\n$query\n,\n$readPreference\n);\nforeach(\n$cursor\nas\n$document\n) {\n\nvar_dump\n(\n$document\n);\n}\n?>"
  },
  {
    "input": "Example #2 Ordered write operations causing an error",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n([\n'ordered'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n3\n,\n'hello'\n=>\n'world'\n]);\n$bulk\n->\nupdate\n([\n'_id'\n=>\n3\n], [\n'$set'\n=> [\n'hello'\n=>\n'earth'\n]]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n,\n'hello'\n=>\n'pluto'\n]);\n$bulk\n->\nupdate\n([\n'_id'\n=>\n4\n], [\n'$set'\n=> [\n'hello'\n=>\n'moon'\n]]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n3\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n5\n]);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n,\n1000\n);\ntry {\n\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch (\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\n$result\n=\n$e\n->\ngetWriteResult\n();\n\n// Check if the write concern could not be fulfilled\n\nif (\n$writeConcernError\n=\n$result\n->\ngetWriteConcernError\n()) {\n\nprintf\n(\n\"%s (%d): %s\\n\"\n,\n\n$writeConcernError\n->\ngetMessage\n(),\n\n$writeConcernError\n->\ngetCode\n(),\n\nvar_export\n(\n$writeConcernError\n->\ngetInfo\n(),\ntrue\n)\n        );\n    }\n\n// Check if any write operations did not complete at all\n\nforeach (\n$result\n->\ngetWriteErrors\n() as\n$writeError\n) {\n\nprintf\n(\n\"Operation#%d: %s (%d)\\n\"\n,\n\n$writeError\n->\ngetIndex\n(),\n\n$writeError\n->\ngetMessage\n(),\n\n$writeError\n->\ngetCode\n()\n        );\n    }\n} catch (\nMongoDB\\Driver\\Exception\\Exception $e\n) {\n\nprintf\n(\n\"Other error: %s\\n\"\n,\n$e\n->\ngetMessage\n());\n    exit;\n}\nprintf\n(\n\"Inserted %d document(s)\\n\"\n,\n$result\n->\ngetInsertedCount\n());\nprintf\n(\n\"Updated  %d document(s)\\n\"\n,\n$result\n->\ngetModifiedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\BulkWrite::__construct() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n([\n'ordered'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n,\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n,\n'x'\n=>\n2\n]);\n$bulk\n->\nupdate\n(\n    [\n'x'\n=>\n2\n],\n    [\n'$set'\n=> [\n'x'\n=>\n1\n]],\n    [\n'limit'\n=>\n1\n,\n'upsert'\n=>\nfalse\n]\n);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n], [\n'limit'\n=>\n1\n]);\n$bulk\n->\nupdate\n(\n    [\n'_id'\n=>\n3\n],\n    [\n'$set'\n=> [\n'x'\n=>\n3\n]],\n    [\n'limit'\n=>\n1\n,\n'upsert'\n=>\ntrue\n]\n);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n);\ntry {\n\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch (\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\n$result\n=\n$e\n->\ngetWriteResult\n();\n\n// Check if the write concern could not be fulfilled\n\nif (\n$writeConcernError\n=\n$result\n->\ngetWriteConcernError\n()) {\n\nprintf\n(\n\"%s (%d): %s\\n\"\n,\n\n$writeConcernError\n->\ngetMessage\n(),\n\n$writeConcernError\n->\ngetCode\n(),\n\nvar_export\n(\n$writeConcernError\n->\ngetInfo\n(),\ntrue\n)\n        );\n    }\n\n// Check if any write operations did not complete at all\n\nforeach (\n$result\n->\ngetWriteErrors\n() as\n$writeError\n) {\n\nprintf\n(\n\"Operation#%d: %s (%d)\\n\"\n,\n\n$writeError\n->\ngetIndex\n(),\n\n$writeError\n->\ngetMessage\n(),\n\n$writeError\n->\ngetCode\n()\n        );\n    }\n} catch (\nMongoDB\\Driver\\Exception\\Exception $e\n) {\n\nprintf\n(\n\"Other error: %s\\n\"\n,\n$e\n->\ngetMessage\n());\n    exit;\n}\nprintf\n(\n\"Inserted %d document(s)\\n\"\n,\n$result\n->\ngetInsertedCount\n());\nprintf\n(\n\"Updated  %d document(s)\\n\"\n,\n$result\n->\ngetModifiedCount\n());\nprintf\n(\n\"Upserted %d document(s)\\n\"\n,\n$result\n->\ngetUpsertedCount\n());\nprintf\n(\n\"Deleted  %d document(s)\\n\"\n,\n$result\n->\ngetDeletedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\BulkWrite::count() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n,\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n,\n'x'\n=>\n2\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'x'\n=>\n1\n]]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\nvar_dump\n(\ncount\n(\n$bulk\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\BulkWrite::delete() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n], [\n'limit'\n=>\n1\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n2\n], [\n'limit'\n=>\n0\n]);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\BulkWrite::insert() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$document1\n= [\n'title'\n=>\n'one'\n];\n$document2\n= [\n'_id'\n=>\n'custom ID'\n,\n'title'\n=>\n'two'\n];\n$document3\n= [\n'_id'\n=> new\nMongoDB\\BSON\\ObjectId\n,\n'title'\n=>\n'three'\n];\n$_id1\n=\n$bulk\n->\ninsert\n(\n$document1\n);\n$_id2\n=\n$bulk\n->\ninsert\n(\n$document2\n);\n$_id3\n=\n$bulk\n->\ninsert\n(\n$document3\n);\nvar_dump\n(\n$_id1\n,\n$_id2\n,\n$_id3\n);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\BulkWrite::update() example",
    "output": "<?php\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\nupdate\n(\n    [\n'x'\n=>\n2\n],\n    [\n'$set'\n=> [\n'y'\n=>\n3\n]],\n    [\n'multi'\n=>\nfalse\n,\n'upsert'\n=>\nfalse\n]\n);\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017'\n);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n?>"
  },
  {
    "input": "Example #1 Declare an API version on a manager",
    "output": "<?php\nuse\nMongoDB\\Driver\\Manager\n;\nuse\nMongoDB\\Driver\\ServerApi\n;\n$v1\n= new\nServerApi\n(\nServerApi\n::\nv1\n);\n$manager\n= new\nManager\n(\n'mongodb://localhost:27017'\n, [], [\n'serverApi'\n=>\n$v1\n]);\n$command\n= new\nMongoDB\\Driver\\Command\n([\n'buildInfo'\n=>\n1\n]);\ntry {\n\n$cursor\n=\n$manager\n->\nexecuteCommand\n(\n'admin'\n,\n$command\n);\n} catch(\nMongoDB\\Driver\\Exception $e\n) {\n    echo\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n    exit;\n}\n/* The buildInfo command returns a single result document, so we need to access\n * the first result in the cursor. */\n$buildInfo\n=\n$cursor\n->\ntoArray\n()[\n0\n];\necho\n$buildInfo\n->\nversion\n,\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::bsonSerialize() with majority write concern",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n);\nvar_dump\n(\n$wc\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$wc\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\WriteConcern::bsonSerialize() with wtimeout and journal",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n2\n,\n1000\n,\ntrue\n);\nvar_dump\n(\n$wc\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$wc\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::__construct() example",
    "output": "<?php\n/* Request write acknowledgement from the majority of the replica set nodes */\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n,\n500\n);\n/* Request write acknowledgement from a node configured with the \"MultipleDC\" tag */\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n\"MultipleDC\"\n,\n500\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::getJournal() example",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n);\nvar_dump\n(\n$wc\n->\ngetJournal\n());\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n,\n0\n,\ntrue\n);\nvar_dump\n(\n$wc\n->\ngetJournal\n());\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n,\n0\n,\nfalse\n);\nvar_dump\n(\n$wc\n->\ngetJournal\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::getW() example",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n);\nvar_dump\n(\n$wc\n->\ngetW\n());\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n);\nvar_dump\n(\n$wc\n->\ngetW\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::getWtimeout() example",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n);\nvar_dump\n(\n$wc\n->\ngetWtimeout\n());\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\nMongoDB\\Driver\\WriteConcern\n::\nMAJORITY\n,\n3000\n);\nvar_dump\n(\n$wc\n->\ngetWtimeout\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcern::isDefault() example",
    "output": "<?php\n$wc\n= new\nMongoDB\\Driver\\WriteConcern\n(\n1\n);\nvar_dump\n(\n$wc\n->\nisDefault\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://127.0.0.1/?w=majority'\n);\n$wc\n=\n$manager\n->\ngetWriteConcern\n();\nvar_dump\n(\n$wc\n->\nisDefault\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://127.0.0.1/'\n);\n$wc\n=\n$manager\n->\ngetWriteConcern\n();\nvar_dump\n(\n$wc\n->\nisDefault\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::bsonSerialize() with primary read preference",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY\n);\nvar_dump\n(\n$rp\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$rp\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\ReadPreference::bsonSerialize() with secondary read preference and tag sets",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\n    [\n        [\n'dc'\n=>\n'ny'\n],\n        [\n'dc'\n=>\n'sf'\n,\n'use'\n=>\n'reporting'\n],\n        []\n    ]\n);\nvar_dump\n(\n$rp\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$rp\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #3 MongoDB\\Driver\\ReadPreference::bsonSerialize() with secondary read preference and max staleness",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\n\nnull\n,\n    [\n'maxStalenessSeconds'\n=>\n120\n]\n);\nvar_dump\n(\n$rp\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$rp\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::__construct() example",
    "output": "<?php\n/* Prefer a secondary node but fall back to a primary. */\nvar_dump\n(new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY_PREFERRED\n));\n/* Prefer a node in the New York data center with lowest latency. */\nvar_dump\n(new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nNEAREST\n, [[\n'dc'\n=>\n'ny'\n]]));\n/* Require a secondary node whose replication lag is within two minutes of the primary */\nvar_dump\n(new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\nnull\n, [\n'maxStalenessSeconds'\n=>\n120\n]));\n/* Explicitly enable server hedged reads */\nvar_dump\n(new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\nnull\n, [\n'hedge'\n=> [\n'enabled'\n=>\ntrue\n]]));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds() example",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n);\nvar_dump\n(\n$rp\n->\ngetMaxStalenessSeconds\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\nnull\n, [\n\n'maxStalenessSeconds'\n=>\nMongoDB\\Driver\\ReadPreference\n::\nNO_MAX_STALENESS\n,\n]);\nvar_dump\n(\n$rp\n->\ngetMaxStalenessSeconds\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\nnull\n, [\n\n'maxStalenessSeconds'\n=>\nMongoDB\\Driver\\ReadPreference\n::\nSMALLEST_MAX_STALENESS_SECONDS\n,\n]);\nvar_dump\n(\n$rp\n->\ngetMaxStalenessSeconds\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n,\nnull\n, [\n\n'maxStalenessSeconds'\n=>\n1000\n,\n]);\nvar_dump\n(\n$rp\n->\ngetMaxStalenessSeconds\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::getMode() example",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY\n);\nvar_dump\n(\n$rp\n->\ngetMode\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY_PREFERRED\n);\nvar_dump\n(\n$rp\n->\ngetMode\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n);\nvar_dump\n(\n$rp\n->\ngetMode\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY_PREFERRED\n);\nvar_dump\n(\n$rp\n->\ngetMode\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nNEAREST\n);\nvar_dump\n(\n$rp\n->\ngetMode\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::getModeString() example",
    "output": "<?php\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY\n);\nvar_dump\n(\n$rp\n->\ngetModeString\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nPRIMARY_PREFERRED\n);\nvar_dump\n(\n$rp\n->\ngetModeString\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY\n);\nvar_dump\n(\n$rp\n->\ngetModeString\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY_PREFERRED\n);\nvar_dump\n(\n$rp\n->\ngetModeString\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\nMongoDB\\Driver\\ReadPreference\n::\nNEAREST\n);\nvar_dump\n(\n$rp\n->\ngetModeString\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadPreference::getTagSets() example",
    "output": "<?php\n$mode\n=\nMongoDB\\Driver\\ReadPreference\n::\nSECONDARY_PREFERRED\n;\n/* Null and an empty array both denote no tag set preference. */\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n$mode\n,\nnull\n);\nvar_dump\n(\n$rp\n->\ngetTagSets\n());\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n$mode\n, []);\nvar_dump\n(\n$rp\n->\ngetTagSets\n());\n/* Prefer a node in New York, but fall back to any available node. */\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n$mode\n, [[\n'dc'\n=>\n'ny'\n]]);\nvar_dump\n(\n$rp\n->\ngetTagSets\n());\n/* Prefer a node in the New York, followed by a node in San Francisco that is\n   labeled for reporting usage, and finally fall back to any available node. */\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n$mode\n, [\n  [\n'dc'\n=>\n'ny'\n],\n  [\n'dc'\n=>\n'sf'\n,\n'use'\n=>\n'reporting'\n],\n  [],\n]);\nvar_dump\n(\n$rp\n->\ngetTagSets\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadConcern::bsonSerialize() with empty read concern",
    "output": "<?php\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n;\nvar_dump\n(\n$rc\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$rc\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\ReadConcern::bsonSerialize() with local read concern",
    "output": "<?php\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nLOCAL\n);\nvar_dump\n(\n$rc\n->\nbsonSerialize\n());\necho\n\"\\n\"\n,\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$rc\n)->\ntoRelaxedExtendedJSON\n();\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadConcern::__construct() example",
    "output": "<?php\n/* Unspecified read isolation level (uses the server's default behavior) */\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n();\n/* Request read isolation from a single replica set node */\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nLOCAL\n);\n/* Request read isolation from a majority of the replica set nodes */\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nMAJORITY\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadConcern::getLevel() example",
    "output": "<?php\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n();\nvar_dump\n(\n$rc\n->\ngetLevel\n());\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nLOCAL\n);\nvar_dump\n(\n$rc\n->\ngetLevel\n());\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nMAJORITY\n);\nvar_dump\n(\n$rc\n->\ngetLevel\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\ReadConcern::isDefault() example",
    "output": "<?php\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nnull\n);\nvar_dump\n(\n$rc\n->\nisDefault\n());\n$rc\n= new\nMongoDB\\Driver\\ReadConcern\n(\nMongoDB\\Driver\\ReadConcern\n::\nMAJORITY\n);\nvar_dump\n(\n$rc\n->\nisDefault\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://127.0.0.1/?readConcernLevel=majority'\n);\n$rc\n=\n$manager\n->\ngetReadConcern\n();\nvar_dump\n(\n$rc\n->\nisDefault\n());\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://127.0.0.1/'\n);\n$rc\n=\n$manager\n->\ngetReadConcern\n();\nvar_dump\n(\n$rc\n->\nisDefault\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Cursor::getId() example",
    "output": "<?php\n/* In this example, we insert several documents into the collection and specify\n * a smaller batchSize to ensure that the first batch contains only a subset of\n * our results and the cursor remains open on the server. */\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([], [\n'batchSize'\n=>\n2\n]);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\nvar_dump\n(\n$cursor\n->\ngetId\n(\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Cursor::getServer() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([]);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\nvar_dump\n(\n$cursor\n->\ngetServer\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Cursor::isDead() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([]);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\n$iterator\n= new\nIteratorIterator\n(\n$cursor\n);\n$iterator\n->\nrewind\n();\nvar_dump\n(\n$cursor\n->\nisDead\n());\n$iterator\n->\nnext\n();\nvar_dump\n(\n$cursor\n->\nisDead\n());\n$iterator\n->\nnext\n();\nvar_dump\n(\n$cursor\n->\nisDead\n());\n$iterator\n->\nnext\n();\nvar_dump\n(\n$cursor\n->\nisDead\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Cursor::setTypeMap() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$id\n=\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([\n'_id'\n=>\n$id\n]);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\n$cursor\n->\nsetTypeMap\n([\n'root'\n=>\n'array'\n]);\nforeach (\n$cursor\nas\n$document\n) {\n\nvar_dump\n(\n$document\n);\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Cursor::toArray() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([]);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\nvar_dump\n(\n$cursor\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\CursorId::__toString() example",
    "output": "<?php\n/* In this example, we insert several documents into the collection and specify\n * a smaller batchSize to ensure that the first batch contains only a subset of\n * our results and the cursor remains open on the server. */\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017\"\n);\n$query\n= new\nMongoDB\\Driver\\Query\n([], [\n'batchSize'\n=>\n2\n]);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'x'\n=>\n3\n]);\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n$cursor\n=\n$manager\n->\nexecuteQuery\n(\n'db.collection'\n,\n$query\n);\nvar_dump\n((string)\n$cursor\n->\ngetId\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Server::getHost() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017/\"\n);\n$server\n=\n$manager\n->\nselectServer\n();\nvar_dump\n(\n$server\n->\ngetHost\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Server::getInfo() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost:27017/'\n);\n$rp\n= new\nMongoDB\\Driver\\ReadPreference\n(\n'primary'\n);\n$server\n=\n$manager\n->\nselectServer\n(\n$rp\n);\nvar_dump\n(\n$server\n->\ngetInfo\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Server::getLatency() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017/\"\n);\n$server\n=\n$manager\n->\nselectServer\n();\nvar_dump\n(\n$server\n->\ngetLatency\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Server::getPort() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://localhost:27017/\"\n);\n$server\n=\n$manager\n->\nselectServer\n();\nvar_dump\n(\n$server\n->\ngetPort\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcernError::getCode() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\n2\n,\n1\n);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteConcernError\n()->\ngetCode\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcernError::getInfo() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\n2\n,\n1\n);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteConcernError\n()->\ngetInfo\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteConcernError::getMessage() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\n2\n,\n1\n);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteConcernError\n()->\ngetMessage\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteError::getCode() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteErrors\n()[\n0\n]->\ngetCode\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteError::getIndex() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteErrors\n()[\n0\n]->\ngetIndex\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteError::getMessage() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteErrors\n()[\n0\n]->\ngetMessage\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getDeletedCount() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetDeletedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getInsertedCount() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetInsertedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getMatchedCount() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetMatchedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getModifiedCount() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetModifiedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getServer() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$server\n=\n$manager\n->\nselectServer\n();\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$result\n=\n$server\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetServer\n() ==\n$server\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getUpsertedCount() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetUpsertedCount\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getUpsertedIds() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n1\n], [\n'$set'\n=> [\n'y'\n=>\n3\n]]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n2\n], [\n'$set'\n=> [\n'y'\n=>\n1\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\nupdate\n([\n'x'\n=>\n3\n], [\n'$set'\n=> [\n'y'\n=>\n2\n]], [\n'upsert'\n=>\ntrue\n]);\n$bulk\n->\ndelete\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\ngetUpsertedIds\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getWriteConcernError() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n\"mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet\"\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$writeConcern\n= new\nMongoDB\\Driver\\WriteConcern\n(\n2\n,\n1\n);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n,\n$writeConcern\n);\n} catch(\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteConcernError\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::getWriteErrors() with a single error",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n/* By default, bulk write operations are executed serially in order and\n * execution will stop after the first error.\n */\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n3\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n]);\ntry {\n\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch (\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteErrors\n());\n}\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\WriteResult::getWriteErrors() with multiple errors",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n/* The \"ordered\" option may be used to allow bulk write operations to continue\n * executing after the first error is encountered.\n */\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n([\n'ordered'\n=>\nfalse\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n2\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n3\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n4\n]);\ntry {\n\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch (\nMongoDB\\Driver\\Exception\\BulkWriteException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetWriteResult\n()->\ngetWriteErrors\n());\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\WriteResult::isAcknowledged() with acknowledged write concern",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\nvar_dump\n(\n$result\n->\nisAcknowledged\n());\n?>"
  },
  {
    "input": "Example #2 MongoDB\\Driver\\WriteResult::isAcknowledged() with unacknowledged write concern",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n;\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'x'\n=>\n1\n]);\n$result\n=\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n, new\nMongoDB\\Driver\\WriteConcern\n(\n0\n));\nvar_dump\n(\n$result\n->\nisAcknowledged\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\fromJSON() example",
    "output": "<?php\n$json\n=\n'{ \"_id\": { \"$oid\": \"563143b280d2387c91807965\" } }'\n;\n$bson\n=\nMongoDB\\BSON\\fromJSON\n(\n$json\n);\n$value\n=\nMongoDB\\BSON\\toPHP\n(\n$bson\n);\nvar_dump\n(\n$value\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\fromPHP() example",
    "output": "<?php\n$bson\n=\nMongoDB\\BSON\\fromPHP\n([\n'foo'\n=>\n1\n]);\necho\nbin2hex\n(\n$bson\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\toCanonicalExtendedJSON() example",
    "output": "<?php\n$documents\n= [\n    [\n'null'\n=>\nnull\n],\n    [\n'boolean'\n=>\ntrue\n],\n    [\n'string'\n=>\n'foo'\n],\n    [\n'int32'\n=>\n123\n],\n    [\n'int64'\n=>\n4294967295\n],\n    [\n'double'\n=>\n1.0\n, ],\n    [\n'nan'\n=>\nNAN\n],\n    [\n'pos_inf'\n=>\nINF\n],\n    [\n'neg_inf'\n=> -\nINF\n],\n    [\n'array'\n=> [\n'foo'\n,\n'bar'\n]],\n    [\n'document'\n=> [\n'foo'\n=>\n'bar'\n]],\n    [\n'oid'\n=> new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n) ],\n    [\n'dec128'\n=> new\nMongoDB\\BSON\\Decimal128\n(\n'1234.5678'\n) ],\n    [\n'binary'\n=> new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n) ],\n    [\n'date'\n=> new\nMongoDB\\BSON\\UTCDateTime\n(\n1445990400000\n) ],\n    [\n'timestamp'\n=> new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n) ],\n    [\n'regex'\n=> new\nMongoDB\\BSON\\Regex\n(\n'pattern'\n,\n'i'\n) ],\n    [\n'code'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n) ],\n    [\n'code_ws'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return a; }'\n, [\n'a'\n=>\n1\n]) ],\n    [\n'minkey'\n=> new\nMongoDB\\BSON\\MinKey\n],\n    [\n'maxkey'\n=> new\nMongoDB\\BSON\\MaxKey\n],\n];\nforeach (\n$documents\nas\n$document\n) {\n\n$bson\n=\nMongoDB\\BSON\\fromPHP\n(\n$document\n);\n    echo\nMongoDB\\BSON\\toCanonicalExtendedJSON\n(\n$bson\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\toJSON() example",
    "output": "<?php\n$documents\n= [\n    [\n'null'\n=>\nnull\n],\n    [\n'boolean'\n=>\ntrue\n],\n    [\n'string'\n=>\n'foo'\n],\n    [\n'int32'\n=>\n123\n],\n    [\n'int64'\n=>\n4294967295\n],\n    [\n'double'\n=>\n1.0\n, ],\n    [\n'nan'\n=>\nNAN\n],\n    [\n'pos_inf'\n=>\nINF\n],\n    [\n'neg_inf'\n=> -\nINF\n],\n    [\n'array'\n=> [\n'foo'\n,\n'bar'\n]],\n    [\n'document'\n=> [\n'foo'\n=>\n'bar'\n]],\n    [\n'oid'\n=> new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n) ],\n    [\n'dec128'\n=> new\nMongoDB\\BSON\\Decimal128\n(\n'1234.5678'\n) ],\n    [\n'binary'\n=> new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n) ],\n    [\n'date'\n=> new\nMongoDB\\BSON\\UTCDateTime\n(\n1445990400000\n) ],\n    [\n'timestamp'\n=> new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n) ],\n    [\n'regex'\n=> new\nMongoDB\\BSON\\Regex\n(\n'pattern'\n,\n'i'\n) ],\n    [\n'code'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n) ],\n    [\n'code_ws'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return a; }'\n, [\n'a'\n=>\n1\n]) ],\n    [\n'minkey'\n=> new\nMongoDB\\BSON\\MinKey\n],\n    [\n'maxkey'\n=> new\nMongoDB\\BSON\\MaxKey\n],\n];\nforeach (\n$documents\nas\n$document\n) {\n\n$bson\n=\nMongoDB\\BSON\\fromPHP\n(\n$document\n);\n    echo\nMongoDB\\BSON\\toJSON\n(\n$bson\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\toPHP() example",
    "output": "<?php\n$bson\n=\nhex2bin\n(\n'0e00000010666f6f000100000000'\n);\n$value\n=\nMongoDB\\BSON\\toPHP\n(\n$bson\n);\nvar_dump\n(\n$value\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\toRelaxedExtendedJSON() example",
    "output": "<?php\n$documents\n= [\n    [\n'null'\n=>\nnull\n],\n    [\n'boolean'\n=>\ntrue\n],\n    [\n'string'\n=>\n'foo'\n],\n    [\n'int32'\n=>\n123\n],\n    [\n'int64'\n=>\n4294967295\n],\n    [\n'double'\n=>\n1.0\n, ],\n    [\n'nan'\n=>\nNAN\n],\n    [\n'pos_inf'\n=>\nINF\n],\n    [\n'neg_inf'\n=> -\nINF\n],\n    [\n'array'\n=> [\n'foo'\n,\n'bar'\n]],\n    [\n'document'\n=> [\n'foo'\n=>\n'bar'\n]],\n    [\n'oid'\n=> new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n) ],\n    [\n'dec128'\n=> new\nMongoDB\\BSON\\Decimal128\n(\n'1234.5678'\n) ],\n    [\n'binary'\n=> new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n) ],\n    [\n'date'\n=> new\nMongoDB\\BSON\\UTCDateTime\n(\n1445990400000\n) ],\n    [\n'timestamp'\n=> new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n) ],\n    [\n'regex'\n=> new\nMongoDB\\BSON\\Regex\n(\n'pattern'\n,\n'i'\n) ],\n    [\n'code'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n) ],\n    [\n'code_ws'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return a; }'\n, [\n'a'\n=>\n1\n]) ],\n    [\n'minkey'\n=> new\nMongoDB\\BSON\\MinKey\n],\n    [\n'maxkey'\n=> new\nMongoDB\\BSON\\MaxKey\n],\n];\nforeach (\n$documents\nas\n$document\n) {\n\n$bson\n=\nMongoDB\\BSON\\fromPHP\n(\n$document\n);\n    echo\nMongoDB\\BSON\\toRelaxedExtendedJSON\n(\n$bson\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Document::toCanonicalExtendedJSON() example",
    "output": "<?php\n$documents\n= [\n    [\n'null'\n=>\nnull\n],\n    [\n'boolean'\n=>\ntrue\n],\n    [\n'string'\n=>\n'foo'\n],\n    [\n'int32'\n=>\n123\n],\n    [\n'int64'\n=>\n4294967295\n],\n    [\n'double'\n=>\n1.0\n],\n    [\n'nan'\n=>\nNAN\n],\n    [\n'pos_inf'\n=>\nINF\n],\n    [\n'neg_inf'\n=> -\nINF\n],\n    [\n'array'\n=> [\n'foo'\n,\n'bar'\n]],\n    [\n'document'\n=> [\n'foo'\n=>\n'bar'\n]],\n    [\n'oid'\n=> new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n) ],\n    [\n'dec128'\n=> new\nMongoDB\\BSON\\Decimal128\n(\n'1234.5678'\n) ],\n    [\n'binary'\n=> new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n) ],\n    [\n'date'\n=> new\nMongoDB\\BSON\\UTCDateTime\n(\n1445990400000\n) ],\n    [\n'timestamp'\n=> new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n) ],\n    [\n'regex'\n=> new\nMongoDB\\BSON\\Regex\n(\n'pattern'\n,\n'i'\n) ],\n    [\n'code'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n) ],\n    [\n'code_ws'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return a; }'\n, [\n'a'\n=>\n1\n]) ],\n    [\n'minkey'\n=> new\nMongoDB\\BSON\\MinKey\n],\n    [\n'maxkey'\n=> new\nMongoDB\\BSON\\MaxKey\n],\n];\nforeach (\n$documents\nas\n$document\n) {\n\n$bson\n=\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$document\n);\n    echo\n$bson\n->\ntoCanonicalExtendedJSON\n(),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Document::toRelaxedExtendedJSON() example",
    "output": "<?php\n$documents\n= [\n    [\n'null'\n=>\nnull\n],\n    [\n'boolean'\n=>\ntrue\n],\n    [\n'string'\n=>\n'foo'\n],\n    [\n'int32'\n=>\n123\n],\n    [\n'int64'\n=>\n4294967295\n],\n    [\n'double'\n=>\n1.0\n],\n    [\n'nan'\n=>\nNAN\n],\n    [\n'pos_inf'\n=>\nINF\n],\n    [\n'neg_inf'\n=> -\nINF\n],\n    [\n'array'\n=> [\n'foo'\n,\n'bar'\n]],\n    [\n'document'\n=> [\n'foo'\n=>\n'bar'\n]],\n    [\n'oid'\n=> new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n) ],\n    [\n'dec128'\n=> new\nMongoDB\\BSON\\Decimal128\n(\n'1234.5678'\n) ],\n    [\n'binary'\n=> new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n) ],\n    [\n'date'\n=> new\nMongoDB\\BSON\\UTCDateTime\n(\n1445990400000\n) ],\n    [\n'timestamp'\n=> new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n) ],\n    [\n'regex'\n=> new\nMongoDB\\BSON\\Regex\n(\n'pattern'\n,\n'i'\n) ],\n    [\n'code'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n) ],\n    [\n'code_ws'\n=> new\nMongoDB\\BSON\\Javascript\n(\n'function() { return a; }'\n, [\n'a'\n=>\n1\n]) ],\n    [\n'minkey'\n=> new\nMongoDB\\BSON\\MinKey\n],\n    [\n'maxkey'\n=> new\nMongoDB\\BSON\\MaxKey\n],\n];\nforeach (\n$documents\nas\n$document\n) {\n\n$bson\n=\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$document\n);\n    echo\n$bson\n->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\PackedArray::fromJSON() example",
    "output": "<?php\n$json\n=\n'[ \"foo\", { \"$numberInt\" : \"123\" }, { \"$numberLong\" : \"4294967295\" }, { \"$oid\" : \"56315a7c6118fd1b920270b1\" } ]'\n;\n$packedArray\n=\nMongoDB\\BSON\\PackedArray\n::\nfromJSON\n(\n$json\n);\nvar_dump\n(\n$packedArray\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\PackedArray::toCanonicalExtendedJSON() example",
    "output": "<?php\n$array\n= [\n\n'foo'\n,\n\n123\n,\n\n4294967295\n,\n    new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n),\n];\n$packedArray\n=\nMongoDB\\BSON\\PackedArray\n::\nfromPHP\n(\n$array\n);\necho\n$packedArray\n->\ntoCanonicalExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\PackedArray::toRelaxedExtendedJSON() example",
    "output": "<?php\n$array\n= [\n\n'foo'\n,\n\n123\n,\n\n4294967295\n,\n    new\nMongoDB\\BSON\\ObjectId\n(\n'56315a7c6118fd1b920270b1'\n),\n];\n$packedArray\n=\nMongoDB\\BSON\\PackedArray\n::\nfromPHP\n(\n$array\n);\necho\n$packedArray\n->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Binary::__construct() example",
    "output": "<?php\n$binary\n= new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n);\nvar_dump\n(\n$binary\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Binary::getData() example",
    "output": "<?php\n$binary\n= new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n);\nvar_dump\n(\n$binary\n->\ngetData\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Binary::getType() example",
    "output": "<?php\n$binary\n= new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n);\nvar_dump\n(\n$binary\n->\ngetType\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Binary::__toString() example",
    "output": "<?php\nvar_dump\n((string) new\nMongoDB\\BSON\\Binary\n(\n'foo'\n,\nMongoDB\\BSON\\Binary\n::\nTYPE_GENERIC\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Decimal128::__construct() example",
    "output": "<?php\nvar_dump\n(new\nMongoDB\\BSON\\Decimal128\n(\n1234.5678\n));\nvar_dump\n(new\nMongoDB\\BSON\\Decimal128\n(\nNAN\n));\nvar_dump\n(new\nMongoDB\\BSON\\Decimal128\n(\nINF\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Decimal128::__toString() example",
    "output": "<?php\nvar_dump\n((string) new\nMongoDB\\BSON\\Decimal128\n(\n1234.5678\n));\nvar_dump\n((string) new\nMongoDB\\BSON\\Decimal128\n(\nNAN\n));\nvar_dump\n((string) new\nMongoDB\\BSON\\Decimal128\n(\nINF\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Javascript::__construct() example",
    "output": "<?php\n$code\n= new\nMongoDB\\BSON\\Javascript\n(\n'function() { return 1; }'\n);\nvar_dump\n(\n$code\n);\n$codews\n= new\nMongoDB\\BSON\\Javascript\n(\n'function() { return foo; }'\n, [\n'foo'\n=>\n'bar'\n]);\nvar_dump\n(\n$codews\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Javascript::getCode() example",
    "output": "<?php\n$js\n= new\nMongoDB\\BSON\\Javascript\n(\n'function foo(bar) { return bar; }'\n);\nvar_dump\n(\n$js\n->\ngetCode\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Javascript::getScope() example",
    "output": "<?php\n$js\n= new\nMongoDB\\BSON\\Javascript\n(\n'function foo(bar) { return bar; }'\n);\nvar_dump\n(\n$js\n->\ngetScope\n());\n$js\n= new\nMongoDB\\BSON\\Javascript\n(\n'function foo() { return foo; }'\n, [\n'foo'\n=>\n42\n]);\nvar_dump\n(\n$js\n->\ngetScope\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Javascript::__toString() example",
    "output": "<?php\nvar_dump\n((string) new\nMongoDB\\BSON\\Javascript\n(\n'function foo(bar) { return bar; }'\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\MaxKey::__construct() example",
    "output": "<?php\nvar_dump\n(new\nMongoDB\\BSON\\MaxKey\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\MinKey::__construct() example",
    "output": "<?php\nvar_dump\n(new\nMongoDB\\BSON\\MinKey\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\ObjectId::__construct() example",
    "output": "<?php\nvar_dump\n(new\nMongoDB\\BSON\\ObjectId\n());\nvar_dump\n(new\nMongoDB\\BSON\\ObjectId\n(\n'000000000000000000000001'\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\ObjectId::getTimestamp() example",
    "output": "<?php\nvar_dump\n((new\nMongoDB\\BSON\\ObjectId\n())->\ngetTimestamp\n());\nvar_dump\n((new\nMongoDB\\BSON\\ObjectId\n(\n'0000002a0000000000000000'\n))->\ngetTimestamp\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\ObjectId::__toString() example",
    "output": "<?php\nvar_dump\n((string) new\nMongoDB\\BSON\\ObjectId\n());\nvar_dump\n((string) new\nMongoDB\\BSON\\ObjectId\n(\n'000000000000000000000001'\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Regex::__construct() example",
    "output": "<?php\n$regex\n= new\nMongoDB\\BSON\\Regex\n(\n'^foo'\n,\n'i'\n);\nvar_dump\n(\n$regex\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Regex::getFlags() example",
    "output": "<?php\n$regex\n= new\nMongoDB\\BSON\\Regex\n(\n'regex'\n,\n'i'\n);\nvar_dump\n(\n$regex\n->\ngetFlags\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Regex::getPattern() example",
    "output": "<?php\n$regex\n= new\nMongoDB\\BSON\\Regex\n(\n'regex'\n,\n'i'\n);\nvar_dump\n(\n$regex\n->\ngetPattern\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Regex::__toString() example",
    "output": "<?php\n$regex\n= new\nMongoDB\\BSON\\Regex\n(\n'regex'\n,\n'i'\n);\nvar_dump\n((string)\n$regex\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Timestamp::__construct() example",
    "output": "<?php\n$timestamp\n= new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Timestamp::__toString() example",
    "output": "<?php\n$timestamp\n= new\nMongoDB\\BSON\\Timestamp\n(\n1234\n,\n5678\n);\nvar_dump\n((string)\n$timestamp\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\UTCDateTime::__construct() example",
    "output": "<?php\nvar_dump\n(new\nMongoDB\\BSON\\UTCDateTime\n);\nvar_dump\n(new\nMongoDB\\BSON\\UTCDateTime\n(new\nDateTime\n));\nvar_dump\n(new\nMongoDB\\BSON\\UTCDateTime\n(\n1416445411987\n));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\UTCDatetime::toDateTime() example",
    "output": "<?php\n$utcdatetime\n= new\nMongoDB\\BSON\\UTCDateTime\n(\n1416445411987\n);\n$datetime\n=\n$utcdatetime\n->\ntoDateTime\n();\nvar_dump\n(\n$datetime\n->\nformat\n(\n'r'\n));\nvar_dump\n(\n$datetime\n->\nformat\n(\n'U.u'\n));\nvar_dump\n(\n$datetime\n->\ngetTimezone\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\UTCDatetime::toDateTimeImmutable() example",
    "output": "<?php\n$utcdatetime\n= new\nMongoDB\\BSON\\UTCDateTime\n(\n1416445411987\n);\n$datetime\n=\n$utcdatetime\n->\ntoDateTimeImmutable\n();\nvar_dump\n(\n$datetime\n->\nformat\n(\n'r'\n));\nvar_dump\n(\n$datetime\n->\nformat\n(\n'U.u'\n));\nvar_dump\n(\n$datetime\n->\ngetTimezone\n());\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\UTCDateTime::__toString() example",
    "output": "<?php\n$utcdatetime\n= new\nMongoDB\\BSON\\UTCDateTime\n(\n1416445411987\n);\nvar_dump\n((string)\n$utcdatetime\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Serializable::bsonSerialize() returning an associative array for root document",
    "output": "<?php\nclass\nMyDocument\nimplements\nMongoDB\\BSON\\Serializable\n{\n    private\n$id\n;\n    function\n__construct\n()\n    {\n\n$this\n->\nid\n= new\nMongoDB\\BSON\\ObjectId\n;\n    }\n    function\nbsonSerialize\n(): array\n    {\n        return [\n'_id'\n=>\n$this\n->\nid\n,\n'foo'\n=>\n'bar'\n];\n    }\n}\necho\nMongoDB\\BSON\\Document\n::\nfromPHP\n(new\nMyDocument\n)->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 MongoDB\\BSON\\Serializable::bsonSerialize() returning a sequential array for root document",
    "output": "<?php\nclass\nMyArray\nimplements\nMongoDB\\BSON\\Serializable\n{\n    function\nbsonSerialize\n(): array\n    {\n        return [\n1\n,\n2\n,\n3\n];\n    }\n}\necho\nMongoDB\\BSON\\Document\n::\nfromPHP\n(new\nMyArray\n)->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 MongoDB\\BSON\\Serializable::bsonSerialize() returning an associative array for document field",
    "output": "<?php\nclass\nMyDocument\nimplements\nMongoDB\\BSON\\Serializable\n{\n    function\nbsonSerialize\n(): array\n    {\n        return [\n'foo'\n=>\n'bar'\n];\n    }\n}\n$value\n= [\n'document'\n=> new\nMyDocument\n];\necho\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$value\n)->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 MongoDB\\BSON\\Serializable::bsonSerialize() returning a sequential array for document field",
    "output": "<?php\nclass\nMyArray\nimplements\nMongoDB\\BSON\\Serializable\n{\n    function\nbsonSerialize\n(): array\n    {\n        return [\n1\n,\n2\n,\n3\n];\n    }\n}\n$value\n= [\n'array'\n=> new\nMyArray\n];\necho\nMongoDB\\BSON\\Document\n::\nfromPHP\n(\n$value\n)->\ntoRelaxedExtendedJSON\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Unserializable::bsonUnserialize() example",
    "output": "<?php\nclass\nMyDocument\nimplements\nMongoDB\\BSON\\Unserializable\n{\n    private\n$data\n= [];\n    function\nbsonUnserialize\n(array\n$data\n):\nvoid\n\n{\n\n$this\n->\ndata\n=\n$data\n;\n    }\n}\n$bson\n=\nMongoDB\\BSON\\Document\n::\nfromJSON\n(\n'{ \"foo\": \"bar\" }'\n);\nvar_dump\n(\n$bson\n->\ntoPHP\n([\n'root'\n=>\n'MyDocument'\n]));\n?>"
  },
  {
    "input": "Example #1 MongoDB\\BSON\\Int64::__toString() example",
    "output": "<?php\n$int64\n= new\nMongoDB\\BSON\\Int64\n(\n'9223372036854775807'\n);\nvar_dump\n((string)\n$int64\n);\n?>"
  },
  {
    "input": "Example #1 MongoDB\\Driver\\Exception\\WriteException::getWriteResult() example",
    "output": "<?php\n$manager\n= new\nMongoDB\\Driver\\Manager\n(\n'mongodb://localhost'\n);\n$bulk\n= new\nMongoDB\\Driver\\BulkWrite\n;\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\n$bulk\n->\ninsert\n([\n'_id'\n=>\n1\n]);\ntry {\n\n$manager\n->\nexecuteBulkWrite\n(\n'db.collection'\n,\n$bulk\n);\n} catch (\nMongoDB\\Driver\\Exception\\WriteException $e\n) {\n\n$writeResult\n=\n$e\n->\ngetWriteResult\n();\n    if (\n$writeConcernError\n=\n$writeResult\n->\ngetWriteConcernError\n()) {\n\nvar_dump\n(\n$writeConcernError\n);\n    }\n    if (\n$writeErrors\n=\n$writeResult\n->\ngetWriteErrors\n()) {\n\nvar_dump\n(\n$writeErrors\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Comparing the MySQL APIs",
    "output": "<?php\n// mysqli\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT 'Hello, dear MySQL user!' AS _message FROM DUAL\"\n);\n$row\n=\n$result\n->\nfetch_assoc\n();\necho\nhtmlentities\n(\n$row\n[\n'_message'\n]);\n// PDO\n$pdo\n= new\nPDO\n(\n'mysql:host=example.com;dbname=database'\n,\n'user'\n,\n'password'\n);\n$statement\n=\n$pdo\n->\nquery\n(\n\"SELECT 'Hello, dear MySQL user!' AS _message FROM DUAL\"\n);\n$row\n=\n$statement\n->\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n);\necho\nhtmlentities\n(\n$row\n[\n'_message'\n]);"
  },
  {
    "input": "Example #2 Comparing prepared statements",
    "output": "<?php\n// mysqli\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$statement\n=\n$mysqli\n->\nprepare\n(\n\"SELECT District FROM City WHERE Name=?\"\n);\n$statement\n->\nexecute\n([\n\"Amersfoort\"\n]);\n$result\n=\n$statement\n->\nget_result\n();\n$row\n=\n$result\n->\nfetch_assoc\n();\necho\nhtmlentities\n(\n$row\n[\n'District'\n]);\n// PDO\n$pdo\n= new\nPDO\n(\n'mysql:host=example.com;dbname=database'\n,\n'user'\n,\n'password'\n);\n$statement\n=\n$pdo\n->\nprepare\n(\n\"SELECT District FROM City WHERE Name=?\"\n);\n$statement\n->\nexecute\n([\n\"Amersfoort\"\n]);\n$row\n=\n$statement\n->\nfetch\n(\nPDO\n::\nFETCH_ASSOC\n);\necho\nhtmlentities\n(\n$row\n[\n'District'\n]);"
  },
  {
    "input": "Example #1 Unbuffered query example: mysqli",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$unbufferedResult\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name FROM City\"\n,\nMYSQLI_USE_RESULT\n);\nforeach (\n$unbufferedResult\nas\n$row\n) {\n    echo\n$row\n[\n'Name'\n] .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #2 Unbuffered query example: pdo_mysql",
    "output": "<?php\n$pdo\n= new\nPDO\n(\n\"mysql:host=localhost;dbname=world\"\n,\n'my_user'\n,\n'my_password'\n);\n$pdo\n->\nsetAttribute\n(\nPDO\n::\nMYSQL_ATTR_USE_BUFFERED_QUERY\n,\nfalse\n);\n$unbufferedResult\n=\n$pdo\n->\nquery\n(\n\"SELECT Name FROM City\"\n);\nforeach (\n$unbufferedResult\nas\n$row\n) {\n    echo\n$row\n[\n'Name'\n] .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Problems with setting the character set with SQL",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n// Will NOT affect $mysqli->real_escape_string();\n$mysqli\n->\nquery\n(\n\"SET NAMES utf8mb4\"\n);\n// Will NOT affect $mysqli->real_escape_string();\n$mysqli\n->\nquery\n(\n\"SET CHARACTER SET utf8mb4\"\n);\n// But, this will affect $mysqli->real_escape_string();\n$mysqli\n->\nset_charset\n(\n'utf8mb4'\n);\n// But, this will NOT affect it (UTF-8 vs utf8mb4) -- don't use dashes here\n$mysqli\n->\nset_charset\n(\n'UTF-8'\n);\n?>"
  },
  {
    "input": "Example #2 Setting the character set example: mysqli",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\necho\n'Initial character set: '\n.\n$mysqli\n->\ncharacter_set_name\n() .\n\"\\n\"\n;\nif (!\n$mysqli\n->\nset_charset\n(\n'utf8mb4'\n)) {\n\nprintf\n(\n\"Error loading character set utf8mb4: %s\\n\"\n,\n$mysqli\n->\nerror\n);\n    exit;\n}\necho\n'Your current character set is: '\n.\n$mysqli\n->\ncharacter_set_name\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Setting the character set example: pdo_mysql",
    "output": "<?php\n$pdo\n= new\nPDO\n(\n\"mysql:host=localhost;dbname=world;charset=utf8mb4\"\n,\n'my_user'\n,\n'my_pass'\n);\n?>"
  },
  {
    "input": "Example #1 Easy migration from the old mysql extension",
    "output": "<?php\n$mysqli\n=\nmysqli_connect\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\nmysqli_query\n(\n$mysqli\n,\n\"SELECT 'Please do not use the deprecated mysql extension for new development. ' AS _msg FROM DUAL\"\n);\n$row\n=\nmysqli_fetch_assoc\n(\n$result\n);\necho\n$row\n[\n'_msg'\n];\n$mysql\n=\nmysql_connect\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n);\nmysql_select_db\n(\n\"test\"\n);\n$result\n=\nmysql_query\n(\n\"SELECT 'Use the mysqli extension instead.' AS _msg FROM DUAL\"\n,\n$mysql\n);\n$row\n=\nmysql_fetch_assoc\n(\n$result\n);\necho\n$row\n[\n'_msg'\n];"
  },
  {
    "input": "Example #2 Object-oriented and procedural interface",
    "output": "<?php\n$mysqli\n=\nmysqli_connect\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\nmysqli_query\n(\n$mysqli\n,\n\"SELECT 'A world full of ' AS _msg FROM DUAL\"\n);\n$row\n=\nmysqli_fetch_assoc\n(\n$result\n);\necho\n$row\n[\n'_msg'\n];\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT 'choices to please everybody.' AS _msg FROM DUAL\"\n);\n$row\n=\n$result\n->\nfetch_assoc\n();\necho\n$row\n[\n'_msg'\n];"
  },
  {
    "input": "Example #3 Bad coding style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\nmysqli_query\n(\n$mysqli\n,\n\"SELECT 'Possible but bad style.' AS _msg FROM DUAL\"\n);\nif (\n$row\n=\n$result\n->\nfetch_assoc\n()) {\n    echo\n$row\n[\n'_msg'\n];\n}"
  },
  {
    "input": "Example #1 Special meaning of localhost",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\necho\n$mysqli\n->\nhost_info\n.\n\"\\n\"\n;\n$mysqli\n= new\nmysqli\n(\n\"127.0.0.1\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n,\n3306\n);\necho\n$mysqli\n->\nhost_info\n.\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 Executing queries",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);"
  },
  {
    "input": "Example #2 Navigation through buffered results",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (1), (2), (3)\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT id FROM test ORDER BY id ASC\"\n);\necho\n\"Reverse order...\\n\"\n;\nfor (\n$row_no\n=\n$result\n->\nnum_rows\n-\n1\n;\n$row_no\n>=\n0\n;\n$row_no\n--) {\n\n$result\n->\ndata_seek\n(\n$row_no\n);\n\n$row\n=\n$result\n->\nfetch_assoc\n();\n    echo\n\" id = \"\n.\n$row\n[\n'id'\n] .\n\"\\n\"\n;\n}\necho\n\"Result set order...\\n\"\n;\nforeach (\n$result\nas\n$row\n) {\n    echo\n\" id = \"\n.\n$row\n[\n'id'\n] .\n\"\\n\"\n;\n}"
  },
  {
    "input": "Example #3 Navigation through unbuffered results",
    "output": "<?php\n$mysqli\n->\nreal_query\n(\n\"SELECT id FROM test ORDER BY id ASC\"\n);\n$result\n=\n$mysqli\n->\nuse_result\n();\necho\n\"Result set order...\\n\"\n;\nforeach (\n$result\nas\n$row\n) {\n    echo\n\" id = \"\n.\n$row\n[\n'id'\n] .\n\"\\n\"\n;\n}"
  },
  {
    "input": "Example #4 Text protocol returns strings by default",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label CHAR(1))\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'a')\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT id, label FROM test WHERE id = 1\"\n);\n$row\n=\n$result\n->\nfetch_assoc\n();\nprintf\n(\n\"id = %s (%s)\\n\"\n,\n$row\n[\n'id'\n],\ngettype\n(\n$row\n[\n'id'\n]));\nprintf\n(\n\"label = %s (%s)\\n\"\n,\n$row\n[\n'label'\n],\ngettype\n(\n$row\n[\n'label'\n]));"
  },
  {
    "input": "Example #5 Native data types with mysqlnd and connection option",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n();\n$mysqli\n->\noptions\n(\nMYSQLI_OPT_INT_AND_FLOAT_NATIVE\n,\n1\n);\n$mysqli\n->\nreal_connect\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label CHAR(1))\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'a')\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT id, label FROM test WHERE id = 1\"\n);\n$row\n=\n$result\n->\nfetch_assoc\n();\nprintf\n(\n\"id = %s (%s)\\n\"\n,\n$row\n[\n'id'\n],\ngettype\n(\n$row\n[\n'id'\n]));\nprintf\n(\n\"label = %s (%s)\\n\"\n,\n$row\n[\n'label'\n],\ngettype\n(\n$row\n[\n'label'\n]));"
  },
  {
    "input": "Example #1 Prepared statement",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n/* Prepared statement, stage 1: prepare */\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"INSERT INTO test(id, label) VALUES (?, ?)\"\n);\n/* Prepared statement, stage 2: bind and execute */\n$id\n=\n1\n;\n$label\n=\n'PHP'\n;\n$stmt\n->\nbind_param\n(\n\"is\"\n,\n$id\n,\n$label\n);\n// \"is\" means that $id is bound as an integer and $label as a string\n$stmt\n->\nexecute\n();"
  },
  {
    "input": "Example #2 INSERT prepared once, executed multiple times",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n/* Prepared statement, stage 1: prepare */\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"INSERT INTO test(id, label) VALUES (?, ?)\"\n);\n/* Prepared statement, stage 2: bind and execute */\n$stmt\n->\nbind_param\n(\n\"is\"\n,\n$id\n,\n$label\n);\n// \"is\" means that $id is bound as an integer and $label as a string\n$data\n= [\n\n1\n=>\n'PHP'\n,\n\n2\n=>\n'Java'\n,\n\n3\n=>\n'C++'\n];\nforeach (\n$data\nas\n$id\n=>\n$label\n) {\n\n$stmt\n->\nexecute\n();\n}\n$result\n=\n$mysqli\n->\nquery\n(\n'SELECT id, label FROM test'\n);\nvar_dump\n(\n$result\n->\nfetch_all\n(\nMYSQLI_ASSOC\n));"
  },
  {
    "input": "Example #3 Less round trips using multi-INSERT SQL",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$values\n= [\n1\n,\n2\n,\n3\n,\n4\n];\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"INSERT INTO test(id) VALUES (?), (?), (?), (?)\"\n);\n$stmt\n->\nbind_param\n(\n'iiii'\n, ...\n$values\n);\n$stmt\n->\nexecute\n();"
  },
  {
    "input": "Example #4 Native datatypes",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'PHP')\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT id, label FROM test WHERE id = 1\"\n);\n$stmt\n->\nexecute\n();\n$result\n=\n$stmt\n->\nget_result\n();\n$row\n=\n$result\n->\nfetch_assoc\n();\nprintf\n(\n\"id = %s (%s)\\n\"\n,\n$row\n[\n'id'\n],\ngettype\n(\n$row\n[\n'id'\n]));\nprintf\n(\n\"label = %s (%s)\\n\"\n,\n$row\n[\n'label'\n],\ngettype\n(\n$row\n[\n'label'\n]));"
  },
  {
    "input": "Example #5 Output variable binding",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'PHP')\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT id, label FROM test WHERE id = 1\"\n);\n$stmt\n->\nexecute\n();\n$stmt\n->\nbind_result\n(\n$out_id\n,\n$out_label\n);\nwhile (\n$stmt\n->\nfetch\n()) {\n\nprintf\n(\n\"id = %s (%s), label = %s (%s)\\n\"\n,\n$out_id\n,\ngettype\n(\n$out_id\n),\n$out_label\n,\ngettype\n(\n$out_label\n));\n}"
  },
  {
    "input": "Example #6 Using mysqli_result to fetch results",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'PHP')\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT id, label FROM test WHERE id = 1\"\n);\n$stmt\n->\nexecute\n();\n$result\n=\n$stmt\n->\nget_result\n();\nvar_dump\n(\n$result\n->\nfetch_all\n(\nMYSQLI_ASSOC\n));"
  },
  {
    "input": "Example #7 Buffered result set for flexible read out",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Non-prepared statement */\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT, label TEXT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id, label) VALUES (1, 'PHP'), (2, 'Java'), (3, 'C++')\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT id, label FROM test\"\n);\n$stmt\n->\nexecute\n();\n$result\n=\n$stmt\n->\nget_result\n();\nfor (\n$row_no\n=\n$result\n->\nnum_rows\n-\n1\n;\n$row_no\n>=\n0\n;\n$row_no\n--) {\n\n$result\n->\ndata_seek\n(\n$row_no\n);\n\nvar_dump\n(\n$result\n->\nfetch_assoc\n());\n}"
  },
  {
    "input": "Example #1 Calling a stored procedure",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$mysqli\n->\nquery\n(\n\"DROP PROCEDURE IF EXISTS p\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE PROCEDURE p(IN id_val INT) BEGIN INSERT INTO test(id) VALUES(id_val); END;\"\n);\n$mysqli\n->\nquery\n(\n\"CALL p(1)\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT id FROM test\"\n);\nvar_dump\n(\n$result\n->\nfetch_assoc\n());"
  },
  {
    "input": "Example #2 Using session variables",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP PROCEDURE IF EXISTS p\"\n);\n$mysqli\n->\nquery\n(\n'CREATE PROCEDURE p(OUT msg VARCHAR(50)) BEGIN SELECT \"Hi!\" INTO msg; END;'\n);\n$mysqli\n->\nquery\n(\n\"SET @msg = ''\"\n);\n$mysqli\n->\nquery\n(\n\"CALL p(@msg)\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT @msg as _p_out\"\n);\n$row\n=\n$result\n->\nfetch_assoc\n();\necho\n$row\n[\n'_p_out'\n];"
  },
  {
    "input": "Example #3 Fetching results from stored procedures",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (1), (2), (3)\"\n);\n$mysqli\n->\nquery\n(\n\"DROP PROCEDURE IF EXISTS p\"\n);\n$mysqli\n->\nquery\n(\n'CREATE PROCEDURE p() READS SQL DATA BEGIN SELECT id FROM test; SELECT id + 1 FROM test; END;'\n);\n$mysqli\n->\nmulti_query\n(\n\"CALL p()\"\n);\ndo {\n    if (\n$result\n=\n$mysqli\n->\nstore_result\n()) {\n\nprintf\n(\n\"---\\n\"\n);\n\nvar_dump\n(\n$result\n->\nfetch_all\n());\n\n$result\n->\nfree\n();\n    }\n} while (\n$mysqli\n->\nnext_result\n());"
  },
  {
    "input": "Example #4 Stored Procedures and Prepared Statements",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (1), (2), (3)\"\n);\n$mysqli\n->\nquery\n(\n\"DROP PROCEDURE IF EXISTS p\"\n);\n$mysqli\n->\nquery\n(\n'CREATE PROCEDURE p() READS SQL DATA BEGIN SELECT id FROM test; SELECT id + 1 FROM test; END;'\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"CALL p()\"\n);\n$stmt\n->\nexecute\n();\ndo {\n    if (\n$result\n=\n$stmt\n->\nget_result\n()) {\n\nprintf\n(\n\"---\\n\"\n);\n\nvar_dump\n(\n$result\n->\nfetch_all\n());\n\n$result\n->\nfree\n();\n    }\n} while (\n$stmt\n->\nnext_result\n());"
  },
  {
    "input": "Example #5 Stored Procedures and Prepared Statements using bind API",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (1), (2), (3)\"\n);\n$mysqli\n->\nquery\n(\n\"DROP PROCEDURE IF EXISTS p\"\n);\n$mysqli\n->\nquery\n(\n'CREATE PROCEDURE p() READS SQL DATA BEGIN SELECT id FROM test; SELECT id + 1 FROM test; END;'\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"CALL p()\"\n);\n$stmt\n->\nexecute\n();\ndo {\n    if (\n$stmt\n->\nstore_result\n()) {\n\n$stmt\n->\nbind_result\n(\n$id_out\n);\n        while (\n$stmt\n->\nfetch\n()) {\n            echo\n\"id =\n$id_out\n\\n\"\n;\n        }\n    }\n} while (\n$stmt\n->\nnext_result\n());"
  },
  {
    "input": "Example #1 Multiple Statements",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS test\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE test(id INT)\"\n);\n$sql\n=\n\"SELECT COUNT(*) AS _num FROM test;\n        INSERT INTO test(id) VALUES (1);\n        SELECT COUNT(*) AS _num FROM test; \"\n;\n$mysqli\n->\nmulti_query\n(\n$sql\n);\ndo {\n    if (\n$result\n=\n$mysqli\n->\nstore_result\n()) {\n\nvar_dump\n(\n$result\n->\nfetch_all\n(\nMYSQLI_ASSOC\n));\n\n$result\n->\nfree\n();\n    }\n} while (\n$mysqli\n->\nnext_result\n());"
  },
  {
    "input": "Example #2 SQL Injection",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT 1; DROP TABLE mysql.user\"\n);\n?>"
  },
  {
    "input": "Example #1 Setting autocommit mode with SQL and through the API",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n/* Recommended: using API to control transactional settings */\n$mysqli\n->\nautocommit\n(\nfalse\n);\n/* Won't be monitored and recognized by the replication and the load balancing plugin */\n$mysqli\n->\nquery\n(\n'SET AUTOCOMMIT = 0'\n);"
  },
  {
    "input": "Example #2 Commit and rollback",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$mysqli\n->\nautocommit\n(\nfalse\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (1)\"\n);\n$mysqli\n->\nrollback\n();\n$mysqli\n->\nquery\n(\n\"INSERT INTO test(id) VALUES (2)\"\n);\n$mysqli\n->\ncommit\n();"
  },
  {
    "input": "Example #1 Accessing result set meta data",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT 1 AS _one, 'Hello' AS _two FROM DUAL\"\n);\nvar_dump\n(\n$result\n->\nfetch_fields\n());"
  },
  {
    "input": "Example #2 Prepared statements metadata",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"example.com\"\n,\n\"user\"\n,\n\"password\"\n,\n\"database\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT 1 AS _one, 'Hello' AS _two FROM DUAL\"\n);\n$stmt\n->\nexecute\n();\n$result\n=\n$stmt\n->\nresult_metadata\n();\nvar_dump\n(\n$result\n->\nfetch_fields\n());"
  },
  {
    "input": "Example #2 Extending mysqli class",
    "output": "<?php\nclass\nFooMysqli\nextends\nmysqli\n{\n    public function\n__construct\n(\n$host\n,\n$user\n,\n$pass\n,\n$db\n,\n$port\n,\n$socket\n,\n$charset\n) {\n\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n\nparent\n::\n__construct\n(\n$host\n,\n$user\n,\n$pass\n,\n$db\n,\n$port\n,\n$socket\n);\n\n$this\n->\nset_charset\n(\n$charset\n);\n    }\n}\n$db\n= new\nFooMysqli\n(\n'localhost'\n,\n'my_user'\n,\n'my_password'\n,\n'my_db'\n,\n3306\n,\nnull\n,\n'utf8mb4'\n);"
  },
  {
    "input": "Example #1 Generating a Trace File",
    "output": "<?php\n/* Create a trace file in '/tmp/client.trace' on the local (client) machine: */\nmysqli_debug\n(\n\"d:t:o,/tmp/client.trace\"\n);\n?>"
  },
  {
    "input": "Example #1 mysqli_get_client_info",
    "output": "<?php\n/* We don't need a connection to determine\n   the version of mysql client library */\nprintf\n(\n\"Client library version: %s\\n\"\n,\nmysqli_get_client_info\n());\n?>"
  },
  {
    "input": "Example #1 mysqli_get_client_version",
    "output": "<?php\n/* We don't need a connection to determine\n   the version of mysql client library */\nprintf\n(\n\"Client library version: %d\\n\"\n,\nmysqli_get_client_version\n());\n?>"
  },
  {
    "input": "Example #1 A mysqli_get_connection_stats() example",
    "output": "<?php\n$link\n=\nmysqli_connect\n();\nprint_r\n(\nmysqli_get_connection_stats\n(\n$link\n));\n?>"
  },
  {
    "input": "Example #1 A mysqli_poll() example",
    "output": "<?php\n$link1\n=\nmysqli_connect\n();\n$link1\n->\nquery\n(\n\"SELECT 'test'\"\n,\nMYSQLI_ASYNC\n);\n$all_links\n= array(\n$link1\n);\n$processed\n=\n0\n;\ndo {\n\n$links\n=\n$errors\n=\n$reject\n= array();\n    foreach (\n$all_links\nas\n$link\n) {\n\n$links\n[] =\n$errors\n[] =\n$reject\n[] =\n$link\n;\n    }\n    if (!\nmysqli_poll\n(\n$links\n,\n$errors\n,\n$reject\n,\n1\n)) {\n        continue;\n    }\n    foreach (\n$links\nas\n$link\n) {\n        if (\n$result\n=\n$link\n->\nreap_async_query\n()) {\n\nprint_r\n(\n$result\n->\nfetch_row\n());\n            if (\nis_object\n(\n$result\n))\n\nmysqli_free_result\n(\n$result\n);\n        } else die(\nsprintf\n(\n\"MySQLi Error: %s\"\n,\nmysqli_error\n(\n$link\n)));\n\n$processed\n++;\n    }\n} while (\n$processed\n<\ncount\n(\n$all_links\n));\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* prepare statement */\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT Code, Name FROM Country ORDER BY Name LIMIT 5\"\n);\n$stmt\n->\nexecute\n();\n/* bind variables to prepared statement */\n$stmt\n->\nbind_result\n(\n$col1\n,\n$col2\n);\n/* fetch values */\nwhile (\n$stmt\n->\nfetch\n()) {\n\nprintf\n(\n\"%s %s\\n\"\n,\n$col1\n,\n$col2\n);\n}"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* prepare statement */\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n\"SELECT Code, Name FROM Country ORDER BY Name LIMIT 5\"\n);\nmysqli_stmt_execute\n(\n$stmt\n);\n/* bind variables to prepared statement */\nmysqli_stmt_bind_result\n(\n$stmt\n,\n$col1\n,\n$col2\n);\n/* fetch values */\nwhile (\nmysqli_stmt_fetch\n(\n$stmt\n)) {\n\nprintf\n(\n\"%s %s\\n\"\n,\n$col1\n,\n$col2\n);\n}"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name\"\n;\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n);\n$stmt\n->\nexecute\n();\n$stmt\n->\nbind_result\n(\n$name\n,\n$code\n);\n$stmt\n->\nstore_result\n();\n/* seek to row no. 400 */\n$stmt\n->\ndata_seek\n(\n399\n);\n$stmt\n->\nfetch\n();\nprintf\n(\n\"City: %s  Countrycode: %s\\n\"\n,\n$name\n,\n$code\n);"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name\"\n;\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n);\nmysqli_stmt_execute\n(\n$stmt\n);\nmysqli_stmt_bind_result\n(\n$stmt\n,\n$name\n,\n$code\n);\nmysqli_stmt_store_result\n(\n$stmt\n);\n/* seek to row no. 400 */\nmysqli_stmt_data_seek\n(\n$stmt\n,\n399\n);\nmysqli_stmt_fetch\n(\n$stmt\n);\nprintf\n(\n\"City: %s  Countrycode: %s\\n\"\n,\n$name\n,\n$code\n);"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* Open a connection */\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$mysqli\n->\nquery\n(\n\"CREATE TABLE myCountry LIKE Country\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n)) {\n\n/* drop table */\n\n$mysqli\n->\nquery\n(\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\n$stmt\n->\nexecute\n();\n\nprintf\n(\n\"Error: %d.\\n\"\n,\n$stmt\n->\nerrno\n);\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* Open a connection */\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nmysqli_query\n(\n$link\n,\n\"CREATE TABLE myCountry LIKE Country\"\n);\nmysqli_query\n(\n$link\n,\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n)) {\n\n/* drop table */\n\nmysqli_query\n(\n$link\n,\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\nprintf\n(\n\"Error: %d.\\n\"\n,\nmysqli_stmt_errno\n(\n$stmt\n));\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* Open a connection */\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$mysqli\n->\nquery\n(\n\"CREATE TABLE myCountry LIKE Country\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n)) {\n\n/* drop table */\n\n$mysqli\n->\nquery\n(\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\n$stmt\n->\nexecute\n();\n\nprintf\n(\n\"Error: %s.\\n\"\n,\n$stmt\n->\nerror\n);\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* Open a connection */\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nmysqli_query\n(\n$link\n,\n\"CREATE TABLE myCountry LIKE Country\"\n);\nmysqli_query\n(\n$link\n,\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n)) {\n\n/* drop table */\n\nmysqli_query\n(\n$link\n,\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\nprintf\n(\n\"Error: %s.\\n\"\n,\nmysqli_stmt_error\n(\n$stmt\n));\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* Open a connection */\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$mysqli\n->\nquery\n(\n\"CREATE TABLE myCountry LIKE Country\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n)) {\n\n/* drop table */\n\n$mysqli\n->\nquery\n(\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\n$stmt\n->\nexecute\n();\n\n    echo\n\"Error:\\n\"\n;\n\nprint_r\n(\n$stmt\n->\nerror_list\n);\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* Open a connection */\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nmysqli_query\n(\n$link\n,\n\"CREATE TABLE myCountry LIKE Country\"\n);\nmysqli_query\n(\n$link\n,\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n)) {\n\n/* drop table */\n\nmysqli_query\n(\n$link\n,\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\n    echo\n\"Error:\\n\"\n;\n\nprint_r\n(\nmysql_stmt_error_list\n(\n$stmt\n));\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5\"\n;\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n)) {\n\n/* execute statement */\n\n$stmt\n->\nexecute\n();\n\n/* bind result variables */\n\n$stmt\n->\nbind_result\n(\n$name\n,\n$code\n);\n\n/* fetch values */\n\nwhile (\n$stmt\n->\nfetch\n()) {\n\nprintf\n(\n\"%s (%s)\\n\"\n,\n$name\n,\n$code\n);\n    }\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5\"\n;\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n)) {\n\n/* execute statement */\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\n/* bind result variables */\n\nmysqli_stmt_bind_result\n(\n$stmt\n,\n$name\n,\n$code\n);\n\n/* fetch values */\n\nwhile (\nmysqli_stmt_fetch\n(\n$stmt\n)) {\n\nprintf\n(\n\"%s (%s)\\n\"\n,\n$name\n,\n$code\n);\n    }\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$code\n=\n'FR'\n;\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT Name FROM Country WHERE Code=?\"\n);\n$stmt\n->\nbind_param\n(\n's'\n,\n$code\n);\n$stmt\n->\nexecute\n();\n$row\n=\n$stmt\n->\nget_result\n()->\nfetch_row\n();\nfor (\n$i\n=\n0\n;\n$i\n<\n$stmt\n->\nfield_count\n;\n$i\n++) {\n\nprintf\n(\n\"Value of column number %d is %s\"\n,\n$i\n,\n$row\n[\n$i\n]);\n}"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$code\n=\n'FR'\n;\n$stmt\n=\nmysqli_prepare\n(\n$mysqli\n,\n\"SELECT Name FROM Country WHERE Code=?\"\n);\nmysqli_stmt_bind_param\n(\n$stmt\n,\n's'\n,\n$code\n);\nmysqli_stmt_execute\n(\n$stmt\n);\n$result\n=\nmysqli_stmt_get_result\n(\n$stmt\n);\n$row\n=\nmysqli_fetch_row\n(\n$result\n);\nfor (\n$i\n=\n0\n;\n$i\n<\nmysqli_stmt_field_count\n(\n$stmt\n);\n$i\n++) {\n\nprintf\n(\n\"Value of column number %d is %s\"\n,\n$i\n,\n$row\n[\n$i\n]);\n}"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, Population, Continent FROM Country WHERE Continent=? ORDER BY Name LIMIT 1\"\n;\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n);\n$stmt\n->\nbind_param\n(\n\"s\"\n,\n$continent\n);\n$continentList\n= array(\n'Europe'\n,\n'Africa'\n,\n'Asia'\n,\n'North America'\n);\nforeach (\n$continentList\nas\n$continent\n) {\n\n$stmt\n->\nexecute\n();\n\n$result\n=\n$stmt\n->\nget_result\n();\n    while (\n$row\n=\n$result\n->\nfetch_array\n(\nMYSQLI_NUM\n)) {\n        foreach (\n$row\nas\n$r\n) {\n            print\n\"\n$r\n \"\n;\n        }\n        print\n\"\\n\"\n;\n    }\n}"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, Population, Continent FROM Country WHERE Continent=? ORDER BY Name LIMIT 1\"\n;\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n);\nmysqli_stmt_bind_param\n(\n$stmt\n,\n\"s\"\n,\n$continent\n);\n$continentList\n= array(\n'Europe'\n,\n'Africa'\n,\n'Asia'\n,\n'North America'\n);\nforeach (\n$continentList\nas\n$continent\n) {\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\n$result\n=\nmysqli_stmt_get_result\n(\n$stmt\n);\n    while (\n$row\n=\nmysqli_fetch_array\n(\n$result\n,\nMYSQLI_NUM\n)) {\n        foreach (\n$row\nas\n$r\n) {\n            print\n\"\n$r\n \"\n;\n        }\n        print\n\"\\n\"\n;\n    }\n}"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\"\n;\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n);\n$stmt\n->\nexecute\n();\n/* store the result in an internal buffer */\n$stmt\n->\nstore_result\n();\nprintf\n(\n\"Number of rows: %d.\\n\"\n,\n$stmt\n->\nnum_rows\n);"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\"\n;\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n);\nmysqli_stmt_execute\n(\n$stmt\n);\n/* store the result in an internal buffer */\nmysqli_stmt_store_result\n(\n$stmt\n);\nprintf\n(\n\"Number of rows: %d.\\n\"\n,\nmysqli_stmt_num_rows\n(\n$stmt\n));"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT Name FROM Country WHERE Name=? OR Code=?\"\n)) {\n\n$marker\n=\n$stmt\n->\nparam_count\n;\n\nprintf\n(\n\"Statement has %d markers.\\n\"\n,\n$marker\n);\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n\"SELECT Name FROM Country WHERE Name=? OR Code=?\"\n)) {\n\n$marker\n=\nmysqli_stmt_param_count\n(\n$stmt\n);\n\nprintf\n(\n\"Statement has %d markers.\\n\"\n,\n$marker\n);\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"test\"\n);\n$mysqli\n->\nquery\n(\n\"DROP TABLE IF EXISTS friends\"\n);\n$mysqli\n->\nquery\n(\n\"CREATE TABLE friends (id int, name varchar(20))\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')\"\n);\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"SELECT id, name FROM friends\"\n);\n$stmt\n->\nexecute\n();\n/* get resultset for metadata */\n$result\n=\n$stmt\n->\nresult_metadata\n();\n/* retrieve field information from metadata result set */\n$field\n=\n$result\n->\nfetch_field\n();\nprintf\n(\n\"Fieldname: %s\\n\"\n,\n$field\n->\nname\n);\n/* close resultset */\n$result\n->\nclose\n();\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"test\"\n);\nmysqli_query\n(\n$link\n,\n\"DROP TABLE IF EXISTS friends\"\n);\nmysqli_query\n(\n$link\n,\n\"CREATE TABLE friends (id int, name varchar(20))\"\n);\nmysqli_query\n(\n$link\n,\n\"INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')\"\n);\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n\"SELECT id, name FROM friends\"\n);\nmysqli_stmt_execute\n(\n$stmt\n);\n/* get resultset for metadata */\n$result\n=\nmysqli_stmt_result_metadata\n(\n$stmt\n);\n/* retrieve field information from metadata result set */\n$field\n=\nmysqli_fetch_field\n(\n$result\n);\nprintf\n(\n\"Fieldname: %s\\n\"\n,\n$field\n->\nname\n);\n/* close resultset */\nmysqli_free_result\n(\n$result\n);\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$stmt\n=\n$mysqli\n->\nprepare\n(\n\"INSERT INTO messages (message) VALUES (?)\"\n);\n$null\n=\nNULL\n;\n$stmt\n->\nbind_param\n(\n\"b\"\n,\n$null\n);\n$fp\n=\nfopen\n(\n\"messages.txt\"\n,\n\"r\"\n);\nwhile (!\nfeof\n(\n$fp\n)) {\n\n$stmt\n->\nsend_long_data\n(\n0\n,\nfread\n(\n$fp\n,\n8192\n));\n}\nfclose\n(\n$fp\n);\n$stmt\n->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* Open a connection */\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$mysqli\n->\nquery\n(\n\"CREATE TABLE myCountry LIKE Country\"\n);\n$mysqli\n->\nquery\n(\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n)) {\n\n/* drop table */\n\n$mysqli\n->\nquery\n(\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\n$stmt\n->\nexecute\n();\n\nprintf\n(\n\"Error: %s.\\n\"\n,\n$stmt\n->\nsqlstate\n);\n\n/* close statement */\n\n$stmt\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* Open a connection */\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nmysqli_query\n(\n$link\n,\n\"CREATE TABLE myCountry LIKE Country\"\n);\nmysqli_query\n(\n$link\n,\n\"INSERT INTO myCountry SELECT * FROM Country\"\n);\n$query\n=\n\"SELECT Name, Code FROM myCountry ORDER BY Name\"\n;\nif (\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n)) {\n\n/* drop table */\n\nmysqli_query\n(\n$link\n,\n\"DROP TABLE myCountry\"\n);\n\n/* execute query */\n\nmysqli_stmt_execute\n(\n$stmt\n);\n\nprintf\n(\n\"Error: %s.\\n\"\n,\nmysqli_stmt_sqlstate\n(\n$stmt\n));\n\n/* close statement */\n\nmysqli_stmt_close\n(\n$stmt\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\"\n;\n$stmt\n=\n$mysqli\n->\nprepare\n(\n$query\n);\n$stmt\n->\nexecute\n();\n/* store the result in an internal buffer */\n$stmt\n->\nstore_result\n();\nprintf\n(\n\"Number of rows: %d.\\n\"\n,\n$stmt\n->\nnum_rows\n);"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$query\n=\n\"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\"\n;\n$stmt\n=\nmysqli_prepare\n(\n$link\n,\n$query\n);\nmysqli_stmt_execute\n(\n$stmt\n);\n/* store the result in an internal buffer */\nmysqli_stmt_store_result\n(\n$stmt\n);\nprintf\n(\n\"Number of rows: %d.\\n\"\n,\nmysqli_stmt_num_rows\n(\n$stmt\n));"
  },
  {
    "input": "Example #1 Creation of a mysqli_result object",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* Select queries return a result set */\n$mysqli\n->\nreal_query\n(\n\"SELECT Name FROM City LIMIT 10\"\n);\n$result\n= new\nmysqli_result\n(\n$mysqli\n);\nprintf\n(\n\"Select returned %d rows.\\n\"\n,\n$result\n->\nnum_rows\n);"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n/* Get field information for all columns */\n\nwhile (\n$finfo\n=\n$result\n->\nfetch_field\n()) {\n\n/* get fieldpointer offset */\n\n$currentfield\n=\n$result\n->\ncurrent_field\n;\n\nprintf\n(\n\"Column %d:\\n\"\n,\n$currentfield\n);\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n    }\n\n$result\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n/* Get field information for all fields */\n\nwhile (\n$finfo\n=\nmysqli_fetch_field\n(\n$result\n)) {\n\n/* get fieldpointer offset */\n\n$currentfield\n=\nmysqli_field_tell\n(\n$result\n);\n\nprintf\n(\n\"Column %d:\\n\"\n,\n$currentfield\n);\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n    }\n\nmysqli_free_result\n(\n$result\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n/* Get field information for all columns */\n\nwhile (\n$finfo\n=\n$result\n->\nfetch_field\n()) {\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n    }\n\n$result\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n/* Get field information for all fields */\n\nwhile (\n$finfo\n=\nmysqli_fetch_field\n(\n$result\n)) {\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n    }\n\nmysqli_free_result\n(\n$result\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5\"\n;\nif (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n/* Get field information for column 'SurfaceArea' */\n\n$finfo\n=\n$result\n->\nfetch_field_direct\n(\n1\n);\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\"\n,\n$finfo\n->\ntype\n);\n\n$result\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5\"\n;\nif (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n/* Get field information for column 'SurfaceArea' */\n\n$finfo\n=\nmysqli_fetch_field_direct\n(\n$result\n,\n1\n);\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\"\n,\n$finfo\n->\ntype\n);\n\nmysqli_free_result\n(\n$result\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"127.0.0.1\"\n,\n\"root\"\n,\n\"foofoo\"\n,\n\"sakila\"\n);\n/* check connection */\nif (\n$mysqli\n->\nconnect_errno\n) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\n$mysqli\n->\nconnect_error\n);\n    exit();\n}\nforeach (array(\n'latin1'\n,\n'utf8'\n) as\n$charset\n) {\n\n// Set character set, to show its impact on some values (e.g., length in bytes)\n\n$mysqli\n->\nset_charset\n(\n$charset\n);\n\n$query\n=\n\"SELECT actor_id, last_name from actor ORDER BY actor_id\"\n;\n    echo\n\"======================\\n\"\n;\n    echo\n\"Character Set:\n$charset\n\\n\"\n;\n    echo\n\"======================\\n\"\n;\n\n    if (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n/* Get field information for all columns */\n\n$finfo\n=\n$result\n->\nfetch_fields\n();\n        foreach (\n$finfo\nas\n$val\n) {\n\nprintf\n(\n\"Name:      %s\\n\"\n,\n$val\n->\nname\n);\n\nprintf\n(\n\"Table:     %s\\n\"\n,\n$val\n->\ntable\n);\n\nprintf\n(\n\"Max. Len:  %d\\n\"\n,\n$val\n->\nmax_length\n);\n\nprintf\n(\n\"Length:    %d\\n\"\n,\n$val\n->\nlength\n);\n\nprintf\n(\n\"charsetnr: %d\\n\"\n,\n$val\n->\ncharsetnr\n);\n\nprintf\n(\n\"Flags:     %d\\n\"\n,\n$val\n->\nflags\n);\n\nprintf\n(\n\"Type:      %d\\n\\n\"\n,\n$val\n->\ntype\n);\n        }\n\n$result\n->\nfree\n();\n    }\n}\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"127.0.0.1\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"sakila\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\nforeach (array(\n'latin1'\n,\n'utf8'\n) as\n$charset\n) {\n\n// Set character set, to show its impact on some values (e.g., length in bytes)\n\nmysqli_set_charset\n(\n$link\n,\n$charset\n);\n\n$query\n=\n\"SELECT actor_id, last_name from actor ORDER BY actor_id\"\n;\n    echo\n\"======================\\n\"\n;\n    echo\n\"Character Set:\n$charset\n\\n\"\n;\n    echo\n\"======================\\n\"\n;\n    if (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n/* Get field information for all columns */\n\n$finfo\n=\nmysqli_fetch_fields\n(\n$result\n);\n        foreach (\n$finfo\nas\n$val\n) {\n\nprintf\n(\n\"Name:      %s\\n\"\n,\n$val\n->\nname\n);\n\nprintf\n(\n\"Table:     %s\\n\"\n,\n$val\n->\ntable\n);\n\nprintf\n(\n\"Max. Len:  %d\\n\"\n,\n$val\n->\nmax_length\n);\n\nprintf\n(\n\"Length:    %d\\n\"\n,\n$val\n->\nlength\n);\n\nprintf\n(\n\"charsetnr: %d\\n\"\n,\n$val\n->\ncharsetnr\n);\n\nprintf\n(\n\"Flags:     %d\\n\"\n,\n$val\n->\nflags\n);\n\nprintf\n(\n\"Type:      %d\\n\\n\"\n,\n$val\n->\ntype\n);\n        }\n\nmysqli_free_result\n(\n$result\n);\n    }\n}\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name, CountryCode, District, Population FROM City ORDER BY ID LIMIT 1\"\n);\n/* Get the number of fields in the result set */\n$field_cnt\n=\n$result\n->\nfield_count\n;\nprintf\n(\n\"Result set has %d fields.\\n\"\n,\n$field_cnt\n);"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$result\n=\nmysqli_query\n(\n$link\n,\n\"SELECT Name, CountryCode, District, Population FROM City ORDER BY ID LIMIT 1\"\n);\n/* Get the number of fields in the result set */\n$field_cnt\n=\nmysqli_num_fields\n(\n$result\n);\nprintf\n(\n\"Result set has %d fields.\\n\"\n,\n$field_cnt\n);"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n/* Get field information for 2nd column */\n\n$result\n->\nfield_seek\n(\n1\n);\n\n$finfo\n=\n$result\n->\nfetch_field\n();\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n\n$result\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\"\n;\nif (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n/* Get field information for 2nd column */\n\nmysqli_field_seek\n(\n$result\n,\n1\n);\n\n$finfo\n=\nmysqli_fetch_field\n(\n$result\n);\n\nprintf\n(\n\"Name:     %s\\n\"\n,\n$finfo\n->\nname\n);\n\nprintf\n(\n\"Table:    %s\\n\"\n,\n$finfo\n->\ntable\n);\n\nprintf\n(\n\"max. Len: %d\\n\"\n,\n$finfo\n->\nmax_length\n);\n\nprintf\n(\n\"Flags:    %d\\n\"\n,\n$finfo\n->\nflags\n);\n\nprintf\n(\n\"Type:     %d\\n\\n\"\n,\n$finfo\n->\ntype\n);\n\nmysqli_free_result\n(\n$result\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT * from Country ORDER BY Code LIMIT 1\"\n;\nif (\n$result\n=\n$mysqli\n->\nquery\n(\n$query\n)) {\n\n$row\n=\n$result\n->\nfetch_row\n();\n\n/* display column lengths */\n\nforeach (\n$result\n->\nlengths\nas\n$i\n=>\n$val\n) {\n\nprintf\n(\n\"Field %2d has Length %2d\\n\"\n,\n$i\n+\n1\n,\n$val\n);\n    }\n\n$result\n->\nclose\n();\n}\n/* close connection */\n$mysqli\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n/* check connection */\nif (\nmysqli_connect_errno\n()) {\n\nprintf\n(\n\"Connect failed: %s\\n\"\n,\nmysqli_connect_error\n());\n    exit();\n}\n$query\n=\n\"SELECT * from Country ORDER BY Code LIMIT 1\"\n;\nif (\n$result\n=\nmysqli_query\n(\n$link\n,\n$query\n)) {\n\n$row\n=\nmysqli_fetch_row\n(\n$result\n);\n\n/* display column lengths */\n\nforeach (\nmysqli_fetch_lengths\n(\n$result\n) as\n$i\n=>\n$val\n) {\n\nprintf\n(\n\"Field %2d has Length %2d\\n\"\n,\n$i\n+\n1\n,\n$val\n);\n    }\n\nmysqli_free_result\n(\n$result\n);\n}\n/* close connection */\nmysqli_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Code, Name FROM Country ORDER BY Name\"\n);\n/* Get the number of rows in the result set */\n$row_cnt\n=\n$result\n->\nnum_rows\n;\nprintf\n(\n\"Result set has %d rows.\\n\"\n,\n$row_cnt\n);"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"world\"\n);\n$result\n=\nmysqli_query\n(\n$link\n,\n\"SELECT Code, Name FROM Country ORDER BY Name\"\n);\n/* Get the number of rows in the result set */\n$row_cnt\n=\nmysqli_num_rows\n(\n$result\n);\nprintf\n(\n\"Result set has %d rows.\\n\"\n,\n$row_cnt\n);"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* activate reporting */\n$driver\n= new\nmysqli_driver\n();\n$driver\n->\nreport_mode\n=\nMYSQLI_REPORT_ALL\n;\ntry {\n\n/* if the connection fails, a mysqli_sql_exception will be thrown */\n\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"my_db\"\n);\n\n/* this query should report an error */\n\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name FROM Nonexistingtable WHERE population > 50000\"\n);\n\n/* this query should report a bad index if the column population doesn't have an index */\n\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name FROM City WHERE population > 50000\"\n);\n} catch (\nmysqli_sql_exception $e\n) {\n\nerror_log\n(\n$e\n->\n__toString\n());\n}"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* activate reporting */\nmysqli_report\n(\nMYSQLI_REPORT_ALL\n);\ntry {\n\n/* if the connection fails, a mysqli_sql_exception will be thrown */\n\n$link\n=\nmysqli_connect\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"my_db\"\n);\n\n/* this query should report an error */\n\n$result\n=\nmysqli_query\n(\n$link\n,\n\"SELECT Name FROM Nonexistingtable WHERE population > 50000\"\n);\n\n/* this query should report a bad index if the column population doesn't have an index */\n\n$result\n=\nmysqli_query\n(\n$link\n,\n\"SELECT Name FROM City WHERE population > 50000\"\n);\n} catch (\nmysqli_sql_exception $e\n) {\n\nerror_log\n(\n$e\n->\n__toString\n());\n}"
  },
  {
    "input": "Example #3 Error reporting except bad index errors",
    "output": "<?php\n/* activate reporting */\nmysqli_report\n(\nMYSQLI_REPORT_ERROR\n|\nMYSQLI_REPORT_STRICT\n);\ntry {\n\n/* if the connection fails, a mysqli_sql_exception will be thrown */\n\n$mysqli\n= new\nmysqli\n(\n\"localhost\"\n,\n\"my_user\"\n,\n\"my_password\"\n,\n\"my_db\"\n);\n\n/* this query should report an error */\n\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name FROM Nonexistingtable WHERE population > 50000\"\n);\n\n/* this WILL NOT report any errors even if index is not available */\n\n$result\n=\n$mysqli\n->\nquery\n(\n\"SELECT Name FROM City WHERE population > 50000\"\n);\n} catch (\nmysqli_sql_exception $e\n) {\n\nerror_log\n(\n$e\n->\n__toString\n());\n}"
  },
  {
    "input": "Example #1 A mysqli_get_client_stats() example",
    "output": "<?php\n$link\n=\nmysqli_connect\n();\nprint_r\n(\nmysqli_get_client_stats\n());\n?>"
  },
  {
    "input": "Example #1 Connecting to a MySQL Server",
    "output": "<?php\ntry {\n\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@host\"\n);\n} catch(\nException $e\n) {\n    die(\n\"Connection could not be established: \"\n.\n$e\n->\ngetMessage\n());\n}\n\n// ... use $session\n?>"
  },
  {
    "input": "Example #2 Creating a Schema and Collection on the MySQL Server",
    "output": "<?php\n$schema\n=\n$session\n->\ncreateSchema\n(\n\"test\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"example\"\n);\n?>"
  },
  {
    "input": "Example #3 Storing and Retrieving Data",
    "output": "<?php\n$marco\n= [\n\n\"name\"\n=>\n\"Marco\"\n,\n\n\"age\"\n=>\n19\n,\n\n\"job\"\n=>\n\"Programmer\"\n];\n$mike\n= [\n\n\"name\"\n=>\n\"Mike\"\n,\n\n\"age\"\n=>\n39\n,\n\n\"job\"\n=>\n\"Manager\"\n];\n$schema\n=\n$session\n->\ngetSchema\n(\n\"test\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"example\"\n);\n$collection\n->\nadd\n(\n$marco\n,\n$mike\n)->\nexecute\n();\nvar_dump\n(\n$collection\n->\nfind\n(\n\"name = 'Mike'\"\n)->\nexecute\n()->\nfetchOne\n());\n?>"
  },
  {
    "input": "Example #4 Fetching and Iterating Multiple Documents",
    "output": "<?php\n$result\n=\n$collection\n->\nfind\n()->\nexecute\n();\nforeach (\n$result\nas\n$doc\n) {\n  echo\n\"\n{\n$doc\n[\n\"name\"\n]}\n is a\n{\n$doc\n[\n\"job\"\n]}\n.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Expression() example",
    "output": "<?php\n$expression\n=\nmysql_xdevapi\\Expression\n(\n\"[age,job]\"\n);\n$res\n=\n$coll\n->\nfind\n(\n\"age > 30\"\n)->\nfields\n(\n$expression\n)->\nlimit\n(\n3\n)->\nexecute\n();\n$data\n=\n$res\n->\nfetchAll\n();\nprint_r\n(\n$data\n);\n?>"
  },
  {
    "input": "Example #1 URI examples",
    "output": "mysqlx://foobar\nmysqlx://root@localhost?socket=%2Ftmp%2Fmysqld.sock%2F\nmysqlx://foo:bar@localhost:33060\nmysqlx://foo:bar@localhost:33160?ssl-mode=disabled\nmysqlx://foo:bar@localhost:33260?ssl-mode=required\nmysqlx://foo:bar@localhost:33360?ssl-mode=required&auth=mysql41\nmysqlx://foo:bar@(/path/to/socket)\nmysqlx://foo:bar@(/path/to/socket)?auth=sha256_mem\nmysqlx://foo:bar@[localhost:33060, 127.0.0.1:33061]\nmysqlx://foobar?ssl-ca=(/path/to/ca.pem)&ssl-crl=(/path/to/crl.pem)\nmysqlx://foo:bar@[localhost:33060, 127.0.0.1:33061]?ssl-mode=disabled\nmysqlx://foo:bar@localhost:33160/?connect-timeout=0\nmysqlx://foo:bar@localhost:33160/?connect-timeout=10&compression=required\nmysqlx://foo:bar@localhost:33160/?connect-timeout=10&compression=required&compression-algorithms=[lz4,zstd_stream]"
  },
  {
    "input": "Example #2 mysql_xdevapi\\getSession() example",
    "output": "<?php\ntry {\n\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@host\"\n);\n} catch(\nException $e\n) {\n    die(\n\"Connection could not be established: \"\n.\n$e\n->\ngetMessage\n());\n}\n$schemas\n=\n$session\n->\ngetSchemas\n();\nprint_r\n(\n$schemas\n);\n$mysql_version\n=\n$session\n->\ngetServerVersion\n();\nprint_r\n(\n$mysql_version\n);\nvar_dump\n(\n$collection\n->\nfind\n(\n\"name = 'Alfred'\"\n)->\nexecute\n()->\nfetchOne\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarnings() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\n$warnings\n=\n$res\n->\ngetWarnings\n();\nprint_r\n(\n$warnings\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarningsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\necho\n$res\n->\ngetWarningsCount\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Client::__construct() example",
    "output": "<?php\n$pooling_options\n=\n'{\n  \"enabled\": true,\n    \"maxSize\": 10,\n    \"maxIdleTime\": 3600,\n    \"queueTimeOut\": 1000\n}'\n;\n$client\n=\nmysql_xdevapi\\getClient\n(\n$connection_uri\n,\n$pooling_options\n);\n$session\n=\n$client\n->\ngetSession\n();"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::add() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Add two documents\n$collection\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n// Add two documents using a single JSON object\n$result\n=\n$collection\n->\nadd\n(\n\n'{\"name\": \"Bernie\",\n    \"jobs\": [{\"title\":\"Cat Herder\",\"Salary\":42000}, {\"title\":\"Father\",\"Salary\":0}],\n    \"hobbies\": [\"Sports\",\"Making cupcakes\"]}'\n,\n\n'{\"name\": \"Jane\",\n    \"jobs\": [{\"title\":\"Scientist\",\"Salary\":18000}, {\"title\":\"Mother\",\"Salary\":0}],\n    \"hobbies\": [\"Walking\",\"Making pies\"]}'\n)->\nexecute\n();\n// Fetch a list of generated ID's from the last add()\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\nprint_r\n(\n$ids\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::addOrReplaceOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Using add()\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n// Using addOrReplaceOne()\n// Note: we're passing in a known _id value here\n$result\n=\n$collection\n->\naddOrReplaceOne\n(\n'00005b6b53610000000000000056'\n,\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::getOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// A unique _id is (by default, and recommended) generated by MySQL Server\n// This retrieves the generated _id's; only one in this example, so $ids[0]\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\n$alfreds_id\n=\n$ids\n[\n0\n];\n// ...\nprint_r\n(\n$alfreds_id\n);\nprint_r\n(\n$collection\n->\ngetOne\n(\n$alfreds_id\n));\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::count() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\": \"Bernie\",\n    \"jobs\": [\n      {\"title\":\"Cat Herder\",\"Salary\":42000},\n      {\"title\":\"Father\",\"Salary\":0}\n    ],\n    \"hobbies\": [\"Sports\",\"Making cupcakes\"]}'\n,\n\n'{\"name\": \"Jane\",\n    \"jobs\": [\n      {\"title\":\"Scientist\",\"Salary\":18000},\n      {\"title\":\"Mother\",\"Salary\":0}\n    ],\n    \"hobbies\": [\"Walking\",\"Making pies\"]}'\n)\n  ->\nexecute\n();\nvar_dump\n(\n$collection\n->\ncount\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::createIndex() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n// Creating a text index\n$collection\n->\ncreateIndex\n(\n\n'myindex1'\n,\n\n'{\"fields\": [{\n    \"field\": \"$.name\",\n    \"type\": \"TEXT(25)\",\n    \"required\": true}],\n    \"unique\": false}'\n);\n// A spatial index\n$collection\n->\ncreateIndex\n(\n\n'myindex2'\n,\n\n'{\"fields\": [{\n    \"field\": \"$.home\",\n    \"type\": \"GEOJSON\",\n    \"required\": true}],\n    \"type\": \"SPATIAL\"}'\n);\n// Index with multiple fields\n$collection\n->\ncreateIndex\n(\n\n'myindex3'\n,\n\n'{\"fields\": [\n    {\n      \"field\": \"$.name\",\n      \"type\": \"TEXT(20)\",\n      \"required\": true\n    },\n    {\n      \"field\": \"$.age\",\n      \"type\": \"INTEGER\"\n    },\n    {\n      \"field\": \"$.job\",\n      \"type\": \"TEXT(30)\",\n      \"required\": false\n    }\n  ],\n  \"unique\": true\n  }'\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::dropIndex() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$collection\n->\ncreateIndex\n(\n\n'myindex'\n,\n\n'{\"fields\": [{\"field\": \"$.name\", \"type\": \"TEXT(25)\", \"required\": true}], \"unique\": false}'\n);\n// ...\nif (\n$collection\n->\ndropIndex\n(\n'myindex'\n)) {\n    echo\n\"An index named 'myindex' was found, and dropped.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::existsInDatabase() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// ...\nif (!\n$collection\n->\nexistsInDatabase\n()) {\n    echo\n\"The collection no longer exists in the database named addressbook. What happened?\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::find() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\",     \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Bob\",        \"age\": 19, \"job\": \"Swimmer\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Fred\",       \"age\": 20, \"job\": \"Construction\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Wilma\",      \"age\": 21, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Suki\",       \"age\": 22, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$find\n=\n$collection\n->\nfind\n(\n'job LIKE :job AND age > :age'\n);\n$result\n=\n$find\n\n->\nbind\n([\n'job'\n=>\n'Teacher'\n,\n'age'\n=>\n20\n])\n  ->\nsort\n(\n'age DESC'\n)\n  ->\nlimit\n(\n2\n)\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::getName() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n// ...\nvar_dump\n(\n$collection\n->\ngetName\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::getOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// A unique _id is (by default, and recommended) generated by MySQL Server\n// This retrieves the generated _id's; only one in this example, so $ids[0]\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\n$alfreds_id\n=\n$ids\n[\n0\n];\n// ...\nprint_r\n(\n$alfreds_id\n);\nprint_r\n(\n$collection\n->\ngetOne\n(\n$alfreds_id\n));\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::getSchema() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\nvar_dump\n(\n$collection\n->\ngetSchema\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::getSession() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n// ...\n$newsession\n=\n$collection\n->\ngetSession\n();\nvar_dump\n(\n$session\n);\nvar_dump\n(\n$newsession\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::modify() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Bob\",    \"age\": 19, \"job\": \"Painter\"}'\n)->\nexecute\n();\n// Add two new jobs for all Painters: Artist and Crafter\n$collection\n\n->\nmodify\n(\n\"job in ('Butler', 'Painter')\"\n)\n  ->\narrayAppend\n(\n'job'\n,\n'Artist'\n)\n  ->\narrayAppend\n(\n'job'\n,\n'Crafter'\n)\n  ->\nexecute\n();\n// Remove the 'beer' field from all documents with the age 21\n$collection\n\n->\nmodify\n(\n'age < 21'\n)\n  ->\nunset\n([\n'beer'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::remove() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Bob\",    \"age\": 19, \"job\": \"Painter\"}'\n)->\nexecute\n();\n// Remove all painters\n$collection\n\n->\nremove\n(\n\"job in ('Painter')\"\n)\n  ->\nexecute\n();\n// Remove the oldest butler\n$collection\n\n->\nremove\n(\n\"job in ('Butler')\"\n)\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n// Remove record with highest age\n$collection\n\n->\nremove\n(\n'true'\n)\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::removeOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// Normally the _id is known by other means,\n// but for this example let's fetch the generated id and use it\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\n$alfred_id\n=\n$ids\n[\n0\n];\n$result\n=\n$collection\n->\nremoveOne\n(\n$alfred_id\n);\nif(!\n$result\n->\ngetAffectedItemsCount\n()) {\n    echo\n\"Alfred with id\n$alfred_id\n was not removed.\"\n;\n} else {\n    echo\n\"Goodbye, Alfred, you can take _id\n$alfred_id\n with you.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::replaceOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// Normally the _id is known by other means,\n// but for this example let's fetch the generated id and use it\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\n$alfred_id\n=\n$ids\n[\n0\n];\n// ...\n$alfred\n=\n$collection\n->\ngetOne\n(\n$alfred_id\n);\n$alfred\n[\n'age'\n] =\n81\n;\n$alfred\n[\n'job'\n] =\n'Guru'\n;\n$collection\n->\nreplaceOne\n(\n$alfred_id\n,\n$alfred\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionAdd::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Add two documents\n$collection\n\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)\n  ->\nexecute\n();\n// Add two documents using a single JSON object\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\": \"Bernie\",\n      \"jobs\": [{\"title\":\"Cat Herder\",\"Salary\":42000}, {\"title\":\"Father\",\"Salary\":0}],\n      \"hobbies\": [\"Sports\",\"Making cupcakes\"]}'\n,\n\n'{\"name\": \"Jane\",\n      \"jobs\": [{\"title\":\"Scientist\",\"Salary\":18000}, {\"title\":\"Mother\",\"Salary\":0}],\n      \"hobbies\": [\"Walking\",\"Making pies\"]}'\n)\n  ->\nexecute\n();\n// Fetch a list of generated ID's from the last add()\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\nprint_r\n(\n$ids\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionAdd::execute() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Add two documents\n$collection\n\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)\n  ->\nexecute\n();\n// Add two documents using a single JSON object\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\": \"Bernie\",\n      \"jobs\": [{\"title\":\"Cat Herder\",\"Salary\":42000}, {\"title\":\"Father\",\"Salary\":0}],\n      \"hobbies\": [\"Sports\",\"Making cupcakes\"]}'\n,\n\n'{\"name\": \"Jane\",\n      \"jobs\": [{\"title\":\"Scientist\",\"Salary\":18000}, {\"title\":\"Mother\",\"Salary\":0}],\n      \"hobbies\": [\"Walking\",\"Making pies\"]}'\n)\n  ->\nexecute\n();\n// Fetch a list of generated ID's from the last add()\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\nprint_r\n(\n$ids\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::bind() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 CollectionFind example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 CollectionFind example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::fields() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nfields\n(\n'name'\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::groupBy() example",
    "output": "<?php\n// Assuming $coll is a valid Collection object\n// Extract all the documents from the Collection and group the results by the 'name' field\n$res\n=\n$coll\n->\nfind\n()->\ngroupBy\n(\n'name'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::having() example",
    "output": "<?php\n//Assuming $coll is a valid Collection object\n//Find all the documents for which the 'age' is greather than 40,\n//Only the columns 'name' and 'age' are returned in the Result object\n$res\n=\n$coll\n->\nfind\n()->\nfields\n([\n'name'\n,\n'age'\n])->\nhaving\n(\n'age > 40'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::limit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n$create\n\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::lockExclusive() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$session\n->\nstartTransaction\n();\n$result\n=\n$collection\n\n->\nfind\n(\n\"age > 50\"\n)\n  ->\nlockExclusive\n()\n  ->\nexecute\n();\n// ... do an operation on the object\n// Complete the transaction and unlock the document\n$session\n->\ncommit\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::lockShared() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$session\n->\nstartTransaction\n();\n$result\n=\n$collection\n\n->\nfind\n(\n\"age > 50\"\n)\n  ->\nlockShared\n()\n  ->\nexecute\n();\n// ... read the object in shared mode\n// Complete the transaction and unlock the document\n$session\n->\ncommit\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::offset() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n$create\n\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nsort\n(\n'age asc'\n)\n  ->\noffset\n(\n1\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionFind::sort() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n$create\n\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)\n  ->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nsort\n(\n'job desc'\n,\n'age asc'\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::arrayAppend() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name in ('Bernie', 'Jane')\"\n)\n  ->\narrayAppend\n(\n'traits'\n,\n'Happy'\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::arrayInsert() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name in ('Bernie', 'Jane')\"\n)\n  ->\narrayInsert\n(\n'traits[1]'\n,\n'Happy'\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::bind() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'Bernie'\n])\n  ->\narrayAppend\n(\n'traits'\n,\n'Happy'\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name in ('Bernie', 'Jane')\"\n)\n  ->\narrayAppend\n(\n'traits'\n,\n'Happy'\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::execute() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::limit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Betty\", \"age\": 24, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"job = :job\"\n)\n  ->\nbind\n([\n'job'\n=>\n'Teacher'\n])\n  ->\nset\n(\n'job'\n,\n'Principal'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::patch() example",
    "output": "<?php\n$res\n=\n$coll\n->\nmodify\n(\n'\"Programmatore\" IN job'\n)->\npatch\n(\n'{\"Hobby\" : \"Programmare\"}'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::replace() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'Bernie'\n])\n  ->\nreplace\n(\n\"name\"\n,\n\"Bern\"\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::set() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n\n->\nadd\n(\n\n'{\"name\":   \"Bernie\",\n    \"traits\": [\"Friend\", \"Brother\", \"Human\"]}'\n)\n  ->\nexecute\n();\n$collection\n\n->\nmodify\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'Bernie'\n])\n  ->\nset\n(\n\"name\"\n,\n\"Bern\"\n)\n  ->\nexecute\n();\n$result\n=\n$collection\n\n->\nfind\n()\n  ->\nexecute\n();\nprint_r\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::skip() example",
    "output": "<?php\n$coll\n->\nmodify\n(\n'age > :age'\n)->\nsort\n(\n'age desc'\n)->\nunset\n([\n'age'\n])->\nbind\n([\n'age'\n=>\n20\n])->\nlimit\n(\n4\n)->\nskip\n(\n1\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::sort() example",
    "output": "<?php\n$res\n=\n$coll\n->\nmodify\n(\n'true'\n)->\nsort\n(\n'name desc'\n,\n'age asc'\n)->\nlimit\n(\n4\n)->\nset\n(\n'Married'\n,\n'NO'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionModify::unset() example",
    "output": "<?php\n$res\n=\n$coll\n->\nmodify\n(\n'job like :job_name'\n)->\nunset\n([\n\"age\"\n,\n\"name\"\n])->\nbind\n([\n'job_name'\n=>\n'Plumber'\n])->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionRemove::bind() example",
    "output": "<?php\n$res\n=\n$coll\n->\nremove\n(\n'age > :age_from and age < :age_to'\n)->\nbind\n([\n'age_from'\n=>\n20\n,\n'age_to'\n=>\n50\n])->\nlimit\n(\n7\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Collection::remove() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$collection\n->\nadd\n(\n'{\"name\": \"Bob\",    \"age\": 19, \"job\": \"Painter\"}'\n)->\nexecute\n();\n// Remove all painters\n$collection\n\n->\nremove\n(\n\"job in ('Painter')\"\n)\n  ->\nexecute\n();\n// Remove the oldest butler\n$collection\n\n->\nremove\n(\n\"job in ('Butler')\"\n)\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n// Remove record with lowest age\n$collection\n\n->\nremove\n(\n'true'\n)\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionRemove::execute() example",
    "output": "<?php\n$res\n=\n$coll\n->\nremove\n(\n'true'\n)->\nsort\n(\n'age desc'\n)->\nlimit\n(\n2\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionRemove::limit() example",
    "output": "<?php\n$res\n=\n$coll\n->\nremove\n(\n'job in (\\'Barista\\', \\'Programmatore\\', \\'Ballerino\\', \\'Programmatrice\\')'\n)->\nlimit\n(\n5\n)->\nsort\n([\n'age desc'\n,\n'name asc'\n])->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CollectionRemove::sort() example",
    "output": "<?php\n$res\n=\n$coll\n->\nremove\n(\n'true'\n)->\nsort\n(\n'age desc'\n)->\nlimit\n(\n2\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS nonsense\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE nonsense\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE nonsense.numbers (hello int, world float unsigned)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO  nonsense.numbers values (42, 42)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"nonsense\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"numbers\"\n);\n$result1\n=\n$table\n->\nselect\n(\n'hello'\n,\n'world'\n)->\nexecute\n();\n// Returns an array of ColumnResult objects\n$columns\n=\n$result1\n->\ngetColumns\n();\nforeach (\n$columns\nas\n$column\n) {\n    echo\n\"\\nColumn label \"\n,\n$column\n->\ngetColumnLabel\n();\n    echo\n\" is type \"\n,\n$column\n->\ngetType\n();\n    echo\n\" and is \"\n, (\n$column\n->\nisNumberSigned\n() ===\n0\n) ?\n\"unsigned.\"\n:\n\"signed.\"\n;\n}\n// Alternatively\n$result2\n=\n$session\n->\nsql\n(\n\"SELECT * FROM nonsense.numbers\"\n)->\nexecute\n();\n// Returns an array of FieldMetadata objects\nprint_r\n(\n$result2\n->\ngetColumns\n());"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getCharacterSetName() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getCollationName() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getColumnLabel() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getColumnName() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getFractionalDigits() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getLength() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getSchemaName() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getTableLabel() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getTableName() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::getType() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::isNumberSigned() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ColumnResult::isPadded() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CrudOperationBindable::bind() example",
    "output": "<?php\n$res\n=\n$coll\n->\nmodify\n(\n'name like :name'\n)->\narrayInsert\n(\n'job[0]'\n,\n'Calciatore'\n)->\nbind\n([\n'name'\n=>\n'ENTITY'\n])->\nexecute\n();\n$res\n=\n$table\n->\ndelete\n()->\norderby\n(\n'age desc'\n)->\nwhere\n(\n'age < 20 and age > 12 and name != :name'\n)->\nbind\n([\n'name'\n=>\n'Tierney'\n])->\nlimit\n(\n2\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CrudOperationLimitable::limit() example",
    "output": "<?php\n$res\n=\n$coll\n->\nfind\n()->\nfields\n([\n'name as n'\n,\n'age as a'\n,\n'job as j'\n])->\ngroupBy\n(\n'j'\n)->\nlimit\n(\n11\n)->\nexecute\n();\n$res\n=\n$table\n->\nupdate\n()->\nset\n(\n'age'\n,\n69\n)->\nwhere\n(\n'age > 15 and age < 22'\n)->\nlimit\n(\n4\n)->\norderby\n([\n'age asc'\n,\n'name desc'\n])->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CrudOperationSkippable::skip() example",
    "output": "<?php\n$res\n=\n$coll\n->\nfind\n(\n'job like \\'Programmatore\\''\n)->\nlimit\n(\n1\n)->\nskip\n(\n3\n)->\nsort\n(\n'age asc'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\CrudOperationSortable::sort() example",
    "output": "<?php\n$res\n=\n$coll\n->\nfind\n(\n'job like \\'Cavia\\''\n)->\nsort\n(\n'age desc'\n,\n'_id desc'\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DatabaseObject::existsInDatabase() example",
    "output": "<?php\n$existInDb\n=\n$dbObj\n->\nexistsInDatabase\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DatabaseObject::getName() example",
    "output": "<?php\n$dbObjName\n=\n$dbObj\n->\ngetName\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DatabaseObject::getSession() example",
    "output": "<?php\n$session\n=\n$dbObj\n->\ngetSession\n();\n?>"
  },
  {
    "input": "Example #1 A DocResult example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$create\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Yields a DocResult object\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DocResult::fetchAll() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$create\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Yields a DocResult object\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DocResult::fetchOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$create\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Yields a DocResult object\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchOne\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DocResult::getWarnings() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$create\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Yields a DocResult object\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nexecute\n();\nif (!\n$result\n->\ngetWarningsCount\n()) {\n    echo\n\"There was an error:\\n\"\n;\n\nprint_r\n(\n$result\n->\ngetWarnings\n());\n    exit;\n}\nvar_dump\n(\n$result\n->\nfetchOne\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\DocResult::getWarningsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$create\n->\nadd\n(\n'{\"name\": \"Alfred\", \"age\": 18, \"job\": \"Butler\"}'\n)->\nexecute\n();\n$create\n->\nadd\n(\n'{\"name\": \"Reginald\", \"age\": 42, \"job\": \"Butler\"}'\n)->\nexecute\n();\n// ...\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n// Yields a DocResult object\n$result\n=\n$collection\n\n->\nfind\n(\n'job like :job and age > :age'\n)\n  ->\nbind\n([\n'job'\n=>\n'Butler'\n,\n'age'\n=>\n16\n])\n  ->\nsort\n(\n'age desc'\n)\n  ->\nexecute\n();\nif (!\n$result\n->\ngetWarningsCount\n()) {\n    echo\n\"There was an error:\\n\"\n;\n\nprint_r\n(\n$result\n->\ngetWarnings\n());\n    exit;\n}\nvar_dump\n(\n$result\n->\nfetchOne\n());\n?>"
  },
  {
    "input": "Example #1 execute() examples",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$result_sql\n=\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\nvar_dump\n(\n$result_sql\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collection\n=\n$schema\n->\ncreateCollection\n(\n\"humans\"\n);\n$result_collection\n=\n$collection\n->\nadd\n(\n\n'{\"name\": \"Jane\",\n    \"jobs\": [{\"title\":\"Scientist\",\"Salary\":18000}, {\"title\":\"Mother\",\"Salary\":0}],\n    \"hobbies\": [\"Walking\",\"Making pies\"]}'\n);\n$result_collection_executed\n=\n$result_collection\n->\nexecute\n();\nvar_dump\n(\n$result_collection\n);\nvar_dump\n(\n$result_collection_executed\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\ExecutionStatus::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Expression::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Result::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"\n  CREATE TABLE addressbook.names\n    (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(30), age INT, PRIMARY KEY (id))\n  \"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])->\nexecute\n();\n$result\n=\n$table\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)->\nvalues\n([\n\"Suki\"\n,\n34\n])->\nexecute\n();\n$ai\n=\n$result\n->\ngetAutoIncrementValue\n();\nvar_dump\n(\n$ai\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Result::getAffectedItemsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\nvar_dump\n(\n$res\n->\ngetAffectedItemsCount\n() );\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Result::getAutoIncrementValue() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"\n  CREATE TABLE addressbook.names\n    (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(30), age INT, PRIMARY KEY (id))\n  \"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])->\nexecute\n();\n$result\n=\n$table\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)->\nvalues\n([\n\"Suki\"\n,\n34\n])->\nexecute\n();\n$ai\n=\n$result\n->\ngetAutoIncrementValue\n();\nvar_dump\n(\n$ai\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Result::getGeneratedIds() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$create\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\n$result\n=\n$collection\n->\nadd\n(\n\n'{\"name\": \"Bernie\",\n    \"jobs\": [{\"title\":\"Cat Herder\",\"Salary\":42000}, {\"title\":\"Father\",\"Salary\":0}],\n    \"hobbies\": [\"Sports\",\"Making cupcakes\"]}'\n,\n\n'{\"name\": \"Jane\",\n    \"jobs\": [{\"title\":\"Scientist\",\"Salary\":18000}, {\"title\":\"Mother\",\"Salary\":0}],\n    \"hobbies\": [\"Walking\",\"Making pies\"]}'\n)->\nexecute\n();\n$ids\n=\n$result\n->\ngetGeneratedIds\n();\nvar_dump\n(\n$ids\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarnings() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\n$warnings\n=\n$res\n->\ngetWarnings\n();\nprint_r\n(\n$warnings\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarningsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\necho\n$res\n->\ngetWarningsCount\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$row\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)->\nwhere\n(\n'age > 18'\n)->\nexecute\n()->\nfetchAll\n();\nprint_r\n(\n$row\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::fetchAll() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$row\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)->\nexecute\n()->\nfetchAll\n();\nprint_r\n(\n$row\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::fetchOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$row\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)->\nwhere\n(\n'age < 40'\n)->\nexecute\n()->\nfetchOne\n();\nprint_r\n(\n$row\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getColumnsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$sql\n=\n$session\n->\nsql\n(\n\"SELECT * from addressbook.names\"\n)->\nexecute\n();\necho\n$sql\n->\ngetColumnsCount\n();"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getColumnNames() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$sql\n=\n$session\n->\nsql\n(\n\"SELECT * from addressbook.names\"\n)->\nexecute\n();\n$colnames\n=\n$sql\n->\ngetColumnNames\n();\n\nprint_r\n(\n$colnames\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getColumns() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$sql\n=\n$session\n->\nsql\n(\n\"SELECT * from addressbook.names\"\n)->\nexecute\n();\n$cols\n=\n$sql\n->\ngetColumns\n();\n\nprint_r\n(\n$cols\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarnings() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\n$warnings\n=\n$res\n->\ngetWarnings\n();\nprint_r\n(\n$warnings\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\RowResult::getWarningsCount() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE foo\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE foo.test_table(x int)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"foo\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"test_table\"\n);\n$table\n->\ninsert\n([\n'x'\n])->\nvalues\n([\n1\n])->\nvalues\n([\n2\n])->\nexecute\n();\n$res\n=\n$table\n->\nselect\n([\n'x/0 as bad_x'\n])->\nexecute\n();\necho\n$res\n->\ngetWarningsCount\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE food.fruit(name text, rating text)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"food\"\n);\n$schema\n->\ncreateCollection\n(\n\"trees\"\n);\nprint_r\n(\n$schema\n->\ngettables\n());\nprint_r\n(\n$schema\n->\ngetcollections\n());"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::createCollection() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE food.fruit(name text, rating text)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"food\"\n);\n$schema\n->\ncreateCollection\n(\n\"trees\"\n);\nprint_r\n(\n$schema\n->\ngettables\n());\nprint_r\n(\n$schema\n->\ngetcollections\n());"
  },
  {
    "input": "Example #2 mysql_xdevapi\\Schema::createCollection() example",
    "output": "<?php\n $collection\n=\n$schema\n->\ncreateCollection\n(\n\"mycollection\"\n,\n'{\n    \"validation\": {\n        \"level\": \"strict\",\n        \"schema\": {\n            \"id\": \"http://json-schema.org/geo\",\n            \"description\": \"A geographical coordinate\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"latitude\": {\n                    \"type\": \"number\"\n                },\n                \"longitude\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\"latitude\", \"longitude\"]\n        }\n    }\n}'\n);\n// Succeeds\n$collection\n->\nadd\n(\n'{\"latitude\": 10, \"longitude\": 20}'\n)->\nexecute\n();\n// Fails, invalid types (not numbers)\n$collection\n->\nadd\n(\n'{\"latitude\": \"lat\", \"longitude\": \"long\"}'\n)->\nexecute\n();"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::dropCollection() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE food.fruit(name text, rating text)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"food\"\n);\n$schema\n->\ncreateCollection\n(\n\"trees\"\n);\n$schema\n->\ndropCollection\n(\n\"trees\"\n);\n$schema\n->\ncreateCollection\n(\n\"buildings\"\n);\nprint_r\n(\n$schema\n->\ngettables\n());\nprint_r\n(\n$schema\n->\ngetcollections\n());"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::existsInDatabase() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE food.fruit(name text, rating text)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"food\"\n);\n$schema\n->\ncreateCollection\n(\n\"trees\"\n);\n// ...\n$trees\n=\n$schema\n->\ngetCollection\n(\n\"trees\"\n);\n// ...\n// Is this collection still in the database (schema)?\nif (\n$trees\n->\nexistsInDatabase\n()) {\n    echo\n\"Yes, the 'trees' collection is still present.\"\n;\n}"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getCollection() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS food\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE food\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"food\"\n);\n$schema\n->\ncreateCollection\n(\n\"trees\"\n);\n// ...\n$trees\n=\n$schema\n->\ngetCollection\n(\n\"trees\"\n);\nvar_dump\n(\n$trees\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getCollectionAsTable() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collect\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collect\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)->\nexecute\n();\n$collect\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$table\n=\n$schema\n->\ngetCollectionAsTable\n(\n\"people\"\n);\n$collection\n=\n$schema\n->\ngetCollection\n(\n\"people\"\n);\nvar_dump\n(\n$table\n);\nvar_dump\n(\n$collection\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getCollections() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$collect\n=\n$schema\n->\ncreateCollection\n(\n\"people\"\n);\n$collect\n->\nadd\n(\n'{\"name\": \"Fred\",  \"age\": 21, \"job\": \"Construction\"}'\n)->\nexecute\n();\n$collect\n->\nadd\n(\n'{\"name\": \"Wilma\", \"age\": 23, \"job\": \"Teacher\"}'\n)->\nexecute\n();\n$collections\n=\n$schema\n->\ngetCollections\n();\nvar_dump\n(\n$collections\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getName() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n// ...\nvar_dump\n(\n$schema\n->\ngetName\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getSession() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n// ...\n$newsession\n=\n$schema\n->\ngetSession\n();\nvar_dump\n(\n$session\n);\nvar_dump\n(\n$newsession\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getTable() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$row\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)->\nexecute\n()->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Schema::getTables() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.cities(name text, population int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('Portland', 639863), ('Seattle', 704352)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$tables\n=\n$schema\n->\ngetTables\n();\nvar_dump\n(\n$tables\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::getSchema() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\nprint_r\n(\n$schema\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::close() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$session\n->\nclose\n();"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::commit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"friends\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"John\":42, \"Sam\":33}'\n)->\nexecute\n();\n$savepoint\n=\n$session\n->\nsetSavepoint\n();\n$session\n->\ncommit\n();\n$session\n->\nclose\n();"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::createSchema() example",
    "output": "<?php\n$uri\n=\n'mysqlx://happyuser:password@127.0.0.1:33060/'\n;\n$sess\n=\nmysql_xdevapi\\getSession\n(\n$uri\n);\ntry {\n    if (\n$schema\n=\n$sess\n->\ncreateSchema\n(\n'fruit'\n)) {\n        echo\n\"Info: I created a schema named 'fruit'\\n\"\n;\n    }\n\n} catch (\nException $e\n) {\n   echo\n$e\n->\ngetMessage\n();\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::dropSchema() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\ndropSchema\n(\n\"addressbook\"\n);\n$session\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::generateUuid() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$uuid\n=\n$session\n->\ngenerateUuid\n();\nvar_dump\n(\n$uuid\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::getSchema() example",
    "output": "<?php\n$uri\n=\n\"mysqlx://testuser:testpasswd@localhost:33160/testx?ssl-mode=disabled\"\n;\n$session\n=\nmysql_xdevapi\\getSession\n(\n$uri\n);\n$schema\n=\n$session\n->\ngetDefaultSchema\n();\necho\n$schema\n;\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::getSchema() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\nprint_r\n(\n$schema\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::getSchemas() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schemas\n=\n$session\n->\ngetSchemas\n();\nprint_r\n(\n$schemas\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::getServerVersion() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$version\n=\n$session\n->\ngetServerVersion\n();\nvar_dump\n(\n$version\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::listClients() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$ids\n=\n$session\n->\nlistClients\n();\nvar_dump\n(\n$ids\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::quoteName() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$first\n=\n\"MySQL's test\"\n;\nvar_dump\n(\n$first\n);\nvar_dump\n(\n$session\n->\nquoteName\n(\n$first\n));\n$second\n=\n'Another `test` \"like\" `this`'\n;\nvar_dump\n(\n$second\n);\nvar_dump\n(\n$session\n->\nquoteName\n(\n$second\n));\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::releaseSavepoint() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"friends\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"test1\":1, \"test2\":2}'\n)->\nexecute\n();\n$savepoint\n=\n$session\n->\nsetSavepoint\n();\n$collection\n->\nadd\n(\n'{\"test3\":3, \"test4\":4}'\n)->\nexecute\n();\n$session\n->\nreleaseSavepoint\n(\n$savepoint\n);\n$session\n->\nrollback\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::rollback() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"names\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"test1\":1, \"test2\":2}'\n)->\nexecute\n();\n$savepoint\n=\n$session\n->\nsetSavepoint\n();\n$collection\n->\nadd\n(\n'{\"test3\":3, \"test4\":4}'\n)->\nexecute\n();\n$session\n->\nreleaseSavepoint\n(\n$savepoint\n);\n$session\n->\nrollback\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::rollbackTo() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"names\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"test1\":1, \"test2\":2}'\n)->\nexecute\n();\n$savepoint1\n=\n$session\n->\nsetSavepoint\n();\n$collection\n->\nadd\n(\n'{\"test3\":3, \"test4\":4}'\n)->\nexecute\n();\n$savepoint2\n=\n$session\n->\nsetSavepoint\n();\n$session\n->\nrollbackTo\n(\n$savepoint1\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::setSavepoint() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"names\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"test1\":1, \"test2\":2}'\n)->\nexecute\n();\n$savepoint\n=\n$session\n->\nsetSavepoint\n();\n$collection\n->\nadd\n(\n'{\"test3\":3, \"test4\":4}'\n)->\nexecute\n();\n$session\n->\nreleaseSavepoint\n(\n$savepoint\n);\n$session\n->\nrollback\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::sql() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Session::startTransaction() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$collection\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n)->\ngetCollection\n(\n\"friends\"\n);\n$session\n->\nstartTransaction\n();\n$collection\n->\nadd\n(\n'{\"test1\":1, \"test2\":2}'\n)->\nexecute\n();\n$savepoint\n=\n$session\n->\nsetSavepoint\n();\n$collection\n->\nadd\n(\n'{\"test3\":3, \"test4\":4}'\n)->\nexecute\n();\n$session\n->\nreleaseSavepoint\n(\n$savepoint\n);\n$session\n->\nrollback\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::bind() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::execute() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::getNextResult() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::getResult() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatement::hasMoreResults() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::fetchAll() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS dbtest\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE dbtest\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE dbtest.workers(name text, age int, job text)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO dbtest.workers values ('John', 42, 'bricklayer'), ('Sam', 33, 'carpenter')\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"dbtest\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"workers\"\n);\n$rows\n=\n$session\n->\nsql\n(\n\"SELECT * FROM dbtest.workers\"\n)->\nexecute\n()->\nfetchAll\n();\nprint_r\n(\n$rows\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::fetchOne() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS dbtest\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE dbtest\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE dbtest.workers(name text, age int, job text)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO dbtest.workers values ('John', 42, 'bricklayer'), ('Sam', 33, 'carpenter')\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"dbtest\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"workers\"\n);\n$rows\n=\n$session\n->\nsql\n(\n\"SELECT * FROM dbtest.workers\"\n)->\nexecute\n()->\nfetchOne\n();\nprint_r\n(\n$rows\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getAffectedItemsCount() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getColumnsCount() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getColumnNames() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getColumns() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getGeneratedIds() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getLastInsertId() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getWarnings() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::getWarningsCount() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::hasData() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\SqlStatementResult::nextResult() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Statement::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Statement::getNextResult() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Statement::getResult() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Statement::hasMoreResults() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::count() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nvar_dump\n(\n$table\n->\ncount\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::delete() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()->\nwhere\n(\n\"name = :name\"\n)->\norderby\n(\n\"age DESC\"\n)->\nlimit\n(\n1\n)->\nbind\n([\n'name'\n=>\n'John'\n])->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::existsInDatabase() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nif (\n$table\n->\nexistsInDatabase\n()) {\n  echo\n\"Yes, this table still exists in the session's schema.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::getName() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nvar_dump\n(\n$table\n->\ngetName\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::getSchema() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nvar_dump\n(\n$table\n->\ngetSchema\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::getSession() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nvar_dump\n(\n$table\n->\ngetSession\n());\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::insert() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)\n  ->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::isView() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\nif (\n$table\n->\nisView\n()) {\n    echo\n\"This is a view.\"\n;\n} else {\n    echo\n\"This is not a view.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::count() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$row\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)->\nexecute\n()->\nfetchAll\n();\nprint_r\n(\n$row\n);"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Table::update() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\nupdate\n()->\nset\n(\n'age'\n,\n34\n)->\nwhere\n(\n'name = \"Sam\"'\n)->\nlimit\n(\n1\n)->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::bind() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n])\n  ->\norderby\n(\n\"age DESC\"\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n])\n  ->\norderby\n(\n\"age DESC\"\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::execute() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n])\n  ->\norderby\n(\n\"age DESC\"\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::limit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"name = :name\"\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n])\n  ->\norderby\n(\n\"age DESC\"\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::orderBy() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"age = :age\"\n)\n  ->\nbind\n([\n'age'\n=>\n42\n])\n  ->\norderby\n(\n\"name DESC\"\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableDelete::where() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\ndelete\n()\n  ->\nwhere\n(\n\"id = :id\"\n)\n  ->\nbind\n([\n'id'\n=>\n42\n])\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableInsert::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)\n  ->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableInsert::execute() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)\n  ->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableInsert::values() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n\n->\ninsert\n(\n\"name\"\n,\n\"age\"\n)\n  ->\nvalues\n([\n\"Suzanne\"\n,\n31\n],[\n\"Julie\"\n,\n43\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::bind() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nwhere\n(\n'name like :name and age > :age'\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n,\n'age'\n=>\n42\n])\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 33)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nwhere\n(\n'name like :name and age > :age'\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n,\n'age'\n=>\n42\n])\n  ->\norderBy\n(\n'age desc'\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::execute() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nwhere\n(\n'name like :name and age > :age'\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n,\n'age'\n=>\n42\n])\n  ->\norderBy\n(\n'age desc'\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::groupBy() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 42)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('Suki', 31)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'count(*) as count'\n,\n'age'\n)\n  ->\ngroupBy\n(\n'age'\n)->\norderBy\n(\n'age asc'\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::having() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 42)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('Suki', 31)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'count(*) as count'\n,\n'age'\n)\n  ->\ngroupBy\n(\n'age'\n)->\norderBy\n(\n'age asc'\n)\n  ->\nhaving\n(\n'count > 1'\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::limit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nlimit\n(\n1\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::lockExclusive() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$session\n->\nstartTransaction\n();\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nlockExclusive\n(\nMYSQLX_LOCK_NOWAIT\n)\n  ->\nexecute\n();\n$session\n->\ncommit\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::lockShared() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$session\n->\nstartTransaction\n();\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nlockShared\n(\nMYSQLX_LOCK_NOWAIT\n)\n  ->\nexecute\n();\n$session\n->\ncommit\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::offset() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$session\n->\nsql\n(\n\"DROP DATABASE IF EXISTS addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE DATABASE addressbook\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"CREATE TABLE addressbook.names(name text, age int)\"\n)->\nexecute\n();\n$session\n->\nsql\n(\n\"INSERT INTO addressbook.names values ('John', 42), ('Sam', 42)\"\n)->\nexecute\n();\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nlimit\n(\n1\n)\n  ->\noffset\n(\n1\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::orderBy() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\norderBy\n(\n'name desc'\n)\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableSelect::where() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$result\n=\n$table\n->\nselect\n(\n'name'\n,\n'age'\n)\n  ->\nwhere\n(\n'name like :name and age > :age'\n)\n  ->\nbind\n([\n'name'\n=>\n'John'\n,\n'age'\n=>\n42\n])\n  ->\nexecute\n();\n$row\n=\n$result\n->\nfetchAll\n();\nprint_r\n(\n$row\n);\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::bind() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$table\n->\nupdate\n()\n  ->\nset\n(\n'status'\n,\n'admin'\n)\n  ->\nwhere\n(\n'name = :name and age > :age'\n)\n  ->\nbind\n([\n'name'\n=>\n'Bernie'\n,\n'age'\n=>\n2000\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::__construct() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::execute() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::limit() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::orderby() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::set() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\TableUpdate::where() example",
    "output": "<?php\n$session\n=\nmysql_xdevapi\\getSession\n(\n\"mysqlx://user:password@localhost\"\n);\n$schema\n=\n$session\n->\ngetSchema\n(\n\"addressbook\"\n);\n$table\n=\n$schema\n->\ngetTable\n(\n\"names\"\n);\n$res\n=\n$table\n->\nupdate\n()\n  ->\nset\n(\n'level'\n,\n3\n)\n  ->\nwhere\n(\n'age > 15 and age < 22'\n)\n  ->\nlimit\n(\n4\n)\n  ->\norderby\n([\n'age asc'\n,\n'name desc'\n])\n  ->\nexecute\n();\n?>"
  },
  {
    "input": "Example #1 mysql_xdevapi\\Warning::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 MySQL extension overview example",
    "output": "<?php\n// Connecting, selecting database\n$link\n=\nmysql_connect\n(\n'mysql_host'\n,\n'mysql_user'\n,\n'mysql_password'\n)\n    or die(\n'Could not connect: '\n.\nmysql_error\n());\necho\n'Connected successfully'\n;\nmysql_select_db\n(\n'my_database'\n) or die(\n'Could not select database'\n);\n// Performing SQL query\n$query\n=\n'SELECT * FROM my_table'\n;\n$result\n=\nmysql_query\n(\n$query\n) or die(\n'Query failed: '\n.\nmysql_error\n());\n// Printing results in HTML\necho\n\"<table>\\n\"\n;\nwhile (\n$line\n=\nmysql_fetch_array\n(\n$result\n,\nMYSQL_ASSOC\n)) {\n    echo\n\"\\t<tr>\\n\"\n;\n    foreach (\n$line\nas\n$col_value\n) {\n        echo\n\"\\t\\t<td>\n$col_value\n</td>\\n\"\n;\n    }\n    echo\n\"\\t</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Free resultset\nmysql_free_result\n(\n$result\n);\n// Closing connection\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 mysql_affected_rows() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nmysql_select_db\n(\n'mydb'\n);\n/* this should return the correct numbers of deleted records */\nmysql_query\n(\n'DELETE FROM mytable WHERE id < 10'\n);\nprintf\n(\n\"Records deleted: %d\\n\"\n,\nmysql_affected_rows\n());\n/* with a where clause that is never true, it should return 0 */\nmysql_query\n(\n'DELETE FROM mytable WHERE 0'\n);\nprintf\n(\n\"Records deleted: %d\\n\"\n,\nmysql_affected_rows\n());\n?>"
  },
  {
    "input": "Example #2 mysql_affected_rows() example using transactions",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nmysql_select_db\n(\n'mydb'\n);\n/* Update records */\nmysql_query\n(\n\"UPDATE mytable SET used=1 WHERE id < 10\"\n);\nprintf\n(\n\"Updated records: %d\\n\"\n,\nmysql_affected_rows\n());\nmysql_query\n(\n\"COMMIT\"\n);\n?>"
  },
  {
    "input": "Example #1 mysql_client_encoding() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$charset\n=\nmysql_client_encoding\n(\n$link\n);\necho\n\"The current character set is:\n$charset\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mysql_close() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 mysql_connect() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #2 mysql_connect() example using hostname:port syntax",
    "output": "<?php\n// we connect to example.com and port 3307\n$link\n=\nmysql_connect\n(\n'example.com:3307'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n// we connect to localhost at port 3307\n$link\n=\nmysql_connect\n(\n'127.0.0.1:3307'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #3 mysql_connect() example using  \":/path/to/socket\" syntax",
    "output": "<?php\n// we connect to localhost and socket e.g. /tmp/mysql.sock\n// variant 1: omit localhost\n$link\n=\nmysql_connect\n(\n':/tmp/mysql'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n// variant 2: with localhost\n$link\n=\nmysql_connect\n(\n'localhost:/tmp/mysql.sock'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\necho\n'Connected successfully'\n;\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 mysql_data_seek() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\n$db_selected\n=\nmysql_select_db\n(\n'sample_db'\n);\nif (!\n$db_selected\n) {\n    die(\n'Could not select database: '\n.\nmysql_error\n());\n}\n$query\n=\n'SELECT last_name, first_name FROM friends'\n;\n$result\n=\nmysql_query\n(\n$query\n);\nif (!\n$result\n) {\n    die(\n'Query failed: '\n.\nmysql_error\n());\n}\n/* fetch rows in reverse order */\nfor (\n$i\n=\nmysql_num_rows\n(\n$result\n) -\n1\n;\n$i\n>=\n0\n;\n$i\n--) {\n    if (!\nmysql_data_seek\n(\n$result\n,\n$i\n)) {\n        echo\n\"Cannot seek to row\n$i\n: \"\n.\nmysql_error\n() .\n\"\\n\"\n;\n        continue;\n    }\n    if (!(\n$row\n=\nmysql_fetch_assoc\n(\n$result\n))) {\n        continue;\n    }\n    echo\n$row\n[\n'last_name'\n] .\n' '\n.\n$row\n[\n'first_name'\n] .\n\"<br />\\n\"\n;\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_db_name() example",
    "output": "<?php\nerror_reporting\n(\nE_ALL\n);\n$link\n=\nmysql_connect\n(\n'dbhost'\n,\n'username'\n,\n'password'\n);\n$db_list\n=\nmysql_list_dbs\n(\n$link\n);\n$i\n=\n0\n;\n$cnt\n=\nmysql_num_rows\n(\n$db_list\n);\nwhile (\n$i\n<\n$cnt\n) {\n    echo\nmysql_db_name\n(\n$db_list\n,\n$i\n) .\n\"\\n\"\n;\n\n$i\n++;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_db_query() alternative example",
    "output": "<?php\nif (!\n$link\n=\nmysql_connect\n(\n'mysql_host'\n,\n'mysql_user'\n,\n'mysql_password'\n)) {\n    echo\n'Could not connect to mysql'\n;\n    exit;\n}\nif (!\nmysql_select_db\n(\n'mysql_dbname'\n,\n$link\n)) {\n    echo\n'Could not select database'\n;\n    exit;\n}\n$sql\n=\n'SELECT foo FROM bar WHERE id = 42'\n;\n$result\n=\nmysql_query\n(\n$sql\n,\n$link\n);\nif (!\n$result\n) {\n    echo\n\"DB Error, could not query the database\\n\"\n;\n    echo\n'MySQL Error: '\n.\nmysql_error\n();\n    exit;\n}\nwhile (\n$row\n=\nmysql_fetch_assoc\n(\n$result\n)) {\n    echo\n$row\n[\n'foo'\n];\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_drop_db() alternative example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\n$sql\n=\n'DROP DATABASE my_db'\n;\nif (\nmysql_query\n(\n$sql\n,\n$link\n)) {\n    echo\n\"Database my_db was successfully dropped\\n\"\n;\n} else {\n    echo\n'Error dropping database: '\n.\nmysql_error\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_errno() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n);\nif (!\nmysql_select_db\n(\n\"nonexistentdb\"\n,\n$link\n)) {\n    echo\nmysql_errno\n(\n$link\n) .\n\": \"\n.\nmysql_error\n(\n$link\n).\n\"\\n\"\n;\n}\nmysql_select_db\n(\n\"kossu\"\n,\n$link\n);\nif (!\nmysql_query\n(\n\"SELECT * FROM nonexistenttable\"\n,\n$link\n)) {\n    echo\nmysql_errno\n(\n$link\n) .\n\": \"\n.\nmysql_error\n(\n$link\n) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_error() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n);\nmysql_select_db\n(\n\"nonexistentdb\"\n,\n$link\n);\necho\nmysql_errno\n(\n$link\n) .\n\": \"\n.\nmysql_error\n(\n$link\n).\n\"\\n\"\n;\nmysql_select_db\n(\n\"kossu\"\n,\n$link\n);\nmysql_query\n(\n\"SELECT * FROM nonexistenttable\"\n,\n$link\n);\necho\nmysql_errno\n(\n$link\n) .\n\": \"\n.\nmysql_error\n(\n$link\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mysql_escape_string() example",
    "output": "<?php\n$item\n=\n\"Zak's Laptop\"\n;\n$escaped_item\n=\nmysql_escape_string\n(\n$item\n);\nprintf\n(\n\"Escaped string: %s\\n\"\n,\n$escaped_item\n);\n?>"
  },
  {
    "input": "Example #2 mysql_fetch_array() with MYSQL_NUM",
    "output": "<?php\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n) or\n    die(\n\"Could not connect: \"\n.\nmysql_error\n());\nmysql_select_db\n(\n\"mydb\"\n);\n$result\n=\nmysql_query\n(\n\"SELECT id, name FROM mytable\"\n);\nwhile (\n$row\n=\nmysql_fetch_array\n(\n$result\n,\nMYSQL_NUM\n)) {\n\nprintf\n(\n\"ID: %s  Name: %s\"\n,\n$row\n[\n0\n],\n$row\n[\n1\n]);\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #3 mysql_fetch_array() with MYSQL_ASSOC",
    "output": "<?php\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n) or\n    die(\n\"Could not connect: \"\n.\nmysql_error\n());\nmysql_select_db\n(\n\"mydb\"\n);\n$result\n=\nmysql_query\n(\n\"SELECT id, name FROM mytable\"\n);\nwhile (\n$row\n=\nmysql_fetch_array\n(\n$result\n,\nMYSQL_ASSOC\n)) {\n\nprintf\n(\n\"ID: %s  Name: %s\"\n,\n$row\n[\n\"id\"\n],\n$row\n[\n\"name\"\n]);\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #4 mysql_fetch_array() with MYSQL_BOTH",
    "output": "<?php\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n) or\n    die(\n\"Could not connect: \"\n.\nmysql_error\n());\nmysql_select_db\n(\n\"mydb\"\n);\n$result\n=\nmysql_query\n(\n\"SELECT id, name FROM mytable\"\n);\nwhile (\n$row\n=\nmysql_fetch_array\n(\n$result\n,\nMYSQL_BOTH\n)) {\n\nprintf\n(\n\"ID: %s  Name: %s\"\n,\n$row\n[\n0\n],\n$row\n[\n\"name\"\n]);\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 An expanded mysql_fetch_assoc() example",
    "output": "<?php\n$conn\n=\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n);\nif (!\n$conn\n) {\n    echo\n\"Unable to connect to DB: \"\n.\nmysql_error\n();\n    exit;\n}\nif (!\nmysql_select_db\n(\n\"mydbname\"\n)) {\n    echo\n\"Unable to select mydbname: \"\n.\nmysql_error\n();\n    exit;\n}\n$sql\n=\n\"SELECT id as userid, fullname, userstatus\n        FROM   sometable\n        WHERE  userstatus = 1\"\n;\n$result\n=\nmysql_query\n(\n$sql\n);\nif (!\n$result\n) {\n    echo\n\"Could not successfully run query (\n$sql\n) from DB: \"\n.\nmysql_error\n();\n    exit;\n}\nif (\nmysql_num_rows\n(\n$result\n) ==\n0\n) {\n    echo\n\"No rows found, nothing to print so am exiting\"\n;\n    exit;\n}\n// While a row of data exists, put that row in $row as an associative array\n// Note: If you're expecting just one row, no need to use a loop\n// Note: If you put extract($row); inside the following loop, you'll\n//       then create $userid, $fullname, and $userstatus\nwhile (\n$row\n=\nmysql_fetch_assoc\n(\n$result\n)) {\n    echo\n$row\n[\n\"userid\"\n];\n    echo\n$row\n[\n\"fullname\"\n];\n    echo\n$row\n[\n\"userstatus\"\n];\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_fetch_field() example",
    "output": "<?php\n$conn\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$conn\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nmysql_select_db\n(\n'database'\n);\n$result\n=\nmysql_query\n(\n'select * from table'\n);\nif (!\n$result\n) {\n    die(\n'Query failed: '\n.\nmysql_error\n());\n}\n/* get column metadata */\n$i\n=\n0\n;\nwhile (\n$i\n<\nmysql_num_fields\n(\n$result\n)) {\n    echo\n\"Information for column\n$i\n:<br />\\n\"\n;\n\n$meta\n=\nmysql_fetch_field\n(\n$result\n,\n$i\n);\n    if (!\n$meta\n) {\n        echo\n\"No information available<br />\\n\"\n;\n    }\n    echo\n\"<pre>\nblob:\n$meta\n->\nblob\nmax_length:\n$meta\n->\nmax_length\nmultiple_key:\n$meta\n->\nmultiple_key\nname:\n$meta\n->\nname\nnot_null:\n$meta\n->\nnot_null\nnumeric:\n$meta\n->\nnumeric\nprimary_key:\n$meta\n->\nprimary_key\ntable:\n$meta\n->\ntable\ntype:\n$meta\n->\ntype\nunique_key:\n$meta\n->\nunique_key\nunsigned:\n$meta\n->\nunsigned\nzerofill:\n$meta\n->\nzerofill\n</pre>\"\n;\n\n$i\n++;\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 A mysql_fetch_lengths() example",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n$row\n=\nmysql_fetch_assoc\n(\n$result\n);\n$lengths\n=\nmysql_fetch_lengths\n(\n$result\n);\nprint_r\n(\n$row\n);\nprint_r\n(\n$lengths\n);\n?>"
  },
  {
    "input": "Example #1 mysql_fetch_object() example",
    "output": "<?php\nmysql_connect\n(\n\"hostname\"\n,\n\"user\"\n,\n\"password\"\n);\nmysql_select_db\n(\n\"mydb\"\n);\n$result\n=\nmysql_query\n(\n\"select * from mytable\"\n);\nwhile (\n$row\n=\nmysql_fetch_object\n(\n$result\n)) {\n    echo\n$row\n->\nuser_id\n;\n    echo\n$row\n->\nfullname\n;\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #2 mysql_fetch_object() example",
    "output": "<?php\nclass\nfoo\n{\n    public\n$name\n;\n}\nmysql_connect\n(\n\"hostname\"\n,\n\"user\"\n,\n\"password\"\n);\nmysql_select_db\n(\n\"mydb\"\n);\n$result\n=\nmysql_query\n(\n\"select name from mytable limit 1\"\n);\n$obj\n=\nmysql_fetch_object\n(\n$result\n,\n'foo'\n);\nvar_dump\n(\n$obj\n);\n?>"
  },
  {
    "input": "Example #1 Fetching one row with mysql_fetch_row()",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n$row\n=\nmysql_fetch_row\n(\n$result\n);\necho\n$row\n[\n0\n];\n// 42\necho\n$row\n[\n1\n];\n// the email value\n?>"
  },
  {
    "input": "Example #1 A mysql_field_flags() example",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n$flags\n=\nmysql_field_flags\n(\n$result\n,\n0\n);\necho\n$flags\n;\nprint_r\n(\nexplode\n(\n' '\n,\n$flags\n));\n?>"
  },
  {
    "input": "Example #1 mysql_field_len() example",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n// Will get the length of the id field as specified in the database\n// schema.\n$length\n=\nmysql_field_len\n(\n$result\n,\n0\n);\necho\n$length\n;\n?>"
  },
  {
    "input": "Example #1 mysql_field_name() example",
    "output": "<?php\n/* The users table consists of three fields:\n *   user_id\n *   username\n *   password.\n */\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect to MySQL server: '\n.\nmysql_error\n());\n}\n$dbname\n=\n'mydb'\n;\n$db_selected\n=\nmysql_select_db\n(\n$dbname\n,\n$link\n);\nif (!\n$db_selected\n) {\n    die(\n\"Could not set\n$dbname\n: \"\n.\nmysql_error\n());\n}\n$res\n=\nmysql_query\n(\n'select * from users'\n,\n$link\n);\necho\nmysql_field_name\n(\n$res\n,\n0\n) .\n\"\\n\"\n;\necho\nmysql_field_name\n(\n$res\n,\n2\n);\n?>"
  },
  {
    "input": "Example #1 A mysql_field_table() example",
    "output": "<?php\n$query\n=\n\"SELECT account.*, country.* FROM account, country WHERE country.name = 'Portugal' AND account.country_id = country.id\"\n;\n// get the result from the DB\n$result\n=\nmysql_query\n(\n$query\n);\n// Lists the table name and then the field name\nfor (\n$i\n=\n0\n;\n$i\n<\nmysql_num_fields\n(\n$result\n); ++\n$i\n) {\n\n$table\n=\nmysql_field_table\n(\n$result\n,\n$i\n);\n\n$field\n=\nmysql_field_name\n(\n$result\n,\n$i\n);\n    echo\n\"\n$table\n:\n$field\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_field_type() example",
    "output": "<?php\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_username\"\n,\n\"mysql_password\"\n);\nmysql_select_db\n(\n\"mysql\"\n);\n$result\n=\nmysql_query\n(\n\"SELECT * FROM func\"\n);\n$fields\n=\nmysql_num_fields\n(\n$result\n);\n$rows\n=\nmysql_num_rows\n(\n$result\n);\n$table\n=\nmysql_field_table\n(\n$result\n,\n0\n);\necho\n\"Your '\"\n.\n$table\n.\n\"' table has \"\n.\n$fields\n.\n\" fields and \"\n.\n$rows\n.\n\" record(s)\\n\"\n;\necho\n\"The table has the following fields:\\n\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n$fields\n;\n$i\n++) {\n\n$type\n=\nmysql_field_type\n(\n$result\n,\n$i\n);\n\n$name\n=\nmysql_field_name\n(\n$result\n,\n$i\n);\n\n$len\n=\nmysql_field_len\n(\n$result\n,\n$i\n);\n\n$flags\n=\nmysql_field_flags\n(\n$result\n,\n$i\n);\n    echo\n$type\n.\n\" \"\n.\n$name\n.\n\" \"\n.\n$len\n.\n\" \"\n.\n$flags\n.\n\"\\n\"\n;\n}\nmysql_free_result\n(\n$result\n);\nmysql_close\n();\n?>"
  },
  {
    "input": "Example #1 A mysql_free_result() example",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n/* Use the result, assuming we're done with it afterwards */\n$row\n=\nmysql_fetch_assoc\n(\n$result\n);\n/* Now we free up the result and continue on with our script */\nmysql_free_result\n(\n$result\n);\necho\n$row\n[\n'id'\n];\necho\n$row\n[\n'email'\n];\n?>"
  },
  {
    "input": "Example #1 mysql_get_client_info() example",
    "output": "<?php\nprintf\n(\n\"MySQL client info: %s\\n\"\n,\nmysql_get_client_info\n());\n?>"
  },
  {
    "input": "Example #1 mysql_get_host_info() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nprintf\n(\n\"MySQL host info: %s\\n\"\n,\nmysql_get_host_info\n());\n?>"
  },
  {
    "input": "Example #1 mysql_get_proto_info() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nprintf\n(\n\"MySQL protocol version: %s\\n\"\n,\nmysql_get_proto_info\n());\n?>"
  },
  {
    "input": "Example #1 mysql_get_server_info() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nprintf\n(\n\"MySQL server version: %s\\n\"\n,\nmysql_get_server_info\n());\n?>"
  },
  {
    "input": "Example #1 mysql_insert_id() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nmysql_select_db\n(\n'mydb'\n);\nmysql_query\n(\n\"INSERT INTO mytable (product) values ('kossu')\"\n);\nprintf\n(\n\"Last inserted record has id %d\\n\"\n,\nmysql_insert_id\n());\n?>"
  },
  {
    "input": "Example #1 mysql_list_dbs() example",
    "output": "<?php\n// Usage without mysql_list_dbs()\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$res\n=\nmysql_query\n(\n\"SHOW DATABASES\"\n);\nwhile (\n$row\n=\nmysql_fetch_assoc\n(\n$res\n)) {\n    echo\n$row\n[\n'Database'\n] .\n\"\\n\"\n;\n}\n// Deprecated as of PHP 5.4.0\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$db_list\n=\nmysql_list_dbs\n(\n$link\n);\nwhile (\n$row\n=\nmysql_fetch_object\n(\n$db_list\n)) {\n     echo\n$row\n->\nDatabase\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Alternate to deprecated mysql_list_fields()",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SHOW COLUMNS FROM sometable\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\nif (\nmysql_num_rows\n(\n$result\n) >\n0\n) {\n    while (\n$row\n=\nmysql_fetch_assoc\n(\n$result\n)) {\n\nprint_r\n(\n$row\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 mysql_list_processes() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$result\n=\nmysql_list_processes\n(\n$link\n);\nwhile (\n$row\n=\nmysql_fetch_assoc\n(\n$result\n)){\n\nprintf\n(\n\"%s %s %s %s %s\\n\"\n,\n$row\n[\n\"Id\"\n],\n$row\n[\n\"Host\"\n],\n$row\n[\n\"db\"\n],\n\n$row\n[\n\"Command\"\n],\n$row\n[\n\"Time\"\n]);\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_list_tables() alternative example",
    "output": "<?php\n$dbname\n=\n'mysql_dbname'\n;\nif (!\nmysql_connect\n(\n'mysql_host'\n,\n'mysql_user'\n,\n'mysql_password'\n)) {\n    echo\n'Could not connect to mysql'\n;\n    exit;\n}\n$sql\n=\n\"SHOW TABLES FROM\n$dbname\n\"\n;\n$result\n=\nmysql_query\n(\n$sql\n);\nif (!\n$result\n) {\n    echo\n\"DB Error, could not list tables\\n\"\n;\n    echo\n'MySQL Error: '\n.\nmysql_error\n();\n    exit;\n}\nwhile (\n$row\n=\nmysql_fetch_row\n(\n$result\n)) {\n    echo\n\"Table:\n{\n$row\n[\n0\n]}\n\\n\"\n;\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 A mysql_num_fields() example",
    "output": "<?php\n$result\n=\nmysql_query\n(\n\"SELECT id,email FROM people WHERE id = '42'\"\n);\nif (!\n$result\n) {\n    echo\n'Could not run query: '\n.\nmysql_error\n();\n    exit;\n}\n/* returns 2 because id,email === two fields */\necho\nmysql_num_fields\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_num_rows() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n);\nmysql_select_db\n(\n\"database\"\n,\n$link\n);\n$result\n=\nmysql_query\n(\n\"SELECT * FROM table1\"\n,\n$link\n);\n$num_rows\n=\nmysql_num_rows\n(\n$result\n);\necho\n\"\n$num_rows\n Rows\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A mysql_ping() example",
    "output": "<?php\nset_time_limit\n(\n0\n);\n$conn\n=\nmysql_connect\n(\n'localhost'\n,\n'mysqluser'\n,\n'mypass'\n);\n$db\n=\nmysql_select_db\n(\n'mydb'\n);\n/* Assuming this query will take a long time */\n$result\n=\nmysql_query\n(\n$sql\n);\nif (!\n$result\n) {\n    echo\n'Query #1 failed, exiting.'\n;\n    exit;\n}\n/* Make sure the connection is still alive, if not, try to reconnect */\nif (!\nmysql_ping\n(\n$conn\n)) {\n    echo\n'Lost connection, exiting after query #1'\n;\n    exit;\n}\nmysql_free_result\n(\n$result\n);\n/* So the connection is still alive, let's run another query */\n$result2\n=\nmysql_query\n(\n$sql2\n);\n?>"
  },
  {
    "input": "Example #1 Simple mysql_real_escape_string() example",
    "output": "<?php\n// Connect\n$link\n=\nmysql_connect\n(\n'mysql_host'\n,\n'mysql_user'\n,\n'mysql_password'\n)\n    OR die(\nmysql_error\n());\n// Query\n$query\n=\nsprintf\n(\n\"SELECT * FROM users WHERE user='%s' AND password='%s'\"\n,\n\nmysql_real_escape_string\n(\n$user\n),\n\nmysql_real_escape_string\n(\n$password\n));\n?>"
  },
  {
    "input": "Example #3 An example SQL Injection Attack",
    "output": "<?php\n// We didn't check $_POST['password'], it could be anything the user wanted! For example:\n$_POST\n[\n'username'\n] =\n'aidan'\n;\n$_POST\n[\n'password'\n] =\n\"' OR ''='\"\n;\n// Query database to check if there are any matching users\n$query\n=\n\"SELECT * FROM users WHERE user='\n{\n$_POST\n[\n'username'\n]}\n' AND password='\n{\n$_POST\n[\n'password'\n]}\n'\"\n;\nmysql_query\n(\n$query\n);\n// This means the query sent to MySQL would be:\necho\n$query\n;\n?>"
  },
  {
    "input": "Example #1 mysql_result() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Could not connect: '\n.\nmysql_error\n());\n}\nif (!\nmysql_select_db\n(\n'database_name'\n)) {\n    die(\n'Could not select database: '\n.\nmysql_error\n());\n}\n$result\n=\nmysql_query\n(\n'SELECT name FROM work.employee'\n);\nif (!\n$result\n) {\n    die(\n'Could not query:'\n.\nmysql_error\n());\n}\necho\nmysql_result\n(\n$result\n,\n2\n);\n// outputs third employee's name\nmysql_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 mysql_select_db() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\nif (!\n$link\n) {\n    die(\n'Not connected : '\n.\nmysql_error\n());\n}\n// make foo the current db\n$db_selected\n=\nmysql_select_db\n(\n'foo'\n,\n$link\n);\nif (!\n$db_selected\n) {\n    die (\n'Can\\'t use foo : '\n.\nmysql_error\n());\n}\n?>"
  },
  {
    "input": "Example #1 mysql_stat() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$status\n=\nexplode\n(\n'  '\n,\nmysql_stat\n(\n$link\n));\nprint_r\n(\n$status\n);\n?>"
  },
  {
    "input": "Example #2 Alternative mysql_stat() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$result\n=\nmysql_query\n(\n'SHOW STATUS'\n,\n$link\n);\nwhile (\n$row\n=\nmysql_fetch_assoc\n(\n$result\n)) {\n    echo\n$row\n[\n'Variable_name'\n] .\n' = '\n.\n$row\n[\n'Value'\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mysql_tablename() example",
    "output": "<?php\nmysql_connect\n(\n\"localhost\"\n,\n\"mysql_user\"\n,\n\"mysql_password\"\n);\n$result\n=\nmysql_list_tables\n(\n\"mydb\"\n);\n$num_rows\n=\nmysql_num_rows\n(\n$result\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$num_rows\n;\n$i\n++) {\n    echo\n\"Table: \"\n,\nmysql_tablename\n(\n$result\n,\n$i\n),\n\"\\n\"\n;\n}\nmysql_free_result\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 mysql_thread_id() example",
    "output": "<?php\n$link\n=\nmysql_connect\n(\n'localhost'\n,\n'mysql_user'\n,\n'mysql_password'\n);\n$thread_id\n=\nmysql_thread_id\n(\n$link\n);\nif (\n$thread_id\n){\n\nprintf\n(\n\"current thread id is %d\\n\"\n,\n$thread_id\n);\n}\n?>"
  },
  {
    "input": "Example #1 Registering a TAF callback",
    "output": "<?php\n// Define userspace callback\nclass\nMyClass\n{\n    public static\n$retry_count\n;\n    public static function\nTAFCallback\n(\n$conn\n,\n$event\n,\n$type\n)\n    {\n        switch (\n$event\n) {\n            case\nOCI_FO_BEGIN\n:\n\nprintf\n(\n\" Failing Over ... Please stand by\\n\"\n);\n\nprintf\n(\n\" Failover type was found to be %s \\n\"\n,\n                       ((\n$type\n==\nOCI_FO_SESSION\n) ?\n\"SESSION\"\n\n:((\n$type\n==\nOCI_FO_SELECT\n) ?\n\"SELECT\"\n:\n\"UNKNOWN!\"\n)));\n\nself\n::\n$retry_count\n=\n0\n;\n                break;\n            case\nOCI_FO_ABORT\n:\n\n// The application cannot continue using the database\n\nprintf\n(\n\" Failover aborted. Failover will not take place.\\n\"\n);\n                break;\n            case\nOCI_FO_END\n:\n\n// Failover completes successfully. Inform users a failover occurs.\n\nprintf\n(\n\" Failover ended ... resuming services\\n\"\n);\n                break;\n            case\nOCI_FO_REAUTH\n:\n\nprintf\n(\n\" Failed over user ... resuming services\\n\"\n);\n\n// Replay any ALTER SESSION commands associated with this connection\n                // eg. oci_parse($conn, ‘ALTER SESSION …’) ;\n\nbreak;\n            case\nOCI_FO_ERROR\n:\n\n// Stop retrying if we have already attempted for 20 times.\n\nif (\nself\n::\n$retry_count\n>=\n20\n)\n                    return\n0\n;\n\nprintf\n(\n\" Failover error received. Sleeping...\\n\"\n);\n\nsleep\n(\n10\n);\n\nself\n::\n$retry_count\n++;\n                return\nOCI_FO_RETRY\n;\n// retry failover\n\nbreak;\n            default:\n\nprintf\n(\n\"Bad Failover Event: %d.\\n\"\n,\n$event\n);\n                break;\n        }\n        return\n0\n;\n    }\n}\n$fn_name\n=\n'MyClass::TAFCallback'\n;\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'orcl'\n);\n$sysconn\n=\noci_connect\n(\n'system'\n,\n'oracle'\n,\n'orcl'\n);\n// Use a privileged connection to construct a SQL statement that will initiate failover\n$sql\n= <<< 'END'\nselect unique 'alter system disconnect session '''||sid||','||serial#||''''\nfrom v$session_connect_info\nwhere sid = sys_context('USERENV', 'SID')\nEND;\n$s\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$s\n);\n$r\n=\noci_fetch_array\n(\n$s\n);\n$disconnectssql\n=\n$r\n[\n0\n];\noci_register_taf_callback\n(\n$conn\n,\n$fn_name\n);\n// Register TAFCallback to Oracle TAF\nprint\n\"Parsing user query\\n\"\n;\n$sql\n=\n\"select systimestamp from dual\"\n;\n$stmt\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n// For example, if a connection loss occurs at this point, oci_execute() will\n// detect the loss and failover begins. During failover, oci_execute() will\n// invoke the TAF callback function several times. If the failover is successful,\n// a new connection is transparently created and oci_execute() will continue as\n// usual. The connection session settings can be reset in the TAF callback\n// function. If the failover is aborted, oci_execute() will return an error\n// because a valid connection is not available.\n// Disconnect the user, which initiates failover\nprint\n\"Disconnecting the user\\n\"\n;\n$discsql\n=\noci_parse\n(\n$sysconn\n,\n$disconnectssql\n);\noci_execute\n(\n$discsql\n);\nprint\n\"Executing user query\\n\"\n;\n$e\n=\noci_execute\n(\n$stmt\n);\nif (!\n$e\n) {\n\n$m\n=\noci_error\n(\n$stmt\n);\n\ntrigger_error\n(\n\"Could not execute statement: \"\n.\n$m\n[\n'message'\n],\nE_USER_ERROR\n);\n}\n$row\n=\noci_fetch_array\n(\n$stmt\n);\nprint\n$row\n[\n0\n] .\n\"\\n\"\n;\n// do other SQL statements with the new connection, if it is valid\n// $stmt = oci_parse($conn,  . . .);\n?>"
  },
  {
    "input": "Example #1 oci_bind_array_by_name() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$create\n=\n\"CREATE TABLE bind_example(name VARCHAR(20))\"\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$create\n);\noci_execute\n(\n$stid\n);\n$create_pkg\n=\n\"\nCREATE OR REPLACE PACKAGE ARRAYBINDPKG1 AS\n  TYPE ARRTYPE IS TABLE OF VARCHAR(20) INDEX BY BINARY_INTEGER;\n  PROCEDURE iobind(c1 IN OUT ARRTYPE);\nEND ARRAYBINDPKG1;\"\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$create_pkg\n);\noci_execute\n(\n$stid\n);\n$create_pkg_body\n=\n\"\nCREATE OR REPLACE PACKAGE BODY ARRAYBINDPKG1 AS\n  CURSOR CUR IS SELECT name FROM bind_example;\n  PROCEDURE iobind(c1 IN OUT ARRTYPE) IS\n    BEGIN\n    -- Bulk Insert\n    FORALL i IN INDICES OF c1\n      INSERT INTO bind_example VALUES (c1(i));\n    -- Fetch and reverse\n    IF NOT CUR%ISOPEN THEN\n      OPEN CUR;\n    END IF;\n    FOR i IN REVERSE 1..5 LOOP\n      FETCH CUR INTO c1(i);\n      IF CUR%NOTFOUND THEN\n        CLOSE CUR;\n        EXIT;\n      END IF;\n    END LOOP;\n  END iobind;\nEND ARRAYBINDPKG1;\"\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$create_pkg_body\n);\noci_execute\n(\n$stid\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"BEGIN arraybindpkg1.iobind(:c1); END;\"\n);\n$array\n= array(\n\"one\"\n,\n\"two\"\n,\n\"three\"\n,\n\"four\"\n,\n\"five\"\n);\noci_bind_array_by_name\n(\n$stid\n,\n\":c1\"\n,\n$array\n,\n5\n, -\n1\n,\nSQLT_CHR\n);\noci_execute\n(\n$stid\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #1 Inserting data with oci_bind_by_name()",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)\"\n);\n$id\n=\n1\n;\n$text\n=\n\"Data to insert     \"\n;\noci_bind_by_name\n(\n$stid\n,\n\":id_bv\"\n,\n$id\n);\noci_bind_by_name\n(\n$stid\n,\n\":text_bv\"\n,\n$text\n);\noci_execute\n(\n$stid\n);\n// Table now contains: 1, 'Data to insert     '\n?>"
  },
  {
    "input": "Example #2 Binding once for multiple executions",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (id NUMBER);\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$a\n= array(\n1\n,\n3\n,\n5\n,\n7\n,\n11\n);\n// data to insert\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO mytab (id) VALUES (:bv)'\n);\noci_bind_by_name\n(\n$stid\n,\n':bv'\n,\n$v\n,\n20\n);\nforeach (\n$a\nas\n$v\n) {\n\n$r\n=\noci_execute\n(\n$stid\n,\nOCI_DEFAULT\n);\n// don't auto commit\n}\noci_commit\n(\n$conn\n);\n// commit everything at once\n// Table contains five rows: 1, 3, 5, 7, 11\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 Binding with a foreach loop",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT * FROM departments WHERE department_name = :dname AND location_id = :loc'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n$ba\n= array(\n':dname'\n=>\n'IT Support'\n,\n':loc'\n=>\n1700\n);\nforeach (\n$ba\nas\n$key\n=>\n$val\n) {\n\n// oci_bind_by_name($stid, $key, $val) does not work\n    // because it binds each placeholder to the same location: $val\n    // instead use the actual location of the data: $ba[$key]\n\noci_bind_by_name\n(\n$stid\n,\n$key\n,\n$ba\n[\n$key\n]);\n}\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\nforeach (\n$row\nas\n$item\n) {\n    print\n$item\n.\n\"<br>\\n\"\n;\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #4 Binding in a WHERE clause",
    "output": "<?php\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT last_name FROM employees WHERE department_id = :didbv ORDER BY last_name'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n$didbv\n=\n60\n;\noci_bind_by_name\n(\n$stid\n,\n':didbv'\n,\n$didbv\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'LAST_NAME'\n] .\n\"<br>\\n\"\n;\n}\n// Output is\n//    Austin\n//    Ernst\n//    Hunold\n//    Lorentz\n//    Pataballa\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #5 Binding with a LIKE clause",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n// Find all cities that begin with 'South'\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT city FROM locations WHERE city LIKE :bv\"\n);\n$city\n=\n'South%'\n;\n// '%' is a wildcard in SQL\noci_bind_by_name\n(\n$stid\n,\n\":bv\"\n,\n$city\n);\noci_execute\n(\n$stid\n);\noci_fetch_all\n(\n$stid\n,\n$res\n);\nforeach (\n$res\n[\n'CITY'\n] as\n$c\n) {\n    print\n$c\n.\n\"<br>\\n\"\n;\n}\n// Output is\n//   South Brunswick\n//   South San Francisco\n//   Southlake\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #6 Binding with REGEXP_LIKE",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n// Find all cities that contain 'ing'\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT city FROM locations WHERE REGEXP_LIKE(city, :bv)\"\n);\n$city\n=\n'.*ing.*'\n;\noci_bind_by_name\n(\n$stid\n,\n\":bv\"\n,\n$city\n);\noci_execute\n(\n$stid\n);\noci_fetch_all\n(\n$stid\n,\n$res\n);\nforeach (\n$res\n[\n'CITY'\n] as\n$c\n) {\n    print\n$c\n.\n\"<br>\\n\"\n;\n}\n// Output is\n//   Beijing\n//   Singapore\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #7 Binding Multiple Values in an IN Clause",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT last_name FROM employees WHERE employee_id in (:e1, :e2, :e3)'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n$mye1\n=\n103\n;\n$mye2\n=\n104\n;\n$mye3\n=\nNULL\n;\n// pretend we were not given this value\noci_bind_by_name\n(\n$stid\n,\n':e1'\n,\n$mye1\n);\noci_bind_by_name\n(\n$stid\n,\n':e2'\n,\n$mye2\n);\noci_bind_by_name\n(\n$stid\n,\n':e3'\n,\n$mye3\n);\noci_execute\n(\n$stid\n);\noci_fetch_all\n(\n$stid\n,\n$res\n);\nforeach (\n$res\n[\n'LAST_NAME'\n] as\n$name\n) {\n    print\n$name\n.\n\"<br>\\n\"\n;\n}\n// Output is\n//   Ernst\n//   Hunold\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #8 Binding a ROWID returned by a query",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));\n//   INSERT INTO mytab (id, salary, name) VALUES (1, 100, 'Chris');\n//   COMMIT;\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT ROWID, name FROM mytab WHERE id = :id_bv FOR UPDATE'\n);\n$id\n=\n1\n;\noci_bind_by_name\n(\n$stid\n,\n':id_bv'\n,\n$id\n);\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\n$rid\n=\n$row\n[\n'ROWID'\n];\n$name\n=\n$row\n[\n'NAME'\n];\n// Change name to upper case & save the changes\n$name\n=\nstrtoupper\n(\n$name\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'UPDATE mytab SET name = :n_bv WHERE ROWID = :r_bv'\n);\noci_bind_by_name\n(\n$stid\n,\n':n_bv'\n,\n$name\n);\noci_bind_by_name\n(\n$stid\n,\n':r_bv'\n,\n$rid\n, -\n1\n,\nOCI_B_ROWID\n);\noci_execute\n(\n$stid\n);\n// The table now contains 1, 100, CHRIS\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #9 Binding a ROWID on INSERT",
    "output": "<?php\n// This example inserts an id & name, and then updates the salary\n// Create the table with:\n//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));\n//\n// Based on original ROWID example by thies at thieso dot net (980221)\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$sql\n=\n\"INSERT INTO mytab (id, name) VALUES(:id_bv, :name_bv)\n        RETURNING ROWID INTO :rid\"\n;\n$ins_stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n$rowid\n=\noci_new_descriptor\n(\n$conn\n,\nOCI_D_ROWID\n);\noci_bind_by_name\n(\n$ins_stid\n,\n\":id_bv\"\n,\n$id\n,\n10\n);\noci_bind_by_name\n(\n$ins_stid\n,\n\":name_bv\"\n,\n$name\n,\n32\n);\noci_bind_by_name\n(\n$ins_stid\n,\n\":rid\"\n,\n$rowid\n, -\n1\n,\nOCI_B_ROWID\n);\n$sql\n=\n\"UPDATE mytab SET salary = :salary WHERE ROWID = :rid\"\n;\n$upd_stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_bind_by_name\n(\n$upd_stid\n,\n\":rid\"\n,\n$rowid\n, -\n1\n,\nOCI_B_ROWID\n);\noci_bind_by_name\n(\n$upd_stid\n,\n\":salary\"\n,\n$salary\n,\n32\n);\n// ids and names to insert\n$data\n= array(\n1111\n=>\n\"Larry\"\n,\n\n2222\n=>\n\"Bill\"\n,\n\n3333\n=>\n\"Jim\"\n);\n// Salary of each person\n$salary\n=\n10000\n;\n// Insert and immediately update each row\nforeach (\n$data\nas\n$id\n=>\n$name\n) {\n\noci_execute\n(\n$ins_stid\n);\n\noci_execute\n(\n$upd_stid\n);\n}\n$rowid\n->\nfree\n();\noci_free_statement\n(\n$upd_stid\n);\noci_free_statement\n(\n$ins_stid\n);\n// Show the new rows\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n);\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n\nvar_dump\n(\n$row\n);\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #10 Binding for a PL/SQL stored function",
    "output": "<?php\n//  Before running the PHP program, create a stored function in\n//  SQL*Plus or SQL Developer:\n//\n//  CREATE OR REPLACE FUNCTION myfunc(p IN NUMBER) RETURN NUMBER AS\n//  BEGIN\n//      RETURN p * 3;\n//  END;\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$p\n=\n8\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n'begin :r := myfunc(:p); end;'\n);\noci_bind_by_name\n(\n$stid\n,\n':p'\n,\n$p\n);\n// The return value is an OUT bind. The default type will be a string\n// type so binding a length 40 means that at most 40 digits will be\n// returned.\noci_bind_by_name\n(\n$stid\n,\n':r'\n,\n$r\n,\n40\n);\noci_execute\n(\n$stid\n);\nprint\n\"\n$r\n\\n\"\n;\n// prints 24\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #11 Binding parameters for a PL/SQL stored procedure",
    "output": "<?php\n//  Before running the PHP program, create a stored procedure in\n//  SQL*Plus or SQL Developer:\n//\n//  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS\n//  BEGIN\n//      p2 := p1 * 2;\n//  END;\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$p1\n=\n8\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n'begin myproc(:p1, :p2); end;'\n);\noci_bind_by_name\n(\n$stid\n,\n':p1'\n,\n$p1\n);\n// The second procedure parameter is an OUT bind. The default type\n// will be a string type so binding a length 40 means that at most 40\n// digits will be returned.\noci_bind_by_name\n(\n$stid\n,\n':p2'\n,\n$p2\n,\n40\n);\noci_execute\n(\n$stid\n);\nprint\n\"\n$p2\n\\n\"\n;\n// prints 16\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #12 Binding a CLOB column",
    "output": "<?php\n// Before running, create the table:\n//     CREATE TABLE mytab (mykey NUMBER, myclob CLOB);\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$mykey\n=\n12343\n;\n// arbitrary key for this example;\n$sql\n=\n\"INSERT INTO mytab (mykey, myclob)\n        VALUES (:mykey, EMPTY_CLOB())\n        RETURNING myclob INTO :myclob\"\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n$clob\n=\noci_new_descriptor\n(\n$conn\n,\nOCI_D_LOB\n);\noci_bind_by_name\n(\n$stid\n,\n\":mykey\"\n,\n$mykey\n,\n5\n);\noci_bind_by_name\n(\n$stid\n,\n\":myclob\"\n,\n$clob\n, -\n1\n,\nOCI_B_CLOB\n);\noci_execute\n(\n$stid\n,\nOCI_DEFAULT\n);\n$clob\n->\nsave\n(\n\"A very long string\"\n);\noci_commit\n(\n$conn\n);\n// Fetching CLOB data\n$query\n=\n'SELECT myclob FROM mytab WHERE mykey = :mykey'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$query\n);\noci_bind_by_name\n(\n$stid\n,\n\":mykey\"\n,\n$mykey\n,\n5\n);\noci_execute\n(\n$stid\n);\nprint\n'<table border=\"1\">'\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_LOBS\n)) {\n    print\n'<tr><td>'\n.\n$row\n[\n'MYCLOB'\n].\n'</td></tr>'\n;\n\n// In a loop, freeing the large variable before the 2nd fetch reduces PHP's peak memory usage\n\nunset(\n$row\n);\n}\nprint\n'</table>'\n;\n?>"
  },
  {
    "input": "Example #13 Binding a PL/SQL BOOLEAN",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$plsql\n=\n\n\"begin\n    :output1 := true;\n    :output2 := false;\n   end;\"\n;\n$s\n=\noci_parse\n(\n$c\n,\n$plsql\n);\noci_bind_by_name\n(\n$s\n,\n':output1'\n,\n$output1\n, -\n1\n,\nOCI_B_BOL\n);\noci_bind_by_name\n(\n$s\n,\n':output2'\n,\n$output2\n, -\n1\n,\nOCI_B_BOL\n);\noci_execute\n(\n$s\n);\nvar_dump\n(\n$output1\n);\n// true\nvar_dump\n(\n$output2\n);\n// false\n?>"
  },
  {
    "input": "Example #1 oci_client_version() example",
    "output": "<?php\n\necho\n\"Client Version: \"\n.\noci_client_version\n();\n// Client version: 19.9.0.0.0\n?>"
  },
  {
    "input": "Example #1 oci_commit() example",
    "output": "<?php\n// Insert into several tables, rolling back the changes if an error occurs\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"INSERT INTO mysalary (id, name) VALUES (1, 'Chris')\"\n);\n// The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately\n$r\n=\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$stid\n);\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO myschedule (startday) VALUES (12)'\n);\n$r\n=\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$stid\n);\n\noci_rollback\n(\n$conn\n);\n// rollback changes to both tables\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n// Commit the changes to both tables\n$r\n=\noci_commit\n(\n$conn\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$conn\n);\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #1 Basic oci_connect() using Easy Connect syntax",
    "output": "<?php\n// Connects to the XE service (i.e. database) on the \"localhost\" machine\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Basic oci_connect() using a Network Connect name",
    "output": "<?php\n// Connects to the MYDB database described in tnsnames.ora file,\n// One example tnsnames.ora entry for MYDB could be:\n//   MYDB =\n//     (DESCRIPTION =\n//       (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.oracle.com)(PORT = 1521))\n//       (CONNECT_DATA =\n//         (SERVER = DEDICATED)\n//         (SERVICE_NAME = XE)\n//       )\n//     )\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'MYDB'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 oci_connect() with an explicit character set",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n,\n'AL32UTF8'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Using multiple calls to oci_connect()",
    "output": "<?php\n$c1\n=\noci_connect\n(\n\"hr\"\n,\n\"welcome\"\n,\n'localhost/XE'\n);\n$c2\n=\noci_connect\n(\n\"hr\"\n,\n\"welcome\"\n,\n'localhost/XE'\n);\n// Both $c1 and $c2 show the same PHP resource id meaning they use the\n// same underlying database connection\necho\n\"c1 is\n$c1\n<br>\\n\"\n;\necho\n\"c2 is\n$c2\n<br>\\n\"\n;\nfunction\ncreate_table\n(\n$conn\n)\n{\n\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"create table hallo (test varchar2(64))\"\n);\n\noci_execute\n(\n$stmt\n);\n    echo\n\"Created table<br>\\n\"\n;\n}\nfunction\ndrop_table\n(\n$conn\n)\n{\n\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"drop table hallo\"\n);\n\noci_execute\n(\n$stmt\n);\n    echo\n\"Dropped table<br>\\n\"\n;\n}\nfunction\ninsert_data\n(\n$connname\n,\n$conn\n)\n{\n\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"insert into hallo\n              values(to_char(sysdate,'DD-MON-YY HH24:MI:SS'))\"\n);\n\noci_execute\n(\n$stmt\n,\nOCI_DEFAULT\n);\n    echo\n\"\n$connname\n inserted row without committing<br>\\n\"\n;\n}\nfunction\nrollback\n(\n$connname\n,\n$conn\n)\n{\n\noci_rollback\n(\n$conn\n);\n    echo\n\"\n$connname\n rollback<br>\\n\"\n;\n}\nfunction\nselect_data\n(\n$connname\n,\n$conn\n)\n{\n\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"select * from hallo\"\n);\n\noci_execute\n(\n$stmt\n,\nOCI_DEFAULT\n);\n    echo\n\"\n$connname\n ----selecting<br>\\n\"\n;\n    while (\noci_fetch\n(\n$stmt\n)) {\n        echo\n\"    \"\n.\noci_result\n(\n$stmt\n,\n\"TEST\"\n) .\n\"<br>\\n\"\n;\n    }\n    echo\n\"\n$connname\n ----done<br>\\n\"\n;\n}\ncreate_table\n(\n$c1\n);\ninsert_data\n(\n'c1'\n,\n$c1\n);\n// Insert a row using c1\nsleep\n(\n2\n);\n// sleep to show a different timestamp for the 2nd row\ninsert_data\n(\n'c2'\n,\n$c2\n);\n// Insert a row using c2\nselect_data\n(\n'c1'\n,\n$c1\n);\n// Results of both inserts are returned\nselect_data\n(\n'c2'\n,\n$c2\n);\n// Results of both inserts are returned\nrollback\n(\n'c1'\n,\n$c1\n);\n// Rollback using c1\nselect_data\n(\n'c1'\n,\n$c1\n);\n// Both inserts have been rolled back\nselect_data\n(\n'c2'\n,\n$c2\n);\ndrop_table\n(\n$c1\n);\n// Closing one of the connections makes the PHP variable unusable, but\n// the other could be used\noci_close\n(\n$c1\n);\necho\n\"c1 is\n$c1\n<br>\\n\"\n;\necho\n\"c2 is\n$c2\n<br>\\n\"\n;\n// Output is:\n//    c1 is Resource id #5\n//    c2 is Resource id #5\n//    Created table\n//    c1 inserted row without committing\n//    c2 inserted row without committing\n//    c1 ----selecting\n//        09-DEC-09 12:14:43\n//        09-DEC-09 12:14:45\n//    c1 ----done\n//    c2 ----selecting\n//        09-DEC-09 12:14:43\n//        09-DEC-09 12:14:45\n//    c2 ----done\n//    c1 rollback\n//    c1 ----selecting\n//    c1 ----done\n//    c2 ----selecting\n//    c2 ----done\n//    Dropped table\n//    c1 is\n//    c2 is Resource id #5\n?>"
  },
  {
    "input": "Example #1 oci_define_by_name() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT location_id, city FROM locations WHERE location_id < 1200'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n// The defines MUST be done before executing\noci_define_by_name\n(\n$stid\n,\n'LOCATION_ID'\n,\n$locid\n);\noci_define_by_name\n(\n$stid\n,\n'CITY'\n,\n$city\n);\noci_execute\n(\n$stid\n);\n// Each fetch populates the previously defined variables with the next row's data\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\n\"Location id\n$locid\n is\n$city\n<br>\\n\"\n;\n}\n// Displays:\n//   Location id 1000 is Roma\n//   Location id 1100 is Venice\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_define_by_name() with case sensitive column names",
    "output": "<?php\n/*\n  Before running, create the table with a case sensitive column name:\n    CREATE TABLE mytab (id NUMBER, \"MyDescription\" VARCHAR2(30));\n    INSERT INTO mytab (id, \"MyDescription\") values (1, 'Iced Coffee');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM mytab'\n);\n// Use uppercase for non case-sensitive column names\noci_define_by_name\n(\n$stid\n,\n'ID'\n,\n$id\n);\n// Use the exact case for case-sensitive column names\noci_define_by_name\n(\n$stid\n,\n'MyDescription'\n,\n$mydesc\n);\noci_execute\n(\n$stid\n);\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\n\"id\n$id\n is\n$mydesc\n<br>\\n\"\n;\n}\n// Displays:\n//   id 1 is Iced Coffee\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 oci_define_by_name() with LOB columns",
    "output": "<?php\n/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, fruit CLOB);\n    INSERT INTO mytab (id, fruit) values (1, 'apple');\n    INSERT INTO mytab (id, fruit) values (2, 'orange');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM mytab'\n);\n// The defines MUST be done before executing\noci_define_by_name\n(\n$stid\n,\n'ID'\n,\n$id\n);\noci_define_by_name\n(\n$stid\n,\n'FRUIT'\n,\n$fruit\n);\n// $fruit will become a LOB descriptor\noci_execute\n(\n$stid\n);\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\n$id\n.\n\" is \"\n.\n$fruit\n->\nload\n(\n100\n) .\n\"<br>\\n\"\n;\n}\n// Displays:\n//   1 is apple\n//   2 is orange\n$fruit\n->\nfree\n();\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #4 oci_define_by_name() with an explicit type",
    "output": "<?php\n/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, fruit CLOB);\n    INSERT INTO mytab (id, fruit) values (1, 'apple');\n    INSERT INTO mytab (id, fruit) values (2, 'orange');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM mytab'\n);\n// The defines MUST be done before executing\noci_define_by_name\n(\n$stid\n,\n'ID'\n,\n$id\n);\n$fruit\n=\noci_new_descriptor\n(\n$conn\n,\nOCI_D_LOB\n);\noci_define_by_name\n(\n$stid\n,\n'FRUIT'\n,\n$fruit\n,\nOCI_D_CLOB\n);\noci_execute\n(\n$stid\n);\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\n$id\n.\n\" is \"\n.\n$fruit\n->\nload\n(\n100\n) .\n\"<br>\\n\"\n;\n}\n// Displays:\n//   1 is apple\n//   2 is orange\n$fruit\n->\nfree\n();\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 Displaying the Oracle error message after a connection error",
    "output": "<?php\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"welcome\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n// For oci_connect errors do not pass a handle\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #2 Displaying the Oracle error message after a parsing error",
    "output": "<?php\n$stid\n=\noci_parse\n(\n$conn\n,\n\"select ' from dual\"\n);\n// note mismatched quote\nif (!\n$stid\n) {\n\n$e\n=\noci_error\n(\n$conn\n);\n// For oci_parse errors pass the connection handle\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #3 Displaying the Oracle error message, the problematic statement,\n     and the position of the problem of an execution error",
    "output": "<?php\n$stid\n=\noci_parse\n(\n$conn\n,\n\"select does_not_exist from dual\"\n);\n$r\n=\noci_execute\n(\n$stid\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$stid\n);\n// For oci_execute errors pass the statement handle\n\nprint\nhtmlentities\n(\n$e\n[\n'message'\n]);\n    print\n\"\\n<pre>\\n\"\n;\n    print\nhtmlentities\n(\n$e\n[\n'sqltext'\n]);\n\nprintf\n(\n\"\\n%\"\n.(\n$e\n[\n'offset'\n]+\n1\n).\n\"s\"\n,\n\"^\"\n);\n    print\n\"\\n</pre>\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 oci_execute() for queries",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 oci_execute() without specifying a mode example",
    "output": "<?php\n// Before running, create the table:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO mytab (col1) VALUES (123)'\n);\noci_execute\n(\n$stid\n);\n// The row is committed and immediately visible to other users\n?>"
  },
  {
    "input": "Example #3 oci_execute() with OCI_NO_AUTO_COMMIT example",
    "output": "<?php\n// Before running, create the table:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO mytab (col1) VALUES (:bv)'\n);\noci_bind_by_name\n(\n$stid\n,\n':bv'\n,\n$i\n,\n10\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n5\n; ++\n$i\n) {\n\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\n}\noci_commit\n(\n$conn\n);\n// commits all new values: 1, 2, 3, 4, 5\n?>"
  },
  {
    "input": "Example #4 oci_execute() with different commit modes example",
    "output": "<?php\n// Before running, create the table:\n//   CREATE TABLE MYTABLE (col1 NUMBER);\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO mytab (col1) VALUES (123)'\n);\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\n// data not committed\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO mytab (col1) VALUES (456)'\n);\noci_execute\n(\n$stid\n);\n// commits both 123 and 456 values\n?>"
  },
  {
    "input": "Example #5 oci_execute() with\n     OCI_DESCRIBE_ONLY example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM locations'\n);\noci_execute\n(\n$s\n,\nOCI_DESCRIBE_ONLY\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\noci_num_fields\n(\n$stid\n); ++\n$i\n) {\n    echo\noci_field_name\n(\n$stid\n,\n$i\n) .\n\"<br>\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 oci_fetch() with defined variables",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT location_id, city FROM locations WHERE location_id < 1200'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\n// The defines MUST be done before executing\noci_define_by_name\n(\n$stid\n,\n'LOCATION_ID'\n,\n$locid\n);\noci_define_by_name\n(\n$stid\n,\n'CITY'\n,\n$city\n);\noci_execute\n(\n$stid\n);\n// Each fetch populates the previously defined variables with the next row's data\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\n\"Location id\n$locid\n is\n$city\n<br>\\n\"\n;\n}\n// Displays:\n//   Location id 1000 is Roma\n//   Location id 1100 is Venice\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_fetch() with oci_result()",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT location_id, city FROM locations WHERE location_id < 1200'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\noci_result\n(\n$stid\n,\n'LOCATION_ID'\n) .\n\" is \"\n;\n    echo\noci_result\n(\n$stid\n,\n'CITY'\n) .\n\"<br>\\n\"\n;\n}\n// Displays:\n//   1000 is Roma\n//   1100 is Venice\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_fetch_all() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3'\n);\noci_execute\n(\n$stid\n);\n$nrows\n=\noci_fetch_all\n(\n$stid\n,\n$res\n);\necho\n\"\n$nrows\n rows fetched<br>\\n\"\n;\nvar_dump\n(\n$res\n);\n// var_dump output is:\n//    2 rows fetched\n//    array(2) {\n//      [\"POSTAL_CODE\"]=>\n//      array(2) {\n//        [0]=>\n//        string(6) \"00989x\"\n//        [1]=>\n//        string(6) \"10934x\"\n//      }\n//      [\"CITY\"]=>\n//      array(2) {\n//        [0]=>\n//        string(4) \"Roma\"\n//        [1]=>\n//        string(6) \"Venice\"\n//      }\n//    }\n// Pretty-print the results\necho\n\"<table border='1'>\\n\"\n;\nforeach (\n$res\nas\n$col\n) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$col\nas\n$item\n) {\n        echo\n\"    <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_fetch_all() example with OCI_FETCHSTATEMENT_BY_ROW",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3'\n);\noci_execute\n(\n$stid\n);\n$nrows\n=\noci_fetch_all\n(\n$stid\n,\n$res\n,\nnull\n,\nnull\n,\nOCI_FETCHSTATEMENT_BY_ROW\n);\necho\n\"\n$nrows\n rows fetched<br>\\n\"\n;\nvar_dump\n(\n$res\n);\n// Output is:\n//    2 rows fetched\n//    array(2) {\n//      [0]=>\n//      array(2) {\n//        [\"POSTAL_CODE\"]=>\n//        string(6) \"00989x\"\n//        [\"CITY\"]=>\n//        string(4) \"Roma\"\n//      }\n//      [1]=>\n//      array(2) {\n//        [\"POSTAL_CODE\"]=>\n//        string(6) \"10934x\"\n//        [\"CITY\"]=>\n//        string(6) \"Venice\"\n//      }\n//    }\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 oci_fetch_all() with OCI_NUM",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3'\n);\noci_execute\n(\n$stid\n);\n$nrows\n=\noci_fetch_all\n(\n$stid\n,\n$res\n,\nnull\n,\nnull\n,\nOCI_FETCHSTATEMENT_BY_ROW\n+\nOCI_NUM\n);\necho\n\"\n$nrows\n rows fetched<br>\\n\"\n;\nvar_dump\n(\n$res\n);\n// Output is:\n//    2 rows fetched\n//    array(2) {\n//      [0]=>\n//      array(2) {\n//        [0]=>\n//        string(6) \"00989x\"\n//        [1]=>\n//        string(4) \"Roma\"\n//      }\n//      [1]=>\n//      array(2) {\n//        [0]=>\n//        string(6) \"10934x\"\n//        [1]=>\n//        string(6) \"Venice\"\n//      }\n//    }\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_fetch_array() with OCI_BOTH",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT department_id, department_name FROM departments'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_BOTH\n)) !=\nfalse\n) {\n\n// Use the uppercase column names for the associative array indices\n\necho\n$row\n[\n0\n] .\n\" and \"\n.\n$row\n[\n'DEPARTMENT_ID'\n]   .\n\" are the same<br>\\n\"\n;\n    echo\n$row\n[\n1\n] .\n\" and \"\n.\n$row\n[\n'DEPARTMENT_NAME'\n] .\n\" are the same<br>\\n\"\n;\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_fetch_array() with OCI_NUM",
    "output": "<?php\n/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, description FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_NUM\n)) !=\nfalse\n) {\n    echo\n$row\n[\n0\n] .\n\"<br>\\n\"\n;\n    echo\n$row\n[\n1\n]->\nread\n(\n11\n) .\n\"<br>\\n\"\n;\n// this will output first 11 bytes from DESCRIPTION\n}\n// Output is:\n//    1\n//    A very long\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 oci_fetch_array() with OCI_ASSOC",
    "output": "<?php\n/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, description FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'ID'\n] .\n\"<br>\\n\"\n;\n    echo\n$row\n[\n'DESCRIPTION'\n]->\nread\n(\n11\n) .\n\"<br>\\n\"\n;\n// this will output first 11 bytes from DESCRIPTION\n}\n// Output is:\n//    1\n//    A very long\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #4 oci_fetch_array() with OCI_RETURN_NULLS",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT 1, null FROM dual'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n)) !=\nfalse\n) {\n// Ignore NULLs\n\nvar_dump\n(\n$row\n);\n}\n/*\nThe above code prints:\n  array(1) {\n    [1]=>\n    string(1) \"1\"\n  }\n*/\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT 1, null FROM dual'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n// Fetch NULLs\n\nvar_dump\n(\n$row\n);\n}\n/*\nThe above code prints:\n  array(2) {\n    [1]=>\n    string(1) \"1\"\n    [\"NULL\"]=>\n    NULL\n  }\n*/\n?>"
  },
  {
    "input": "Example #5 oci_fetch_array() with OCI_RETURN_LOBS",
    "output": "<?php\n/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, description FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_LOBS\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'ID'\n] .\n\"<br>\\n\"\n;\n    echo\n$row\n[\n'DESCRIPTION'\n] .\n\"<br>\\n\"\n;\n// this contains all of DESCRIPTION\n    // In a loop, freeing the large variable before the 2nd fetch reduces PHP's peak memory usage\n\nunset(\n$row\n);\n}\n// Output is:\n//    1\n//    A very long string\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #6 oci_fetch_array() with case sensitive column names",
    "output": "<?php\n/*\n   Before running, create the table:\n      CREATE TABLE mytab (\"Name\" VARCHAR2(20), city VARCHAR2(20));\n      INSERT INTO mytab (\"Name\", city) values ('Chris', 'Melbourne');\n      COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'select * from mytab'\n);\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\n// Because 'Name' was created as a case-sensitive column, that same\n// case is used for the array index.  However uppercase 'CITY' must\n// be used for the case-insensitive column index\nprint\n$row\n[\n'Name'\n] .\n\"<br>\\n\"\n;\n//  prints Chris\nprint\n$row\n[\n'CITY'\n] .\n\"<br>\\n\"\n;\n//  prints Melbourne\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #7 oci_fetch_array() with columns having duplicate names",
    "output": "<?php\n/*\n  Before running, create the tables:\n      CREATE TABLE mycity (id NUMBER, name VARCHAR2(20));\n      INSERT INTO mycity (id, name) values (1, 'Melbourne');\n      CREATE TABLE mycountry (id NUMBER, name VARCHAR2(20));\n      INSERT INTO mycountry (id, name) values (1, 'Australia');\n      COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT mycity.name, mycountry.name\n        FROM mycity, mycountry\n        WHERE mycity.id = mycountry.id'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n);\nvar_dump\n(\n$row\n);\n// Output only contains one \"NAME\" entry:\n//    array(1) {\n//      [\"NAME\"]=>\n//      string(9) \"Australia\"\n//    }\n// To query a repeated column name, use an SQL column alias like \"AS ctnm\":\n$sql\n=\n'SELECT mycity.name AS ctnm, mycountry.name\n        FROM mycity, mycountry\n        WHERE mycity.id = mycountry.id'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n);\nvar_dump\n(\n$row\n);\n// Output now contains both columns selected:\n//    array(2) {\n//      [\"CTNM\"]=>\n//      string(9) \"Melbourne\"\n//      [\"NAME\"]=>\n//      string(9) \"Australia\"\n//    }\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #8 oci_fetch_array() with DATE columns",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n// Set the date format for this connection.\n// For performance reasons, consider changing the format\n// in a trigger or with environment variables instead\n$stid\n=\noci_parse\n(\n$conn\n,\n\"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD'\"\n);\noci_execute\n(\n$stid\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT hire_date FROM employees WHERE employee_id = 188'\n);\noci_execute\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n);\necho\n$row\n[\n'HIRE_DATE'\n] .\n\"<br>\\n\"\n;\n// prints 1997-06-14\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #9 oci_fetch_array() with REF CURSOR",
    "output": "<?php\n/*\n  Create the PL/SQL stored procedure as:\n  CREATE OR REPLACE PROCEDURE myproc(p1 OUT SYS_REFCURSOR) AS\n  BEGIN\n    OPEN p1 FOR SELECT * FROM all_objects WHERE ROWNUM < 5000;\n  END;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'BEGIN myproc(:rc); END;'\n);\n$refcur\n=\noci_new_cursor\n(\n$conn\n);\noci_bind_by_name\n(\n$stid\n,\n':rc'\n,\n$refcur\n, -\n1\n,\nOCI_B_CURSOR\n);\noci_execute\n(\n$stid\n);\n// Execute the returned REF CURSOR and fetch from it like a statement identifier\noci_execute\n(\n$refcur\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile ((\n$row\n=\noci_fetch_array\n(\n$refcur\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$refcur\n);\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #10 Pagination with oci_fetch_array() using a LIMIT-like query",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n// Find the version of the database\npreg_match\n(\n'/Release ([0-9]+)\\./'\n,\noci_server_version\n(\n$conn\n),\n$matches\n);\n$oracleversion\n=\n$matches\n[\n1\n];\n// This is the query you want to \"page\" through\n$sql\n=\n'SELECT city, postal_code FROM locations ORDER BY city'\n;\nif (\n$oracleversion\n>=\n12\n) {\n\n// Make use of Oracle 12c OFFSET / FETCH NEXT syntax\n\n$sql\n=\n$sql\n.\n' OFFSET :offset ROWS FETCH NEXT :numrows ROWS ONLY'\n;\n} else {\n\n// Older Oracle versions need a nested query selecting a subset\n    // from $sql.  Or, if the SQL statement is known at development\n    // time, consider using a row_number() function instead of this\n    // nested solution.  In production environments, be careful to\n    // avoid SQL Injection issues with concatenation.\n\n$sql\n=\n\"SELECT * FROM (SELECT a.*, ROWNUM AS my_rnum\n                           FROM (\n$sql\n) a\n                           WHERE ROWNUM <= :offset + :numrows)\n            WHERE my_rnum > :offset\"\n;\n}\n$offset\n=\n0\n;\n// skip this many rows\n$numrows\n=\n5\n;\n// return 5 rows\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_bind_by_name\n(\n$stid\n,\n':numrows'\n,\n$numrows\n);\noci_bind_by_name\n(\n$stid\n,\n':offset'\n,\n$offset\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'CITY'\n] .\n\" \"\n.\n$row\n[\n'POSTAL_CODE'\n] .\n\"<br>\\n\"\n;\n}\n// Output is:\n//    Beijing 190518\n//    Bern 3095\n//    Bombay 490231\n//    Geneva 1730\n//    Hiroshima 6823\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #11 oci_fetch_array() with Oracle Database Implicit Result Sets",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/pdborcl'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n// Requires OCI8 2.0 (or later) and Oracle Database 12c (or later)\n// Also see oci_get_implicit_resultset()\n$sql\n=\n'DECLARE\n           c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\n// Note: oci_fetch_all and oci_fetch() cannot be used in this manner\necho\n\"<table>\\n\"\n;\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"  <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n|\nENT_SUBSTITUTE\n):\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Output is:\n//    Beijing 190518\n//    Bern    3095\n//    Bombay  490231\n//    CN\n//    CH\n//    IN\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_fetch_assoc() Example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT department_id, department_name FROM departments'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_assoc\n(\n$stid\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'DEPARTMENT_ID'\n] .\n\" \"\n.\n$row\n[\n'DEPARTMENT_NAME'\n] .\n\"<br>\\n\"\n;\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_fetch_object() example",
    "output": "<?php\n/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, description VARCHAR2(30));\n    INSERT INTO mytab (id, description) values (1, 'Fish and Chips');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, description FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_object\n(\n$stid\n)) !=\nfalse\n) {\n\n// Use upper case attribute names for each standard Oracle column\n\necho\n$row\n->\nID\n.\n\"<br>\\n\"\n;\n    echo\n$row\n->\nDESCRIPTION\n.\n\"<br>\\n\"\n;\n}\n// Output is:\n//    1\n//    Fish and Chips\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_fetch_object() with case sensitive column names",
    "output": "<?php\n/*\n  Before running, create the table with a case sensitive column name:\n    CREATE TABLE mytab (id NUMBER, \"MyDescription\" VARCHAR2(30));\n    INSERT INTO mytab (id, \"MyDescription\") values (1, 'Iced Coffee');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, \"MyDescription\" FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_object\n(\n$stid\n)) !=\nfalse\n) {\n\n// Use upper case attribute names for each standard Oracle column\n\necho\n$row\n->\nID\n.\n\"<br>\\n\"\n;\n\n// Use the exact case for the case sensitive column name\n\necho\n$row\n->\nMyDescription\n.\n\"<br>\\n\"\n;\n}\n// Output is:\n//    1\n//    Iced Coffee\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 oci_fetch_object() with LOBs",
    "output": "<?php\n/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, description CLOB);\n    INSERT INTO mytab (id, description) values (1, 'A very long string');\n    COMMIT;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT id, description FROM mytab'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_object\n(\n$stid\n)) !=\nfalse\n) {\n    echo\n$row\n->\nID\n.\n\"<br>\\n\"\n;\n\n// The following will output the first 11 bytes from DESCRIPTION\n\necho\n$row\n->\nDESCRIPTION\n->\nread\n(\n11\n) .\n\"<br>\\n\"\n;\n}\n// Output is:\n//    1\n//    A very long\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_fetch_row() Example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT department_id, department_name FROM departments'\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_row\n(\n$stid\n)) !=\nfalse\n) {\n    echo\n$row\n[\n0\n] .\n\" \"\n.\n$row\n[\n1\n] .\n\"<br>\\n\"\n;\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_name() example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (c1 NUMBER);\n//   INSERT INTO mytab VALUES (1);\n//   INSERT INTO mytab VALUES (NULL);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n\n$ncols\n=\noci_num_fields\n(\n$stid\n);\n    for (\n$col\n=\n1\n;\n$col\n<=\n$ncols\n;\n$col\n++) {\n\nvar_dump\n(\noci_field_is_null\n(\n$stid\n,\n$col\n));\n    }\n}\n// Outputs:\n//    bool(false)\n//    bool(true)\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_name() example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1),\n//                       clob_col CLOB, date_col DATE);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\necho\n\"<table border=\\\"1\\\">\\n\"\n;\necho\n\"<tr>\"\n;\necho\n\"<th>Name</th>\"\n;\necho\n\"<th>Type</th>\"\n;\necho\n\"<th>Length</th>\"\n;\necho\n\"</tr>\\n\"\n;\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n\n$column_name\n=\noci_field_name\n(\n$stid\n,\n$i\n);\n\n$column_type\n=\noci_field_type\n(\n$stid\n,\n$i\n);\n    echo\n\"<tr>\"\n;\n    echo\n\"<td>\n$column_name\n</td>\"\n;\n    echo\n\"<td>\n$column_type\n</td>\"\n;\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Outputs:\n//    Name           Type\n//    NUMBER_COL    NUMBER\n//    VARCHAR2_COL  VARCHAR2\n//    CLOB_COL      CLOB\n//    DATE_COL      DATE\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_precision() Example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (c1 NUMBER, c2 FLOAT, c3 NUMBER(4), c4 NUMBER(5,3));\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n    echo\noci_field_name\n(\n$stid\n,\n$i\n) .\n\" \"\n\n.\noci_field_precision\n(\n$stid\n,\n$i\n) .\n\" \"\n\n.\noci_field_scale\n(\n$stid\n,\n$i\n) .\n\"<br>\\n\"\n;\n}\n// Outputs:\n//   C1    0 -127\n//   C2  126 -127\n//   C3    4    0\n//   C4    5    3\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_scale() Example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (c1 NUMBER, c2 FLOAT, c3 NUMBER(4), c4 NUMBER(5,3));\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n    echo\noci_field_name\n(\n$stid\n,\n$i\n) .\n\" \"\n\n.\noci_field_precision\n(\n$stid\n,\n$i\n) .\n\" \"\n\n.\noci_field_scale\n(\n$stid\n,\n$i\n) .\n\"<br>\\n\"\n;\n}\n// Outputs:\n//   C1    0 -127\n//   C2  126 -127\n//   C3    4    0\n//   C4    5    3\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_size() example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1),\n//                       clob_col CLOB, date_col DATE);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\necho\n\"<table border=\\\"1\\\">\\n\"\n;\necho\n\"<tr>\"\n;\necho\n\"<th>Name</th>\"\n;\necho\n\"<th>Type</th>\"\n;\necho\n\"<th>Length</th>\"\n;\necho\n\"</tr>\\n\"\n;\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n\n$column_name\n=\noci_field_name\n(\n$stid\n,\n$i\n);\n\n$column_type\n=\noci_field_type\n(\n$stid\n,\n$i\n);\n\n$column_size\n=\noci_field_size\n(\n$stid\n,\n$i\n);\n    echo\n\"<tr>\"\n;\n    echo\n\"<td>\n$column_name\n</td>\"\n;\n    echo\n\"<td>\n$column_type\n</td>\"\n;\n    echo\n\"<td>\n$column_size\n</td>\"\n;\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Outputs:\n//    Name           Type       Length\n//    NUMBER_COL    NUMBER        22\n//    VARCHAR2_COL  VARCHAR2       1\n//    CLOB_COL      CLOB        4000\n//    DATE_COL      DATE           7\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_type() example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1),\n//                       clob_col CLOB, date_col DATE);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\necho\n\"<table border=\\\"1\\\">\\n\"\n;\necho\n\"<tr>\"\n;\necho\n\"<th>Name</th>\"\n;\necho\n\"<th>Type</th>\"\n;\necho\n\"<th>Length</th>\"\n;\necho\n\"</tr>\\n\"\n;\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n\n$column_name\n=\noci_field_name\n(\n$stid\n,\n$i\n);\n\n$column_type\n=\noci_field_type\n(\n$stid\n,\n$i\n);\n\n$column_size\n=\noci_field_size\n(\n$stid\n,\n$i\n);\n    echo\n\"<tr>\"\n;\n    echo\n\"<td>\n$column_name\n</td>\"\n;\n    echo\n\"<td>\n$column_type\n</td>\"\n;\n    echo\n\"<td>\n$column_size\n</td>\"\n;\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Outputs:\n//    Name           Type       Length\n//    NUMBER_COL    NUMBER        22\n//    VARCHAR2_COL  VARCHAR2       1\n//    CLOB_COL      CLOB        4000\n//    DATE_COL      DATE           7\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_field_type_raw() Example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1), clob_col CLOB, date_col DATE);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'select * from mytab'\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\n$n\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$n\n; ++\n$i\n) {\n    echo\noci_field_name\n(\n$stid\n,\n$i\n) .\n\" is raw type: \"\n.\noci_field_type_raw\n(\n$stid\n,\n$i\n) .\n\"<br>\\n\"\n;\n}\n// Output is:\n//    NUMBER_COL is raw type: 2\n//    VARCHAR2_COL is raw type: 1\n//    CLOB_COL is raw type: 112\n//    DATE_COL is raw type: 12\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 Fetching Implicit Result Sets in a loop",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/pdborcl'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\nwhile ((\n$stid_c\n=\noci_get_implicit_resultset\n(\n$stid\n))) {\n    echo\n\"<h2>New Implicit Result Set:</h2>\\n\"\n;\n    echo\n\"<table>\\n\"\n;\n    while ((\n$row\n=\noci_fetch_array\n(\n$stid_c\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n        echo\n\"<tr>\\n\"\n;\n        foreach (\n$row\nas\n$item\n) {\n            echo\n\"  <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n|\nENT_SUBSTITUTE\n):\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n        }\n        echo\n\"</tr>\\n\"\n;\n    }\n    echo\n\"</table>\\n\"\n;\n}\n// Output is:\n//    New Implicit Result Set:\n//     Beijing 190518\n//     Bern    3095\n//     Bombay  490231\n//    New Implicit Result Set:\n//     CN\n//     CH\n//     IN\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 Getting child statement handles individually",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/pdborcl'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\n$stid_1\n=\noci_get_implicit_resultset\n(\n$stid\n);\n$stid_2\n=\noci_get_implicit_resultset\n(\n$stid\n);\n$row\n=\noci_fetch_array\n(\n$stid_1\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\nvar_dump\n(\n$row\n);\n$row\n=\noci_fetch_array\n(\n$stid_2\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\nvar_dump\n(\n$row\n);\n$row\n=\noci_fetch_array\n(\n$stid_1\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\nvar_dump\n(\n$row\n);\n$row\n=\noci_fetch_array\n(\n$stid_2\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n);\nvar_dump\n(\n$row\n);\n// Output is:\n//    array(2) {\n//      [\"CITY\"]=>\n//      string(7) \"Beijing\"\n//      [\"POSTAL_CODE\"]=>\n//      string(6) \"190518\"\n//    }\n//    array(1) {\n//      [\"COUNTRY_ID\"]=>\n//      string(2) \"CN\"\n//    }\n//    array(2) {\n//      [\"CITY\"]=>\n//      string(4) \"Bern\"\n//      [\"POSTAL_CODE\"]=>\n//      string(4) \"3095\"\n//    }\n//    array(1) {\n//      [\"COUNTRY_ID\"]=>\n//      string(2) \"CH\"\n//    }\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 Explicitly setting the Prefetch Count",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/pdborcl'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\n$stid_c\n=\noci_get_implicit_resultset\n(\n$stid\n);\noci_set_prefetch\n(\n$stid_c\n,\n200\n);\n// Set the prefetch before fetching from the child statement\necho\n\"<table>\\n\"\n;\nwhile ((\n$row\n=\noci_fetch_array\n(\n$stid_c\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"  <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n|\nENT_SUBSTITUTE\n):\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_new_connect() example",
    "output": "<?php\n// create table mytab (mycol number);\nfunction\nquery\n(\n$name\n,\n$c\n)\n{\n    echo\n\"Querying\n$name\n\\n\"\n;\n\n$s\n=\noci_parse\n(\n$c\n,\n\"select * from mytab\"\n);\n\noci_execute\n(\n$s\n,\nOCI_NO_AUTO_COMMIT\n);\n\n$row\n=\noci_fetch_array\n(\n$s\n,\nOCI_ASSOC\n);\n    if (!\n$row\n) {\n        echo\n\"No rows\\n\"\n;\n    } else {\n        do {\n            foreach (\n$row\nas\n$item\n)\n                echo\n$item\n.\n\" \"\n;\n            echo\n\"\\n\"\n;\n        } while ((\n$row\n=\noci_fetch_array\n(\n$s\n,\nOCI_ASSOC\n)) !=\nfalse\n);\n    }\n}\n$c1\n=\noci_connect\n(\n\"hr\"\n,\n\"welcome\"\n,\n\"localhost/orcl\"\n);\n$c2\n=\noci_new_connect\n(\n\"hr\"\n,\n\"welcome\"\n,\n\"localhost/orcl\"\n);\n$s\n=\noci_parse\n(\n$c1\n,\n\"insert into mytab values(1234)\"\n);\noci_execute\n(\n$s\n,\nOCI_NO_AUTO_COMMIT\n);\nquery\n(\n\"basic connection\"\n,\n$c1\n);\nquery\n(\n\"new connection\"\n,\n$c2\n);\noci_commit\n(\n$c1\n);\nquery\n(\n\"new connection after commit\"\n,\n$c2\n);\n// Output is:\n//   Querying basic connection\n//   1234\n//   Querying new connection\n//   No rows\n//   Querying new connection after commit\n//   1234\n?>"
  },
  {
    "input": "Example #1 Binding a REF CURSOR in an Oracle stored procedure call",
    "output": "<?php\n// Precreate:\n//   create or replace procedure myproc(myrc out sys_refcursor) as\n//   begin\n//     open myrc for select first_name from employees;\n//   end;\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$curs\n=\noci_new_cursor\n(\n$conn\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"begin myproc(:cursbv); end;\"\n);\noci_bind_by_name\n(\n$stid\n,\n\":cursbv\"\n,\n$curs\n, -\n1\n,\nOCI_B_CURSOR\n);\noci_execute\n(\n$stid\n);\noci_execute\n(\n$curs\n);\n// Execute the REF CURSOR like a normal statement id\nwhile ((\n$row\n=\noci_fetch_array\n(\n$curs\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) !=\nfalse\n) {\n    echo\n$row\n[\n'FIRST_NAME'\n] .\n\"<br />\\n\"\n;\n}\noci_free_statement\n(\n$stid\n);\noci_free_statement\n(\n$curs\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_new_descriptor() example",
    "output": "<?php\n/* This script is designed to be called from a HTML form.\n * It expects $user, $password, $table, $where, and $commitsize\n * to be passed in from the form.  The script then deletes\n * the selected rows using the ROWID and commits after each\n * set of $commitsize rows. (Use with care, there is no rollback)\n */\n$conn\n=\noci_connect\n(\n$user\n,\n$password\n);\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"select rowid from\n$table\n\n$where\n\"\n);\n$rowid\n=\noci_new_descriptor\n(\n$conn\n,\nOCI_D_ROWID\n);\noci_define_by_name\n(\n$stmt\n,\n\"ROWID\"\n,\n$rowid\n);\noci_execute\n(\n$stmt\n);\nwhile (\noci_fetch\n(\n$stmt\n)) {\n\n$nrows\n=\noci_num_rows\n(\n$stmt\n);\n\n$delete\n=\noci_parse\n(\n$conn\n,\n\"delete from\n$table\n where ROWID = :rid\"\n);\n\noci_bind_by_name\n(\n$delete\n,\n\":rid\"\n,\n$rowid\n, -\n1\n,\nOCI_B_ROWID\n);\n\noci_execute\n(\n$delete\n);\n    echo\n\"\n$nrows\n\\n\"\n;\n    if ((\n$nrows\n%\n$commitsize\n) ==\n0\n) {\n\noci_commit\n(\n$conn\n);\n    }\n}\n$nrows\n=\noci_num_rows\n(\n$stmt\n);\necho\n\"\n$nrows\n deleted...\\n\"\n;\noci_free_statement\n(\n$stmt\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 oci_new_descriptor() example",
    "output": "<?php\n/* Calling PL/SQL stored procedures which contain clobs as input\n * parameters.\n * Example PL/SQL stored procedure signature is:\n *\n * PROCEDURE save_data\n *   Argument Name                  Type                    In/Out Default?\n *   ------------------------------ ----------------------- ------ --------\n *   KEY                            NUMBER(38)              IN\n *   DATA                           CLOB                    IN\n *\n */\n$conn\n=\noci_connect\n(\n$user\n,\n$password\n);\n$stmt\n=\noci_parse\n(\n$conn\n,\n\"begin save_data(:key, :data); end;\"\n);\n$clob\n=\noci_new_descriptor\n(\n$conn\n,\nOCI_D_LOB\n);\noci_bind_by_name\n(\n$stmt\n,\n':key'\n,\n$key\n);\noci_bind_by_name\n(\n$stmt\n,\n':data'\n,\n$clob\n, -\n1\n,\nOCI_B_CLOB\n);\n$clob\n->\nwrite\n(\n$data\n);\noci_execute\n(\n$stmt\n,\nOCI_DEFAULT\n);\noci_commit\n(\n$conn\n);\n$clob\n->\nfree\n();\noci_free_statement\n(\n$stmt\n);\n?>"
  },
  {
    "input": "Example #1 oci_num_fields() example",
    "output": "<?php\n// Create the table with:\n//   CREATE TABLE mytab (id NUMBER, quantity NUMBER);\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"SELECT * FROM mytab\"\n);\noci_execute\n(\n$stid\n,\nOCI_DESCRIBE_ONLY\n);\n// Use OCI_DESCRIBE_ONLY if not fetching rows\n$ncols\n=\noci_num_fields\n(\n$stid\n);\nfor (\n$i\n=\n1\n;\n$i\n<=\n$ncols\n;\n$i\n++) {\n    echo\noci_field_name\n(\n$stid\n,\n$i\n) .\n\" \"\n.\noci_field_type\n(\n$stid\n,\n$i\n) .\n\"<br>\\n\"\n;\n}\n// Outputs:\n//    ID NUMBER\n//    QUANTITY NUMBER\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_num_rows() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\nif (!\n$conn\n) {\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$m\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n\"create table emp2 as select * from employees\"\n);\noci_execute\n(\n$stid\n);\necho\noci_num_rows\n(\n$stid\n) .\n\" rows inserted.<br />\\n\"\n;\noci_free_statement\n(\n$stid\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"delete from emp2\"\n);\noci_execute\n(\n$stid\n,\nOCI_DEFAULT\n);\necho\noci_num_rows\n(\n$stid\n) .\n\" rows deleted.<br />\\n\"\n;\noci_commit\n(\n$conn\n);\noci_free_statement\n(\n$stid\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"drop table emp2\"\n);\noci_execute\n(\n$stid\n);\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_parse() example for SQL statements",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Parse the statement. Note there is no final semi-colon in the SQL statement\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 oci_parse() example for PL/SQL statements",
    "output": "<?php\n/*\n  Before running the PHP program, create a stored procedure in\n  SQL*Plus or SQL Developer:\n  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS\n  BEGIN\n      p2 := p1 * 2;\n  END;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$p1\n=\n8\n;\n// When parsing PL/SQL programs, there should be a final semi-colon in the string\n$stid\n=\noci_parse\n(\n$conn\n,\n'begin myproc(:p1, :p2); end;'\n);\noci_bind_by_name\n(\n$stid\n,\n':p1'\n,\n$p1\n);\noci_bind_by_name\n(\n$stid\n,\n':p2'\n,\n$p2\n,\n40\n);\noci_execute\n(\n$stid\n);\nprint\n\"\n$p2\n\\n\"\n;\n// prints 16\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_password_change() example changing the password of an already connected user",
    "output": "<?php\n$dbase\n=\n'localhost/orcl'\n;\n$user\n=\n'cj'\n;\n$current_pw\n=\n'welcome'\n;\n$new_pw\n=\n'geelong'\n;\n$c\n=\noci_pconnect\n(\n$user\n,\n$current_pw\n,\n$dbase\n);\noci_password_change\n(\n$c\n,\n$user\n,\n$current_pw\n,\n$new_pw\n);\necho\n\"New password is : \"\n.\n$new_pw\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 oci_password_change() example of connecting and changing the password in one step",
    "output": "<?php\n$dbase\n=\n'localhost/orcl'\n;\n$user\n=\n'cj'\n;\n$current_pw\n=\n'welcome'\n;\n$new_pw\n=\n'geelong'\n;\n$c\n=\noci_pconnect\n(\n$user\n,\n$current_pw\n,\n$dbase\n);\nif (!\n$c\n) {\n\n$m\n=\noci_error\n();\n    if (\n$m\n[\n'code'\n] ==\n28001\n) {\n// \"ORA-28001: the password has expired\"\n        // Login and reset password at the same time\n\n$c\n=\noci_password_change\n(\n$dbase\n,\n$user\n,\n$current_pw\n,\n$new_pw\n);\n        if (\n$c\n) {\n            echo\n\"New password is : \"\n.\n$new_pw\n.\n\"\\n\"\n;\n        }\n    }\n}\nif (!\n$c\n) {\n// The original error wasn't 28001, or the password change failed\n\n$m\n=\noci_error\n();\n\ntrigger_error\n(\n'Could not connect to database: '\n.\n$m\n[\n'message'\n],\nE_USER_ERROR\n);\n}\n// Use the connection $c\n// ...\n?>"
  },
  {
    "input": "Example #1 Basic oci_pconnect() Example using Easy Connect syntax",
    "output": "<?php\n// Connects to the XE service (i.e. database) on the \"localhost\" machine\n$conn\n=\noci_pconnect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM employees'\n);\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n. (\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n) .\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 oci_fetch() with oci_result()",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\nif (!\n$conn\n) {\n\n$e\n=\noci_error\n();\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n],\nENT_QUOTES\n),\nE_USER_ERROR\n);\n}\n$sql\n=\n'SELECT location_id, city FROM locations WHERE location_id < 1200'\n;\n$stid\n=\noci_parse\n(\n$conn\n,\n$sql\n);\noci_execute\n(\n$stid\n);\nwhile (\noci_fetch\n(\n$stid\n)) {\n    echo\noci_result\n(\n$stid\n,\n'LOCATION_ID'\n) .\n\" is \"\n;\n    echo\noci_result\n(\n$stid\n,\n'CITY'\n) .\n\"<br>\\n\"\n;\n}\n// Displays:\n//   1000 is Roma\n//   1100 is Venice\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_rollback() example",
    "output": "<?php\n// Insert into several tables, rolling back the changes if an error occurs\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n\"INSERT INTO mysalary (id, name) VALUES (1, 'Chris')\"\n);\n// The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately\n$r\n=\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$stid\n);\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n$stid\n=\noci_parse\n(\n$conn\n,\n'INSERT INTO myschedule (startday) VALUES (12)'\n);\n$r\n=\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\nif (!\n$r\n) {\n\n$e\n=\noci_error\n(\n$stid\n);\n\noci_rollback\n(\n$conn\n);\n// rollback changes to both tables\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n// Commit the changes to both tables\n$r\n=\noci_commit\n(\n$conn\n);\nif (!\nr\n) {\n\n$e\n=\noci_error\n(\n$conn\n);\n\ntrigger_error\n(\nhtmlentities\n(\n$e\n[\n'message'\n]),\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #2 Rolling back to a SAVEPOINT example",
    "output": "<?php\n$stid\n=\noci_parse\n(\n$conn\n,\n'UPDATE mytab SET id = 1111'\n);\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\n// Create the savepoint\n$stid\n=\noci_parse\n(\n$conn\n,\n'SAVEPOINT mysavepoint'\n);\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'UPDATE mytab SET id = 2222'\n);\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\n// Use an explicit SQL statement to rollback to the savepoint\n$stid\n=\noci_parse\n(\n$conn\n,\n'ROLLBACK TO SAVEPOINT mysavepoint'\n);\noci_execute\n(\n$stid\n,\nOCI_NO_AUTO_COMMIT\n);\noci_commit\n(\n$conn\n);\n// mytab now has id of 1111\n?>"
  },
  {
    "input": "Example #1 oci_server_version() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n\"hr\"\n,\n\"hrpwd\"\n,\n\"localhost/XE\"\n);\necho\n\"Server Version: \"\n.\noci_server_version\n(\n$conn\n);\n// Displays:\n// Server Version: Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production\n// With the Partitioning, OLAP, Data Mining and Real Application Testing option\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 Setting the action",
    "output": "<?php\n$c\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Record the action\noci_set_action\n(\n$c\n,\n'Friend Lookup'\n);\n// Code that causes a round-trip, for example a query:\n$s\n=\noci_parse\n(\n$c\n,\n'select * from dual'\n);\noci_execute\n(\n$s\n);\noci_fetch_all\n(\n$s\n,\n$res\n);\nsleep\n(\n30\n);\n?>"
  },
  {
    "input": "Example #1 Setting the timeout",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\noci_set_call_timeout\n(\n$conn\n,\n5000\n);\n?>"
  },
  {
    "input": "Example #1 Setting the client identifier to the application user",
    "output": "<?php\n// Find the application user's login name\nsession_start\n();\n$un\n=\nmy_validate_session\n(\n$_SESSION\n[\n'username'\n]);\n$c\n=\noci_connect\n(\n'myschema'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Tell Oracle who that user is\noci_set_client_identifier\n(\n$c\n,\n$un\n);\n// The next round-trip to the database will piggyback the identifier\n$s\n=\noci_parse\n(\n$c\n,\n'select mydata from mytable'\n);\noci_execute\n(\n$s\n);\n// ...\n?>"
  },
  {
    "input": "Example #1 Setting the client information",
    "output": "<?php\n$c\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Record the client information\noci_set_client_info\n(\n$c\n,\n'My Application Version 2'\n);\n// Code that causes a round-trip, for example a query:\n$s\n=\noci_parse\n(\n$c\n,\n'select * from dual'\n);\noci_execute\n(\n$s\n);\noci_fetch_all\n(\n$s\n,\n$res\n);\nsleep\n(\n30\n);\n?>"
  },
  {
    "input": "Example #1 Setting the DBOP",
    "output": "<?php\n$c\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Record the operation\noci_set_db_operation\n(\n$c\n,\n'main query'\n);\n// Code that causes a round-trip, for example a query:\n$s\n=\noci_parse\n(\n$c\n,\n'select * from dual'\n);\noci_execute\n(\n$s\n);\noci_fetch_all\n(\n$s\n,\n$res\n);\nsleep\n(\n30\n);\n?>"
  },
  {
    "input": "Example #1 Two scripts can use different versions of myfunc() at the same time",
    "output": "<?php\n// File 1\necho\n\"Version 1 of application\\n\"\n;\noci_set_edition\n(\n'ORA$BASE'\n);\n$c\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$s\n=\noci_parse\n(\n$c\n,\n\"begin :r := myfunc(); end;\"\n);\noci_bind_by_name\n(\n$s\n,\n\":r\"\n,\n$r\n,\n20\n);\noci_execute\n(\n$s\n);\necho\n\"The result is\n$r\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Setting the module name",
    "output": "<?php\n$c\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n// Record the module\noci_set_module_name\n(\n$c\n,\n'Home Page'\n);\n// Code that causes a round-trip, for example a query:\n$s\n=\noci_parse\n(\n$c\n,\n'select * from dual'\n);\noci_execute\n(\n$s\n);\noci_fetch_all\n(\n$s\n,\n$res\n);\nsleep\n(\n30\n);\n?>"
  },
  {
    "input": "Example #1 Changing the default prefetch value for a query",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT * FROM myverybigtable'\n);\noci_set_prefetch\n(\n$stid\n,\n300\n);\n// Set before calling oci_execute()\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #2 Changing the default prefetch for a REF CURSOR fetch",
    "output": "<?php\n/*\n  Create the PL/SQL stored procedure as:\n  CREATE OR REPLACE PROCEDURE myproc(p1 OUT SYS_REFCURSOR) AS\n  BEGIN\n    OPEN p1 FOR SELECT * FROM all_objects WHERE ROWNUM < 5000;\n  END;\n*/\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'BEGIN myproc(:rc); END;'\n);\n$refcur\n=\noci_new_cursor\n(\n$conn\n);\noci_bind_by_name\n(\n$stid\n,\n':rc'\n,\n$refcur\n, -\n1\n,\nOCI_B_CURSOR\n);\noci_execute\n(\n$stid\n);\n// Change the prefetch before executing the cursor.\n// REF CURSOR prefetching works when PHP is linked with Oracle 11gR2 or later Client libraries\noci_set_prefetch\n(\n$refcur\n,\n200\n);\noci_execute\n(\n$refcur\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$refcur\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$refcur\n);\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #3 Setting the prefetch value when passing a REF CURSOR back to Oracle",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/orcl'\n);\n// get the REF CURSOR\n$stid\n=\noci_parse\n(\n$conn\n,\n'BEGIN myproc(:rc_out); END;'\n);\n$refcur\n=\noci_new_cursor\n(\n$conn\n);\noci_bind_by_name\n(\n$stid\n,\n':rc_out'\n,\n$refcur\n, -\n1\n,\nOCI_B_CURSOR\n);\noci_execute\n(\n$stid\n);\n// Display two rows, but don't prefetch any extra rows otherwise\n// those extra rows would not be passed back to myproc_use_rc().\noci_set_prefetch\n(\n$refcur\n,\n0\n);\noci_execute\n(\n$refcur\n);\n$row\n=\noci_fetch_array\n(\n$refcur\n);\nvar_dump\n(\n$row\n);\n$row\n=\noci_fetch_array\n(\n$refcur\n);\nvar_dump\n(\n$row\n);\n// pass the REF CURSOR to myproc_use_rc() to do more data processing\n// with the result set\n$stid\n=\noci_parse\n(\n$conn\n,\n'begin myproc_use_rc(:rc_in); end;'\n);\noci_bind_by_name\n(\n$stid\n,\n':rc_in'\n,\n$refcur\n, -\n1\n,\nOCI_B_CURSOR\n);\noci_execute\n(\n$stid\n);\n?>"
  },
  {
    "input": "Example #1 Changing the LOB prefetch value for a query",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'SELECT myclob FROM mytable'\n);\noci_set_prefetch_lob\n(\n$stid\n,\n100000\n);\n// Set before calling oci_execute()\noci_execute\n(\n$stid\n);\necho\n\"<table border='1'>\\n\"\n;\nwhile (\n$row\n=\noci_fetch_array\n(\n$stid\n,\nOCI_ASSOC\n+\nOCI_RETURN_NULLS\n+\nOCI_RETURN_LOBS\n)) {\n    echo\n\"<tr>\\n\"\n;\n    foreach (\n$row\nas\n$item\n) {\n        echo\n\"    <td>\"\n.(\n$item\n!==\nnull\n?\nhtmlentities\n(\n$item\n,\nENT_QUOTES\n) :\n\"&nbsp;\"\n).\n\"</td>\\n\"\n;\n    }\n    echo\n\"</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 oci_statement_type() example",
    "output": "<?php\n$conn\n=\noci_connect\n(\n'hr'\n,\n'welcome'\n,\n'localhost/XE'\n);\n$stid\n=\noci_parse\n(\n$conn\n,\n'DELETE FROM departments WHERE department_id = 130;'\n);\nif (\noci_statement_type\n(\n$stid\n) ==\n\"DELETE\"\n) {\n\ntrigger_error\n(\n'You are not allowed to delete from this table'\n,\nE_USER_ERROR\n);\n}\nelse {\n\noci_execute\n(\n$stid\n);\n// delete the row\n}\noci_free_statement\n(\n$stid\n);\noci_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 PostgreSQL extension overview example",
    "output": "<?php\n// Connecting, selecting database\n$dbconn\n=\npg_connect\n(\n\"host=localhost dbname=publishing user=www password=foo\"\n)\n    or die(\n'Could not connect: '\n.\npg_last_error\n());\n// Performing SQL query\n$query\n=\n'SELECT * FROM authors'\n;\n$result\n=\npg_query\n(\n$dbconn\n,\n$query\n) or die(\n'Query failed: '\n.\npg_last_error\n());\n// Printing results in HTML\necho\n\"<table>\\n\"\n;\nwhile (\n$line\n=\npg_fetch_array\n(\n$result\n,\nnull\n,\nPGSQL_ASSOC\n)) {\n    echo\n\"\\t<tr>\\n\"\n;\n    foreach (\n$line\nas\n$col_value\n) {\n        echo\n\"\\t\\t<td>\n$col_value\n</td>\\n\"\n;\n    }\n    echo\n\"\\t</tr>\\n\"\n;\n}\necho\n\"</table>\\n\"\n;\n// Free resultset\npg_free_result\n(\n$result\n);\n// Closing connection\npg_close\n(\n$dbconn\n);\n?>"
  },
  {
    "input": "Example #1 PostgreSQL user defined functions example",
    "output": "<?php\n// This function should be needed, since PostgreSQL connection binds database.\nfunction\npg_list_dbs\n(\n$db\n)\n{\n\nassert\n(\nis_resource\n(\n$db\n));\n\n$query\n=\n'\nSELECT\n d.datname as \"Name\",\n u.usename as \"Owner\",\n pg_encoding_to_char(d.encoding) as \"Encoding\"\nFROM\n pg_database d LEFT JOIN pg_user u ON d.datdba = u.usesysid\nORDER BY 1;\n'\n;\n    return\npg_query\n(\n$db\n,\n$query\n);\n}\n// List tables.\nfunction\npg_list_tables\n(\n$db\n)\n{\n\nassert\n(\nis_resource\n(\n$db\n));\n\n$query\n=\n\"\nSELECT\n c.relname as \\\"Name\\\",\n CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' END as \\\"Type\\\",\n  u.usename as \\\"Owner\\\"\nFROM\n pg_class c LEFT JOIN pg_user u ON c.relowner = u.usesysid\nWHERE\n c.relkind IN ('r','v','S','')\n AND c.relname !~ '^pg_'\nORDER BY 1;\n\"\n;\n    return\npg_query\n(\n$db\n,\n$query\n);\n}\n// See also pg_meta_data(). It returns field definition as array.\nfunction\npg_list_fields\n(\n$db\n,\n$table\n)\n{\n\nassert\n(\nis_resource\n(\n$db\n));\n\n$query\n=\n\"\nSELECT\n a.attname,\n format_type(a.atttypid, a.atttypmod),\n a.attnotnull,\n a.atthasdef,\n a.attnum\nFROM\n pg_class c,\n pg_attribute a\nWHERE\n c.relname = '\"\n.\n$table\n.\n\"'\n AND a.attnum > 0 AND a.attrelid = c.oid\nORDER BY a.attnum;\n\"\n;\n    return\npg_query\n(\n$db\n,\n$query\n);\n}\n?>"
  },
  {
    "input": "Example #1 pg_affected_rows() example",
    "output": "<?php\n$result\n=\npg_query\n(\n$conn\n,\n\"INSERT INTO authors VALUES ('Orwell', 2002, 'Animal Farm')\"\n);\n$cmdtuples\n=\npg_affected_rows\n(\n$result\n);\necho\n$cmdtuples\n.\n\" tuples are affected.\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_cancel_query() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from authors; select count(*) from authors;\"\n);\n  }\n\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\n\"First call to pg_get_result():\n$res1\n\\n\"\n;\n\n$rows1\n=\npg_num_rows\n(\n$res1\n);\n  echo\n\"\n$res1\n has\n$rows1\n records\\n\\n\"\n;\n\n\n// Cancel the currently running query.  Will be the second query if it is\n  // still running.\n\npg_cancel_query\n(\n$dbconn\n);\n?>"
  },
  {
    "input": "Example #1 pg_client_encoding() example",
    "output": "<?php\n// Assume $conn is a connection to a ISO-8859-1 database\n$encoding\n=\npg_client_encoding\n(\n$conn\n);\necho\n\"Client encoding is: \"\n,\n$encoding\n,\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_close() example",
    "output": "<?php\n$dbconn\n=\npg_connect\n(\n\"host=localhost port=5432 dbname=mary\"\n)\n   or die(\n\"Could not connect\"\n);\necho\n\"Connected successfully\"\n;\npg_close\n(\n$dbconn\n);\n?>"
  },
  {
    "input": "Example #1 Using pg_connect()",
    "output": "<?php\n$dbconn\n=\npg_connect\n(\n\"dbname=mary\"\n);\n//connect to a database named \"mary\"\n$dbconn2\n=\npg_connect\n(\n\"host=localhost port=5432 dbname=mary\"\n);\n// connect to a database named \"mary\" on \"localhost\" at port \"5432\"\n$dbconn3\n=\npg_connect\n(\n\"host=sheep port=5432 dbname=mary user=lamb password=foo\"\n);\n//connect to a database named \"mary\" on the host \"sheep\" with a username and password\n$conn_string\n=\n\"host=sheep port=5432 dbname=test user=lamb password=bar\"\n;\n$dbconn4\n=\npg_connect\n(\n$conn_string\n);\n//connect to a database named \"test\" on the host \"sheep\" with a username and password\n$dbconn5\n=\npg_connect\n(\n\"host=localhost options='--client_encoding=UTF8'\"\n);\n//connect to a database on \"localhost\" and set the command line parameter which tells the encoding is in UTF-8\n?>"
  },
  {
    "input": "Example #1 pg_connection_busy() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$bs\n=\npg_connection_busy\n(\n$dbconn\n);\n  if (\n$bs\n) {\n      echo\n'connection is busy'\n;\n  } else {\n     echo\n'connection is not busy'\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_connection_reset() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$dbconn2\n=\npg_connection_reset\n(\n$dbconn\n);\n  if (\n$dbconn2\n) {\n      echo\n\"reset successful\\n\"\n;\n  } else {\n      echo\n\"reset failed\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_connection_status() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$stat\n=\npg_connection_status\n(\n$dbconn\n);\n  if (\n$stat\n===\nPGSQL_CONNECTION_OK\n) {\n      echo\n'Connection status ok'\n;\n  } else {\n      echo\n'Connection status bad'\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_convert() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n$tmp\n= array(\n\n'author'\n=>\n'Joe Thackery'\n,\n\n'year'\n=>\n2005\n,\n\n'title'\n=>\n'My Life, by Joe Thackery'\n\n);\n\n\n$vals\n=\npg_convert\n(\n$dbconn\n,\n'authors'\n,\n$tmp\n);\n?>"
  },
  {
    "input": "Example #1 pg_copy_from() example",
    "output": "<?php\n   $db\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n\n$rows\n=\npg_copy_to\n(\n$db\n,\n$table_name\n);\n\n\npg_query\n(\n$db\n,\n\"DELETE FROM\n$table_name\n\"\n);\n\n\npg_copy_from\n(\n$db\n,\n$table_name\n,\n$rows\n);\n?>"
  },
  {
    "input": "Example #1 pg_copy_to() example",
    "output": "<?php\n   $db\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n\n$rows\n=\npg_copy_to\n(\n$db\n,\n$table_name\n);\n\n\npg_query\n(\n$db\n,\n\"DELETE FROM\n$table_name\n\"\n);\n\n\npg_copy_from\n(\n$db\n,\n$table_name\n,\n$rows\n);\n?>"
  },
  {
    "input": "Example #1 pg_dbname() example",
    "output": "<?php\n  error_reporting\n(\nE_ALL\n);\n\npg_connect\n(\n\"host=localhost port=5432 dbname=mary\"\n);\n  echo\npg_dbname\n();\n// mary\n?>"
  },
  {
    "input": "Example #1 pg_delete() example",
    "output": "<?php\n  $db\n=\npg_connect\n(\n'dbname=foo'\n);\n\n// This is safe somewhat, since all values are escaped.\n  // However PostgreSQL supports JSON/Array. These are not\n  // safe by neither escape nor prepared query.\n\n$res\n=\npg_delete\n(\n$db\n,\n'post_log'\n,\n$_POST\n,\nPG_DML_ESCAPE\n);\n  if (\n$res\n) {\n      echo\n\"POST data is deleted:\n$res\n\\n\"\n;\n  } else {\n      echo\n\"User must have sent wrong inputs\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_end_copy() example",
    "output": "<?php\n  $conn\n=\npg_pconnect\n(\n\"dbname=foo\"\n);\n\npg_query\n(\n$conn\n,\n\"create table bar (a int4, b char(16), d float8)\"\n);\n\npg_query\n(\n$conn\n,\n\"copy bar from stdin\"\n);\n\npg_put_line\n(\n$conn\n,\n\"3\\thello world\\t4.5\\n\"\n);\n\npg_put_line\n(\n$conn\n,\n\"4\\tgoodbye world\\t7.11\\n\"\n);\n\npg_put_line\n(\n$conn\n,\n\"\\\\.\\n\"\n);\n\npg_end_copy\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 pg_escape_bytea() example",
    "output": "<?php\n\n// Connect to the database\n\n$dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n// Read in a binary file\n\n$data\n=\nfile_get_contents\n(\n'image1.jpg'\n);\n\n\n// Escape the binary data\n\n$escaped\n=\npg_escape_bytea\n(\n$data\n);\n\n\n// Insert it into the database\n\npg_query\n(\n\"INSERT INTO gallery (name, data) VALUES ('Pine trees', '\n{\n$escaped\n}\n')\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_escape_identifier() example",
    "output": "<?php\n\n// Connect to the database\n\n$dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n// Escape the table name data\n\n$escaped\n=\npg_escape_identifier\n(\n$table_name\n);\n\n\n// Select rows from $table_name\n\npg_query\n(\n\"SELECT * FROM\n{\n$escaped\n}\n;\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_escape_literal() example",
    "output": "<?php\n\n// Connect to the database\n\n$dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n// Read in a text file (containing apostrophes and backslashes)\n\n$data\n=\nfile_get_contents\n(\n'letter.txt'\n);\n\n\n// Escape the text data\n\n$escaped\n=\npg_escape_literal\n(\n$data\n);\n\n\n// Insert it into the database. Note that no quotes around {$escaped}\n\npg_query\n(\n\"INSERT INTO correspondence (name, data) VALUES ('My letter',\n{\n$escaped\n}\n)\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_escape_string() example",
    "output": "<?php\n\n// Connect to the database\n\n$dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n// Read in a text file (containing apostrophes and backslashes)\n\n$data\n=\nfile_get_contents\n(\n'letter.txt'\n);\n\n\n// Escape the text data\n\n$escaped\n=\npg_escape_string\n(\n$data\n);\n\n\n// Insert it into the database\n\npg_query\n(\n\"INSERT INTO correspondence (name, data) VALUES ('My letter', '\n{\n$escaped\n}\n')\"\n);\n?>"
  },
  {
    "input": "Example #1 Using pg_execute()",
    "output": "<?php\n// Connect to a database named \"mary\"\n$dbconn\n=\npg_connect\n(\n\"dbname=mary\"\n);\n// Prepare a query for execution\n$result\n=\npg_prepare\n(\n$dbconn\n,\n\"my_query\"\n,\n'SELECT * FROM shops WHERE name = $1'\n);\n// Execute the prepared query.  Note that it is not necessary to escape\n// the string \"Joe's Widgets\" in any way\n$result\n=\npg_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Joe's Widgets\"\n));\n// Execute the same prepared query, this time with a different parameter\n$result\n=\npg_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Clothes Clothes Clothes\"\n));\n?>"
  },
  {
    "input": "Example #1 PostgreSQL fetch all",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n    echo\n\"An error occurred.\\n\"\n;\n    exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT * FROM authors\"\n);\nif (!\n$result\n) {\n    echo\n\"An error occurred.\\n\"\n;\n    exit;\n}\n$arr\n=\npg_fetch_all\n(\n$result\n);\nprint_r\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 pg_fetch_all_columns() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT title, name, address FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n// Get an array of all author names\n$arr\n=\npg_fetch_all_columns\n(\n$result\n,\n1\n);\nvar_dump\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 pg_fetch_array() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT author, email FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$arr\n=\npg_fetch_array\n(\n$result\n,\n0\n,\nPGSQL_NUM\n);\necho\n$arr\n[\n0\n] .\n\" <- Row 1 Author\\n\"\n;\necho\n$arr\n[\n1\n] .\n\" <- Row 1 E-mail\\n\"\n;\n// The row parameter is optional; NULL can be passed instead,\n// to pass a result_type.  Successive calls to pg_fetch_array\n// will return the next row.\n$arr\n=\npg_fetch_array\n(\n$result\n,\nNULL\n,\nPGSQL_ASSOC\n);\necho\n$arr\n[\n\"author\"\n] .\n\" <- Row 2 Author\\n\"\n;\necho\n$arr\n[\n\"email\"\n] .\n\" <- Row 2 E-mail\\n\"\n;\n$arr\n=\npg_fetch_array\n(\n$result\n);\necho\n$arr\n[\n\"author\"\n] .\n\" <- Row 3 Author\\n\"\n;\necho\n$arr\n[\n1\n] .\n\" <- Row 3 E-mail\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_fetch_assoc() example",
    "output": "<?php\n$conn\n=\npg_connect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT id, author, email FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\nwhile (\n$row\n=\npg_fetch_assoc\n(\n$result\n)) {\n  echo\n$row\n[\n'id'\n];\n  echo\n$row\n[\n'author'\n];\n  echo\n$row\n[\n'email'\n];\n}\n?>"
  },
  {
    "input": "Example #1 pg_fetch_object() example",
    "output": "<?php\n$database\n=\n\"store\"\n;\n$db_conn\n=\npg_connect\n(\n\"host=localhost port=5432 dbname=\n$database\n\"\n);\nif (!\n$db_conn\n) {\n  echo\n\"Failed connecting to postgres database\n$database\n\\n\"\n;\n  exit;\n}\n$qu\n=\npg_query\n(\n$db_conn\n,\n\"SELECT * FROM books ORDER BY author\"\n);\nwhile (\n$data\n=\npg_fetch_object\n(\n$qu\n)) {\n  echo\n$data\n->\nauthor\n.\n\" (\"\n;\n  echo\n$data\n->\nyear\n.\n\"): \"\n;\n  echo\n$data\n->\ntitle\n.\n\"<br />\"\n;\n}\npg_free_result\n(\n$qu\n);\npg_close\n(\n$db_conn\n);\n?>"
  },
  {
    "input": "Example #1 pg_fetch_result() example",
    "output": "<?php\n$db\n=\npg_connect\n(\n\"dbname=users user=me\"\n);\n$res\n=\npg_query\n(\n$db\n,\n\"SELECT 1 UNION ALL SELECT 2\"\n);\n$val\n=\npg_fetch_result\n(\n$res\n,\n1\n,\n0\n);\necho\n\"First field in the second row is: \"\n,\n$val\n,\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_fetch_row() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT author, email FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\nwhile (\n$row\n=\npg_fetch_row\n(\n$result\n)) {\n  echo\n\"Author:\n$row\n[\n0\n]\n  E-mail:\n$row\n[\n1\n]\n\"\n;\n  echo\n\"<br />\\n\"\n;\n}\n\n?>"
  },
  {
    "input": "Example #1 pg_field_is_null() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die (\n\"Could not connect\"\n);\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select * from authors where author = 'Orwell'\"\n);\n  if (\n$res\n) {\n      if (\npg_field_is_null\n(\n$res\n,\n0\n,\n\"year\"\n) ==\n1\n) {\n          echo\n\"The value of the field year is null.\\n\"\n;\n      }\n      if (\npg_field_is_null\n(\n$res\n,\n0\n,\n\"year\"\n) ==\n0\n) {\n          echo\n\"The value of the field year is not null.\\n\"\n;\n    }\n }\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select * from authors where author = 'Orwell'\"\n);\n\n$i\n=\npg_num_fields\n(\n$res\n);\n  for (\n$j\n=\n0\n;\n$j\n<\n$i\n;\n$j\n++) {\n      echo\n\"column\n$j\n\\n\"\n;\n\n$fieldname\n=\npg_field_name\n(\n$res\n,\n$j\n);\n      echo\n\"fieldname:\n$fieldname\n\\n\"\n;\n      echo\n\"printed length: \"\n.\npg_field_prtlen\n(\n$res\n,\n$fieldname\n) .\n\" characters\\n\"\n;\n      echo\n\"storage length: \"\n.\npg_field_size\n(\n$res\n,\n$j\n) .\n\" bytes\\n\"\n;\n      echo\n\"field type: \"\n.\npg_field_type\n(\n$res\n,\n$j\n) .\n\" \\n\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select author, year, title from authors where author = 'Orwell'\"\n);\n\n  echo\n\"Column 'title' is field number: \"\n,\npg_field_num\n(\n$res\n,\n'title'\n);\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select * from authors where author = 'Orwell'\"\n);\n\n$i\n=\npg_num_fields\n(\n$res\n);\n  for (\n$j\n=\n0\n;\n$j\n<\n$i\n;\n$j\n++) {\n      echo\n\"column\n$j\n\\n\"\n;\n\n$fieldname\n=\npg_field_name\n(\n$res\n,\n$j\n);\n      echo\n\"fieldname:\n$fieldname\n\\n\"\n;\n      echo\n\"printed length: \"\n.\npg_field_prtlen\n(\n$res\n,\n$fieldname\n) .\n\" characters\\n\"\n;\n      echo\n\"storage length: \"\n.\npg_field_size\n(\n$res\n,\n$j\n) .\n\" bytes\\n\"\n;\n      echo\n\"field type: \"\n.\npg_field_type\n(\n$res\n,\n$j\n) .\n\" \\n\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select * from authors where author = 'Orwell'\"\n);\n\n$i\n=\npg_num_fields\n(\n$res\n);\n  for (\n$j\n=\n0\n;\n$j\n<\n$i\n;\n$j\n++) {\n      echo\n\"column\n$j\n\\n\"\n;\n\n$fieldname\n=\npg_field_name\n(\n$res\n,\n$j\n);\n      echo\n\"fieldname:\n$fieldname\n\\n\"\n;\n      echo\n\"printed length: \"\n.\npg_field_prtlen\n(\n$res\n,\n$fieldname\n) .\n\" characters\\n\"\n;\n      echo\n\"storage length: \"\n.\npg_field_size\n(\n$res\n,\n$j\n) .\n\" bytes\\n\"\n;\n      echo\n\"field type: \"\n.\npg_field_type\n(\n$res\n,\n$j\n) .\n\" \\n\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 Getting table information about a field",
    "output": "<?php\n$dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n$res\n=\npg_query\n(\n$dbconn\n,\n\"SELECT bar FROM foo\"\n);\necho\npg_field_table\n(\n$res\n,\n0\n);\necho\npg_field_table\n(\n$res\n,\n0\n,\ntrue\n);\n$res\n=\npg_query\n(\n$dbconn\n,\n\"SELECT version()\"\n);\nvar_dump\n(\npg_field_table\n(\n$res\n,\n0\n));\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Assume 'title' is a varchar type\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select title from authors where author = 'Orwell'\"\n);\n  echo\n\"Title field type: \"\n,\npg_field_type\n(\n$res\n,\n0\n);\n?>"
  },
  {
    "input": "Example #1 Getting information about fields",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Assume 'title' is a varchar type\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select title from authors where author = 'Orwell'\"\n);\n  echo\n\"Title field type OID: \"\n,\npg_field_type_oid\n(\n$res\n,\n0\n);\n?>"
  },
  {
    "input": "Example #1 pg_free_result() example",
    "output": "<?php\n$db\n=\npg_connect\n(\n\"dbname=users user=me\"\n);\n$res\n=\npg_query\n(\n$db\n,\n\"SELECT 1 UNION ALL SELECT 2\"\n);\n$val\n=\npg_fetch_result\n(\n$res\n,\n1\n,\n0\n);\necho\n\"First field in the second row is: \"\n,\n$val\n,\n\"\\n\"\n;\npg_free_result\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #1 PostgreSQL NOTIFY message",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n// Listen 'author_updated' message from other processes\npg_query\n(\n$conn\n,\n'LISTEN author_updated;'\n);\n$notify\n=\npg_get_notify\n(\n$conn\n);\nif (!\n$notify\n) {\n  echo\n\"No messages\\n\"\n;\n} else {\n\nprint_r\n(\n$notify\n);\n}\n?>"
  },
  {
    "input": "Example #1 PostgreSQL backend PID",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n// Backend process PID. Use PID with pg_get_notify()\n$pid\n=\npg_get_pid\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 pg_get_result() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from authors; select count(*) from authors;\"\n);\n  }\n\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\n\"First call to pg_get_result():\n$res1\n\\n\"\n;\n\n$rows1\n=\npg_num_rows\n(\n$res1\n);\n  echo\n\"\n$res1\n has\n$rows1\n records\\n\\n\"\n;\n\n\n$res2\n=\npg_get_result\n(\n$dbconn\n);\n  echo\n\"Second call to pg_get_result():\n$res2\n\\n\"\n;\n\n$rows2\n=\npg_num_rows\n(\n$res2\n);\n  echo\n\"\n$res2\n has\n$rows2\n records\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_host() example",
    "output": "<?php\n$pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\nif (\n$pgsql_conn\n) {\n   print\n\"Successfully connected to: \"\n.\npg_host\n(\n$pgsql_conn\n) .\n\"<br/>\\n\"\n;\n} else {\n   print\npg_last_error\n(\n$pgsql_conn\n);\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 pg_insert() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n// This is safe somewhat, since all values are escaped.\n  // However PostgreSQL supports JSON/Array. These are not\n  // safe by neither escape nor prepared query.\n\n$res\n=\npg_insert\n(\n$dbconn\n,\n'post_log'\n,\n$_POST\n,\nPGSQL_DML_ESCAPE\n);\n  if (\n$res\n) {\n      echo\n\"POST data is successfully logged\\n\"\n;\n  } else {\n      echo\n\"User must have sent wrong inputs\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_last_error() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Query that fails\n\n$res\n=\npg_query\n(\n$dbconn\n,\n\"select * from doesnotexist\"\n);\n\n  echo\npg_last_error\n(\n$dbconn\n);\n?>"
  },
  {
    "input": "Example #1 pg_last_notice() example",
    "output": "<?php\n  $pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\n\n\n$res\n=\npg_query\n(\n\"CREATE TABLE test (id SERIAL)\"\n);\n\n\n$notice\n=\npg_last_notice\n(\n$pgsql_conn\n);\n\n  echo\n$notice\n;\n?>"
  },
  {
    "input": "Example #1 pg_last_oid() example",
    "output": "<?php\n\n// Connect to the database\n\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\n\n// Create a sample table\n\npg_query\n(\n\"CREATE TABLE test (a INTEGER) WITH OIDS\"\n);\n\n// Insert some data into it\n\n$res\n=\npg_query\n(\n\"INSERT INTO test VALUES (1)\"\n);\n\n$oid\n=\npg_last_oid\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_close() example",
    "output": "<?php\n   $database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$oid\n=\npg_lo_create\n(\n$database\n);\n   echo\n\"\n$oid\n\\n\"\n;\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$oid\n,\n\"w\"\n);\n   echo\n\"\n$handle\n\\n\"\n;\n\npg_lo_write\n(\n$handle\n,\n\"large object data\"\n);\n\npg_lo_close\n(\n$handle\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_create() example",
    "output": "<?php\n   $database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$oid\n=\npg_lo_create\n(\n$database\n);\n   echo\n\"\n$oid\n\\n\"\n;\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$oid\n,\n\"w\"\n);\n   echo\n\"\n$handle\n\\n\"\n;\n\npg_lo_write\n(\n$handle\n,\n\"large object data\"\n);\n\npg_lo_close\n(\n$handle\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_export() example",
    "output": "<?php\n   $database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$oid\n=\npg_lo_create\n(\n$database\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$oid\n,\n\"w\"\n);\n\npg_lo_write\n(\n$handle\n,\n\"large object data\"\n);\n\npg_lo_close\n(\n$handle\n);\n\npg_lo_export\n(\n$database\n,\n$oid\n,\n'/tmp/lob.dat'\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_import() example",
    "output": "<?php\n   $database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$oid\n=\npg_lo_import\n(\n$database\n,\n'/tmp/lob.dat'\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_open() example",
    "output": "<?php\n   $database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$oid\n=\npg_lo_create\n(\n$database\n);\n   echo\n\"\n$oid\n\\n\"\n;\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$oid\n,\n\"w\"\n);\n   echo\n\"\n$handle\n\\n\"\n;\n\npg_lo_write\n(\n$handle\n,\n\"large object data\"\n);\n\npg_lo_close\n(\n$handle\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_read() example",
    "output": "<?php\n   $doc_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$doc_oid\n,\n\"r\"\n);\n\n$data\n=\npg_lo_read\n(\n$handle\n,\n50000\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n   echo\n$data\n;\n?>"
  },
  {
    "input": "Example #1 pg_lo_read_all() example",
    "output": "<?php\n   header\n(\n'Content-type: image/jpeg'\n);\n\n$image_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$image_oid\n,\n\"r\"\n);\n\npg_lo_read_all\n(\n$handle\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_seek() example",
    "output": "<?php\n   $doc_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$doc_oid\n,\n\"r\"\n);\n\n// Skip first 50000 bytes\n\npg_lo_seek\n(\n$handle\n,\n50000\n,\nPGSQL_SEEK_SET\n);\n\n// Read the next 10000 bytes\n\n$data\n=\npg_lo_read\n(\n$handle\n,\n10000\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n   echo\n$data\n;\n?>"
  },
  {
    "input": "Example #1 pg_lo_tell() example",
    "output": "<?php\n   $doc_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$doc_oid\n,\n\"r\"\n);\n\n// Skip first 50000 bytes\n\npg_lo_seek\n(\n$handle\n,\n50000\n,\nPGSQL_SEEK_SET\n);\n\n// See how far we've skipped\n\n$offset\n=\npg_lo_tell\n(\n$handle\n);\n   echo\n\"Seek position is:\n$offset\n\"\n;\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_truncate() example",
    "output": "<?php\n   $doc_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$doc_oid\n,\n\"r\"\n);\n\n// Truncate to 0\n\npg_lo_truncate\n(\n$handle\n,\n0\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n   echo\n$data\n;\n?>"
  },
  {
    "input": "Example #1 pg_lo_unlink() example",
    "output": "<?php\n\n// OID of the large object to delete\n\n$doc_oid\n=\n189762345\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\npg_lo_unlink\n(\n$database\n,\n$doc_oid\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_lo_write() example",
    "output": "<?php\n   $doc_oid\n=\n189762345\n;\n\n$data\n=\n\"This will overwrite the start of the large object.\"\n;\n\n$database\n=\npg_connect\n(\n\"dbname=jacarta\"\n);\n\npg_query\n(\n$database\n,\n\"begin\"\n);\n\n$handle\n=\npg_lo_open\n(\n$database\n,\n$doc_oid\n,\n\"w\"\n);\n\n$data\n=\npg_lo_write\n(\n$handle\n,\n$data\n);\n\npg_query\n(\n$database\n,\n\"commit\"\n);\n?>"
  },
  {
    "input": "Example #1 Getting table metadata",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$meta\n=\npg_meta_data\n(\n$dbconn\n,\n'authors'\n);\n  if (\nis_array\n(\n$meta\n)) {\n      echo\n'<pre>'\n;\n\nvar_dump\n(\n$meta\n);\n      echo\n'</pre>'\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_num_fields() example",
    "output": "<?php\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT 1, 2\"\n);\n$num\n=\npg_num_fields\n(\n$result\n);\necho\n$num\n.\n\" field(s) returned.\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_num_rows() example",
    "output": "<?php\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT 1\"\n);\n$rows\n=\npg_num_rows\n(\n$result\n);\necho\n$rows\n.\n\" row(s) returned.\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pg_options() example",
    "output": "<?php\n   $pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\n   echo\npg_options\n(\n$pgsql_conn\n);\n?>"
  },
  {
    "input": "Example #1 pg_parameter_status() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  echo\n\"Server encoding: \"\n,\npg_parameter_status\n(\n$dbconn\n,\n\"server_encoding\"\n);\n?>"
  },
  {
    "input": "Example #1 Using pg_pconnect()",
    "output": "<?php\n$dbconn\n=\npg_pconnect\n(\n\"dbname=mary\"\n);\n//connect to a database named \"mary\"\n$dbconn2\n=\npg_pconnect\n(\n\"host=localhost port=5432 dbname=mary\"\n);\n// connect to a database named \"mary\" on \"localhost\" at port \"5432\"\n$dbconn3\n=\npg_pconnect\n(\n\"host=sheep port=5432 dbname=mary user=lamb password=foo\"\n);\n//connect to a database named \"mary\" on the host \"sheep\" with a username and password\n$conn_string\n=\n\"host=sheep port=5432 dbname=test user=lamb password=bar\"\n;\n$dbconn4\n=\npg_pconnect\n(\n$conn_string\n);\n//connect to a database named \"test\" on the host \"sheep\" with a username and password\n?>"
  },
  {
    "input": "Example #1 pg_ping() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\nif (!\npg_ping\n(\n$conn\n))\n  die(\n\"Connection is broken\\n\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_port() example",
    "output": "<?php\n$pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\nif (\n$pgsql_conn\n) {\n   print\n\"Successfully connected to port: \"\n.\npg_port\n(\n$pgsql_conn\n) .\n\"<br/>\\n\"\n;\n} else {\n   print\npg_last_error\n(\n$pgsql_conn\n);\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 Using pg_prepare()",
    "output": "<?php\n// Connect to a database named \"mary\"\n$dbconn\n=\npg_connect\n(\n\"dbname=mary\"\n);\n// Prepare a query for execution\n$result\n=\npg_prepare\n(\n$dbconn\n,\n\"my_query\"\n,\n'SELECT * FROM shops WHERE name = $1'\n);\n// Execute the prepared query.  Note that it is not necessary to escape\n// the string \"Joe's Widgets\" in any way\n$result\n=\npg_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Joe's Widgets\"\n));\n// Execute the same prepared query, this time with a different parameter\n$result\n=\npg_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Clothes Clothes Clothes\"\n));\n?>"
  },
  {
    "input": "Example #1 pg_put_line() example",
    "output": "<?php\n  $conn\n=\npg_pconnect\n(\n\"dbname=foo\"\n);\n\npg_query\n(\n$conn\n,\n\"create table bar (a int4, b char(16), d float8)\"\n);\n\npg_query\n(\n$conn\n,\n\"copy bar from stdin\"\n);\n\npg_put_line\n(\n$conn\n,\n\"3\\thello world\\t4.5\\n\"\n);\n\npg_put_line\n(\n$conn\n,\n\"4\\tgoodbye world\\t7.11\\n\"\n);\n\npg_put_line\n(\n$conn\n,\n\"\\\\.\\n\"\n);\n\npg_end_copy\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 pg_query() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT author, email FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\nwhile (\n$row\n=\npg_fetch_row\n(\n$result\n)) {\n  echo\n\"Author:\n$row\n[\n0\n]\n  E-mail:\n$row\n[\n1\n]\n\"\n;\n  echo\n\"<br />\\n\"\n;\n}\n\n?>"
  },
  {
    "input": "Example #2 Using pg_query() with multiple statements",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\n// these statements will be executed as one transaction\n$query\n=\n\"UPDATE authors SET author=UPPER(author) WHERE id=1;\"\n;\n$query\n.=\n\"UPDATE authors SET author=LOWER(author) WHERE id=2;\"\n;\n$query\n.=\n\"UPDATE authors SET author=NULL WHERE id=3;\"\n;\npg_query\n(\n$conn\n,\n$query\n);\n?>"
  },
  {
    "input": "Example #1 Using pg_query_params()",
    "output": "<?php\n// Connect to a database named \"mary\"\n$dbconn\n=\npg_connect\n(\n\"dbname=mary\"\n);\n// Find all shops named Joe's Widgets.  Note that it is not necessary to\n// escape \"Joe's Widgets\"\n$result\n=\npg_query_params\n(\n$dbconn\n,\n'SELECT * FROM shops WHERE name = $1'\n, array(\n\"Joe's Widgets\"\n));\n// Compare against just using pg_query\n$str\n=\npg_escape_string\n(\n\"Joe's Widgets\"\n);\n$result\n=\npg_query\n(\n$dbconn\n,\n\"SELECT * FROM shops WHERE name = '\n{\n$str\n}\n'\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_result_error() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from doesnotexist;\"\n);\n  }\n\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\npg_result_error\n(\n$res1\n);\n?>"
  },
  {
    "input": "Example #1 pg_result_error_field() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from doesnotexist;\"\n);\n  }\n\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\npg_result_error_field\n(\n$res1\n,\nPGSQL_DIAG_SQLSTATE\n);\n?>"
  },
  {
    "input": "Example #1 pg_result_memory_size() example",
    "output": "<?php\n$db\n=\npg_connect\n(\n\"dbname=users user=me\"\n);\n$res\n=\npg_query\n(\n$db\n,\n'SELECT 1'\n);\n$size\n=\npg_result_memory_size\n(\n$res\n);\nvar_dump\n(\n$size\n);\n?>"
  },
  {
    "input": "Example #1 pg_result_seek() example",
    "output": "<?php\n// Connect to the database\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\n// Execute a query\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT author, email FROM authors\"\n);\n// Seek to the 3rd row (assuming there are 3 rows)\npg_result_seek\n(\n$result\n,\n2\n);\n// Fetch the 3rd row\n$row\n=\npg_fetch_row\n(\n$result\n);\n\n?>"
  },
  {
    "input": "Example #1 pg_result_status() example",
    "output": "<?php\n// Connect to the database\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\n// Execute a COPY\n$result\n=\npg_query\n(\n$conn\n,\n\"COPY authors FROM STDIN;\"\n);\n// Get the result status\n$status\n=\npg_result_status\n(\n$result\n);\n// Determine status\nif (\n$status\n==\nPGSQL_COPY_IN\n)\n   echo\n\"Copy began.\"\n;\nelse\n   echo\n\"Copy failed.\"\n;\n\n?>"
  },
  {
    "input": "Example #1 pg_select() example",
    "output": "<?php\n  $db\n=\npg_connect\n(\n'dbname=foo'\n);\n\n// This is safe somewhat, since all values are escaped.\n  // However PostgreSQL supports JSON/Array. These are not\n  // safe by neither escape nor prepared query.\n\n$rec\n=\npg_select\n(\n$db\n,\n'post_log'\n,\n$_POST\n,\nPG_DML_ESCAPE\n);\n  if (\n$rec\n) {\n      echo\n\"Records selected\\n\"\n;\n\nvar_dump\n(\n$rec\n);\n  } else {\n      echo\n\"User must have sent wrong inputs\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 Using pg_send_execute()",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Prepare a query for execution\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_prepare\n(\n$dbconn\n,\n\"my_query\"\n,\n'SELECT * FROM shops WHERE name = $1'\n);\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n// Execute the prepared query.  Note that it is not necessary to escape\n  // the string \"Joe's Widgets\" in any way\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Joe's Widgets\"\n));\n\n$res2\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n\n// Execute the same prepared query, this time with a different parameter\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Clothes Clothes Clothes\"\n));\n\n$res3\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n?>"
  },
  {
    "input": "Example #1 Using pg_send_prepare()",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Prepare a query for execution\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_prepare\n(\n$dbconn\n,\n\"my_query\"\n,\n'SELECT * FROM shops WHERE name = $1'\n);\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n// Execute the prepared query.  Note that it is not necessary to escape\n  // the string \"Joe's Widgets\" in any way\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Joe's Widgets\"\n));\n\n$res2\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n\n// Execute the same prepared query, this time with a different parameter\n\nif (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_execute\n(\n$dbconn\n,\n\"my_query\"\n, array(\n\"Clothes Clothes Clothes\"\n));\n\n$res3\n=\npg_get_result\n(\n$dbconn\n);\n  }\n\n?>"
  },
  {
    "input": "Example #1 pg_send_query() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from authors; select count(*) from authors;\"\n);\n  }\n\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\n\"First call to pg_get_result():\n$res1\n\\n\"\n;\n\n$rows1\n=\npg_num_rows\n(\n$res1\n);\n  echo\n\"\n$res1\n has\n$rows1\n records\\n\\n\"\n;\n\n\n$res2\n=\npg_get_result\n(\n$dbconn\n);\n  echo\n\"Second call to pg_get_result():\n$res2\n\\n\"\n;\n\n$rows2\n=\npg_num_rows\n(\n$res2\n);\n  echo\n\"\n$res2\n has\n$rows2\n records\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Using pg_send_query_params()",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n// Using parameters.  Note that it is not necessary to quote or escape\n  // the parameter.\n\npg_send_query_params\n(\n$dbconn\n,\n'select count(*) from authors where city = $1'\n, array(\n'Perth'\n));\n\n// Compare against basic pg_send_query usage\n\n$str\n=\npg_escape_string\n(\n'Perth'\n);\n\npg_send_query\n(\n$dbconn\n,\n\"select count(*) from authors where city = '\n{\n$str\n}\n'\"\n);\n?>"
  },
  {
    "input": "Example #1 pg_result_memory_size() example",
    "output": "<?php\n$conn\n=\npg_connect\n(\n$conn_str\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n10\n;\n$i\n++) {\n\npg_query\n(\n$conn\n,\n\"INSERT INTO users DEFAULT VALUES\"\n);\n}\npg_send_query\n(\n$conn\n,\n\"SELECT * FROM users\"\n);\npg_set_chunked_rows_size\n(\n$conn\n,\n1\n);\n$result\n=\npg_get_result\n(\n$conn\n);\nvar_dump\n(\npg_num_rows\n(\n$result\n));\n// No effect after the result is retrieved\nvar_dump\n(\npg_set_chunked_rows_size\n(\n$conn\n,\n10\n));"
  },
  {
    "input": "Example #1 pg_set_client_encoding() example",
    "output": "<?php\n$conn\n=\npg_pconnect\n(\n\"dbname=publisher\"\n);\nif (!\n$conn\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n// Set the client encoding to UNICODE.  Data will be automatically\n// converted from the backend encoding to the frontend.\npg_set_client_encoding\n(\n$conn\n,\n\"UNICODE\"\n);\n$result\n=\npg_query\n(\n$conn\n,\n\"SELECT author, email FROM authors\"\n);\nif (!\n$result\n) {\n  echo\n\"An error occurred.\\n\"\n;\n  exit;\n}\n// Write out UTF-8 data\nwhile (\n$row\n=\npg_fetch_row\n(\n$result\n)) {\n  echo\n\"Author:\n$row\n[\n0\n]\n  E-mail:\n$row\n[\n1\n]\n\"\n;\n  echo\n\"<br />\\n\"\n;\n}\n\n?>"
  },
  {
    "input": "Example #1 pg_set_error_context_visibility() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from doesnotexist;\"\n);\n  }\n\npg_set_error_context_visibility\n(\n$dbconn\n,\nPGSQL_SHOW_CONTEXT_ALWAYS\n);\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\npg_result_error\n(\n$res1\n);\n?>"
  },
  {
    "input": "Example #1 pg_set_error_verbosity() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n  if (!\npg_connection_busy\n(\n$dbconn\n)) {\n\npg_send_query\n(\n$dbconn\n,\n\"select * from doesnotexist;\"\n);\n  }\n\n\npg_set_error_verbosity\n(\n$dbconn\n,\nPGSQL_ERRORS_VERBOSE\n);\n\n$res1\n=\npg_get_result\n(\n$dbconn\n);\n  echo\npg_result_error\n(\n$res1\n);\n?>"
  },
  {
    "input": "Example #1 pg_trace() example",
    "output": "<?php\n$pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\nif (\n$pgsql_conn\n) {\n\npg_trace\n(\n'/tmp/trace.log'\n,\n'w'\n,\n$pgsql_conn\n);\n\npg_query\n(\n\"SELECT 1\"\n);\n\npg_untrace\n(\n$pgsql_conn\n);\n\n// Now /tmp/trace.log will contain backend communication\n} else {\n   print\npg_last_error\n(\n$pgsql_conn\n);\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 pg_transaction_status() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"dbname=publisher\"\n) or die(\n\"Could not connect\"\n);\n\n$stat\n=\npg_transaction_status\n(\n$dbconn\n);\n  if (\n$stat\n===\nPGSQL_TRANSACTION_UNKNOWN\n) {\n      echo\n'Connection is bad'\n;\n  } else if (\n$stat\n===\nPGSQL_TRANSACTION_IDLE\n) {\n      echo\n'Connection is currently idle'\n;\n  } else {\n      echo\n'Connection is in a transaction state'\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_tty() example",
    "output": "<?php\n$pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\nif (\n$pgsql_conn\n) {\n   print\n\"Server debug TTY is: \"\n.\npg_tty\n(\n$pgsql_conn\n) .\n\"<br/>\\n\"\n;\n} else {\n   print\npg_last_error\n(\n$pgsql_conn\n);\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 pg_unescape_bytea() example",
    "output": "<?php\n\n// Connect to the database\n\n$dbconn\n=\npg_connect\n(\n'dbname=foo'\n);\n\n\n// Get the bytea data\n\n$res\n=\npg_query\n(\n\"SELECT data FROM gallery WHERE name='Pine trees'\"\n);\n\n$raw\n=\npg_fetch_result\n(\n$res\n,\n'data'\n);\n\n\n// Convert to binary and send to the browser\n\nheader\n(\n'Content-type: image/jpeg'\n);\n  echo\npg_unescape_bytea\n(\n$raw\n);\n?>"
  },
  {
    "input": "Example #1 pg_untrace() example",
    "output": "<?php\n$pgsql_conn\n=\npg_connect\n(\n\"dbname=mark host=localhost\"\n);\nif (\n$pgsql_conn\n) {\n\npg_trace\n(\n'/tmp/trace.log'\n,\n'w'\n,\n$pgsql_conn\n);\n\npg_query\n(\n\"SELECT 1\"\n);\n\npg_untrace\n(\n$pgsql_conn\n);\n\n// Now tracing of backend communication is disabled\n} else {\n   print\npg_last_error\n(\n$pgsql_conn\n);\n   exit;\n}\n?>"
  },
  {
    "input": "Example #1 pg_update() example",
    "output": "<?php\n  $db\n=\npg_connect\n(\n'dbname=foo'\n);\n\n$data\n= array(\n'field1'\n=>\n'AA'\n,\n'field2'\n=>\n'BB'\n);\n\n// This is safe somewhat, since all values are escaped.\n  // However PostgreSQL supports JSON/Array. These are not\n  // safe by neither escape nor prepared query.\n\n$res\n=\npg_update\n(\n$db\n,\n'post_log'\n,\n$_POST\n,\n$data\n);\n  if (\n$res\n) {\n      echo\n\"Data is updated:\n$res\n\\n\"\n;\n  } else {\n      echo\n\"User must have sent wrong inputs\\n\"\n;\n  }\n?>"
  },
  {
    "input": "Example #1 pg_version() example",
    "output": "<?php\n  $dbconn\n=\npg_connect\n(\n\"host=localhost port=5432 dbname=mary\"\n)\n     or die(\n\"Could not connect\"\n);\n\n\n$v\n=\npg_version\n(\n$dbconn\n);\n\n  echo\n$v\n[\n'client'\n];\n?>"
  },
  {
    "input": "Example #1 Backup an existing database",
    "output": "<?php\n// $conn is a connection to an already opened sqlite3 database\n$backup\n= new\nSQLite3\n(\n'backup.sqlite'\n);\n$conn\n->\nbackup\n(\n$backup\n);\n?>"
  },
  {
    "input": "Example #1 SQLite3::changes() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$query\n=\n$db\n->\nexec\n(\n'UPDATE counter SET views=0 WHERE page=\"test\"'\n);\nif (\n$query\n) {\n    echo\n'Number of rows modified: '\n,\n$db\n->\nchanges\n();\n}\n?>"
  },
  {
    "input": "Example #1 SQLite3::close() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 SQLite3::__construct() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\nexec\n(\n'CREATE TABLE foo (bar TEXT)'\n);\n$db\n->\nexec\n(\n\"INSERT INTO foo (bar) VALUES ('This is a test')\"\n);\n$result\n=\n$db\n->\nquery\n(\n'SELECT bar FROM foo'\n);\nvar_dump\n(\n$result\n->\nfetchArray\n());\n?>"
  },
  {
    "input": "Example #1 max_length aggregation function example",
    "output": "<?php\n$data\n= array(\n\n'one'\n,\n\n'two'\n,\n\n'three'\n,\n\n'four'\n,\n\n'five'\n,\n\n'six'\n,\n\n'seven'\n,\n\n'eight'\n,\n\n'nine'\n,\n\n'ten'\n,\n   );\n$db\n= new\nSQLite3\n(\n':memory:'\n);\n$db\n->\nexec\n(\n\"CREATE TABLE strings(a)\"\n);\n$insert\n=\n$db\n->\nprepare\n(\n'INSERT INTO strings VALUES (?)'\n);\nforeach (\n$data\nas\n$str\n) {\n\n$insert\n->\nbindValue\n(\n1\n,\n$str\n);\n\n$insert\n->\nexecute\n();\n}\n$insert\n=\nnull\n;\nfunction\nmax_len_step\n(\n$context\n,\n$rownumber\n,\n$string\n)\n{\n    if (\nstrlen\n(\n$string\n) >\n$context\n) {\n\n$context\n=\nstrlen\n(\n$string\n);\n    }\n    return\n$context\n;\n}\nfunction\nmax_len_finalize\n(\n$context\n,\n$rownumber\n)\n{\n    return\n$context\n===\nnull\n?\n0\n:\n$context\n;\n}\n$db\n->\ncreateAggregate\n(\n'max_len'\n,\n'max_len_step'\n,\n'max_len_finalize'\n);\nvar_dump\n(\n$db\n->\nquerySingle\n(\n'SELECT max_len(a) from strings'\n));\n?>"
  },
  {
    "input": "Example #1 SQLite3::createFunction() example",
    "output": "<?php\nfunction\nmy_udf_md5\n(\n$string\n) {\n    return\nhash\n(\n'md5'\n,\n$string\n);\n}\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\ncreateFunction\n(\n'my_udf_md5'\n,\n'my_udf_md5'\n);\nvar_dump\n(\n$db\n->\nquerySingle\n(\n'SELECT my_udf_md5(\"test\")'\n));\n?>"
  },
  {
    "input": "Example #1 SQLite3::enableExceptions() example",
    "output": "<?php\n$sqlite\n= new\nSQLite3\n(\n':memory:'\n);\ntry {\n\n$sqlite\n->\nexec\n(\n'create table foo'\n);\n\n$sqlite\n->\nenableExceptions\n(\ntrue\n);\n\n$sqlite\n->\nexec\n(\n'create table bar'\n);\n} catch (\nException $e\n) {\n    echo\n'Caught exception: '\n.\n$e\n->\ngetMessage\n();\n}\n?>"
  },
  {
    "input": "Example #1 SQLite3::exec() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\nexec\n(\n'CREATE TABLE bar (bar TEXT)'\n);\n?>"
  },
  {
    "input": "Example #1 SQLite3::loadExtension() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\nloadExtension\n(\n'libagg.so'\n);\n?>"
  },
  {
    "input": "Example #1 SQLite3::open() example",
    "output": "<?php\n/**\n * Simple example of extending the SQLite3 class and changing the __construct\n * parameters, then using the open method to initialize the DB.\n */\nclass\nMyDB\nextends\nSQLite3\n{\n    function\n__construct\n()\n    {\n\n$this\n->\nopen\n(\n'mysqlitedb.db'\n);\n    }\n}\n$db\n= new\nMyDB\n();\n$db\n->\nexec\n(\n'CREATE TABLE foo (bar STRING)'\n);\n$db\n->\nexec\n(\n\"INSERT INTO foo (bar) VALUES ('This is a test')\"\n);\n$result\n=\n$db\n->\nquery\n(\n'SELECT bar FROM foo'\n);\nvar_dump\n(\n$result\n->\nfetchArray\n());\n?>"
  },
  {
    "input": "Example #1 SQLite3::openBlob() example",
    "output": "<?php\n$conn\n= new\nSQLite3\n(\n':memory:'\n);\n$conn\n->\nexec\n(\n'CREATE TABLE test (text text)'\n);\n$conn\n->\nexec\n(\n\"INSERT INTO test VALUES ('Lorem ipsum')\"\n);\n$stream\n=\n$conn\n->\nopenBlob\n(\n'test'\n,\n'text'\n,\n1\n);\necho\nstream_get_contents\n(\n$stream\n);\nfclose\n(\n$stream\n);\n// mandatory, otherwise the next line would fail\n$conn\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #2 Incrementally writing a BLOB",
    "output": "<?php\n$conn\n= new\nSQLite3\n(\n':memory:'\n);\n$conn\n->\nexec\n(\n'CREATE TABLE test (text text)'\n);\n$conn\n->\nexec\n(\n\"INSERT INTO test VALUES (zeroblob(36))\"\n);\n$stream\n=\n$conn\n->\nopenBlob\n(\n'test'\n,\n'text'\n,\n1\n,\n'main'\n,\nSQLITE3_OPEN_READWRITE\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n3\n;\n$i\n++) {\n\nfwrite\n(\n$stream\n,\n\"Lorem ipsum\\n\"\n);\n}\nfclose\n(\n$stream\n);\necho\n$conn\n->\nquerySingle\n(\n\"SELECT text FROM test\"\n);\n$conn\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 SQLite3::prepare() example",
    "output": "<?php\nunlink\n(\n'mysqlitedb.db'\n);\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$db\n->\nexec\n(\n'CREATE TABLE foo (id INTEGER, bar STRING)'\n);\n$db\n->\nexec\n(\n\"INSERT INTO foo (id, bar) VALUES (1, 'This is a test')\"\n);\n$stmt\n=\n$db\n->\nprepare\n(\n'SELECT bar FROM foo WHERE id=:id'\n);\n$stmt\n->\nbindValue\n(\n':id'\n,\n1\n,\nSQLITE3_INTEGER\n);\n$result\n=\n$stmt\n->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchArray\n());\n?>"
  },
  {
    "input": "Example #1 SQLite3::query() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\n$results\n=\n$db\n->\nquery\n(\n'SELECT bar FROM foo'\n);\nwhile (\n$row\n=\n$results\n->\nfetchArray\n()) {\n\nvar_dump\n(\n$row\n);\n}\n?>"
  },
  {
    "input": "Example #1 SQLite3::querySingle() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n'mysqlitedb.db'\n);\nvar_dump\n(\n$db\n->\nquerySingle\n(\n'SELECT username FROM user WHERE userid=1'\n));\nprint_r\n(\n$db\n->\nquerySingle\n(\n'SELECT username, email FROM user WHERE userid=1'\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 SQLite3::version() example",
    "output": "<?php\nprint_r\n(\nSQLite3\n::\nversion\n());\n?>"
  },
  {
    "input": "Example #1 SQLite3Stmt::bindValue() example",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n':memory:'\n);\n$db\n->\nexec\n(\n'CREATE TABLE foo (id INTEGER, bar STRING)'\n);\n$db\n->\nexec\n(\n\"INSERT INTO foo (id, bar) VALUES (1, 'This is a test')\"\n);\n$stmt\n=\n$db\n->\nprepare\n(\n'SELECT bar FROM foo WHERE id=:id'\n);\n$stmt\n->\nbindValue\n(\n':id'\n,\n1\n,\nSQLITE3_INTEGER\n);\n$result\n=\n$stmt\n->\nexecute\n();\nvar_dump\n(\n$result\n->\nfetchArray\n(\nSQLITE3_ASSOC\n));\n?>"
  },
  {
    "input": "Example #1 Inspecting the expanded SQL",
    "output": "<?php\n$db\n= new\nSQLite3\n(\n':memory:'\n);\n$stmt\n=\n$db\n->\nprepare\n(\n\"SELECT :a, ?, :c\"\n);\n$stmt\n->\nbindValue\n(\n':a'\n,\n'foo'\n);\n$answer\n=\n42\n;\n$stmt\n->\nbindParam\n(\n2\n,\n$answer\n);\nvar_dump\n(\n$stmt\n->\ngetSQL\n(\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 sqlsrv_cancel() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"SELECT Sales FROM Table_1\"\n;\n$stmt\n=\nsqlsrv_prepare\n(\n$conn\n,\n$sql\n);\nif(\n$stmt\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\nif(\nsqlsrv_execute\n(\n$stmt\n) ===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$salesTotal\n=\n0\n;\n$count\n=\n0\n;\nwhile( (\n$row\n=\nsqlsrv_fetch_array\n(\n$stmt\n)) &&\n$salesTotal\n<=\n100000\n)\n{\n\n$qty\n=\n$row\n[\n0\n];\n\n$price\n=\n$row\n[\n1\n];\n\n$salesTotal\n+= (\n$price\n*\n$qty\n);\n\n$count\n++;\n}\necho\n\"\n$count\n sales accounted for the first $\n$salesTotal\n in revenue.<br />\"\n;\n// Cancel the pending results. The statement can be reused.\nsqlsrv_cancel\n(\n$stmt\n);\n?>"
  },
  {
    "input": "Example #1 sqlsrv_client_info() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connOptions\n= array(\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connOptions\n);\nif(\n$conn\n===\nfalse\n) {\n    die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\nif(\n$client_info\n=\nsqlsrv_client_info\n(\n$conn\n)) {\n    foreach(\n$client_info\nas\n$key\n=>\n$value\n) {\n        echo\n$key\n.\n\": \"\n.\n$value\n.\n\"<br />\"\n;\n    }\n} else {\n    echo\n\"Error in retrieving client info.<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_close() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpres\"\n;\n$connOptions\n= array(\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n,\n\"Database\"\n=>\n\"dbname\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connOptions\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n//-------------------------------------\n// Perform database operations here.\n//-------------------------------------\n// Close the connection.\nsqlsrv_close\n(\n$conn\n);\n?>"
  },
  {
    "input": "Example #1 Connect using Windows Authentication.",
    "output": "<?php\n$serverName\n=\n\"serverName\\\\sqlexpress\"\n;\n//serverName\\instanceName\n// Since UID and PWD are not specified in the $connectionInfo array,\n// The connection will be attempted using Windows Authentication.\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n) {\n     echo\n\"Connection established.<br />\"\n;\n}else{\n     echo\n\"Connection could not be established.<br />\"\n;\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n?>"
  },
  {
    "input": "Example #2 Connect by specifying a user name and password.",
    "output": "<?php\n$serverName\n=\n\"serverName\\\\sqlexpress\"\n;\n//serverName\\instanceName\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"userName\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n) {\n     echo\n\"Connection established.<br />\"\n;\n}else{\n     echo\n\"Connection could not be established.<br />\"\n;\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n?>"
  },
  {
    "input": "Example #3 Connect on a specified port.",
    "output": "<?php\n$serverName\n=\n\"serverName\\\\sqlexpress, 1542\"\n;\n//serverName\\instanceName, portNumber (default is 1433)\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"userName\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n) {\n     echo\n\"Connection established.<br />\"\n;\n}else{\n     echo\n\"Connection could not be established.<br />\"\n;\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n?>"
  },
  {
    "input": "Example #1 functionname() example",
    "output": "<?php\n$serverName\n=\n\"serverName/sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n/* Set up a query to select an invalid column name. */\n$sql\n=\n\"SELECT BadColumnName FROM Table_1\"\n;\n/* Execution of the query will fail because of the bad column name. */\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n);\nif(\n$stmt\n===\nfalse\n) {\n    if( (\n$errors\n=\nsqlsrv_errors\n() ) !=\nnull\n) {\n        foreach(\n$errors\nas\n$error\n) {\n            echo\n\"SQLSTATE: \"\n.\n$error\n[\n'SQLSTATE'\n].\n\"<br />\"\n;\n            echo\n\"code: \"\n.\n$error\n[\n'code'\n].\n\"<br />\"\n;\n            echo\n\"message: \"\n.\n$error\n[\n'message'\n].\n\"<br />\"\n;\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Retrieving an associative array.",
    "output": "<?php\n$serverName\n=\n\"serverName\\instanceName\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n    die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"SELECT FirstName, LastName FROM SomeTable\"\n;\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n);\nif(\n$stmt\n===\nfalse\n) {\n    die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n) );\n}\nwhile(\n$row\n=\nsqlsrv_fetch_array\n(\n$stmt\n,\nSQLSRV_FETCH_ASSOC\n) ) {\n      echo\n$row\n[\n'LastName'\n].\n\", \"\n.\n$row\n[\n'FirstName'\n].\n\"<br />\"\n;\n}\nsqlsrv_free_stmt\n(\n$stmt\n);\n?>"
  },
  {
    "input": "Example #2 Retrieving a numeric array.",
    "output": "<?php\n$serverName\n=\n\"serverName\\instanceName\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n    die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"SELECT FirstName, LastName FROM SomeTable\"\n;\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n);\nif(\n$stmt\n===\nfalse\n) {\n    die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n) );\n}\nwhile(\n$row\n=\nsqlsrv_fetch_array\n(\n$stmt\n,\nSQLSRV_FETCH_NUMERIC\n) ) {\n      echo\n$row\n[\n0\n].\n\", \"\n.\n$row\n[\n1\n].\n\"<br />\"\n;\n}\nsqlsrv_free_stmt\n(\n$stmt\n);\n?>"
  },
  {
    "input": "Example #1 sqlsrv_field_metadata() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"AdventureWorks\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n   die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"SELECT * FROM Table_1\"\n;\n$stmt\n=\nsqlsrv_prepare\n(\n$conn\n,\n$sql\n);\nforeach(\nsqlsrv_field_metadata\n(\n$stmt\n) as\n$fieldMetadata\n) {\n    foreach(\n$fieldMetadata\nas\n$name\n=>\n$value\n) {\n       echo\n\"\n$name\n:\n$value\n<br />\"\n;\n    }\n      echo\n\"<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_free_stmt() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n\"SELECT * FROM Table_1\"\n);\nif(\n$stmt\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n/*-------------------------------\n     Process query results here.\n-------------------------------*/\n/* Free the statement resources. */\nsqlsrv_free_stmt\n(\n$stmt\n);\n?>"
  },
  {
    "input": "Example #1 sqlsrv_has_rows() example",
    "output": "<?php\n$server\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$server\n,\n$connectionInfo\n);\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n\"SELECT * FROM Table_1\"\n);\nif (\n$stmt\n) {\n\n$rows\n=\nsqlsrv_has_rows\n(\n$stmt\n);\n   if (\n$rows\n===\ntrue\n)\n      echo\n\"There are rows. <br />\"\n;\n   else\n      echo\n\"There are no rows. <br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_num_fields() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n   die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"SELECT * FROM Table_1\"\n;\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n);\nif(\n$stmt\n===\nfalse\n) {\n   die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$numFields\n=\nsqlsrv_num_fields\n(\n$stmt\n);\nwhile(\nsqlsrv_fetch\n(\n$stmt\n)) {\n\n// Iterate through the fields of each row.\n\nfor(\n$i\n=\n0\n;\n$i\n<\n$numFields\n;\n$i\n++) {\n      echo\nsqlsrv_get_field\n(\n$stmt\n,\n$i\n).\n\" \"\n;\n   }\n   echo\n\"<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_num_rows() example",
    "output": "<?php\n$server\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$server\n,\n$connectionInfo\n);\n$sql\n=\n\"SELECT * FROM Table_1\"\n;\n$params\n= array();\n$options\n=  array(\n\"Scrollable\"\n=>\nSQLSRV_CURSOR_KEYSET\n);\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n,\n$params\n,\n$options\n);\n$row_count\n=\nsqlsrv_num_rows\n(\n$stmt\n);\n\nif (\n$row_count\n===\nfalse\n)\n   echo\n\"Error in retrieveing row count.\"\n;\nelse\n   echo\n$row_count\n;\n?>"
  },
  {
    "input": "Example #1 sqlsrv_query() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"INSERT INTO Table_1 (id, data) VALUES (?, ?)\"\n;\n$params\n= array(\n1\n,\n\"some data\"\n);\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n,\n$params\n);\nif(\n$stmt\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_rows_affected() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"UPDATE Table_1 SET data = ? WHERE id = ?\"\n;\n$params\n= array(\n\"updated data\"\n,\n1\n);\n$stmt\n=\nsqlsrv_query\n(\n$conn\n,\n$sql\n,\n$params\n);\n$rows_affected\n=\nsqlsrv_rows_affected\n(\n$stmt\n);\nif(\n$rows_affected\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n} elseif(\n$rows_affected\n== -\n1\n) {\n      echo\n\"No information available.<br />\"\n;\n} else {\n      echo\n$rows_affected\n.\n\" rows were updated.<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sqlsrv_send_stream_data() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$connectionInfo\n= array(\n\"Database\"\n=>\n\"dbName\"\n,\n\"UID\"\n=>\n\"username\"\n,\n\"PWD\"\n=>\n\"password\"\n);\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n,\n$connectionInfo\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$sql\n=\n\"UPDATE Table_1 SET data = ( ?) WHERE id = 100\"\n;\n// Open parameter data as a stream and put it in the $params array.\n$data\n=\nfopen\n(\n\"data://text/plain,[ Lengthy content here. ]\"\n,\n\"r\"\n);\n$params\n= array( &\n$data\n);\n// Prepare the statement. Use the $options array to turn off the\n// default behavior, which is to send all stream data at the time of query\n// execution.\n$options\n= array(\n\"SendStreamParamsAtExec\"\n=>\n0\n);\n$stmt\n=\nsqlsrv_prepare\n(\n$conn\n,\n$sql\n,\n$params\n,\n$options\n);\nsqlsrv_execute\n(\n$stmt\n);\n// Send up to 8K of parameter data to the server\n// with each call to sqlsrv_send_stream_data.\n$i\n=\n1\n;\nwhile(\nsqlsrv_send_stream_data\n(\n$stmt\n)) {\n\n$i\n++;\n}\necho\n\"\n$i\n calls were made.\"\n;\n?>"
  },
  {
    "input": "Example #1 sqlsrv_server_info() example",
    "output": "<?php\n$serverName\n=\n\"serverName\\sqlexpress\"\n;\n$conn\n=\nsqlsrv_connect\n(\n$serverName\n);\nif(\n$conn\n===\nfalse\n) {\n     die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n$server_info\n=\nsqlsrv_server_info\n(\n$conn\n);\nif(\n$server_info\n)\n{\n    foreach(\n$server_info\nas\n$key\n=>\n$value\n) {\n       echo\n$key\n.\n\": \"\n.\n$value\n.\n\"<br />\"\n;\n    }\n} else {\n      die(\nprint_r\n(\nsqlsrv_errors\n(),\ntrue\n));\n}\n?>"
  },
  {
    "input": "Example #1 cal_days_in_month() example",
    "output": "<?php\n$number\n=\ncal_days_in_month\n(\nCAL_GREGORIAN\n,\n8\n,\n2003\n);\n// 31\necho\n\"There were\n{\n$number\n}\n days in August 2003\"\n;\n?>"
  },
  {
    "input": "Example #1 cal_from_jd() example",
    "output": "<?php\n$today\n=\nunixtojd\n(\nmktime\n(\n0\n,\n0\n,\n0\n,\n8\n,\n16\n,\n2003\n));\nprint_r\n(\ncal_from_jd\n(\n$today\n,\nCAL_GREGORIAN\n));\n?>"
  },
  {
    "input": "Example #1 cal_info() example",
    "output": "<?php\n$info\n=\ncal_info\n(\n0\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 easter_date() example",
    "output": "<?php\necho\ndate\n(\n\"M-d-Y\"\n,\neaster_date\n(\n1999\n));\n// Apr-04-1999\necho\ndate\n(\n\"M-d-Y\"\n,\neaster_date\n(\n2000\n));\n// Apr-23-2000\necho\ndate\n(\n\"M-d-Y\"\n,\neaster_date\n(\n2001\n));\n// Apr-15-2001\n?>"
  },
  {
    "input": "Example #2 Using easter_date() with DateTime",
    "output": "<?php\n$timestamp\n=\neaster_date\n(\n2023\n);\n$datetime\n= new\n\\DateTime\n();\n$datetime\n->\nsetTimestamp\n(\n$timestamp\n);\necho\n$datetime\n->\nformat\n(\n'M-d-Y'\n);\n// Apr-09-2023\n?>"
  },
  {
    "input": "Example #1 easter_days() example",
    "output": "<?php\necho\neaster_days\n(\n1999\n);\n// 14, i.e. April 4\necho\neaster_days\n(\n1492\n);\n// 32, i.e. April 22\necho\neaster_days\n(\n1913\n);\n//  2, i.e. March 23\n?>"
  },
  {
    "input": "Example #1 Calendar functions",
    "output": "<?php\n$jd\n=\ngregoriantojd\n(\n10\n,\n11\n,\n1970\n);\necho\n\"\n$jd\n\\n\"\n;\n$gregorian\n=\njdtogregorian\n(\n$jd\n);\necho\n\"\n$gregorian\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Overflow behavior",
    "output": "<?php\necho\ngregoriantojd\n(\n2\n,\n31\n,\n2018\n),\nPHP_EOL\n,\n\ngregoriantojd\n(\n3\n,\n3\n,\n2018\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 jdtojewish() Example",
    "output": "<?php\n$jd\n=\ngregoriantojd\n(\n10\n,\n8\n,\n2002\n);\necho\njdtojewish\n(\n$jd\n,\ntrue\n),\nPHP_EOL\n,\n\njdtojewish\n(\n$jd\n,\ntrue\n,\nCAL_JEWISH_ADD_GERESHAYIM\n),\nPHP_EOL\n,\n\njdtojewish\n(\n$jd\n,\ntrue\n,\nCAL_JEWISH_ADD_ALAFIM\n),\nPHP_EOL\n,\n\njdtojewish\n(\n$jd\n,\ntrue\n,\nCAL_JEWISH_ADD_ALAFIM_GERESH\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 Creating a mutable date time object",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$mutable\n=\nDateTime\n::\ncreateFromImmutable\n(\n$date\n);\n?>"
  },
  {
    "input": "Example #1 Creating a mutable date time object",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$mutable\n=\nDateTime\n::\ncreateFromInterface\n(\n$date\n);\n$date\n= new\nDateTime\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$also_mutable\n=\nDateTime\n::\ncreateFromInterface\n(\n$date\n);\n?>"
  },
  {
    "input": "Example #2 Beware when adding or subtracting months",
    "output": "<?php\n$date\n= new\nDateTime\n(\n'2000-12-31'\n);\n$date\n->\nmodify\n(\n'+1 month'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$date\n->\nmodify\n(\n'+1 month'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 All formats of Date and Time are supported",
    "output": "<?php\n$date\n= new\nDateTime\n(\n'2020-12-31'\n);\n$date\n->\nmodify\n(\n'July 1st, 2023'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i'\n) .\n\"\\n\"\n;\n$date\n->\nmodify\n(\n'Monday next week'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i'\n) .\n\"\\n\"\n;\n$date\n->\nmodify\n(\n'17:30'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Further DateTimeImmutable::add() examples",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-01'\n);\n$newDate\n=\n$date\n->\nadd\n(new\nDateInterval\n(\n'PT10H30S'\n));\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-01'\n);\n$newDate\n=\n$date\n->\nadd\n(new\nDateInterval\n(\n'P7Y5M4DT4H3M2S'\n));\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Beware when adding months",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2000-12-31'\n);\n$interval\n= new\nDateInterval\n(\n'P1M'\n);\n$newDate1\n=\n$date\n->\nadd\n(\n$interval\n);\necho\n$newDate1\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate2\n=\n$newDate1\n->\nadd\n(\n$interval\n);\necho\n$newDate2\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Intricacies of DateTimeImmutable::__construct()",
    "output": "<?php\n// Specified date/time in your computer's time zone.\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-01'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n// Specified date/time in the specified time zone.\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-01'\n, new\nDateTimeZone\n(\n'Pacific/Nauru'\n));\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n// Current date/time in your computer's time zone.\n$date\n= new\nDateTimeImmutable\n();\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n// Current date/time in the specified time zone.\n$date\n= new\nDateTimeImmutable\n(\n'now'\n, new\nDateTimeZone\n(\n'Pacific/Nauru'\n));\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n// Using a UNIX timestamp.  Notice the result is in the UTC time zone.\n$date\n= new\nDateTimeImmutable\n(\n'@946684800'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n// Non-existent values roll over.\n$date\n= new\nDateTimeImmutable\n(\n'2000-02-30'\n);\necho\n$date\n->\nformat\n(\n'Y-m-d H:i:sP'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Changing the associated timezone",
    "output": "<?php\n$timeZone\n= new\n\\DateTimeZone\n(\n'Asia/Tokyo'\n);\n$time\n= new\n\\DateTimeImmutable\n();\n$time\n=\n$time\n->\nsetTimezone\n(\n$timeZone\n);\necho\n$time\n->\nformat\n(\n'Y/m/d H:i:s'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Using a relative date/time string",
    "output": "<?php\n$time\n= new\n\\DateTimeImmutable\n(\n\"-1 year\"\n);\necho\n$time\n->\nformat\n(\n'Y/m/d H:i:s'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Intricacies of DateTimeImmutable::createFromFormat()",
    "output": "<?php\necho\n'Current time: '\n.\ndate\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$format\n=\n'Y-m-d'\n;\n$date\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n$format\n,\n'2009-02-15'\n);\necho\n\"Format:\n$format\n; \"\n.\n$date\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$format\n=\n'Y-m-d H:i:s'\n;\n$date\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n$format\n,\n'2009-02-15 15:16:17'\n);\necho\n\"Format:\n$format\n; \"\n.\n$date\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$format\n=\n'Y-m-!d H:i:s'\n;\n$date\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n$format\n,\n'2009-02-15 15:16:17'\n);\necho\n\"Format:\n$format\n; \"\n.\n$date\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$format\n=\n'!d'\n;\n$date\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n$format\n,\n'15'\n);\necho\n\"Format:\n$format\n; \"\n.\n$date\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$format\n=\n'i'\n;\n$date\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n$format\n,\n'15'\n);\necho\n\"Format:\n$format\n; \"\n.\n$date\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Format string with literal characters",
    "output": "<?php\necho\nDateTimeImmutable\n::\ncreateFromFormat\n(\n'H\\h i\\m s\\s'\n,\n'23h 15m 03s'\n)->\nformat\n(\n'H:i:s'\n);\n?>"
  },
  {
    "input": "Example #5 Overflow behaviour",
    "output": "<?php\necho\nDateTimeImmutable\n::\ncreateFromFormat\n(\n'Y-m-d H:i:s'\n,\n'2021-17-35 16:60:97'\n)->\nformat\n(\nDateTimeImmutable\n::\nRFC2822\n);\n?>"
  },
  {
    "input": "Example #6 Overflowing day name behaviour",
    "output": "<?php\n$d\n=\nDateTime\n::\ncreateFromFormat\n(\nDateTimeInterface\n::\nRFC1123\n,\n'Mon, 3 Aug 2020 25:00:00 +0000'\n);\necho\n$d\n->\nformat\n(\nDateTime\n::\nRFC1123\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #7 Detecting overflown dates",
    "output": "<?php\n$d\n=\nDateTimeImmutable\n::\ncreateFromFormat\n(\n'Y-m-d H:i:s'\n,\n'2021-17-35 16:60:97'\n);\necho\n$d\n->\nformat\n(\nDateTimeImmutable\n::\nRFC2822\n),\n\"\\n\\n\"\n;\nvar_dump\n(\nDateTimeImmutable\n::\nGetLastErrors\n());\n?>"
  },
  {
    "input": "Example #8 Greedy parsing behaviour",
    "output": "<?php\nprint_r\n(\ndate_parse_from_format\n(\n'Gis'\n,\n'60101'\n));\n?>"
  },
  {
    "input": "Example #1 Creating an immutable date time object",
    "output": "<?php\n$date\n= new\nDateTime\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$immutable\n=\nDateTimeImmutable\n::\ncreateFromInterface\n(\n$date\n);\n$date\n= new\nDateTimeImmutable\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$also_immutable\n=\nDateTimeImmutable\n::\ncreateFromInterface\n(\n$date\n);\n?>"
  },
  {
    "input": "Example #1 Creating an immutable date time object",
    "output": "<?php\n$date\n= new\nDateTime\n(\n\"2014-06-20 11:45 Europe/London\"\n);\n$immutable\n=\nDateTimeImmutable\n::\ncreateFromMutable\n(\n$date\n);\n?>"
  },
  {
    "input": "Example #1 DateTimeImmutable::getLastErrors() example",
    "output": "<?php\ntry {\n\n$date\n= new\nDateTimeImmutable\n(\n'asdfasdf'\n);\n} catch (\nException $e\n) {\n\n// For demonstration purposes only...\n\nprint_r\n(\nDateTimeImmutable\n::\ngetLastErrors\n());\n\n// The real object-oriented way to do this is\n    // echo $e->getMessage();\n}\n?>"
  },
  {
    "input": "Example #2 Beware when adding or subtracting months",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2000-12-31'\n);\n$newDate1\n=\n$date\n->\nmodify\n(\n'+1 month'\n);\necho\n$newDate1\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate2\n=\n$newDate1\n->\nmodify\n(\n'+1 month'\n);\necho\n$newDate2\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Values exceeding ranges are added to their parent values",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n();\n$newDate\n=\n$date\n->\nsetDate\n(\n2001\n,\n2\n,\n28\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetDate\n(\n2001\n,\n2\n,\n29\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetDate\n(\n2001\n,\n14\n,\n3\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Values exceeding ranges are added to their parent values",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n();\n$newDate\n=\n$date\n->\nsetISODate\n(\n2008\n,\n2\n,\n7\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetISODate\n(\n2008\n,\n2\n,\n8\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetISODate\n(\n2008\n,\n53\n,\n7\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Finding the month a week is in",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n();\n$newDate\n=\n$date\n->\nsetISODate\n(\n2008\n,\n14\n);\necho\n$newDate\n->\nformat\n(\n'n'\n);\n?>"
  },
  {
    "input": "Example #2 Values exceeding ranges are added to their parent values",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2001-01-01'\n);\n$newDate\n=\n$date\n->\nsetTime\n(\n14\n,\n55\n,\n24\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetTime\n(\n14\n,\n55\n,\n65\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetTime\n(\n14\n,\n65\n,\n24\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$newDate\n=\n$date\n->\nsetTime\n(\n25\n,\n55\n,\n24\n);\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Further DateTimeImmutable::sub() examples",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-20'\n);\n$newDate\n=\n$date\n->\nsub\n(new\nDateInterval\n(\n'PT10H30S'\n));\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n$date\n= new\nDateTimeImmutable\n(\n'2000-01-20'\n);\n$newDate\n=\n$date\n->\nsub\n(new\nDateInterval\n(\n'P7Y5M4DT4H3M2S'\n));\necho\n$newDate\n->\nformat\n(\n'Y-m-d H:i:s'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Beware when subtracting months",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n(\n'2001-04-30'\n);\n$interval\n= new\nDateInterval\n(\n'P1M'\n);\n$newDate1\n=\n$date\n->\nsub\n(\n$interval\n);\necho\n$newDate1\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n$newDate2\n=\n$newDate1\n->\nsub\n(\n$interval\n);\necho\n$newDate2\n->\nformat\n(\n'Y-m-d'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 DateTimeInterface::diff() during DST\n   changeover",
    "output": "<?php\n$originalTime\n= new\nDateTimeImmutable\n(\n\"2021-10-30 09:00:00 Europe/London\"\n);\n$targetTime\n= new\nDateTimeImmutable\n(\n\"2021-10-31 08:30:00 Europe/London\"\n);\n$interval\n=\n$originalTime\n->\ndiff\n(\n$targetTime\n);\necho\n$interval\n->\nformat\n(\n\"%H:%I:%S (Full days: %a)\"\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 DateTime object comparison",
    "output": "<?php\n$date1\n= new\nDateTime\n(\n\"now\"\n);\n$date2\n= new\nDateTime\n(\n\"tomorrow\"\n);\nvar_dump\n(\n$date1\n==\n$date2\n);\nvar_dump\n(\n$date1\n<\n$date2\n);\nvar_dump\n(\n$date1\n>\n$date2\n);\n?>"
  },
  {
    "input": "Example #2 More examples",
    "output": "<?php\n// set the default timezone to use.\ndate_default_timezone_set\n(\n'UTC'\n);\n// now\n$date\n= new\nDateTimeImmutable\n();\n// Prints something like: Wednesday\necho\n$date\n->\nformat\n(\n'l'\n),\n\"\\n\"\n;\n// Prints something like: Wednesday 19th of October 2022 08:40:48 AM\necho\n$date\n->\nformat\n(\n'l jS \\o\\f F Y h:i:s A'\n),\n\"\\n\"\n;\n/* use the constants in the format parameter */\n// prints something like: Wed, 19 Oct 2022 08:40:48 +0000\necho\n$date\n->\nformat\n(\nDateTimeInterface\n::\nRFC2822\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Escaping characters while formatting",
    "output": "<?php\n$date\n= new\nDateTimeImmutable\n();\n// prints something like: Wednesday the 19th\necho\n$date\n->\nformat\n(\n'l \\t\\h\\e jS'\n);\n?>"
  },
  {
    "input": "Example #1 Creating and attaching DateTimeZone to a DateTimeImmutable",
    "output": "<?php\n$d\n= new\nDateTimeImmutable\n(\n\"2022-06-02 15:44:48 UTC\"\n);\n$timezones\n= [\n'Europe/London'\n,\n'GMT+04:45'\n,\n'-06:00'\n,\n'CEST'\n];\nforeach (\n$timezones\nas\n$tz\n) {\n\n$tzo\n= new\nDateTimeZone\n(\n$tz\n);\n\n$local\n=\n$d\n->\nsetTimezone\n(\n$tzo\n);\n    echo\n$local\n->\nformat\n(\nDateTimeInterface\n::\nRFC2822\n.\n' — e'\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Catching errors when instantiating DateTimeZone",
    "output": "<?php\n// Error handling by catching exceptions\n$timezones\n= array(\n'Europe/London'\n,\n'Mars/Phobos'\n,\n'Jupiter/Europa'\n);\nforeach (\n$timezones\nas\n$tz\n) {\n    try {\n\n$mars\n= new\nDateTimeZone\n(\n$tz\n);\n    } catch(\nException $e\n) {\n        echo\n$e\n->\ngetMessage\n() .\n'<br />'\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 DateTimeZone::getLocation() example",
    "output": "<?php\n$tz\n= new\nDateTimeZone\n(\n\"Europe/Prague\"\n);\nprint_r\n(\n$tz\n->\ngetLocation\n());\nprint_r\n(\ntimezone_location_get\n(\n$tz\n));\n?>"
  },
  {
    "input": "Example #1 DateTimeZone::getOffset() examples",
    "output": "<?php\n// Create two timezone objects, one for Taipei (Taiwan) and one for\n// Tokyo (Japan)\n$dateTimeZoneTaipei\n= new\nDateTimeZone\n(\n\"Asia/Taipei\"\n);\n$dateTimeZoneJapan\n= new\nDateTimeZone\n(\n\"Asia/Tokyo\"\n);\n// Create two DateTime objects that will contain the same Unix timestamp, but\n// have different timezones attached to them.\n$dateTimeTaipei\n= new\nDateTime\n(\n\"now\"\n,\n$dateTimeZoneTaipei\n);\n$dateTimeJapan\n= new\nDateTime\n(\n\"now\"\n,\n$dateTimeZoneJapan\n);\n// Calculate the GMT offset for the date/time contained in the $dateTimeTaipei\n// object, but using the timezone rules as defined for Tokyo\n// ($dateTimeZoneJapan).\n$timeOffset\n=\n$dateTimeZoneJapan\n->\ngetOffset\n(\n$dateTimeTaipei\n);\n// Should show int(32400) (for dates after Sat Sep 8 01:00:00 1951 JST).\nvar_dump\n(\n$timeOffset\n);\n?>"
  },
  {
    "input": "Example #1 A timezone_transitions_get() example",
    "output": "<?php\n$timezone\n= new\nDateTimeZone\n(\n\"Europe/London\"\n);\n$transitions\n=\n$timezone\n->\ngetTransitions\n();\nprint_r\n(\narray_slice\n(\n$transitions\n,\n0\n,\n3\n));\n?>"
  },
  {
    "input": "Example #2 A timezone_transitions_get() example with\n    timestampBegin set",
    "output": "<?php\n$timezone\n= new\nDateTimeZone\n(\n\"Europe/London\"\n);\n$transitions\n=\n$timezone\n->\ngetTransitions\n(\ntime\n());\nprint_r\n(\narray_slice\n(\n$transitions\n,\n0\n,\n3\n));\n?>"
  },
  {
    "input": "Example #1 A timezone_abbreviations_list() example",
    "output": "<?php\n$timezone_abbreviations\n=\nDateTimeZone\n::\nlistAbbreviations\n();\nprint_r\n(\n$timezone_abbreviations\n[\n\"acst\"\n]);\n?>"
  },
  {
    "input": "Example #1 A DateTimeZone::listIdentifiers() example",
    "output": "<?php\n$timezone_identifiers\n=\nDateTimeZone\n::\nlistIdentifiers\n();\nfor (\n$i\n=\n0\n;\n$i\n<\n5\n;\n$i\n++) {\n    echo\n\"\n$timezone_identifiers\n[\n$i\n]\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Listing identifiers for a specific region",
    "output": "<?php\n$timezone_identifiers\n=\nDateTimeZone\n::\nlistIdentifiers\n(\nDateTimeZone\n::\nASIA\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n5\n;\n$i\n++) {\n    echo\n\"\n$timezone_identifiers\n[\n$i\n]\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Listing identifiers for multiple regions",
    "output": "<?php\n$timezone_identifiers\n=\nDateTimeZone\n::\nlistIdentifiers\n(\nDateTimeZone\n::\nASIA\n|\nDateTimeZone\n::\nPACIFIC\n);\necho\njoin\n(\n', '\n,\n$timezone_identifiers\n);\n?>"
  },
  {
    "input": "Example #4 Listing identifiers for a single country",
    "output": "<?php\n$timezone_identifiers\n=\nDateTimeZone\n::\nlistIdentifiers\n(\nDateTimeZone\n::\nPER_COUNTRY\n,\n\"UA\"\n);\nforeach(\n$timezone_identifiers\nas\n$identifier\n) {\n    echo\n\"\n$identifier\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Constructing and using DateInterval objects",
    "output": "<?php\n// Create a specific date\n$someDate\n=\n\\DateTime\n::\ncreateFromFormat\n(\n\"Y-m-d H:i\"\n,\n\"2022-08-25 14:18\"\n);\n// Create interval\n$interval\n= new\n\\DateInterval\n(\n\"P7D\"\n);\n// Add interval\n$someDate\n->\nadd\n(\n$interval\n);\n// Convert interval to string\necho\n$interval\n->\nformat\n(\n\"%d\"\n);"
  },
  {
    "input": "Example #2 DateInterval example",
    "output": "<?php\n$interval\n= new\nDateInterval\n(\n'P1W2D'\n);\nvar_dump\n(\n$interval\n);\n?>"
  },
  {
    "input": "Example #1 Parsing valid date intervals",
    "output": "<?php\n// Each set of intervals is equal.\n$i\n= new\nDateInterval\n(\n'P1D'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'1 day'\n);\n$i\n= new\nDateInterval\n(\n'P2W'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'2 weeks'\n);\n$i\n= new\nDateInterval\n(\n'P3M'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'3 months'\n);\n$i\n= new\nDateInterval\n(\n'P4Y'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'4 years'\n);\n$i\n= new\nDateInterval\n(\n'P1Y1D'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'1 year + 1 day'\n);\n$i\n= new\nDateInterval\n(\n'P1DT12H'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'1 day + 12 hours'\n);\n$i\n= new\nDateInterval\n(\n'PT3600S'\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'3600 seconds'\n);\n?>"
  },
  {
    "input": "Example #2 Parsing combinations and negative intervals",
    "output": "<?php\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'62 weeks + 1 day + 2 weeks + 2 hours + 70 minutes'\n);\necho\n$i\n->\nformat\n(\n'%d %h %i'\n),\n\"\\n\"\n;\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'1 year - 10 days'\n);\necho\n$i\n->\nformat\n(\n'%y %d'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Parsing special relative date intervals",
    "output": "<?php\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'last day of next month'\n);\nvar_dump\n(\n$i\n);\n$i\n=\nDateInterval\n::\ncreateFromDateString\n(\n'last weekday'\n);\nvar_dump\n(\n$i\n);"
  },
  {
    "input": "Example #1 DateInterval example",
    "output": "<?php\n$interval\n= new\nDateInterval\n(\n'P2Y4DT6H8M'\n);\necho\n$interval\n->\nformat\n(\n'%d days'\n);\n?>"
  },
  {
    "input": "Example #2 DateInterval and carry over points",
    "output": "<?php\n$interval\n= new\nDateInterval\n(\n'P32D'\n);\necho\n$interval\n->\nformat\n(\n'%d days'\n);\n?>"
  },
  {
    "input": "Example #3 \n     DateInterval and\n     DateTime::diff() with the %a and %d modifiers",
    "output": "<?php\n$january\n= new\nDateTime\n(\n'2010-01-01'\n);\n$february\n= new\nDateTime\n(\n'2010-02-01'\n);\n$interval\n=\n$february\n->\ndiff\n(\n$january\n);\n// %a will output the total number of days.\necho\n$interval\n->\nformat\n(\n'%a total days'\n).\n\"\\n\"\n;\n// While %d will only output the number of days not already covered by the\n// month.\necho\n$interval\n->\nformat\n(\n'%m month, %d days'\n);\n?>"
  },
  {
    "input": "Example #1 DatePeriod example",
    "output": "<?php\n$start\n= new\nDateTime\n(\n'2012-07-01'\n);\n$interval\n= new\nDateInterval\n(\n'P7D'\n);\n$end\n= new\nDateTime\n(\n'2012-07-31'\n);\n$recurrences\n=\n4\n;\n$iso\n=\n'R4/2012-07-01T00:00:00Z/P7D'\n;\n// All of these periods are equivalent.\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$recurrences\n);\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$end\n);\n$period\n= new\nDatePeriod\n(\n$iso\n);\n// By iterating over the DatePeriod object, all of the\n// recurring dates within that period are printed.\nforeach (\n$period\nas\n$date\n) {\n    echo\n$date\n->\nformat\n(\n'Y-m-d'\n).\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 DatePeriod example with DatePeriod::EXCLUDE_START_DATE",
    "output": "<?php\n$start\n= new\nDateTime\n(\n'2012-07-01'\n);\n$interval\n= new\nDateInterval\n(\n'P7D'\n);\n$end\n= new\nDateTime\n(\n'2012-07-31'\n);\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$end\n,\n\nDatePeriod\n::\nEXCLUDE_START_DATE\n);\n// By iterating over the DatePeriod object, all of the\n// recurring dates within that period are printed.\n// Note that, in this case, 2012-07-01 is not printed.\nforeach (\n$period\nas\n$date\n) {\n    echo\n$date\n->\nformat\n(\n'Y-m-d'\n).\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 DatePeriod example showing all last Thursdays in a year",
    "output": "<?php\n$begin\n= new\nDateTime\n(\n'2021-12-31'\n);\n$end\n= new\nDateTime\n(\n'2022-12-31 23:59:59'\n);\n$interval\n=\nDateInterval\n::\ncreateFromDateString\n(\n'last thursday of next month'\n);\n$period\n= new\nDatePeriod\n(\n$begin\n,\n$interval\n,\n$end\n,\nDatePeriod\n::\nEXCLUDE_START_DATE\n);\nforeach (\n$period\nas\n$dt\n) {\n    echo\n$dt\n->\nformat\n(\n'l Y-m-d'\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 DatePeriod::createFromISO8601String example",
    "output": "<?php\n$iso\n=\n'R4/2023-07-01T00:00:00Z/P7D'\n;\n$period\n=\nDatePeriod\n::\ncreateFromISO8601String\n(\n$iso\n);\n// By iterating over the DatePeriod object, all of the\n// recurring dates within that period are printed.\nforeach (\n$period\nas\n$date\n) {\n    echo\n$date\n->\nformat\n(\n'Y-m-d'\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 DatePeriod::getDateInterval() example",
    "output": "<?php\n$period\n= new\nDatePeriod\n(\n'R7/2016-05-16T00:00:00Z/P1D'\n);\n$interval\n=\n$period\n->\ngetDateInterval\n();\necho\n$interval\n->\nformat\n(\n'%d day'\n);\n?>"
  },
  {
    "input": "Example #1 DatePeriod::getEndDate() example",
    "output": "<?php\n$period\n= new\nDatePeriod\n(\n    new\nDateTime\n(\n'2016-05-16T00:00:00Z'\n),\n    new\nDateInterval\n(\n'P1D'\n),\n    new\nDateTime\n(\n'2016-05-20T00:00:00Z'\n)\n);\n$start\n=\n$period\n->\ngetEndDate\n();\necho\n$start\n->\nformat\n(\nDateTime\n::\nISO8601\n);\n?>"
  },
  {
    "input": "Example #2 DatePeriod::getEndDate() without an end date",
    "output": "<?php\n$period\n= new\nDatePeriod\n(\n    new\nDateTime\n(\n'2016-05-16T00:00:00Z'\n),\n    new\nDateInterval\n(\n'P1D'\n),\n\n7\n);\nvar_dump\n(\n$period\n->\ngetEndDate\n());\n?>"
  },
  {
    "input": "Example #1 Different values for DatePeriod::getRecurrences()",
    "output": "<?php\n$start\n= new\nDateTime\n(\n'2018-12-31 00:00:00'\n);\n$end\n= new\nDateTime\n(\n'2021-12-31 00:00:00'\n);\n$interval\n= new\nDateInterval\n(\n'P1M'\n);\n$recurrences\n=\n5\n;\n// recurrences explicitly set through the constructor\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$recurrences\n,\nDatePeriod\n::\nEXCLUDE_START_DATE\n);\necho\n$period\n->\ngetRecurrences\n(),\n\"\\n\"\n;\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$recurrences\n);\necho\n$period\n->\ngetRecurrences\n(),\n\"\\n\"\n;\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$recurrences\n,\nDatePeriod\n::\nINCLUDE_END_DATE\n);\necho\n$period\n->\ngetRecurrences\n(),\n\"\\n\\n\"\n;\n// recurrences not set in the constructor\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$end\n);\nvar_dump\n(\n$period\n->\ngetRecurrences\n());\n$period\n= new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$end\n,\nDatePeriod\n::\nEXCLUDE_START_DATE\n);\nvar_dump\n(\n$period\n->\ngetRecurrences\n());\n?>"
  },
  {
    "input": "Example #1 DatePeriod::getStartDate() example",
    "output": "<?php\n$period\n= new\nDatePeriod\n(\n'R7/2016-05-16T00:00:00Z/P1D'\n);\n$start\n=\n$period\n->\ngetStartDate\n();\necho\n$start\n->\nformat\n(\nDateTime\n::\nISO8601\n);\n?>"
  },
  {
    "input": "Example #1 checkdate() example",
    "output": "<?php\nvar_dump\n(\ncheckdate\n(\n12\n,\n31\n,\n2000\n));\nvar_dump\n(\ncheckdate\n(\n2\n,\n29\n,\n2001\n));\n?>"
  },
  {
    "input": "Example #1 date() examples",
    "output": "<?php\n// set the default timezone to use.\ndate_default_timezone_set\n(\n'UTC'\n);\n// Prints something like: Monday\necho\ndate\n(\n\"l\"\n);\n// Prints something like: Monday 8th of August 2005 03:12:46 PM\necho\ndate\n(\n'l jS \\of F Y h:i:s A'\n);\n// Prints: July 1, 2000 is on a Saturday\necho\n\"July 1, 2000 is on a \"\n.\ndate\n(\n\"l\"\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n7\n,\n1\n,\n2000\n));\n/* use the constants in the format parameter */\n// prints something like: Wed, 25 Sep 2013 15:28:57 -0700\necho\ndate\n(\nDATE_RFC2822\n);\n// prints something like: 2000-07-01T00:00:00+00:00\necho\ndate\n(\nDATE_ATOM\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n7\n,\n1\n,\n2000\n));\n?>"
  },
  {
    "input": "Example #2 Escaping characters in date()",
    "output": "<?php\n// prints something like: Wednesday the 15th\necho\ndate\n(\n'l \\t\\h\\e jS'\n);\n?>"
  },
  {
    "input": "Example #3 date() and mktime() example",
    "output": "<?php\n$tomorrow\n=\nmktime\n(\n0\n,\n0\n,\n0\n,\ndate\n(\n\"m\"\n)  ,\ndate\n(\n\"d\"\n)+\n1\n,\ndate\n(\n\"Y\"\n));\n$lastmonth\n=\nmktime\n(\n0\n,\n0\n,\n0\n,\ndate\n(\n\"m\"\n)-\n1\n,\ndate\n(\n\"d\"\n),\ndate\n(\n\"Y\"\n));\n$nextyear\n=\nmktime\n(\n0\n,\n0\n,\n0\n,\ndate\n(\n\"m\"\n),\ndate\n(\n\"d\"\n),\ndate\n(\n\"Y\"\n)+\n1\n);\n?>"
  },
  {
    "input": "Example #4 date() Formatting",
    "output": "<?php\n// Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the\n// Mountain Standard Time (MST) Time Zone\n$today\n=\ndate\n(\n\"F j, Y, g:i a\"\n);\n// March 10, 2001, 5:16 pm\n$today\n=\ndate\n(\n\"m.d.y\"\n);\n// 03.10.01\n$today\n=\ndate\n(\n\"j, n, Y\"\n);\n// 10, 3, 2001\n$today\n=\ndate\n(\n\"Ymd\"\n);\n// 20010310\n$today\n=\ndate\n(\n'h-i-s, j-m-y, it is w Day'\n);\n// 05-16-18, 10-03-01, 1631 1618 6 Satpm01\n$today\n=\ndate\n(\n'\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.'\n);\n// it is the 10th day.\n$today\n=\ndate\n(\n\"D M j G:i:s T Y\"\n);\n// Sat Mar 10 17:16:18 MST 2001\n$today\n=\ndate\n(\n'H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h'\n);\n// 17:03:18 m is month\n$today\n=\ndate\n(\n\"H:i:s\"\n);\n// 17:16:18\n$today\n=\ndate\n(\n\"Y-m-d H:i:s\"\n);\n// 2001-03-10 17:16:18 (the MySQL DATETIME format)\n?>"
  },
  {
    "input": "Example #1 Getting the default timezone",
    "output": "<?php\ndate_default_timezone_set\n(\n'Europe/London'\n);\nif (\ndate_default_timezone_get\n()) {\n    echo\n'date_default_timezone_set: '\n.\ndate_default_timezone_get\n() .\n'<br />'\n;\n}\nif (\nini_get\n(\n'date.timezone'\n)) {\n    echo\n'date.timezone: '\n.\nini_get\n(\n'date.timezone'\n);\n}\n?>"
  },
  {
    "input": "Example #2 Getting the abbreviation of a timezone",
    "output": "<?php\ndate_default_timezone_set\n(\n'America/Los_Angeles'\n);\necho\ndate_default_timezone_get\n() .\n' => '\n.\ndate\n(\n'e'\n) .\n' => '\n.\ndate\n(\n'T'\n);\n?>"
  },
  {
    "input": "Example #1 Getting the default timezone",
    "output": "<?php\ndate_default_timezone_set\n(\n'America/Los_Angeles'\n);\n$script_tz\n=\ndate_default_timezone_get\n();\nif (\nstrcmp\n(\n$script_tz\n,\nini_get\n(\n'date.timezone'\n))){\n    echo\n'Script timezone differs from ini-set timezone.'\n;\n} else {\n    echo\n'Script timezone and ini-set timezone match.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 A date_parse() example with a comprehensive\n    datetime string",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"2006-12-12 10:00:00.5\"\n));\n?>"
  },
  {
    "input": "Example #2 date_parse() with timezone abbreviation information",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"June 2nd, 2022, 10:28:17 BST\"\n));\n?>"
  },
  {
    "input": "Example #3 date_parse() with timezone identifier information",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"June 2nd, 2022, 10:28:17 Europe/London\"\n));\n?>"
  },
  {
    "input": "Example #4 date_parse() with a minimal string",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"June 2nd, 2022\"\n));\n?>"
  },
  {
    "input": "Example #5 date_parse() with relative formats",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"2006-12-12 10:00:00.5 +1 week +1 hour\"\n));\n?>"
  },
  {
    "input": "Example #6 date_parse() with side-effects",
    "output": "<?php\nvar_dump\n(\ndate_parse\n(\n\"Thursday, June 2nd\"\n));\n?>"
  },
  {
    "input": "Example #1 date_parse_from_format() example",
    "output": "<?php\n$date\n=\n\"6.1.2009 13:00+01:00\"\n;\nprint_r\n(\ndate_parse_from_format\n(\n\"j.n.Y H:iP\"\n,\n$date\n));\n?>"
  },
  {
    "input": "Example #2 date_parse_from_format() with warnings example",
    "output": "<?php\n$date\n=\n\"26 August 2022 22:30 pm\"\n;\n$parsed\n=\ndate_parse_from_format\n(\n\"j F Y G:i a\"\n,\n$date\n);\necho\n\"Warnings count: \"\n,\n$parsed\n[\n'warning_count'\n],\n\"\\n\"\n;\nforeach (\n$parsed\n[\n'warnings'\n] as\n$position\n=>\n$message\n) {\n    echo\n\"\\tOn position\n{\n$position\n}\n:\n{\n$message\n}\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 date_parse_from_format() with errors example",
    "output": "<?php\n$date\n=\n\"26 August 2022 CEST\"\n;\n$parsed\n=\ndate_parse_from_format\n(\n\"j F Y H:i\"\n,\n$date\n);\necho\n\"Errors count: \"\n,\n$parsed\n[\n'error_count'\n],\n\"\\n\"\n;\nforeach (\n$parsed\n[\n'errors'\n] as\n$position\n=>\n$message\n) {\n    echo\n\"\\tOn position\n{\n$position\n}\n:\n{\n$message\n}\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A date_sun_info() example",
    "output": "<?php\n$sun_info\n=\ndate_sun_info\n(\nstrtotime\n(\n\"2006-12-12\"\n),\n31.7667\n,\n35.2333\n);\nforeach (\n$sun_info\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n: \"\n.\ndate\n(\n\"H:i:s\"\n,\n$val\n) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Polar night, with some processing",
    "output": "<?php\n$tz\n= new\n\\DateTimeZone\n(\n'America/Anchorage'\n);\n$si\n=\ndate_sun_info\n(\nstrtotime\n(\n\"2022-12-21\"\n),\n70.21\n, -\n148.51\n);\nforeach (\n$si\nas\n$key\n=>\n$value\n) {\n    echo\n        match (\n$value\n) {\n\ntrue\n=>\n'always'\n,\n\nfalse\n=>\n'never'\n,\n            default =>\ndate_create\n(\n\"@\n{\n$value\n}\n\"\n)->\nsetTimeZone\n(\n$tz\n)->\nformat\n(\n'H:i:s T'\n),\n        },\n\n\":\n{\n$key\n}\n\"\n,\n\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Midnight sun (Tromsø, Norway)",
    "output": "<?php\n$si\n=\ndate_sun_info\n(\nstrtotime\n(\n\"2022-06-26\"\n),\n69.68\n,\n18.94\n);\nprint_r\n(\n$si\n);\n?>"
  },
  {
    "input": "Example #4 Calculating length of day (Kyiv)",
    "output": "<?php\n$si\n=\ndate_sun_info\n(\nstrtotime\n(\n'2022-08-26'\n),\n50.45\n,\n30.52\n);\n$diff\n=\n$si\n[\n'sunset'\n] -\n$si\n[\n'sunrise'\n];\necho\n\"Length of day: \"\n,\n\nfloor\n(\n$diff\n/\n3600\n),\n\"h \"\n,\n\nfloor\n((\n$diff\n%\n3600\n) /\n60\n),\n\"s\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 date_sunrise() example",
    "output": "<?php\n/* calculate the sunrise time for Lisbon, Portugal\nLatitude: 38.4 North\nLongitude: 9 West\nZenith ~= 90\noffset: +1 GMT\n*/\necho\ndate\n(\n\"D M d Y\"\n).\n', sunrise time : '\n.\ndate_sunrise\n(\ntime\n(),\nSUNFUNCS_RET_STRING\n,\n38.4\n, -\n9\n,\n90\n,\n1\n);\n?>"
  },
  {
    "input": "Example #2 No sunrise",
    "output": "<?php\n$solstice\n=\nstrtotime\n(\n'2017-12-21'\n);\nvar_dump\n(\ndate_sunrise\n(\n$solstice\n,\nSUNFUNCS_RET_STRING\n,\n69.245833\n, -\n53.537222\n));\n?>"
  },
  {
    "input": "Example #1 date_sunset() example",
    "output": "<?php\n/* calculate the sunset time for Lisbon, Portugal\nLatitude: 38.4 North\nLongitude: 9 West\nZenith ~= 90\noffset: +1 GMT\n*/\necho\ndate\n(\n\"D M d Y\"\n).\n', sunset time : '\n.\ndate_sunset\n(\ntime\n(),\nSUNFUNCS_RET_STRING\n,\n38.4\n, -\n9\n,\n90\n,\n1\n);\n?>"
  },
  {
    "input": "Example #2 No sunset",
    "output": "<?php\n$solstice\n=\nstrtotime\n(\n'2017-12-21'\n);\nvar_dump\n(\ndate_sunset\n(\n$solstice\n,\nSUNFUNCS_RET_STRING\n,\n69.245833\n, -\n53.537222\n));\n?>"
  },
  {
    "input": "Example #1 getdate() example",
    "output": "<?php\n$today\n=\ngetdate\n();\nprint_r\n(\n$today\n);\n?>"
  },
  {
    "input": "Example #1 gettimeofday() example",
    "output": "<?php\nprint_r\n(\ngettimeofday\n());\necho\ngettimeofday\n(\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 gmmktime() basic example",
    "output": "<?php\n// Prints: July 1, 2000 is on a Saturday\necho\n\"July 1, 2000 is on a \"\n.\ndate\n(\n\"l\"\n,\ngmmktime\n(\n0\n,\n0\n,\n0\n,\n7\n,\n1\n,\n2000\n));\n?>"
  },
  {
    "input": "Example #1 gmstrftime() example",
    "output": "<?php\nsetlocale\n(\nLC_TIME\n,\n'en_US'\n);\necho\nstrftime\n(\n\"%b %d %Y %H:%M:%S\"\n,\nmktime\n(\n20\n,\n0\n,\n0\n,\n12\n,\n31\n,\n98\n)) .\n\"\\n\"\n;\necho\ngmstrftime\n(\n\"%b %d %Y %H:%M:%S\"\n,\nmktime\n(\n20\n,\n0\n,\n0\n,\n12\n,\n31\n,\n98\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 idate() example",
    "output": "<?php\n$timestamp\n=\nstrtotime\n(\n'1st January 2004'\n);\n//1072915200\n// this prints the year in a two digit format\n// however, as this would start with a \"0\", it\n// only prints \"4\"\necho\nidate\n(\n'y'\n,\n$timestamp\n);\n?>"
  },
  {
    "input": "Example #1 localtime() example",
    "output": "<?php\n$localtime\n=\nlocaltime\n();\n$localtime_assoc\n=\nlocaltime\n(\ntime\n(),\ntrue\n);\nprint_r\n(\n$localtime\n);\nprint_r\n(\n$localtime_assoc\n);\n?>"
  },
  {
    "input": "Example #1 Timing script execution",
    "output": "<?php\n$time_start\n=\nmicrotime\n(\ntrue\n);\n// Sleep for a while\nusleep\n(\n100\n);\n$time_end\n=\nmicrotime\n(\ntrue\n);\n$time\n=\n$time_end\n-\n$time_start\n;\necho\n\"Did nothing in\n$time\n seconds\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 microtime() and REQUEST_TIME_FLOAT",
    "output": "<?php\n// Randomize sleeping time\nusleep\n(\nmt_rand\n(\n100\n,\n10000\n));\n// REQUEST_TIME_FLOAT is available in the $_SERVER superglobal array.\n// It contains the timestamp of the start of the request with microsecond precision.\n$time\n=\nmicrotime\n(\ntrue\n) -\n$_SERVER\n[\n\"REQUEST_TIME_FLOAT\"\n];\necho\n\"Did nothing in\n$time\n seconds\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 mktime() basic example",
    "output": "<?php\n// Set the default timezone to use.\ndate_default_timezone_set\n(\n'UTC'\n);\n// Prints: July 1, 2000 is on a Saturday\necho\n\"July 1, 2000 is on a \"\n.\ndate\n(\n\"l\"\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n7\n,\n1\n,\n2000\n));\n// Prints something like: 2006-04-05T01:02:03+00:00\necho\ndate\n(\n'c'\n,\nmktime\n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n2006\n));\n?>"
  },
  {
    "input": "Example #1 strftime() locale examples",
    "output": "<?php\nsetlocale\n(\nLC_TIME\n,\n\"C\"\n);\necho\nstrftime\n(\n\"%A\"\n);\nsetlocale\n(\nLC_TIME\n,\n\"fi_FI\"\n);\necho\nstrftime\n(\n\" in Finnish is %A,\"\n);\nsetlocale\n(\nLC_TIME\n,\n\"fr_FR\"\n);\necho\nstrftime\n(\n\" in French %A and\"\n);\nsetlocale\n(\nLC_TIME\n,\n\"de_DE\"\n);\necho\nstrftime\n(\n\" in German %A.\\n\"\n);\n?>"
  },
  {
    "input": "Example #2 ISO 8601:1988 week number example",
    "output": "<?php\n/*     December 2002 / January 2003\nISOWk  M   Tu  W   Thu F   Sa  Su\n----- ----------------------------\n51     16  17  18  19  20  21  22\n52     23  24  25  26  27  28  29\n1      30  31   1   2   3   4   5\n2       6   7   8   9  10  11  12\n3      13  14  15  16  17  18  19   */\n// Outputs: 12/28/2002 - %V,%G,%Y = 52,2002,2002\necho\n\"12/28/2002 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"12/28/2002\"\n)) .\n\"\\n\"\n;\n// Outputs: 12/30/2002 - %V,%G,%Y = 1,2003,2002\necho\n\"12/30/2002 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"12/30/2002\"\n)) .\n\"\\n\"\n;\n// Outputs: 1/3/2003 - %V,%G,%Y = 1,2003,2003\necho\n\"1/3/2003 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"1/3/2003\"\n)) .\n\"\\n\"\n;\n// Outputs: 1/10/2003 - %V,%G,%Y = 2,2003,2003\necho\n\"1/10/2003 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"1/10/2003\"\n)) .\n\"\\n\"\n;\n/*     December 2004 / January 2005\nISOWk  M   Tu  W   Thu F   Sa  Su\n----- ----------------------------\n51     13  14  15  16  17  18  19\n52     20  21  22  23  24  25  26\n53     27  28  29  30  31   1   2\n1       3   4   5   6   7   8   9\n2      10  11  12  13  14  15  16   */\n// Outputs: 12/23/2004 - %V,%G,%Y = 52,2004,2004\necho\n\"12/23/2004 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"12/23/2004\"\n)) .\n\"\\n\"\n;\n// Outputs: 12/31/2004 - %V,%G,%Y = 53,2004,2004\necho\n\"12/31/2004 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"12/31/2004\"\n)) .\n\"\\n\"\n;\n// Outputs: 1/2/2005 - %V,%G,%Y = 53,2004,2005\necho\n\"1/2/2005 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"1/2/2005\"\n)) .\n\"\\n\"\n;\n// Outputs: 1/3/2005 - %V,%G,%Y = 1,2005,2005\necho\n\"1/3/2005 - %V,%G,%Y = \"\n.\nstrftime\n(\n\"%V,%G,%Y\"\n,\nstrtotime\n(\n\"1/3/2005\"\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Cross platform compatible example using the %e modifier",
    "output": "<?php\n// Jan 1: results in: '%e%1%' (%%, e, %%, %e, %%)\n$format\n=\n'%%e%%%e%%'\n;\n// Check for Windows to find and replace the %e\n// modifier correctly\nif (\nstrtoupper\n(\nsubstr\n(\nPHP_OS\n,\n0\n,\n3\n)) ==\n'WIN'\n) {\n\n$format\n=\npreg_replace\n(\n'#(?<!%)((?:%%)*)%e#'\n,\n'\\1%#d'\n,\n$format\n);\n}\necho\nstrftime\n(\n$format\n);\n?>"
  },
  {
    "input": "Example #4 Display all known and unknown formats",
    "output": "<?php\n// Describe the formats\n$strftimeFormats\n= array(\n\n'A'\n=>\n'A full textual representation of the day'\n,\n\n'B'\n=>\n'Full month name, based on the locale'\n,\n\n'C'\n=>\n'Two digit representation of the century (year divided by 100, truncated to an integer)'\n,\n\n'D'\n=>\n'Same as \"%m/%d/%y\"'\n,\n\n'E'\n=>\n''\n,\n\n'F'\n=>\n'Same as \"%Y-%m-%d\"'\n,\n\n'G'\n=>\n'The full four-digit version of %g'\n,\n\n'H'\n=>\n'Two digit representation of the hour in 24-hour format'\n,\n\n'I'\n=>\n'Two digit representation of the hour in 12-hour format'\n,\n\n'J'\n=>\n''\n,\n\n'K'\n=>\n''\n,\n\n'L'\n=>\n''\n,\n\n'M'\n=>\n'Two digit representation of the minute'\n,\n\n'N'\n=>\n''\n,\n\n'O'\n=>\n''\n,\n\n'P'\n=>\n'lower-case \"am\" or \"pm\" based on the given time'\n,\n\n'Q'\n=>\n''\n,\n\n'R'\n=>\n'Same as \"%H:%M\"'\n,\n\n'S'\n=>\n'Two digit representation of the second'\n,\n\n'T'\n=>\n'Same as \"%H:%M:%S\"'\n,\n\n'U'\n=>\n'Week number of the given year, starting with the first Sunday as the first week'\n,\n\n'V'\n=>\n'ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week'\n,\n\n'W'\n=>\n'A numeric representation of the week of the year, starting with the first Monday as the first week'\n,\n\n'X'\n=>\n'Preferred time representation based on locale, without the date'\n,\n\n'Y'\n=>\n'Four digit representation for the year'\n,\n\n'Z'\n=>\n'The time zone offset/abbreviation option NOT given by %z (depends on operating system)'\n,\n\n'a'\n=>\n'An abbreviated textual representation of the day'\n,\n\n'b'\n=>\n'Abbreviated month name, based on the locale'\n,\n\n'c'\n=>\n'Preferred date and time stamp based on local'\n,\n\n'd'\n=>\n'Two-digit day of the month (with leading zeros)'\n,\n\n'e'\n=>\n'Day of the month, with a space preceding single digits'\n,\n\n'f'\n=>\n''\n,\n\n'g'\n=>\n'Two digit representation of the year going by ISO-8601:1988 standards (see %V)'\n,\n\n'h'\n=>\n'Abbreviated month name, based on the locale (an alias of %b)'\n,\n\n'i'\n=>\n''\n,\n\n'j'\n=>\n'Day of the year, 3 digits with leading zeros'\n,\n\n'k'\n=>\n'Hour in 24-hour format, with a space preceding single digits'\n,\n\n'l'\n=>\n'Hour in 12-hour format, with a space preceding single digits'\n,\n\n'm'\n=>\n'Two digit representation of the month'\n,\n\n'n'\n=>\n'A newline character (\"\\n\")'\n,\n\n'o'\n=>\n''\n,\n\n'p'\n=>\n'UPPER-CASE \"AM\" or \"PM\" based on the given time'\n,\n\n'q'\n=>\n''\n,\n\n'r'\n=>\n'Same as \"%I:%M:%S %p\"'\n,\n\n's'\n=>\n'Unix Epoch Time timestamp'\n,\n\n't'\n=>\n'A Tab character (\"\\t\")'\n,\n\n'u'\n=>\n'ISO-8601 numeric representation of the day of the week'\n,\n\n'v'\n=>\n''\n,\n\n'w'\n=>\n'Numeric representation of the day of the week'\n,\n\n'x'\n=>\n'Preferred date representation based on locale, without the time'\n,\n\n'y'\n=>\n'Two digit representation of the year'\n,\n\n'z'\n=>\n'Either the time zone offset from UTC or the abbreviation (depends on operating system)'\n,\n\n'%'\n=>\n'A literal percentage character (\"%\")'\n,\n);\n// Results\n$strftimeValues\n= array();\n// Evaluate the formats whilst suppressing any errors\nforeach (\n$strftimeFormats\nas\n$format\n=>\n$description\n) {\n    if (\nfalse\n!== (\n$value\n= @\nstrftime\n(\n\"%\n{\n$format\n}\n\"\n))) {\n\n$strftimeValues\n[\n$format\n] =\n$value\n;\n    }\n}\n// Find the longest value\n$maxValueLength\n=\n2\n+\nmax\n(\narray_map\n(\n'strlen'\n,\n$strftimeValues\n));\n// Report known formats\nforeach (\n$strftimeValues\nas\n$format\n=>\n$value\n) {\n    echo\n\"Known format   : '\n{\n$format\n}\n' = \"\n,\nstr_pad\n(\n\"'\n{\n$value\n}\n'\"\n,\n$maxValueLength\n),\n\" (\n{\n$strftimeFormats\n[\n$format\n]}\n )\\n\"\n;\n}\n// Report unknown formats\nforeach (\narray_diff_key\n(\n$strftimeFormats\n,\n$strftimeValues\n) as\n$format\n=>\n$description\n) {\n    echo\n\"Unknown format : '\n{\n$format\n}\n'   \"\n,\nstr_pad\n(\n' '\n,\n$maxValueLength\n), (\n$description\n?\n\" (\n{\n$description\n}\n )\"\n:\n''\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 strptime() example",
    "output": "<?php\n$format\n=\n'%d/%m/%Y %H:%M:%S'\n;\n$strf\n=\nstrftime\n(\n$format\n);\necho\n\"\n$strf\n\\n\"\n;\nprint_r\n(\nstrptime\n(\n$strf\n,\n$format\n));\n?>"
  },
  {
    "input": "Example #1 A strtotime() example",
    "output": "<?php\necho\nstrtotime\n(\n\"now\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"10 September 2000\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"+1 day\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"+1 week\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"+1 week 2 days 4 hours 2 seconds\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"next Thursday\"\n),\n\"\\n\"\n;\necho\nstrtotime\n(\n\"last Monday\"\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Checking for failure",
    "output": "<?php\n$str\n=\n'Not Good'\n;\nif ((\n$timestamp\n=\nstrtotime\n(\n$str\n)) ===\nfalse\n) {\n    echo\n\"The string (\n$str\n) is bogus\"\n;\n} else {\n    echo\n\"\n$str\n == \"\n.\ndate\n(\n'l dS \\o\\f F Y h:i:s A'\n,\n$timestamp\n);\n}\n?>"
  },
  {
    "input": "Example #1 time() example",
    "output": "<?php\necho\n'Now: '\n.\ntime\n();\n?>"
  },
  {
    "input": "Example #1 A timezone_name_from_abbr() example",
    "output": "<?php\necho\ntimezone_name_from_abbr\n(\n\"CET\"\n) .\n\"\\n\"\n;\necho\ntimezone_name_from_abbr\n(\n\"\"\n,\n3600\n,\n0\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Getting the timezonedb version",
    "output": "<?php\necho\ntimezone_version_get\n();\n?>"
  },
  {
    "input": "Example #1 Measure several code blocks execution and get the total",
    "output": "<?php\n$c\n= new\nHRTime\\StopWatch\n;\n$c\n->\nstart\n();\n/* measure this code block execution */\nfor (\n$i\n=\n0\n;\n$i\n<\n1024\n*\n1024\n;\n$i\n++);\n$c\n->\nstop\n();\n$elapsed0\n=\n$c\n->\ngetLastElapsedTime\n(\nHRTime\\Unit\n::\nNANOSECOND\n);\n/* measurement is not running here*/\nfor (\n$i\n=\n0\n;\n$i\n<\n1024\n*\n1024\n;\n$i\n++);\n$c\n->\nstart\n();\n/* measure this code block execution */\nfor (\n$i\n=\n0\n;\n$i\n<\n1024\n*\n1024\n;\n$i\n++);\n$c\n->\nstop\n();\n$elapsed1\n=\n$c\n->\ngetLastElapsedTime\n(\nHRTime\\Unit\n::\nNANOSECOND\n);\n$elapsed_total\n=\n$c\n->\ngetElapsedTime\n(\nHRTime\\Unit\n::\nNANOSECOND\n);\n?>"
  },
  {
    "input": "Example #1 Closing an open file descriptor",
    "output": "<?php\n$fd\n=\ndio_open\n(\n'/dev/ttyS0'\n,\nO_RDWR\n);\ndio_close\n(\n$fd\n);\n?>"
  },
  {
    "input": "Example #1 Setting and clearing a lock",
    "output": "<?php\n$fd\n=\ndio_open\n(\n'/dev/ttyS0'\n,\nO_RDWR\n);\nif (\ndio_fcntl\n(\n$fd\n,\nF_SETLK\n, Array(\n\"type\"\n=>\nF_WRLCK\n)) == -\n1\n) {\n\n// the file descriptor appears locked\n\necho\n\"The lock can not be cleared. It is held by someone else.\"\n;\n} else {\n   echo\n\"Lock successfully set/cleared\"\n;\n}\ndio_close\n(\n$fd\n);\n?>"
  },
  {
    "input": "Example #1 Opening a file descriptor",
    "output": "<?php\n$fd\n=\ndio_open\n(\n'/dev/ttyS0'\n,\nO_RDWR\n|\nO_NOCTTY\n|\nO_NONBLOCK\n);\ndio_close\n(\n$fd\n);\n?>"
  },
  {
    "input": "Example #1 Positioning in a file",
    "output": "<?php\n$fd\n=\ndio_open\n(\n'/dev/ttyS0'\n,\nO_RDWR\n);\ndio_seek\n(\n$fd\n,\n10\n,\nSEEK_SET\n);\n// position is now at 10 characters from the start of the file\ndio_seek\n(\n$fd\n, -\n2\n,\nSEEK_CUR\n);\n// position is now at 8 characters from the start of the file\ndio_seek\n(\n$fd\n, -\n5\n,\nSEEK_END\n);\n// position is now at 5 characters from the end of the file\ndio_seek\n(\n$fd\n,\n10\n,\nSEEK_END\n);\n// position is now at 10 characters past the end of the file.\n// The 10 characters between the end of the file and the current\n// position are filled with zeros.\ndio_close\n(\n$fd\n);\n?>"
  },
  {
    "input": "Example #1 Setting the baud rate on a serial port",
    "output": "<?php\n$fd\n=\ndio_open\n(\n'/dev/ttyS0'\n,\nO_RDWR\n|\nO_NOCTTY\n|\nO_NONBLOCK\n);\ndio_fcntl\n(\n$fd\n,\nF_SETFL\n,\nO_SYNC\n);\ndio_tcsetattr\n(\n$fd\n, array(\n\n'baud'\n=>\n9600\n,\n\n'bits'\n=>\n8\n,\n\n'stop'\n=>\n1\n,\n\n'parity'\n=>\n0\n));\nwhile (\n1\n) {\n\n$data\n=\ndio_read\n(\n$fd\n,\n256\n);\n  if (\n$data\n) {\n      echo\n$data\n;\n  }\n}\n?>"
  },
  {
    "input": "Example #1 chdir() example",
    "output": "<?php\n// current directory\necho\ngetcwd\n() .\n\"\\n\"\n;\nchdir\n(\n'public_html'\n);\n// current directory\necho\ngetcwd\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 chroot() example",
    "output": "<?php\nchroot\n(\n\"/path/to/your/chroot/\"\n);\necho\ngetcwd\n();\n?>"
  },
  {
    "input": "Example #1 closedir() example",
    "output": "<?php\n$dir\n=\n\"/etc/php5/\"\n;\n// Open a known directory, read directory into variable and then close\nif (\nis_dir\n(\n$dir\n)) {\n    if (\n$dh\n=\nopendir\n(\n$dir\n)) {\n\n$directory\n=\nreaddir\n(\n$dh\n);\n\nclosedir\n(\n$dh\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 getcwd() example",
    "output": "<?php\n// current directory\necho\ngetcwd\n() .\n\"\\n\"\n;\nchdir\n(\n'cvs'\n);\n// current directory\necho\ngetcwd\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 opendir() example",
    "output": "<?php\n$dir\n=\n\"/etc/php5/\"\n;\n// Open a known directory, and proceed to read its contents\nif (\nis_dir\n(\n$dir\n)) {\n    if (\n$dh\n=\nopendir\n(\n$dir\n)) {\n        while ((\n$file\n=\nreaddir\n(\n$dh\n)) !==\nfalse\n) {\n            echo\n\"filename:\n$file\n : filetype: \"\n.\nfiletype\n(\n$dir\n.\n$file\n) .\n\"\\n\"\n;\n        }\n\nclosedir\n(\n$dh\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #2 \n     List all entries in the current directory and strip out .\n     and ..",
    "output": "<?php\nif (\n$handle\n=\nopendir\n(\n'.'\n)) {\n    while (\nfalse\n!== (\n$entry\n=\nreaddir\n(\n$handle\n))) {\n        if (\n$entry\n!=\n\".\"\n&&\n$entry\n!=\n\"..\"\n) {\n            echo\n\"\n$entry\n\\n\"\n;\n        }\n    }\n\nclosedir\n(\n$handle\n);\n}\n?>"
  },
  {
    "input": "Example #1 A simple scandir() example",
    "output": "<?php\n$dir\n=\n'/tmp'\n;\n$files1\n=\nscandir\n(\n$dir\n);\n$files2\n=\nscandir\n(\n$dir\n,\nSCANDIR_SORT_DESCENDING\n);\nprint_r\n(\n$files1\n);\nprint_r\n(\n$files2\n);\n?>"
  },
  {
    "input": "Example #1 A finfo_buffer() example",
    "output": "<?php\n$finfo\n= new\nfinfo\n(\nFILEINFO_MIME\n);\necho\n$finfo\n->\nbuffer\n(\n$_POST\n[\n\"script\"\n]) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A finfo_file() example",
    "output": "<?php\n$finfo\n=\nfinfo_open\n(\nFILEINFO_MIME_TYPE\n);\n// return mime type aka mimetype extension\nforeach (\nglob\n(\n\"*\"\n) as\n$filename\n) {\n    echo\nfinfo_file\n(\n$finfo\n,\n$filename\n) .\n\"\\n\"\n;\n}\nfinfo_close\n(\n$finfo\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$finfo\n= new\nfinfo\n(\nFILEINFO_MIME\n,\n\"/usr/share/misc/magic\"\n);\n// return mime type ala mimetype extension\n/* get mime-type for a specific file */\n$filename\n=\n\"/usr/local/something.txt\"\n;\necho\n$finfo\n->\nfile\n(\n$filename\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$finfo\n=\nfinfo_open\n(\nFILEINFO_MIME\n,\n\"/usr/share/misc/magic\"\n);\n// return mime type ala mimetype extension\nif (!\n$finfo\n) {\n    echo\n\"Opening fileinfo database failed\"\n;\n    exit();\n}\n/* get mime-type for a specific file */\n$filename\n=\n\"/usr/local/something.txt\"\n;\necho\nfinfo_file\n(\n$finfo\n,\n$filename\n);\n/* close connection */\nfinfo_close\n(\n$finfo\n);\n?>"
  },
  {
    "input": "Example #1 mime_content_type() Example",
    "output": "<?php\necho\nmime_content_type\n(\n'php.gif'\n) .\n\"\\n\"\n;\necho\nmime_content_type\n(\n'test.php'\n);\n?>"
  },
  {
    "input": "Example #1 basename() example",
    "output": "<?php\necho\n\"1) \"\n.\nbasename\n(\n\"/etc/sudoers.d\"\n,\n\".d\"\n).\nPHP_EOL\n;\necho\n\"2) \"\n.\nbasename\n(\n\"/etc/sudoers.d\"\n).\nPHP_EOL\n;\necho\n\"3) \"\n.\nbasename\n(\n\"/etc/passwd\"\n).\nPHP_EOL\n;\necho\n\"4) \"\n.\nbasename\n(\n\"/etc/\"\n).\nPHP_EOL\n;\necho\n\"5) \"\n.\nbasename\n(\n\".\"\n).\nPHP_EOL\n;\necho\n\"6) \"\n.\nbasename\n(\n\"/\"\n);\n?>"
  },
  {
    "input": "Example #1 Changing a file's group",
    "output": "<?php\n$filename\n=\n'shared_file.txt'\n;\n$format\n=\n\"%s's Group ID @ %s: %d\\n\"\n;\nprintf\n(\n$format\n,\n$filename\n,\ndate\n(\n'r'\n),\nfilegroup\n(\n$filename\n));\nchgrp\n(\n$filename\n,\n8\n);\nclearstatcache\n();\n// do not cache filegroup() results\nprintf\n(\n$format\n,\n$filename\n,\ndate\n(\n'r'\n),\nfilegroup\n(\n$filename\n));\n?>"
  },
  {
    "input": "Example #1 Simple chown() usage",
    "output": "<?php\n// File name and username to use\n$file_name\n=\n\"foo.php\"\n;\n$path\n=\n\"/home/sites/php.net/public_html/sandbox/\"\n.\n$file_name\n;\n$user_name\n=\n\"root\"\n;\n// Set the user\nchown\n(\n$path\n,\n$user_name\n);\n// Check the result\n$stat\n=\nstat\n(\n$path\n);\nprint_r\n(\nposix_getpwuid\n(\n$stat\n[\n'uid'\n]));\n?>"
  },
  {
    "input": "Example #1 clearstatcache() example",
    "output": "<?php\n$file\n=\n'output_log.txt'\n;\nfunction\nget_owner\n(\n$file\n)\n{\n\n$stat\n=\nstat\n(\n$file\n);\n\n$user\n=\nposix_getpwuid\n(\n$stat\n[\n'uid'\n]);\n    return\n$user\n[\n'name'\n];\n}\n$format\n=\n\"UID @ %s: %s\\n\"\n;\nprintf\n(\n$format\n,\ndate\n(\n'r'\n),\nget_owner\n(\n$file\n));\nchown\n(\n$file\n,\n'ross'\n);\nprintf\n(\n$format\n,\ndate\n(\n'r'\n),\nget_owner\n(\n$file\n));\nclearstatcache\n();\nprintf\n(\n$format\n,\ndate\n(\n'r'\n),\nget_owner\n(\n$file\n));\n?>"
  },
  {
    "input": "Example #1 copy() example",
    "output": "<?php\n$file\n=\n'example.txt'\n;\n$newfile\n=\n'example.txt.bak'\n;\nif (!\ncopy\n(\n$file\n,\n$newfile\n)) {\n    echo\n\"failed to copy\n$file\n...\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 dirname() example",
    "output": "<?php\necho\ndirname\n(\n\"/etc/passwd\"\n) .\nPHP_EOL\n;\necho\ndirname\n(\n\"/etc/\"\n) .\nPHP_EOL\n;\necho\ndirname\n(\n\".\"\n) .\nPHP_EOL\n;\necho\ndirname\n(\n\"C:\\\\\"\n) .\nPHP_EOL\n;\necho\ndirname\n(\n\"/usr/local/lib\"\n,\n2\n);"
  },
  {
    "input": "Example #1 disk_free_space() example",
    "output": "<?php\n// $df contains the number of bytes available on \"/\"\n$df\n=\ndisk_free_space\n(\n\"/\"\n);\n// On Windows:\n$df_c\n=\ndisk_free_space\n(\n\"C:\"\n);\n$df_d\n=\ndisk_free_space\n(\n\"D:\"\n);\n?>"
  },
  {
    "input": "Example #1 disk_total_space() example",
    "output": "<?php\n// $ds contains the total number of bytes available on \"/\"\n$ds\n=\ndisk_total_space\n(\n\"/\"\n);\n// On Windows:\n$ds\n=\ndisk_total_space\n(\n\"C:\"\n);\n$ds\n=\ndisk_total_space\n(\n\"D:\"\n);\n?>"
  },
  {
    "input": "Example #1 A simple fclose() example",
    "output": "<?php\n$handle\n=\nfopen\n(\n'somefile.txt'\n,\n'r'\n);\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 fdatasync() example",
    "output": "<?php\n$file\n=\n'test.txt'\n;\n$stream\n=\nfopen\n(\n$file\n,\n'w'\n);\nfwrite\n(\n$stream\n,\n'test data'\n);\nfwrite\n(\n$stream\n,\n\"\\r\\n\"\n);\nfwrite\n(\n$stream\n,\n'additional data'\n);\nfdatasync\n(\n$stream\n);\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 Handling timeouts with feof()",
    "output": "<?php\nfunction\nsafe_feof\n(\n$fp\n, &\n$start\n=\nNULL\n) {\n\n$start\n=\nmicrotime\n(\ntrue\n);\n return\nfeof\n(\n$fp\n);\n}\n/* Assuming $fp is previously opened by fsockopen() */\n$start\n=\nNULL\n;\n$timeout\n=\nini_get\n(\n'default_socket_timeout'\n);\nwhile(!\nsafe_feof\n(\n$fp\n,\n$start\n) && (\nmicrotime\n(\ntrue\n) -\n$start\n) <\n$timeout\n)\n{\n\n/* Handle */\n}\n?>"
  },
  {
    "input": "Example #2 feof() example with an invalid file pointer",
    "output": "<?php\n// if file can not be read or doesn't exist fopen function returns FALSE\n$file\n= @\nfopen\n(\n\"no_such_file\"\n,\n\"r\"\n);\n// FALSE from fopen will issue warning and result in infinite loop here\nwhile (!\nfeof\n(\n$file\n)) {\n}\nfclose\n(\n$file\n);\n?>"
  },
  {
    "input": "Example #1 File write example using fflush()",
    "output": "<?php\n$filename\n=\n'bar.txt'\n;\n$file\n=\nfopen\n(\n$filename\n,\n'r+'\n);\nrewind\n(\n$file\n);\nfwrite\n(\n$file\n,\n'Foo'\n);\nfflush\n(\n$file\n);\nftruncate\n(\n$file\n,\nftell\n(\n$file\n));\nfclose\n(\n$file\n);\n?>"
  },
  {
    "input": "Example #1 A fgetc() example",
    "output": "<?php\n$fp\n=\nfopen\n(\n'somefile.txt'\n,\n'r'\n);\nif (!\n$fp\n) {\n    echo\n'Could not open file somefile.txt'\n;\n}\nwhile (\nfalse\n!== (\n$char\n=\nfgetc\n(\n$fp\n))) {\n    echo\n\"\n$char\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Read and print the entire contents of a CSV file",
    "output": "<?php\n$row\n=\n1\n;\nif ((\n$handle\n=\nfopen\n(\n\"test.csv\"\n,\n\"r\"\n)) !==\nFALSE\n) {\n    while ((\n$data\n=\nfgetcsv\n(\n$handle\n,\n1000\n,\n\",\"\n)) !==\nFALSE\n) {\n\n$num\n=\ncount\n(\n$data\n);\n        echo\n\"<p>\n$num\n fields in line\n$row\n: <br /></p>\\n\"\n;\n\n$row\n++;\n        for (\n$c\n=\n0\n;\n$c\n<\n$num\n;\n$c\n++) {\n            echo\n$data\n[\n$c\n] .\n\"<br />\\n\"\n;\n        }\n    }\n\nfclose\n(\n$handle\n);\n}\n?>"
  },
  {
    "input": "Example #1 Reading a file line by line",
    "output": "<?php\n$fp\n= @\nfopen\n(\n\"/tmp/inputfile.txt\"\n,\n\"r\"\n);\nif (\n$fp\n) {\n    while ((\n$buffer\n=\nfgets\n(\n$fp\n,\n4096\n)) !==\nfalse\n) {\n        echo\n$buffer\n,\nPHP_EOL\n;\n    }\n    if (!\nfeof\n(\n$fp\n)) {\n        echo\n\"Error: unexpected fgets() fail\\n\"\n;\n    }\n\nfclose\n(\n$fp\n);\n}\n?>"
  },
  {
    "input": "Example #1 Reading a PHP file line-by-line",
    "output": "<?php\n$str\n= <<<EOD\n<html><body>\n <p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.</p>\n</body></html>\nText outside of the HTML block.\nEOD;\nfile_put_contents\n(\n'sample.php'\n,\n$str\n);\n$handle\n= @\nfopen\n(\n\"sample.php\"\n,\n\"r\"\n);\nif (\n$handle\n) {\n    while (!\nfeof\n(\n$handle\n)) {\n\n$buffer\n=\nfgetss\n(\n$handle\n,\n4096\n);\n        echo\n$buffer\n;\n    }\n\nfclose\n(\n$handle\n);\n}\n?>"
  },
  {
    "input": "Example #1 file() example",
    "output": "<?php\n// Get a file into an array.  In this example we'll go through HTTP to get\n// the HTML source of a URL.\n$lines\n=\nfile\n(\n'http://www.example.com/'\n);\n// Loop through our array, show HTML source as HTML source; and line numbers too.\nforeach (\n$lines\nas\n$line_num\n=>\n$line\n) {\n    echo\n\"Line #<b>\n{\n$line_num\n}\n</b> : \"\n.\nhtmlspecialchars\n(\n$line\n) .\n\"<br />\\n\"\n;\n}\n// Using the optional flags parameter\n$trimmed\n=\nfile\n(\n'somefile.txt'\n,\nFILE_IGNORE_NEW_LINES\n|\nFILE_SKIP_EMPTY_LINES\n);\n?>"
  },
  {
    "input": "Example #1 Testing whether a file exists",
    "output": "<?php\n$filename\n=\n'/path/to/foo.txt'\n;\nif (\nfile_exists\n(\n$filename\n)) {\n    echo\n\"The file\n$filename\n exists\"\n;\n} else {\n    echo\n\"The file\n$filename\n does not exist\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Get and output the source of the homepage of a website",
    "output": "<?php\n$homepage\n=\nfile_get_contents\n(\n'http://www.example.com/'\n);\necho\n$homepage\n;\n?>"
  },
  {
    "input": "Example #2 Searching within the include_path",
    "output": "<?php\n// If strict types are enabled i.e. declare(strict_types=1);\n$file\n=\nfile_get_contents\n(\n'./people.txt'\n,\ntrue\n);\n// Otherwise\n$file\n=\nfile_get_contents\n(\n'./people.txt'\n,\nFILE_USE_INCLUDE_PATH\n);\n?>"
  },
  {
    "input": "Example #3 Reading a section of a file",
    "output": "<?php\n// Read 14 characters starting from the 21st character\n$section\n=\nfile_get_contents\n(\n'./people.txt'\n,\nFALSE\n,\nNULL\n,\n20\n,\n14\n);\nvar_dump\n(\n$section\n);\n?>"
  },
  {
    "input": "Example #4 Using stream contexts",
    "output": "<?php\n// Create a stream\n$opts\n= array(\n\n'http'\n=>array(\n\n'method'\n=>\n\"GET\"\n,\n\n'header'\n=>\n\"Accept-language: en\\r\\n\"\n.\n\n\"Cookie: foo=bar\\r\\n\"\n\n)\n);\n$context\n=\nstream_context_create\n(\n$opts\n);\n// Open the file using the HTTP headers set above\n$file\n=\nfile_get_contents\n(\n'http://www.example.com/'\n,\nfalse\n,\n$context\n);\n?>"
  },
  {
    "input": "Example #1 Simple usage example",
    "output": "<?php\n$file\n=\n'people.txt'\n;\n// Open the file to get existing content\n$current\n=\nfile_get_contents\n(\n$file\n);\n// Append a new person to the file\n$current\n.=\n\"John Smith\\n\"\n;\n// Write the contents back to the file\nfile_put_contents\n(\n$file\n,\n$current\n);\n?>"
  },
  {
    "input": "Example #2 Using flags",
    "output": "<?php\n$file\n=\n'people.txt'\n;\n// The new person to add to the file\n$person\n=\n\"John Smith\\n\"\n;\n// Write the contents to the file,\n// using the FILE_APPEND flag to append the content to the end of the file\n// and the LOCK_EX flag to prevent anyone else writing to the file at the same time\nfile_put_contents\n(\n$file\n,\n$person\n,\nFILE_APPEND\n|\nLOCK_EX\n);\n?>"
  },
  {
    "input": "Example #1 fileatime() example",
    "output": "<?php\n// outputs e.g.  somefile.txt was last accessed: December 29 2002 22:16:23.\n$filename\n=\n'somefile.txt'\n;\nif (\nfile_exists\n(\n$filename\n)) {\n    echo\n\"\n$filename\n was last accessed: \"\n.\ndate\n(\n\"F d Y H:i:s.\"\n,\nfileatime\n(\n$filename\n));\n}\n?>"
  },
  {
    "input": "Example #1 A filectime() example",
    "output": "<?php\n// outputs e.g.  somefile.txt was last changed: December 29 2002 22:16:23.\n$filename\n=\n'somefile.txt'\n;\nif (\nfile_exists\n(\n$filename\n)) {\n    echo\n\"\n$filename\n was last changed: \"\n.\ndate\n(\n\"F d Y H:i:s.\"\n,\nfilectime\n(\n$filename\n));\n}\n?>"
  },
  {
    "input": "Example #1 Finding the group of a file",
    "output": "<?php\n$filename\n=\n'index.php'\n;\nprint_r\n(\nposix_getgrgid\n(\nfilegroup\n(\n$filename\n)));\n?>"
  },
  {
    "input": "Example #1 Comparing the inode of a file with the current file",
    "output": "<?php\n$filename\n=\n'index.php'\n;\nif (\ngetmyinode\n() ==\nfileinode\n(\n$filename\n)) {\n    echo\n'You are checking the current file.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 filemtime() example",
    "output": "<?php\n// outputs e.g.  somefile.txt was last modified: December 29 2002 22:16:23.\n$filename\n=\n'somefile.txt'\n;\nif (\nfile_exists\n(\n$filename\n)) {\n    echo\n\"\n$filename\n was last modified: \"\n.\ndate\n(\n\"F d Y H:i:s.\"\n,\nfilemtime\n(\n$filename\n));\n}\n?>"
  },
  {
    "input": "Example #1 Finding the owner of a file",
    "output": "<?php\n$filename\n=\n'index.php'\n;\nprint_r\n(\nposix_getpwuid\n(\nfileowner\n(\n$filename\n)));\n?>"
  },
  {
    "input": "Example #1 Display permissions as an octal value",
    "output": "<?php\necho\nsubstr\n(\nsprintf\n(\n'%o'\n,\nfileperms\n(\n'/tmp'\n)), -\n4\n);\necho\nsubstr\n(\nsprintf\n(\n'%o'\n,\nfileperms\n(\n'/etc/passwd'\n)), -\n4\n);\n?>"
  },
  {
    "input": "Example #2 Display full permissions",
    "output": "<?php\n$perms\n=\nfileperms\n(\n'/etc/passwd'\n);\nswitch (\n$perms\n&\n0xF000\n) {\n    case\n0xC000\n:\n// socket\n\n$info\n=\n's'\n;\n        break;\n    case\n0xA000\n:\n// symbolic link\n\n$info\n=\n'l'\n;\n        break;\n    case\n0x8000\n:\n// regular\n\n$info\n=\n'r'\n;\n        break;\n    case\n0x6000\n:\n// block special\n\n$info\n=\n'b'\n;\n        break;\n    case\n0x4000\n:\n// directory\n\n$info\n=\n'd'\n;\n        break;\n    case\n0x2000\n:\n// character special\n\n$info\n=\n'c'\n;\n        break;\n    case\n0x1000\n:\n// FIFO pipe\n\n$info\n=\n'p'\n;\n        break;\n    default:\n// unknown\n\n$info\n=\n'u'\n;\n}\n// Owner\n$info\n.= ((\n$perms\n&\n0x0100\n) ?\n'r'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0080\n) ?\n'w'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0040\n) ?\n            ((\n$perms\n&\n0x0800\n) ?\n's'\n:\n'x'\n) :\n            ((\n$perms\n&\n0x0800\n) ?\n'S'\n:\n'-'\n));\n// Group\n$info\n.= ((\n$perms\n&\n0x0020\n) ?\n'r'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0010\n) ?\n'w'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0008\n) ?\n            ((\n$perms\n&\n0x0400\n) ?\n's'\n:\n'x'\n) :\n            ((\n$perms\n&\n0x0400\n) ?\n'S'\n:\n'-'\n));\n// World\n$info\n.= ((\n$perms\n&\n0x0004\n) ?\n'r'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0002\n) ?\n'w'\n:\n'-'\n);\n$info\n.= ((\n$perms\n&\n0x0001\n) ?\n            ((\n$perms\n&\n0x0200\n) ?\n't'\n:\n'x'\n) :\n            ((\n$perms\n&\n0x0200\n) ?\n'T'\n:\n'-'\n));\necho\n$info\n;\n?>"
  },
  {
    "input": "Example #1 filesize() example",
    "output": "<?php\n// outputs e.g.  somefile.txt: 1024 bytes\n$filename\n=\n'somefile.txt'\n;\necho\n$filename\n.\n': '\n.\nfilesize\n(\n$filename\n) .\n' bytes'\n;\n?>"
  },
  {
    "input": "Example #1 filetype() example",
    "output": "<?php\necho\nfiletype\n(\n'/etc/passwd'\n);\necho\n\"\\n\"\n;\necho\nfiletype\n(\n'/etc/'\n);\n?>"
  },
  {
    "input": "Example #1 flock() example",
    "output": "<?php\n$fp\n=\nfopen\n(\n\"/tmp/lock.txt\"\n,\n\"r+\"\n);\nif (\nflock\n(\n$fp\n,\nLOCK_EX\n)) {\n// acquire an exclusive lock\n\nftruncate\n(\n$fp\n,\n0\n);\n// truncate file\n\nfwrite\n(\n$fp\n,\n\"Write something here\\n\"\n);\n\nfflush\n(\n$fp\n);\n// flush output before releasing the lock\n\nflock\n(\n$fp\n,\nLOCK_UN\n);\n// release the lock\n} else {\n    echo\n\"Couldn't get the lock!\"\n;\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #2 flock() using the LOCK_NB option",
    "output": "<?php\n$fp\n=\nfopen\n(\n'/tmp/lock.txt'\n,\n'r+'\n);\n/* Activate the LOCK_NB option on an LOCK_EX operation */\nif(!\nflock\n(\n$fp\n,\nLOCK_EX\n|\nLOCK_NB\n)) {\n    echo\n'Unable to obtain lock'\n;\n    exit(-\n1\n);\n}\n/* ... */\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 Checking a color name against a shell wildcard pattern",
    "output": "<?php\nif (\nfnmatch\n(\n\"*gr[ae]y\"\n,\n$color\n)) {\n  echo\n\"some form of gray ...\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 fopen() examples",
    "output": "<?php\n$handle\n=\nfopen\n(\n\"/home/rasmus/file.txt\"\n,\n\"r\"\n);\n$handle\n=\nfopen\n(\n\"/home/rasmus/file.gif\"\n,\n\"wb\"\n);\n$handle\n=\nfopen\n(\n\"http://www.example.com/\"\n,\n\"r\"\n);\n$handle\n=\nfopen\n(\n\"ftp://user:password@example.com/somefile.txt\"\n,\n\"w\"\n);\n?>"
  },
  {
    "input": "Example #1 Using fpassthru() with binary files",
    "output": "<?php\n// open the file in a binary mode\n$name\n=\n'./img/ok.png'\n;\n$fp\n=\nfopen\n(\n$name\n,\n'rb'\n);\n// send the right headers\nheader\n(\n\"Content-Type: image/png\"\n);\nheader\n(\n\"Content-Length: \"\n.\nfilesize\n(\n$name\n));\n// dump the picture and stop the script\nfpassthru\n(\n$fp\n);\nexit;\n?>"
  },
  {
    "input": "Example #1 fputcsv() example",
    "output": "<?php\n$list\n= [\n    [\n'aaa'\n,\n'bbb'\n,\n'ccc'\n,\n'dddd'\n],\n    [\n'123'\n,\n'456'\n,\n'789'\n],\n    [\n'\"aaa\"'\n,\n'\"bbb\"'\n]\n];\n$fp\n=\nfopen\n(\n'file.csv'\n,\n'w'\n);\nforeach (\n$list\nas\n$fields\n) {\n\nfputcsv\n(\n$fp\n,\n$fields\n,\n','\n,\n'\"'\n,\n''\n);\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 A simple fread() example",
    "output": "<?php\n// get contents of a file into a string\n$filename\n=\n\"/usr/local/something.txt\"\n;\n$handle\n=\nfopen\n(\n$filename\n,\n\"r\"\n);\n$contents\n=\nfread\n(\n$handle\n,\nfilesize\n(\n$filename\n));\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #2 Binary fread() example",
    "output": "<?php\n$filename\n=\n\"c:\\\\files\\\\somepic.gif\"\n;\n$handle\n=\nfopen\n(\n$filename\n,\n\"rb\"\n);\n$contents\n=\nfread\n(\n$handle\n,\nfilesize\n(\n$filename\n));\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #3 Remote fread() examples",
    "output": "<?php\n$handle\n=\nfopen\n(\n\"http://www.example.com/\"\n,\n\"rb\"\n);\n$contents\n=\nstream_get_contents\n(\n$handle\n);\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 fscanf() Example",
    "output": "<?php\n$handle\n=\nfopen\n(\n\"users.txt\"\n,\n\"r\"\n);\nwhile (\n$userinfo\n=\nfscanf\n(\n$handle\n,\n\"%s\\t%s\\t%s\\n\"\n)) {\n    list (\n$name\n,\n$profession\n,\n$countrycode\n) =\n$userinfo\n;\n\n//... do something with the values\n}\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 fseek() example",
    "output": "<?php\n$fp\n=\nfopen\n(\n'somefile.txt'\n,\n'r'\n);\n// read some data\n$data\n=\nfgets\n(\n$fp\n,\n4096\n);\n// move back to the beginning of the file\n// same as rewind($fp);\nfseek\n(\n$fp\n,\n0\n);\n?>"
  },
  {
    "input": "Example #1 fstat() example",
    "output": "<?php\n// open a file\n$fp\n=\nfopen\n(\n\"/etc/passwd\"\n,\n\"r\"\n);\n// gather statistics\n$fstat\n=\nfstat\n(\n$fp\n);\n// close the file\nfclose\n(\n$fp\n);\n// print only the associative part\nprint_r\n(\narray_slice\n(\n$fstat\n,\n13\n));\n?>"
  },
  {
    "input": "Example #1 fsync() example",
    "output": "<?php\n$file\n=\n'test.txt'\n;\n$stream\n=\nfopen\n(\n$file\n,\n'w'\n);\nfwrite\n(\n$stream\n,\n'test data'\n);\nfwrite\n(\n$stream\n,\n\"\\r\\n\"\n);\nfwrite\n(\n$stream\n,\n'additional data'\n);\nfsync\n(\n$stream\n);\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 ftell() example",
    "output": "<?php\n// opens a file and read some data\n$fp\n=\nfopen\n(\n\"/etc/passwd\"\n,\n\"r\"\n);\n$data\n=\nfgets\n(\n$fp\n,\n12\n);\n// where are we ?\necho\nftell\n(\n$fp\n);\n// 11\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 File truncation example",
    "output": "<?php\n$filename\n=\n'lorem_ipsum.txt'\n;\n$handle\n=\nfopen\n(\n$filename\n,\n'r+'\n);\nftruncate\n(\n$handle\n,\nrand\n(\n1\n,\nfilesize\n(\n$filename\n)));\nrewind\n(\n$handle\n);\necho\nfread\n(\n$handle\n,\nfilesize\n(\n$filename\n));\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 A simple fwrite() example",
    "output": "<?php\n$filename\n=\n'test.txt'\n;\n$somecontent\n=\n\"Add this to the file\\n\"\n;\n// Let's make sure the file exists and is writable first.\nif (\nis_writable\n(\n$filename\n)) {\n\n// In our example we're opening $filename in append mode.\n    // The file pointer is at the bottom of the file hence\n    // that's where $somecontent will go when we fwrite() it.\n\nif (!\n$fp\n=\nfopen\n(\n$filename\n,\n'a'\n)) {\n         echo\n\"Cannot open file (\n$filename\n)\"\n;\n         exit;\n    }\n\n// Write $somecontent to our opened file.\n\nif (\nfwrite\n(\n$fp\n,\n$somecontent\n) ===\nFALSE\n) {\n        echo\n\"Cannot write to file (\n$filename\n)\"\n;\n        exit;\n    }\n    echo\n\"Success, wrote (\n$somecontent\n) to file (\n$filename\n)\"\n;\n\nfclose\n(\n$fp\n);\n} else {\n    echo\n\"The file\n$filename\n is not writable\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 \n     Convenient way how glob() can replace\n     opendir() and friends.",
    "output": "<?php\nforeach (\nglob\n(\n\"*.txt\"\n) as\n$filename\n) {\n    echo\n\"\n$filename\n size \"\n.\nfilesize\n(\n$filename\n) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 \n     Example with a more complex pattern",
    "output": "<?php\nforeach (\nglob\n(\n\"path/*/*.{txt,md}\"\n,\n\\GLOB_BRACE\n) as\n$filename\n) {\n    echo\n\"\n$filename\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_dir() example",
    "output": "<?php\nvar_dump\n(\nis_dir\n(\n'a_file.txt'\n));\nvar_dump\n(\nis_dir\n(\n'bogus_dir/abc'\n));\nvar_dump\n(\nis_dir\n(\n'..'\n));\n//one dir up\n?>"
  },
  {
    "input": "Example #1 is_executable() example",
    "output": "<?php\n$file\n=\n'/home/vincent/somefile.sh'\n;\nif (\nis_executable\n(\n$file\n)) {\n    echo\n$file\n.\n' is executable'\n;\n} else {\n    echo\n$file\n.\n' is not executable'\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_file() example",
    "output": "<?php\nvar_dump\n(\nis_file\n(\n'a_file.txt'\n)) .\n\"\\n\"\n;\nvar_dump\n(\nis_file\n(\n'/usr/bin/'\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Create and confirm if a file is a symbolic link",
    "output": "<?php\n$link\n=\n'uploads'\n;\nif (\nis_link\n(\n$link\n)) {\n    echo\nreadlink\n(\n$link\n);\n} else {\n\nsymlink\n(\n'uploads.php'\n,\n$link\n);\n}\n?>"
  },
  {
    "input": "Example #1 is_readable() example",
    "output": "<?php\n$filename\n=\n'test.txt'\n;\nif (\nis_readable\n(\n$filename\n)) {\n    echo\n'The file is readable'\n;\n} else {\n    echo\n'The file is not readable'\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_uploaded_file() example",
    "output": "<?php\nif (\nis_uploaded_file\n(\n$_FILES\n[\n'userfile'\n][\n'tmp_name'\n])) {\n   echo\n\"File \"\n.\n$_FILES\n[\n'userfile'\n][\n'name'\n] .\n\" uploaded successfully.\\n\"\n;\n   echo\n\"Displaying contents\\n\"\n;\n\nreadfile\n(\n$_FILES\n[\n'userfile'\n][\n'tmp_name'\n]);\n} else {\n   echo\n\"Possible file upload attack: \"\n;\n   echo\n\"filename '\"\n.\n$_FILES\n[\n'userfile'\n][\n'tmp_name'\n] .\n\"'.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_writable() example",
    "output": "<?php\n$filename\n=\n'test.txt'\n;\nif (\nis_writable\n(\n$filename\n)) {\n    echo\n'The file is writable'\n;\n} else {\n    echo\n'The file is not writable'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Changing the group of a symbolic link",
    "output": "<?php\n$target\n=\n'output.php'\n;\n$link\n=\n'output.html'\n;\nsymlink\n(\n$target\n,\n$link\n);\nlchgrp\n(\n$link\n,\n8\n);\n?>"
  },
  {
    "input": "Example #1 Changing the owner of a symbolic link",
    "output": "<?php\n$target\n=\n'output.php'\n;\n$link\n=\n'output.html'\n;\nsymlink\n(\n$target\n,\n$link\n);\nlchown\n(\n$link\n,\n8\n);\n?>"
  },
  {
    "input": "Example #1 Creating a simple hard link",
    "output": "<?php\n$target\n=\n'source.ext'\n;\n// This is the file that already exists\n$link\n=\n'newfile.ext'\n;\n// This the filename that you want to link it to\nlink\n(\n$target\n,\n$link\n);\n?>"
  },
  {
    "input": "Example #1 linkinfo() example",
    "output": "<?php\necho\nlinkinfo\n(\n'/vmlinuz'\n);\n// 835\n?>"
  },
  {
    "input": "Example #1 Comparison of stat() and lstat()",
    "output": "<?php\nsymlink\n(\n'uploads.php'\n,\n'uploads'\n);\n// Contrast information for uploads.php and uploads\narray_diff\n(\nstat\n(\n'uploads'\n),\nlstat\n(\n'uploads'\n));\n?>"
  },
  {
    "input": "Example #1 mkdir() example",
    "output": "<?php\nmkdir\n(\n\"/path/to/my/dir\"\n,\n0700\n);\n?>"
  },
  {
    "input": "Example #2 mkdir() using the recursive parameter",
    "output": "<?php\n// Desired directory structure\n$structure\n=\n'./depth1/depth2/depth3/'\n;\n// To create the nested structure, the $recursive parameter\n// to mkdir() must be specified.\nif (!\nmkdir\n(\n$structure\n,\n0777\n,\ntrue\n)) {\n    die(\n'Failed to create directories...'\n);\n}\n// ...\n?>"
  },
  {
    "input": "Example #1 Uploading multiple files",
    "output": "<?php\n$uploads_dir\n=\n'/uploads'\n;\nforeach (\n$_FILES\n[\n\"pictures\"\n][\n\"error\"\n] as\n$key\n=>\n$error\n) {\n    if (\n$error\n==\nUPLOAD_ERR_OK\n) {\n\n$tmp_name\n=\n$_FILES\n[\n\"pictures\"\n][\n\"tmp_name\"\n][\n$key\n];\n\n// basename() may prevent filesystem traversal attacks;\n        // further validation/sanitation of the filename may be appropriate\n\n$name\n=\nbasename\n(\n$_FILES\n[\n\"pictures\"\n][\n\"name\"\n][\n$key\n]);\n\nmove_uploaded_file\n(\n$tmp_name\n,\n\"\n$uploads_dir\n/\n$name\n\"\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #3 parse_ini_file() parsing a php.ini file",
    "output": "<?php\n// A simple function used for comparing the results below\nfunction\nyesno\n(\n$expression\n)\n{\n    return(\n$expression\n?\n'Yes'\n:\n'No'\n);\n}\n// Get the path to php.ini using the php_ini_loaded_file() function\n$ini_path\n=\nphp_ini_loaded_file\n();\n// Parse php.ini\n$ini\n=\nparse_ini_file\n(\n$ini_path\n);\n// Print and compare the values, note that using get_cfg_var()\n// will give the same results for parsed and loaded here\necho\n'(parsed) magic_quotes_gpc = '\n.\nyesno\n(\n$ini\n[\n'magic_quotes_gpc'\n]) .\nPHP_EOL\n;\necho\n'(loaded) magic_quotes_gpc = '\n.\nyesno\n(\nget_cfg_var\n(\n'magic_quotes_gpc'\n)) .\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 pathinfo() Example",
    "output": "<?php\n$path_parts\n=\npathinfo\n(\n'/www/htdocs/inc/lib.inc.php'\n);\necho\n$path_parts\n[\n'dirname'\n],\n\"\\n\"\n;\necho\n$path_parts\n[\n'basename'\n],\n\"\\n\"\n;\necho\n$path_parts\n[\n'extension'\n],\n\"\\n\"\n;\necho\n$path_parts\n[\n'filename'\n],\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 pathinfo() example showing difference between null and no extension",
    "output": "<?php\n$path_parts\n=\npathinfo\n(\n'/path/emptyextension.'\n);\nvar_dump\n(\n$path_parts\n[\n'extension'\n]);\n$path_parts\n=\npathinfo\n(\n'/path/noextension'\n);\nvar_dump\n(\n$path_parts\n[\n'extension'\n]);\n?>"
  },
  {
    "input": "Example #3 pathinfo() example for a dot-file",
    "output": "<?php\nprint_r\n(\npathinfo\n(\n'/some/path/.test'\n));\n?>"
  },
  {
    "input": "Example #1 pclose() example",
    "output": "<?php\n$handle\n=\npopen\n(\n'/bin/ls'\n,\n'r'\n);\npclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 popen() example",
    "output": "<?php\n$handle\n=\npopen\n(\n\"/bin/ls\"\n,\n\"r\"\n);\n?>"
  },
  {
    "input": "Example #2 popen() example",
    "output": "<?php\nerror_reporting\n(\nE_ALL\n);\n/* Add redirection so we can get stderr. */\n$handle\n=\npopen\n(\n'/path/to/executable 2>&1'\n,\n'r'\n);\necho\n\"'\n$handle\n'; \"\n.\ngettype\n(\n$handle\n) .\n\"\\n\"\n;\n$read\n=\nfread\n(\n$handle\n,\n2096\n);\necho\n$read\n;\npclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 Forcing a download using readfile()",
    "output": "<?php\n$file\n=\n'monkey.gif'\n;\nif (\nfile_exists\n(\n$file\n)) {\n\nheader\n(\n'Content-Description: File Transfer'\n);\n\nheader\n(\n'Content-Type: application/octet-stream'\n);\n\nheader\n(\n'Content-Disposition: attachment; filename=\"'\n.\nbasename\n(\n$file\n).\n'\"'\n);\n\nheader\n(\n'Expires: 0'\n);\n\nheader\n(\n'Cache-Control: must-revalidate'\n);\n\nheader\n(\n'Pragma: public'\n);\n\nheader\n(\n'Content-Length: '\n.\nfilesize\n(\n$file\n));\n\nreadfile\n(\n$file\n);\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 readlink() example",
    "output": "<?php\n// output e.g. /boot/vmlinux-2.4.20-xfs\necho\nreadlink\n(\n'/vmlinuz'\n);\n?>"
  },
  {
    "input": "Example #1 realpath() example",
    "output": "<?php\nchdir\n(\n'/var/www/'\n);\necho\nrealpath\n(\n'./../../etc/passwd'\n) .\nPHP_EOL\n;\necho\nrealpath\n(\n'/tmp/'\n) .\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 realpath_cache_get() example",
    "output": "<?php\nvar_dump\n(\nrealpath_cache_get\n());\n?>"
  },
  {
    "input": "Example #1 realpath_cache_size() example",
    "output": "<?php\nvar_dump\n(\nrealpath_cache_size\n());\n?>"
  },
  {
    "input": "Example #1 Example with rename()",
    "output": "<?php\nrename\n(\n\"/tmp/tmp_file.txt\"\n,\n\"/home/user/login/docs/my_file.txt\"\n);\n?>"
  },
  {
    "input": "Example #1 rewind() overwriting example",
    "output": "<?php\n$handle\n=\nfopen\n(\n'output.txt'\n,\n'r+'\n);\nfwrite\n(\n$handle\n,\n'Really long sentence.'\n);\nrewind\n(\n$handle\n);\nfwrite\n(\n$handle\n,\n'Foo'\n);\nrewind\n(\n$handle\n);\necho\nfread\n(\n$handle\n,\nfilesize\n(\n'output.txt'\n));\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 rmdir() example",
    "output": "<?php\nif (!\nis_dir\n(\n'examples'\n)) {\n\nmkdir\n(\n'examples'\n);\n}\nrmdir\n(\n'examples'\n);\n?>"
  },
  {
    "input": "Example #1 stat() example",
    "output": "<?php\n/* Get file stat */\n$stat\n=\nstat\n(\n'C:\\php\\php.exe'\n);\n/*\n * Print file access time, this is the same\n * as calling fileatime()\n */\necho\n'Access time: '\n.\n$stat\n[\n'atime'\n];\n/*\n * Print file modification time, this is the\n * same as calling filemtime()\n */\necho\n'Modification time: '\n.\n$stat\n[\n'mtime'\n];\n/* Print the device number */\necho\n'Device number: '\n.\n$stat\n[\n'dev'\n];\n?>"
  },
  {
    "input": "Example #2 Using stat() information together with touch()",
    "output": "<?php\n/* Get file stat */\n$stat\n=\nstat\n(\n'C:\\php\\php.exe'\n);\n/* Did we failed to get stat information? */\nif (!\n$stat\n) {\n    echo\n'stat() call failed...'\n;\n} else {\n\n/*\n     * We want the access time to be 1 week\n     * after the current access time.\n     */\n\n$atime\n=\n$stat\n[\n'atime'\n] +\n604800\n;\n\n/* Touch the file */\n\nif (!\ntouch\n(\n'some_file.txt'\n,\ntime\n(),\n$atime\n)) {\n        echo\n'Failed to touch file...'\n;\n    } else {\n        echo\n'touch() returned success...'\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Create a symbolic link",
    "output": "<?php\n$target\n=\n'uploads.php'\n;\n$link\n=\n'uploads'\n;\nsymlink\n(\n$target\n,\n$link\n);\necho\nreadlink\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 tempnam() example",
    "output": "<?php\n$tmpfname\n=\ntempnam\n(\n\"/tmp\"\n,\n\"FOO\"\n);\n$handle\n=\nfopen\n(\n$tmpfname\n,\n\"w\"\n);\nfwrite\n(\n$handle\n,\n\"writing to tempfile\"\n);\nfclose\n(\n$handle\n);\n// do something here\nunlink\n(\n$tmpfname\n);\n?>"
  },
  {
    "input": "Example #1 tmpfile() example",
    "output": "<?php\n$temp\n=\ntmpfile\n();\nfwrite\n(\n$temp\n,\n\"writing to tempfile\"\n);\nfseek\n(\n$temp\n,\n0\n);\necho\nfread\n(\n$temp\n,\n1024\n);\nfclose\n(\n$temp\n);\n// this removes the file\n?>"
  },
  {
    "input": "Example #1 touch() example",
    "output": "<?php\nif (\ntouch\n(\n$filename\n)) {\n    echo\n$filename\n.\n' modification time has been changed to present time'\n;\n} else {\n    echo\n'Sorry, could not change modification time of '\n.\n$filename\n;\n}\n?>"
  },
  {
    "input": "Example #2 touch() using the mtime parameter",
    "output": "<?php\n// This is the touch time, we'll set it to one hour in the past.\n$time\n=\ntime\n() -\n3600\n;\n// Touch the file\nif (!\ntouch\n(\n'some_file.txt'\n,\n$time\n)) {\n    echo\n'Whoops, something went wrong...'\n;\n} else {\n    echo\n'Touched file with success'\n;\n}\n?>"
  },
  {
    "input": "Example #1 umask() example",
    "output": "<?php\n$old\n=\numask\n(\n0\n);\nchmod\n(\n\"/path/some_dir/some_file.txt\"\n,\n0755\n);\numask\n(\n$old\n);\n// Checking\nif (\n$old\n!=\numask\n()) {\n    die(\n'An error occurred while changing back the umask'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Basic unlink() usage",
    "output": "<?php\n$fh\n=\nfopen\n(\n'test.html'\n,\n'a'\n);\nfwrite\n(\n$fh\n,\n'<h1>Hello world!</h1>'\n);\nfclose\n(\n$fh\n);\nunlink\n(\n'test.html'\n);\n?>"
  },
  {
    "input": "Example #1 Example usage of inotify",
    "output": "<?php\n// Open an inotify instance\n$fd\n=\ninotify_init\n();\n// Watch __FILE__ for metadata changes (e.g. mtime)\n$watch_descriptor\n=\ninotify_add_watch\n(\n$fd\n,\n__FILE__\n,\nIN_ATTRIB\n);\n// generate an event\ntouch\n(\n__FILE__\n);\n// Read events\n$events\n=\ninotify_read\n(\n$fd\n);\nprint_r\n(\n$events\n);\n// The following methods allows to use inotify functions without blocking on inotify_read():\n// - Using stream_select() on $fd:\n$read\n= array(\n$fd\n);\n$write\n=\nnull\n;\n$except\n=\nnull\n;\nstream_select\n(\n$read\n,\n$write\n,\n$except\n,\n0\n);\n// - Using stream_set_blocking() on $fd\nstream_set_blocking\n(\n$fd\n,\n0\n);\ninotify_read\n(\n$fd\n);\n// Does no block, and return false if no events are pending\n// - Using inotify_queue_len() to check if event queue is not empty\n$queue_len\n=\ninotify_queue_len\n(\n$fd\n);\n// If > 0, inotify_read() will not block\n// Stop watching __FILE__ for metadata changes\ninotify_rm_watch\n(\n$fd\n,\n$watch_descriptor\n);\n// Close the inotify instance\n// This may have closed all watches if this was not already done\nfclose\n(\n$fd\n);\n?>"
  },
  {
    "input": "Example #1 Checks if system administrator has signed the file",
    "output": "<?php\n$file\n=\n'/usr/local/sbin/some_binary'\n;\n$signature\n=\nxattr_get\n(\n$file\n,\n'Root signature'\n,\nXATTR_ROOT\n);\n/* ... check if $signature is valid ... */\n?>"
  },
  {
    "input": "Example #1 Prints names of all extended attributes of file",
    "output": "<?php\n$file\n=\n'some_file'\n;\n$root_attributes\n=\nxattr_list\n(\n$file\n,\nXATTR_ROOT\n);\n$user_attributes\n=\nxattr_list\n(\n$file\n);\necho\n\"Root attributes: \\n\"\n;\nforeach (\n$root_attributes\nas\n$attr_name\n) {\n\nprintf\n(\n\"%s\\n\"\n,\n$attr_name\n);\n}\necho\n\"\\n User attributes: \\n\"\n;\nforeach (\n$attributes\nas\n$attr_name\n) {\n\nprintf\n(\n\"%s\\n\"\n,\n$attr_name\n);\n}\n?>"
  },
  {
    "input": "Example #1 Removes all extended attributes of a file",
    "output": "<?php\n$file\n=\n'some_file'\n;\n$attributes\n=\nxattr_list\n(\n$file\n);\nforeach (\n$attributes\nas\n$attr_name\n) {\n\nxattr_remove\n(\n$file\n,\n$attr_name\n);\n}\n?>"
  },
  {
    "input": "Example #1 Sets extended attributes on .wav file",
    "output": "<?php\n$file\n=\n'my_favourite_song.wav'\n;\nxattr_set\n(\n$file\n,\n'Artist'\n,\n'Someone'\n);\nxattr_set\n(\n$file\n,\n'My ranking'\n,\n'Good'\n);\nxattr_set\n(\n$file\n,\n'Listen count'\n,\n'34'\n);\n/* ... other code ... */\nprintf\n(\n\"You've played this song %d times\"\n,\nxattr_get\n(\n$file\n,\n'Listen count'\n));\n?>"
  },
  {
    "input": "Example #1 Enchant Usage Example",
    "output": "<?php\n$tag\n=\n'en_US'\n;\n$r\n=\nenchant_broker_init\n();\n$bprovides\n=\nenchant_broker_describe\n(\n$r\n);\necho\n\"Current broker provides the following backend(s):\\n\"\n;\nprint_r\n(\n$bprovides\n);\n$dicts\n=\nenchant_broker_list_dicts\n(\n$r\n);\nprint_r\n(\n$dicts\n);\nif (\nenchant_broker_dict_exists\n(\n$r\n,\n$tag\n)) {\n\n$d\n=\nenchant_broker_request_dict\n(\n$r\n,\n$tag\n);\n\n$dprovides\n=\nenchant_dict_describe\n(\n$d\n);\n    echo\n\"dictionary\n$tag\n provides:\\n\"\n;\n\n$wordcorrect\n=\nenchant_dict_check\n(\n$d\n,\n\"soong\"\n);\n\nprint_r\n(\n$dprovides\n);\n    if (!\n$wordcorrect\n) {\n\n$suggs\n=\nenchant_dict_suggest\n(\n$d\n,\n\"soong\"\n);\n        echo\n\"Suggestions for 'soong':\"\n;\n\nprint_r\n(\n$suggs\n);\n    }\n\nenchant_broker_free_dict\n(\n$d\n);\n} else {\n}\nenchant_broker_free\n(\n$r\n);\n?>"
  },
  {
    "input": "Example #1 List the backends provided by the given broker",
    "output": "<?php\n$r\n=\nenchant_broker_init\n();\n$bprovides\n=\nenchant_broker_describe\n(\n$r\n);\necho\n\"Current broker provides the following backend(s):\\n\"\n;\nprint_r\n(\n$bprovides\n);\n?>"
  },
  {
    "input": "Example #1 A enchant_broker_dict_exists() example",
    "output": "<?php\n$tag\n=\n'en_US'\n;\n$r\n=\nenchant_broker_init\n();\nif (\nenchant_broker_dict_exists\n(\n$r\n,\n$tag\n)) {\n    echo\n$tag\n.\n\" dictionary found.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 List all available dictionaries for one broker",
    "output": "<?php\n$r\n=\nenchant_broker_init\n();\n$dicts\n=\nenchant_broker_list_dicts\n(\n$r\n);\nprint_r\n(\n$dicts\n);\n?>"
  },
  {
    "input": "Example #1 Adding a word to a PWL",
    "output": "<?php\n$filename\n=\n'./my_word_list.pwl'\n;\n$word\n=\n'Supercalifragilisticexpialidocious'\n;\n$broker\n=\nenchant_broker_init\n();\n$dict\n=\nenchant_broker_request_pwl_dict\n(\n$broker\n,\n$filename\n);\nenchant_dict_add\n(\n$dict\n,\n$word\n);\nenchant_broker_free\n(\n$broker\n);\n?>"
  },
  {
    "input": "Example #1 A enchant_dict_quick_check() example",
    "output": "<?php\n$tag\n=\n'en_US'\n;\n$r\n=\nenchant_broker_init\n();\nif (\nenchant_broker_dict_exists\n(\n$r\n,\n$tag\n)) {\n\n$d\n=\nenchant_broker_request_dict\n(\n$r\n,\n$tag\n);\n\nenchant_dict_quick_check\n(\n$d\n,\n'soong'\n,\n$suggs\n);\n\nprint_r\n(\n$suggs\n);\n}\n?>"
  },
  {
    "input": "Example #1 A enchant_dict_suggest() example",
    "output": "<?php\n$tag\n=\n'en_US'\n;\n$r\n=\nenchant_broker_init\n();\nif (\nenchant_broker_dict_exists\n(\n$r\n,\n$tag\n)) {\n\n$d\n=\nenchant_broker_request_dict\n(\n$r\n,\n$tag\n);\n\n$wordcorrect\n=\nenchant_dict_check\n(\n$d\n,\n\"soong\"\n);\n    if (!\n$wordcorrect\n) {\n\n$suggs\n=\nenchant_dict_suggest\n(\n$d\n,\n\"soong\"\n);\n        echo\n\"Suggestions for 'soong':\"\n;\n\nprint_r\n(\n$suggs\n);\n    }\n\nenchant_broker_free_dict\n(\n$d\n);\n}\nenchant_broker_free\n(\n$r\n);\n?>"
  },
  {
    "input": "Example #1 Usage example.",
    "output": "<?php\nnamespace\nGender\n;\n$gender\n= new\nGender\n;\n\n$name\n=\n\"Milene\"\n;\n$country\n=\nGender\n::\nFRANCE\n;\n\n$result\n=\n$gender\n->\nget\n(\n$name\n,\n$country\n);\n$data\n=\n$gender\n->\ncountry\n(\n$country\n);\nswitch(\n$result\n) {\n    case\nGender\n::\nIS_FEMALE\n:\n\nprintf\n(\n\"The name %s is female in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nIS_MOSTLY_FEMALE\n:\n\nprintf\n(\n\"The name %s is mostly female in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nIS_MALE\n:\n\nprintf\n(\n\"The name %s is male in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nIS_MOSTLY_MALE\n:\n\nprintf\n(\n\"The name %s is mostly male in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nIS_UNISEX_NAME\n:\n\nprintf\n(\n\"The name %s is unisex in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nIS_A_COUPLE\n:\n\nprintf\n(\n\"The name %s is both male and female in %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nNAME_NOT_FOUND\n:\n\nprintf\n(\n\"The name %s was not found for %s\\n\"\n,\n$name\n,\n$data\n[\n'country'\n]);\n    break;\n\n    case\nGender\n::\nERROR_IN_NAME\n:\n        echo\n\"There is an error in the given name!\\n\"\n;\n    break;\n\n    default:\n        echo\n\"An error occurred!\\n\"\n;\n    break;\n}"
  },
  {
    "input": "Example #1 Using Gender\\Gender::country()",
    "output": "$gender = new Gender\\Gender;\nvar_dump($gender->country(Gender\\Gender::BRITAIN));"
  },
  {
    "input": "Example #1 bindtextdomain() example",
    "output": "<?php\n$domain\n=\n'myapp'\n;\necho\nbindtextdomain\n(\n$domain\n,\n'/usr/share/myapp/locale'\n);\n?>"
  },
  {
    "input": "Example #1 gettext()-check",
    "output": "<?php\n// Set language to German\nputenv\n(\n'LC_ALL=de_DE'\n);\nsetlocale\n(\nLC_ALL\n,\n'de_DE'\n);\n// Specify location of translation tables\nbindtextdomain\n(\n\"myPHPApp\"\n,\n\"./locale\"\n);\n// Choose domain\ntextdomain\n(\n\"myPHPApp\"\n);\n// Translation is looking for in ./locale/de_DE/LC_MESSAGES/myPHPApp.mo now\n// Print a test message\necho\ngettext\n(\n\"Welcome to My PHP Application\"\n);\n// Or use the alias _() for gettext()\necho\n_\n(\n\"Have a nice day\"\n);\n?>"
  },
  {
    "input": "Example #1 ngettext() example",
    "output": "<?php\nsetlocale\n(\nLC_ALL\n,\n'cs_CZ'\n);\nprintf\n(\nngettext\n(\n\"%d window\"\n,\n\"%d windows\"\n,\n1\n),\n1\n);\n// 1 okno\nprintf\n(\nngettext\n(\n\"%d window\"\n,\n\"%d windows\"\n,\n2\n),\n2\n);\n// 2 okna\nprintf\n(\nngettext\n(\n\"%d window\"\n,\n\"%d windows\"\n,\n5\n),\n5\n);\n// 5 oken\n?>"
  },
  {
    "input": "Example #1 iconv() example",
    "output": "<?php\n$text\n=\n\"This is the Euro symbol '€'.\"\n;\necho\n'Original : '\n,\n$text\n,\nPHP_EOL\n;\necho\n'TRANSLIT : '\n,\niconv\n(\n\"UTF-8\"\n,\n\"ISO-8859-1//TRANSLIT\"\n,\n$text\n),\nPHP_EOL\n;\necho\n'IGNORE   : '\n,\niconv\n(\n\"UTF-8\"\n,\n\"ISO-8859-1//IGNORE\"\n,\n$text\n),\nPHP_EOL\n;\necho\n'Plain    : '\n,\niconv\n(\n\"UTF-8\"\n,\n\"ISO-8859-1\"\n,\n$text\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 iconv_get_encoding() example",
    "output": "<pre>\n<?php\niconv_set_encoding\n(\n\"internal_encoding\"\n,\n\"UTF-8\"\n);\niconv_set_encoding\n(\n\"output_encoding\"\n,\n\"ISO-8859-1\"\n);\nvar_dump\n(\niconv_get_encoding\n(\n'all'\n));\n?>\n</pre>"
  },
  {
    "input": "Example #1 iconv_mime_decode() example",
    "output": "<?php\n// This yields \"Subject: Prüfung Prüfung\"\necho\niconv_mime_decode\n(\n\"Subject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\"\n,\n\n0\n,\n\"ISO-8859-1\"\n);\n?>"
  },
  {
    "input": "Example #1 iconv_mime_decode_headers() example",
    "output": "<?php\n$headers_string\n= <<<EOF\nSubject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\nTo: example@example.com\nDate: Thu, 1 Jan 1970 00:00:00 +0000\nMessage-Id: <example@example.com>\nReceived: from localhost (localhost [127.0.0.1]) by localhost\n    with SMTP id example for <example@example.com>;\n    Thu, 1 Jan 1970 00:00:00 +0000 (UTC)\n    (envelope-from example-return-0000-example=example.com@example.com)\nReceived: (qmail 0 invoked by uid 65534); 1 Thu 2003 00:00:00 +0000\nEOF;\n$headers\n=\niconv_mime_decode_headers\n(\n$headers_string\n,\n0\n,\n\"ISO-8859-1\"\n);\nprint_r\n(\n$headers\n);\n?>"
  },
  {
    "input": "Example #1 iconv_mime_encode() example",
    "output": "<?php\n$preferences\n= array(\n\n\"input-charset\"\n=>\n\"ISO-8859-1\"\n,\n\n\"output-charset\"\n=>\n\"UTF-8\"\n,\n\n\"line-length\"\n=>\n76\n,\n\n\"line-break-chars\"\n=>\n\"\\n\"\n);\n$preferences\n[\n\"scheme\"\n] =\n\"Q\"\n;\n// This yields \"Subject: =?UTF-8?Q?Pr=C3=BCfung=20Pr=C3=BCfung?=\"\necho\niconv_mime_encode\n(\n\"Subject\"\n,\n\"Prüfung Prüfung\"\n,\n$preferences\n);\n$preferences\n[\n\"scheme\"\n] =\n\"B\"\n;\n// This yields \"Subject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\"\necho\niconv_mime_encode\n(\n\"Subject\"\n,\n\"Prüfung Prüfung\"\n,\n$preferences\n);\n?>"
  },
  {
    "input": "Example #1 iconv_set_encoding() example",
    "output": "<?php\niconv_set_encoding\n(\n\"internal_encoding\"\n,\n\"UTF-8\"\n);\niconv_set_encoding\n(\n\"output_encoding\"\n,\n\"ISO-8859-1\"\n);\n?>"
  },
  {
    "input": "Example #1 ob_iconv_handler() example:",
    "output": "<?php\niconv_set_encoding\n(\n\"internal_encoding\"\n,\n\"UTF-8\"\n);\niconv_set_encoding\n(\n\"output_encoding\"\n,\n\"ISO-8859-1\"\n);\nob_start\n(\n\"ob_iconv_handler\"\n);\n// start output buffering\n?>"
  },
  {
    "input": "Example #1 Example of using the procedural API",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$result\n=\ncollator_compare\n(\n$coll\n,\n\"string#1\"\n,\n\"string#2\"\n);\n?>"
  },
  {
    "input": "Example #2 Example of using the object-oriented API",
    "output": "<?php\n$coll\n= new\nCollator\n(\n'en_US'\n);\n$al\n=\n$coll\n->\ngetLocale\n(\nLocale\n::\nACTUAL_LOCALE\n);\necho\n\"Actual locale:\n$al\n\\n\"\n;\n$formatter\n= new\nNumberFormatter\n(\n'en_US'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n$formatter\n->\nformat\n(\n1234567\n);\n?>"
  },
  {
    "input": "Example #1 collator_asort() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$arr\n= array(\n\n'a'\n=>\n'100'\n,\n\n'b'\n=>\n'50'\n,\n\n'c'\n=>\n'7'\n);\ncollator_asort\n(\n$coll\n,\n$arr\n,\nCollator\n::\nSORT_NUMERIC\n);\nvar_export\n(\n$arr\n);\ncollator_asort\n(\n$coll\n,\n$arr\n,\nCollator\n::\nSORT_STRING\n);\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 collator_compare() example",
    "output": "<?php\n$s1\n=\n'Hello'\n;\n$s2\n=\n'hello'\n;\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$res\n=\ncollator_compare\n(\n$coll\n,\n$s1\n,\n$s2\n);\nif (\n$res\n===\nfalse\n) {\n    echo\ncollator_get_error_message\n(\n$coll\n);\n} else if(\n$res\n>\n0\n) {\n    echo\n\"s1 is greater than s2\\n\"\n;\n} else if(\n$res\n<\n0\n) {\n    echo\n\"s1 is less than s2\\n\"\n;\n} else {\n    echo\n\"s1 is equal to s2\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Comparing strings without diacritics or case-sensitivity",
    "output": "<?php\n$c\n= new\nCollator\n(\n'en'\n);\n$c\n->\nsetStrength\n(\nCollator\n::\nPRIMARY\n);\nif (\n$c\n->\ncompare\n(\n'Séan'\n,\n'Sean'\n) ==\n0\n)\n{\n    echo\n\"The same\\n\"\n;\n}"
  },
  {
    "input": "Example #1 Collator::__construct() example",
    "output": "<?php\n$coll\n= new\nCollator\n(\n'en_CA'\n);\n?>"
  },
  {
    "input": "Example #1 collator_create() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\nif( !isset(\n$coll\n) ) {\n\nprintf\n(\n\"Collator creation failed: %s\\n\"\n,\nintl_get_error_message\n() );\n    exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #1 collator_get_attribute() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_CA'\n);\n$val\n=\ncollator_get_attribute\n(\n$coll\n,\nCollator\n::\nNUMERIC_COLLATION\n);\nif(\n$val\n===\nfalse\n)\n{\n\n// Handle error.\n}\n?>"
  },
  {
    "input": "Example #1 collator_get_error_code() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\nif(\ncollator_get_attribute\n(\n$coll\n,\nCollator\n::\nFRENCH_COLLATION\n) ===\nfalse\n)\n\nhandle_error\n(\ncollator_get_error_code\n() );\n?>"
  },
  {
    "input": "Example #1 collator_get_error_message() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'lt'\n);\nif(\ncollator_compare\n(\n$coll\n,\n'y'\n,\n'k'\n) ===\nfalse\n) {\n    echo\ncollator_get_error_message\n(\n$coll\n);\n}\n?>"
  },
  {
    "input": "Example #1 collator_get_locale() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US_California'\n);\n$res_val\n=\ncollator_get_locale\n(\n$coll\n,\nLocale\n::\nVALID_LOCALE\n);\n$res_act\n=\ncollator_get_locale\n(\n$coll\n,\nLocale\n::\nACTUAL_LOCALE\n);\nprintf\n(\n\"Valid locale name: %s\\nActual locale name: %s\\n\"\n,\n\n$res_val\n,\n$res_act\n);\n?>"
  },
  {
    "input": "Example #1 collator_get_sort_key()example",
    "output": "<?php\n$s1\n=\n'Hello'\n;\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$res\n=\ncollator_get_sort_key\n(\n$coll\n,\n$s1\n);\necho\nbin2hex\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #1 collator_get_strength() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$strength\n=\ncollator_get_strength\n(\n$coll\n);\n?>"
  },
  {
    "input": "Example #1 collator_set_attribute() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_CA'\n);\n$val\n=\ncollator_get_attribute\n(\n$coll\n,\nCollator\n::\nNUMERIC_COLLATION\n);\nif (\n$val\n===\nfalse\n) {\n\n// Handle error.\n} elseif (\n$val\n===\nCollator\n::\nON\n) {\n\n// Do something useful.\n}\n?>"
  },
  {
    "input": "Example #1 collator_set_strength() example",
    "output": "<?php\n$arr\n= array(\n'aò'\n,\n'Ao'\n,\n'ao'\n);\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n// Sort array using default strength.\ncollator_sort\n(\n$coll\n,\n$arr\n);\nvar_export\n(\n$arr\n);\n// Sort array using primary strength.\ncollator_set_strength\n(\n$coll\n,\nCollator\n::\nPRIMARY\n);\ncollator_sort\n(\n$coll\n,\n$arr\n);\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 collator_sort() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_US'\n);\n$arr\n= array(\n'at'\n,\n'às'\n,\n'as'\n);\nvar_export\n(\n$arr\n);\ncollator_sort\n(\n$coll\n,\n$arr\n);\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 collator_sort_with_sort_keys() example",
    "output": "<?php\n$arr\n= array(\n'Köpfe'\n,\n'Kypper'\n,\n'Kopfe'\n);\n$coll\n=\ncollator_create\n(\n'sv'\n);\ncollator_sort_with_sort_keys\n(\n$coll\n,\n$arr\n);\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 numfmt_create() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n=\nnumfmt_create\n(\n'it'\n,\nNumberFormatter\n::\nSPELLOUT\n);\necho\nnumfmt_format\n(\n$fmt\n,\n1142\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 NumberFormatter::create() example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n= new\nNumberFormatter\n(\n'it'\n,\nNumberFormatter\n::\nSPELLOUT\n);\necho\n$fmt\n->\nformat\n(\n1142\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_format() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$data\n=\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n);\nif(\nintl_is_failure\n(\nnumfmt_format\n(\n$fmt\n))) {\n\nreport_error\n(\n\"Formatter error\"\n);\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$fmt\n->\nformat\n(\n1234567.891234567890000\n);\nif(\nintl_is_failure\n(\n$fmt\n->\ngetErrorCode\n())) {\n\nreport_error\n(\n\"Formatter error\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 numfmt_format_currency() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nCURRENCY\n);\necho\nnumfmt_format_currency\n(\n$fmt\n,\n1234567.891234567890000\n,\n\"EUR\"\n).\n\"\\n\"\n;\necho\nnumfmt_format_currency\n(\n$fmt\n,\n1234567.891234567890000\n,\n\"RUR\"\n).\n\"\\n\"\n;\n$fmt\n=\nnumfmt_create\n(\n'ru_RU'\n,\nNumberFormatter\n::\nCURRENCY\n);\necho\nnumfmt_format_currency\n(\n$fmt\n,\n1234567.891234567890000\n,\n\"EUR\"\n).\n\"\\n\"\n;\necho\nnumfmt_format_currency\n(\n$fmt\n,\n1234567.891234567890000\n,\n\"RUR\"\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nCURRENCY\n);\necho\n$fmt\n->\nformatCurrency\n(\n1234567.891234567890000\n,\n\"EUR\"\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformatCurrency\n(\n1234567.891234567890000\n,\n\"RUR\"\n).\n\"\\n\"\n;\n$fmt\n= new\nNumberFormatter\n(\n'ru_RU'\n,\nNumberFormatter\n::\nCURRENCY\n);\necho\n$fmt\n->\nformatCurrency\n(\n1234567.891234567890000\n,\n\"EUR\"\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformatCurrency\n(\n1234567.891234567890000\n,\n\"RUR\"\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_get_attribute() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Digits: \"\n.\nnumfmt_get_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n,\n2\n);\necho\n\"Digits: \"\n.\nnumfmt_get_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Digits: \"\n.\n$fmt\n->\ngetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n,\n2\n);\necho\n\"Digits: \"\n.\n$fmt\n->\ngetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_get_error_code() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$data\n=\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n);\nif(\nintl_is_failure\n(\nnumfmt_get_error_code\n(\n$fmt\n))) {\n\nreport_error\n(\n\"Formatter error\"\n);\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$fmt\n->\nformat\n(\n1234567.891234567890000\n);\nif(\nintl_is_failure\n(\n$fmt\n->\ngetErrorCode\n())) {\n\nreport_error\n(\n\"Formatter error\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 numfmt_get_error_message() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$data\n=\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n);\nvar_dump\n(\nnumfmt_get_error_message\n(\n$fmt\n));\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$fmt\n->\nformat\n(\n1234567.891234567890000\n);\nvar_dump\n(\nnumfmt_get_error_message\n(\n$fmt\n));\n?>"
  },
  {
    "input": "Example #1 numfmt_get_locale() example",
    "output": "<?php\n$req\n=\n'fr_FR_PARIS'\n;\n$fmt\n=\nnumfmt_create\n(\n$req\n,\nNumberFormatter\n::\nDECIMAL\n);\n$res_val\n=\nnumfmt_get_locale\n(\n$fmt\n,\nLocale\n::\nVALID_LOCALE\n);\n$res_act\n=\nnumfmt_get_locale\n(\n$fmt\n,\nLocale\n::\nACTUAL_LOCALE\n);\nprintf\n(\n\"Requested locale name: %s\\nValid locale name: %s\\nActual locale name: %s\\n\"\n,\n\n$req\n,\n$res_val\n,\n$res_act\n);\n?>"
  },
  {
    "input": "Example #1 numfmt_get_pattern() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Pattern: \"\n.\nnumfmt_get_pattern\n(\n$fmt\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_pattern\n(\n$fmt\n,\n\"#0.# kg\"\n);\necho\n\"Pattern: \"\n.\nnumfmt_get_pattern\n(\n$fmt\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Pattern: \"\n.\n$fmt\n->\ngetPattern\n().\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetPattern\n(\n\"#0.# kg\"\n);\necho\n\"Pattern: \"\n.\n$fmt\n->\ngetPattern\n().\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_get_symbol() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Sep: \"\n.\nnumfmt_get_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n,\n\"*\"\n);\necho\n\"Sep: \"\n.\nnumfmt_get_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Sep: \"\n.\n$fmt\n->\ngetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n,\n\"*\"\n);\necho\n\"Sep: \"\n.\n$fmt\n->\ngetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_get_text_attribute() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Prefix: \"\n.\nnumfmt_get_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n, -\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n,\n\"MINUS\"\n);\necho\n\"Prefix: \"\n.\nnumfmt_get_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n, -\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Prefix: \"\n.\n$fmt\n->\ngetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(-\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n,\n\"MINUS\"\n);\necho\n\"Prefix: \"\n.\n$fmt\n->\ngetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(-\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_parse() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$num\n=\n\"1.234.567,891\"\n;\necho\nnumfmt_parse\n(\n$fmt\n,\n$num\n).\n\"\\n\"\n;\necho\nnumfmt_parse\n(\n$fmt\n,\n$num\n,\nNumberFormatter\n::\nTYPE_INT32\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\n$num\n=\n\"1.234.567,891\"\n;\necho\n$fmt\n->\nparse\n(\n$num\n).\n\"\\n\"\n;\necho\n$fmt\n->\nparse\n(\n$num\n,\nNumberFormatter\n::\nTYPE_INT32\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_parse_currency() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nCURRENCY\n);\n$num\n=\n\"1.234.567,89\\xc2\\xa0$\"\n;\necho\n\"We have \"\n.\nnumfmt_parse_currency\n(\n$fmt\n,\n$num\n,\n$curr\n).\n\" in\n$curr\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nCURRENCY\n);\n$num\n=\n\"1.234.567,89\\xc2\\xa0$\"\n;\necho\n\"We have \"\n.\n$fmt\n->\nparseCurrency\n(\n$num\n,\n$curr\n).\n\" in\n$curr\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_set_attribute() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Digits: \"\n.\nnumfmt_get_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n,\n2\n);\necho\n\"Digits: \"\n.\nnumfmt_get_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Digits: \"\n.\n$fmt\n->\ngetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n,\n2\n);\necho\n\"Digits: \"\n.\n$fmt\n->\ngetAttribute\n(\nNumberFormatter\n::\nMAX_FRACTION_DIGITS\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_set_pattern() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Pattern: \"\n.\nnumfmt_get_pattern\n(\n$fmt\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_pattern\n(\n$fmt\n,\n\"#0.# kg\"\n);\necho\n\"Pattern: \"\n.\nnumfmt_get_pattern\n(\n$fmt\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Pattern: \"\n.\n$fmt\n->\ngetPattern\n().\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetPattern\n(\n\"#0.# kg\"\n);\necho\n\"Pattern: \"\n.\n$fmt\n->\ngetPattern\n().\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_set_symbol() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Sep: \"\n.\nnumfmt_get_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n,\n\"*\"\n);\necho\n\"Sep: \"\n.\nnumfmt_get_symbol\n(\n$fmt\n,\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n,\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Sep: \"\n.\n$fmt\n->\ngetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n,\n\"*\"\n);\necho\n\"Sep: \"\n.\n$fmt\n->\ngetSymbol\n(\nNumberFormatter\n::\nGROUPING_SEPARATOR_SYMBOL\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 numfmt_set_text_attribute() example",
    "output": "<?php\n$fmt\n=\nnumfmt_create\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Prefix: \"\n.\nnumfmt_get_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n, -\n1234567.891234567890000\n).\n\"\\n\"\n;\nnumfmt_set_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n,\n\"MINUS\"\n);\necho\n\"Prefix: \"\n.\nnumfmt_get_text_attribute\n(\n$fmt\n,\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\nnumfmt_format\n(\n$fmt\n, -\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nNumberFormatter\n(\n'de_DE'\n,\nNumberFormatter\n::\nDECIMAL\n);\necho\n\"Prefix: \"\n.\n$fmt\n->\ngetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(-\n1234567.891234567890000\n).\n\"\\n\"\n;\n$fmt\n->\nsetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n,\n\"MINUS\"\n);\necho\n\"Prefix: \"\n.\n$fmt\n->\ngetTextAttribute\n(\nNumberFormatter\n::\nNEGATIVE_PREFIX\n).\n\"\\n\"\n;\necho\n$fmt\n->\nformat\n(-\n1234567.891234567890000\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 locale_accept_from_http() example",
    "output": "<?php\n$locale\n=\nlocale_accept_from_http\n(\n$_SERVER\n[\n'HTTP_ACCEPT_LANGUAGE'\n]);\necho\n$locale\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$locale\n=\nLocale\n::\nacceptFromHttp\n(\n$_SERVER\n[\n'HTTP_ACCEPT_LANGUAGE'\n]);\necho\n$locale\n;\n?>"
  },
  {
    "input": "Example #1 locale_compose() example",
    "output": "<?php\n$arr\n= array(\n\n'language'\n=>\n'en'\n,\n\n'script'\n=>\n'Hans'\n,\n\n'region'\n=>\n'CN'\n,\n\n'variant2'\n=>\n'rozaj'\n,\n\n'variant1'\n=>\n'nedis'\n,\n\n'private1'\n=>\n'prv1'\n,\n\n'private2'\n=>\n'prv2'\n,\n);\necho\nlocale_compose\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$arr\n= array(\n\n'language'\n=>\n'en'\n,\n\n'script'\n=>\n'Hans'\n,\n\n'region'\n=>\n'CN'\n,\n\n'variant2'\n=>\n'rozaj'\n,\n\n'variant1'\n=>\n'nedis'\n,\n\n'private1'\n=>\n'prv1'\n,\n\n'private2'\n=>\n'prv2'\n,\n);\necho\nLocale\n::\ncomposeLocale\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 locale_filter_matches() example",
    "output": "<?php\necho (\nlocale_filter_matches\n(\n'de-DEVA'\n,\n'de-DE'\n,\nfalse\n)) ?\n\"Matches\"\n:\n\"Does not match\"\n;\necho\n'; '\n;\necho (\nlocale_filter_matches\n(\n'de-DE_1996'\n,\n'de-DE'\n,\nfalse\n)) ?\n\"Matches\"\n:\n\"Does not match\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho (\nLocale\n::\nfilterMatches\n(\n'de-DEVA'\n,\n'de-DE'\n,\nfalse\n)) ?\n\"Matches\"\n:\n\"Does not match\"\n;\necho\n'; '\n;\necho (\nLocale\n::\nfilterMatches\n(\n'de-DE-1996'\n,\n'de-DE'\n,\nfalse\n)) ?\n\"Matches\"\n:\n\"Does not match\"\n;\n?>"
  },
  {
    "input": "Example #1 locale_get_all_variants() example",
    "output": "<?php\n$arr\n=\nlocale_get_all_variants\n(\n'sl_IT_NEDIS_ROJAZ_1901'\n);\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n $arr\n=\nLocale\n::\ngetAllVariants\n(\n'sl_IT_NEDIS_ROJAZ_1901'\n);\n\nvar_export\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_default() example",
    "output": "<?php\nini_set\n(\n'intl.default_locale'\n,\n'de-DE'\n);\necho\nlocale_get_default\n();\necho\n'; '\n;\nlocale_set_default\n(\n'fr'\n);\necho\nlocale_get_default\n();\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\nini_set\n(\n'intl.default_locale'\n,\n'de-DE'\n);\necho\nLocale\n::\ngetDefault\n();\necho\n'; '\n;\nLocale\n::\nsetDefault\n(\n'fr'\n);\necho\nLocale\n::\ngetDefault\n();\n?>"
  },
  {
    "input": "Example #1 locale_get_display_language() example",
    "output": "<?php\necho\nlocale_get_display_language\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_language\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_language\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetDisplayLanguage\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayLanguage\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayLanguage\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_display_name() example",
    "output": "<?php\necho\nlocale_get_display_name\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_name\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_name\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetDisplayName\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayName\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayName\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_display_region() example",
    "output": "<?php\necho\nlocale_get_display_region\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_region\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_region\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetDisplayRegion\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayRegion\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayRegion\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_display_script() example",
    "output": "<?php\necho\nlocale_get_display_script\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_script\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_script\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetDisplayScript\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayScript\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayScript\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_display_variant() example",
    "output": "<?php\necho\nlocale_get_display_variant\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_variant\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nlocale_get_display_variant\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetDisplayVariant\n(\n'sl-Latn-IT-nedis'\n,\n'en'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayVariant\n(\n'sl-Latn-IT-nedis'\n,\n'fr'\n);\necho\n\";\\n\"\n;\necho\nLocale\n::\ngetDisplayVariant\n(\n'sl-Latn-IT-nedis'\n,\n'de'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_keywords() example",
    "output": "<?php\n$keywords_arr\n=\nlocale_get_keywords\n(\n'de_DE@currency=EUR;collation=PHONEBOOK'\n);\nif (\n$keywords_arr\n) {\n    foreach (\n$keywords_arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n =\n$value\n\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$keywords_arr\n=\nLocale\n::\ngetKeywords\n(\n'de_DE@currency=EUR;collation=PHONEBOOK'\n);\nif (\n$keywords_arr\n) {\n    foreach (\n$keywords_arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n =\n$value\n\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 locale_get_primary_language() example",
    "output": "<?php\necho\nlocale_get_primary_language\n(\n'zh-Hant'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetPrimaryLanguage\n(\n'zh-Hant'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_region() example",
    "output": "<?php\necho\nlocale_get_region\n(\n'de-CH-1901'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetRegion\n(\n'de-CH-1901'\n);\n?>"
  },
  {
    "input": "Example #1 locale_get_script() example",
    "output": "<?php\necho\nlocale_get_script\n(\n'sr-Cyrl'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nLocale\n::\ngetScript\n(\n'sr-Cyrl'\n);\n?>"
  },
  {
    "input": "Example #1 locale_lookup() example",
    "output": "<?php\n$arr\n= array(\n\n'de-DEVA'\n,\n\n'de-DE-1996'\n,\n\n'de'\n,\n\n'de-De'\n);\necho\nlocale_lookup\n(\n$arr\n,\n'de-DE-1996-x-prv1-prv2'\n,\ntrue\n,\n'en_US'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$arr\n= array(\n\n'de-DEVA'\n,\n\n'de-DE-1996'\n,\n\n'de'\n,\n\n'de-De'\n);\necho\nLocale\n::\nlookup\n(\n$arr\n,\n'de-DE-1996-x-prv1-prv2'\n,\ntrue\n,\n'en_US'\n);\n?>"
  },
  {
    "input": "Example #1 locale_parse() example",
    "output": "<?php\n$arr\n=\nlocale_parse\n(\n'sl-Latn-IT-nedis'\n);\nif (\n$arr\n) {\n    foreach (\n$arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n :\n$value\n , \"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$arr\n=\nLocale\n::\nparseLocale\n(\n'sl-Latn-IT-nedis'\n);\nif (\n$arr\n) {\n    foreach (\n$arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n :\n$value\n , \"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 locale_set_default() example",
    "output": "<?php\nlocale_set_default\n(\n'de-DE'\n);\necho\nlocale_get_default\n();\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\nLocale\n::\nsetDefault\n(\n'de-DE'\n);\necho\nLocale\n::\ngetDefault\n();\n?>"
  },
  {
    "input": "Example #1 Normalizer::getRawDecomposition() example",
    "output": "<?php\n$result\n=\n\"\"\n;\n$strings\n= [\n\n\"a\"\n,\n\n\"\\u{FFDA}\"\n,\n\n\"\\u{FDFA}\"\n,\n\n\"\"\n,\n\n\"aa\"\n,\n\n\"\\xF5\"\n,\n];\nforeach (\n$strings\nas\n$string\n) {\n\n$decomposition\n=\nNormalizer\n::\ngetRawDecomposition\n(\n$string\n);\n\n// $decomposition = normalizer_get_raw_decomposition($string); Procedural way\n\n$error_code\n=\nintl_get_error_code\n();\n\n$error_message\n=\nintl_get_error_message\n();\n\n$string_hex\n=\nbin2hex\n(\n$string\n);\n\n$result\n.=\n\"---------------------\\n\"\n;\n    if (\n$decomposition\n===\nnull\n) {\n\n$result\n.=\n\"'\n$string_hex\n' has no decomposition mapping\\n\"\n;\n    } else {\n\n$result\n.=\n\"'\n$string_hex\n' has the decomposition mapping '\"\n.\nbin2hex\n(\n$decomposition\n) .\n\"'\\n\"\n;\n    }\n\n$result\n.=\n\"error info: '\n$error_message\n' (\n$error_code\n)\\n\"\n;\n}\necho\n$result\n;\n?>"
  },
  {
    "input": "Example #1 \n    normalizer_is_normalized() example",
    "output": "<?php\n$char_A_ring\n=\n\"\\xC3\\x85\"\n;\n// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above\n=\n\"\\xCC\\x8A\"\n;\n// 'COMBINING RING ABOVE' (U+030A)\n\n$char_orig\n=\n'A'\n.\n$char_combining_ring_above\n;\n$char_norm\n=\nnormalizer_normalize\n(\n'A'\n.\n$char_combining_ring_above\n,\nNormalizer\n::\nFORM_C\n);\n\necho (\nnormalizer_is_normalized\n(\n$char_orig\n,\nNormalizer\n::\nFORM_C\n) ) ?\n\"normalized\"\n:\n\"not normalized\"\n;\necho\n'; '\n;\necho (\nnormalizer_is_normalized\n(\n$char_norm\n,\nNormalizer\n::\nFORM_C\n) ) ?\n\"normalized\"\n:\n\"not normalized\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$char_A_ring\n=\n\"\\xC3\\x85\"\n;\n// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above\n=\n\"\\xCC\\x8A\"\n;\n// 'COMBINING RING ABOVE' (U+030A)\n\n$char_orig\n=\n'A'\n.\n$char_combining_ring_above\n;\n$char_norm\n=\nNormalizer\n::\nnormalize\n(\n'A'\n.\n$char_combining_ring_above\n,\nNormalizer\n::\nFORM_C\n);\n\necho (\nNormalizer\n::\nisNormalized\n(\n$char_orig\n,\nNormalizer\n::\nFORM_C\n) ) ?\n\"normalized\"\n:\n\"not normalized\"\n;\necho\n'; '\n;\necho (\nNormalizer\n::\nisNormalized\n(\n$char_norm\n,\nNormalizer\n::\nFORM_C\n) ) ?\n\"normalized\"\n:\n\"not normalized\"\n;\n?>"
  },
  {
    "input": "Example #1 \n    normalizer_normalize() example",
    "output": "<?php\n$char_A_ring\n=\n\"\\xC3\\x85\"\n;\n// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above\n=\n\"\\xCC\\x8A\"\n;\n// 'COMBINING RING ABOVE' (U+030A)\n\n$char_1\n=\nnormalizer_normalize\n(\n$char_A_ring\n,\nNormalizer\n::\nFORM_C\n);\n$char_2\n=\nnormalizer_normalize\n(\n'A'\n.\n$char_combining_ring_above\n,\nNormalizer\n::\nFORM_C\n);\n\necho\nurlencode\n(\n$char_1\n);\necho\n' '\n;\necho\nurlencode\n(\n$char_2\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$char_A_ring\n=\n\"\\xC3\\x85\"\n;\n// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above\n=\n\"\\xCC\\x8A\"\n;\n// 'COMBINING RING ABOVE' (U+030A)\n\n$char_1\n=\nNormalizer\n::\nnormalize\n(\n$char_A_ring\n,\nNormalizer\n::\nFORM_C\n);\n$char_2\n=\nNormalizer\n::\nnormalize\n(\n'A'\n.\n$char_combining_ring_above\n,\nNormalizer\n::\nFORM_C\n);\n\necho\nurlencode\n(\n$char_1\n);\necho\n' '\n;\necho\nurlencode\n(\n$char_2\n);\n?>"
  },
  {
    "input": "Example #1 msgfmt_create() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\necho\nmsgfmt_format\n(\n$fmt\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n$fmt\n=\nmsgfmt_create\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\necho\nmsgfmt_format\n(\n$fmt\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\necho\n$fmt\n->\nformat\n(array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n$fmt\n= new\nMessageFormatter\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\necho\n$fmt\n->\nformat\n(array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n?>"
  },
  {
    "input": "Example #1 msgfmt_format() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\necho\nmsgfmt_format\n(\n$fmt\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n$fmt\n=\nmsgfmt_create\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\necho\nmsgfmt_format\n(\n$fmt\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\necho\n$fmt\n->\nformat\n(array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n$fmt\n= new\nMessageFormatter\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\necho\n$fmt\n->\nformat\n(array(\n4560\n,\n123\n,\n4560\n/\n123\n));\n?>"
  },
  {
    "input": "Example #1 msgfmt_format_message() example",
    "output": "<?php\necho\nmsgfmt_format_message\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\\n\"\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\necho\nmsgfmt_format_message\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\\n\"\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\necho\nmsgfmt_format_message\n(\n\"en\"\n,\n'You finished {place, selectordinal, one {#st} two {#nd} few {#rd} other {#th}}!'\n, [\n'place'\n=>\n3\n]),\n\"\\n\"\n;\necho\nmsgfmt_format_message\n(\n\"en\"\n,\n\n\"There {apple, plural,\n            =0 {are no apples}\n            =1 {is one apple...}\n            other {are # apples!}\n        }\"\n,\n    [\n'apple'\n=>\n0\n]\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\necho\nMessageFormatter\n::\nformatMessage\n(\n\"en_US\"\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\\n\"\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\necho\nMessageFormatter\n::\nformatMessage\n(\n\"de\"\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\\n\"\n, array(\n4560\n,\n123\n,\n4560\n/\n123\n));\necho\nMessageFormatter\n::\nformatMessage\n(\n\"en\"\n,\n'You finished {place, selectordinal, one {#st} two {#nd} few {#rd} other {#th}}!'\n, [\n'place'\n=>\n3\n]),\n\"\\n\"\n;\necho\nMessageFormatter\n::\nformatMessage\n(\n\"en\"\n,\n\n\"There {apple, plural,\n            =0 {are no apples}\n            =1 {is one apple...}\n            other {are # apples!}\n        }\"\n,\n    [\n'apple'\n=>\n0\n]\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 msgfmt_get_error_message() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\n$str\n=\nmsgfmt_format\n(\n$fmt\n, array());\nif(!\n$str\n) {\n    echo\n\"ERROR: \"\n.\nmsgfmt_get_error_message\n(\n$fmt\n) .\n\" (\"\n.\nmsgfmt_get_error_code\n(\n$fmt\n) .\n\")\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\n$str\n=\n$fmt\n->\nformat\n(array());\nif(!\n$str\n) {\n    echo\n\"ERROR: \"\n.\n$fmt\n->\ngetErrorMessage\n() .\n\" (\"\n.\n$fmt\n->\ngetErrorCode\n() .\n\")\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 msgfmt_get_locale() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n'en_US'\n,\n\"Number {0,number}\"\n);\necho\nmsgfmt_get_locale\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n'en_US'\n,\n\"Number {0,number}\"\n);\necho\n$fmt\n->\ngetLocale\n();\n?>"
  },
  {
    "input": "Example #1 msgfmt_get_pattern() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\necho\n\"Default pattern: '\"\n.\nmsgfmt_get_pattern\n(\n$fmt\n) .\n\"'\\n\"\n;\necho\n\"Formatting result: \"\n.\nmsgfmt_format\n(\n$fmt\n, array(\n123\n,\n456\n) ) .\n\"\\n\"\n;\nmsgfmt_set_pattern\n(\n$fmt\n,\n\"{0, number} trees hosting {1, number} monkeys\"\n);\necho\n\"New pattern: '\"\n.\nmsgfmt_get_pattern\n(\n$fmt\n) .\n\"'\\n\"\n;\necho\n\"Formatted number: \"\n.\nmsgfmt_format\n(\n$fmt\n, array(\n123\n,\n456\n) ) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\necho\n\"Default pattern: '\"\n.\n$fmt\n->\ngetPattern\n() .\n\"'\\n\"\n;\necho\n\"Formatting result: \"\n.\n$fmt\n->\nformat\n(array(\n123\n,\n456\n)) .\n\"\\n\"\n;\n$fmt\n->\nsetPattern\n(\n\"{0, number} trees hosting {1, number} monkeys\"\n);\necho\n\"New pattern: '\"\n.\n$fmt\n->\ngetPattern\n() .\n\"'\\n\"\n;\necho\n\"Formatted number: \"\n.\n$fmt\n->\nformat\n(array(\n123\n,\n456\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 msgfmt_parse() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n'en_US'\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\n$res\n=\nmsgfmt_parse\n(\n$fmt\n,\n\"4,560 monkeys on 123 trees make 37.073 monkeys per tree\"\n);\nvar_export\n(\n$res\n);\n$fmt\n=\nmsgfmt_create\n(\n'de'\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\n$res\n=\nmsgfmt_parse\n(\n$fmt\n,\n\"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\"\n);\nvar_export\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n'en_US'\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n);\n$res\n=\n$fmt\n->\nparse\n(\n\"4,560 monkeys on 123 trees make 37.073 monkeys per tree\"\n);\nvar_export\n(\n$res\n);\n$fmt\n= new\nMessageFormatter\n(\n'de'\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n);\n$res\n=\n$fmt\n->\nparse\n(\n\"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\"\n);\nvar_export\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #1 msgfmt_parse_message() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_parse_message\n(\n'en_US'\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n,\n\n\"4,560 monkeys on 123 trees make 37.073 monkeys per tree\"\n);\nvar_export\n(\n$fmt\n);\n$fmt\n=\nmsgfmt_parse_message\n(\n'de'\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n,\n\n\"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\"\n);\nvar_export\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n=\nMessageFormatter\n::\nparseMessage\n(\n'en_US'\n,\n\"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\"\n,\n\n\"4,560 monkeys on 123 trees make 37.073 monkeys per tree\"\n);\nvar_export\n(\n$fmt\n);\n$fmt\n=\nMessageFormatter\n::\nparseMessage\n(\n'de'\n,\n\"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\"\n,\n\n\"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\"\n);\nvar_export\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #1 msgfmt_set_pattern() example",
    "output": "<?php\n$fmt\n=\nmsgfmt_create\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\necho\n\"Default pattern: '\"\n.\nmsgfmt_get_pattern\n(\n$fmt\n) .\n\"'\\n\"\n;\necho\n\"Formatting result: \"\n.\nmsgfmt_format\n(\n$fmt\n, array(\n123\n,\n456\n) ) .\n\"\\n\"\n;\nmsgfmt_set_pattern\n(\n$fmt\n,\n\"{0, number} trees hosting {1, number} monkeys\"\n);\necho\n\"New pattern: '\"\n.\nmsgfmt_get_pattern\n(\n$fmt\n) .\n\"'\\n\"\n;\necho\n\"Formatted number: \"\n.\nmsgfmt_format\n(\n$fmt\n, array(\n123\n,\n456\n) ) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nMessageFormatter\n(\n\"en_US\"\n,\n\"{0, number} monkeys on {1, number} trees\"\n);\necho\n\"Default pattern: '\"\n.\n$fmt\n->\ngetPattern\n() .\n\"'\\n\"\n;\necho\n\"Formatting result: \"\n.\n$fmt\n->\nformat\n(array(\n123\n,\n456\n)) .\n\"\\n\"\n;\n$fmt\n->\nsetPattern\n(\n\"{0, number} trees hosting {1, number} monkeys\"\n);\necho\n\"New pattern: '\"\n.\n$fmt\n->\ngetPattern\n() .\n\"'\\n\"\n;\necho\n\"Formatted number: \"\n.\n$fmt\n->\nformat\n(array(\n123\n,\n456\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 IntlCalendar::add()",
    "output": "<?php\nini_set\n(\n'intl.default_locale'\n,\n'fr_FR'\n);\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2012\n,\n0\n/* January */\n,\n31\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;\n$cal\n->\nadd\n(\nIntlCalendar\n::\nFIELD_MONTH\n,\n1\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;\n$cal\n->\nadd\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\n1\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::after()",
    "output": "<?php\n$cal1\n=\nIntlCalendar\n::\ncreateInstance\n();\n$cal2\n= clone\n$cal1\n;\nvar_dump\n(\n$cal1\n->\nafter\n(\n$cal2\n),\n//false\n\n$cal2\n->\nafter\n(\n$cal1\n));\n//false\n$cal1\n->\nroll\n(\nIntlCalendar\n::\nFIELD_MILLISECOND\n,\ntrue\n);\nvar_dump\n(\n$cal1\n->\nafter\n(\n$cal2\n),\n//true\n\n$cal2\n->\nafter\n(\n$cal1\n));\n//false"
  },
  {
    "input": "Example #1 IntlCalendar::clear() examples",
    "output": "<?php\nini_set\n(\n'intl.default_locale'\n,\n'es_ES'\n);\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\n$fields\n= array(\n\n'FIELD_ERA'\n=>\n0\n,\n\n'FIELD_YEAR'\n=>\n1\n,\n\n'FIELD_MONTH'\n=>\n2\n,\n\n'FIELD_WEEK_OF_YEAR'\n=>\n3\n,\n\n'FIELD_WEEK_OF_MONTH'\n=>\n4\n,\n\n'FIELD_DATE'\n=>\n5\n,\n\n'FIELD_DAY_OF_YEAR'\n=>\n6\n,\n\n'FIELD_DAY_OF_WEEK'\n=>\n7\n,\n\n'FIELD_DAY_OF_WEEK_IN_MONTH'\n=>\n8\n,\n\n'FIELD_AM_PM'\n=>\n9\n,\n\n'FIELD_HOUR'\n=>\n10\n,\n\n'FIELD_HOUR_OF_DAY'\n=>\n11\n,\n\n'FIELD_MINUTE'\n=>\n12\n,\n\n'FIELD_SECOND'\n=>\n13\n,\n\n'FIELD_MILLISECOND'\n=>\n14\n,\n\n'FIELD_ZONE_OFFSET'\n=>\n15\n,\n\n'FIELD_DST_OFFSET'\n=>\n16\n,\n\n'FIELD_YEAR_WOY'\n=>\n17\n,\n\n'FIELD_DOW_LOCAL'\n=>\n18\n,\n\n'FIELD_EXTENDED_YEAR'\n=>\n19\n,\n\n'FIELD_JULIAN_DAY'\n=>\n20\n,\n\n'FIELD_MILLISECONDS_IN_DAY'\n=>\n21\n,\n\n'FIELD_IS_LEAP_MONTH'\n=>\n22\n,\n\n'FIELD_FIELD_COUNT'\n=>\n23\n,\n);\nfunction\ngetSetFields\n(\nIntlCalendar $cal\n) {\n    global\n$fields\n;\n\n$ret\n= array();\n    foreach (\n$fields\nas\n$name\n=>\n$value\n) {\n        if (\n$cal\n->\nisSet\n(\n$value\n)) {\n\n$ret\n[] =\n$name\n;\n        }\n    }\n    return\n$ret\n;\n}\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n2\n/* March */\n,\n15\n);\necho\n\"After GregorianCalendar creation\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\n\"\\n\"\n;\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;\necho\n\"After the formatter requested the extended year\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\n\"\\n\"\n;\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_YEAR\n);\necho\n\"After the year has been cleared, the date stays the same\\n\"\n;\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;\necho\n\"because FIELD_EXTENDED_YEAR is still set\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\n\"\\n\"\n;\nvar_dump\n(\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_EXTENDED_YEAR\n));\necho\n\"After the extended year has been cleared\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;\necho\n\"\\n\"\n;\necho\n\"After the fields are recalculated,\\n\"\n\n.\n\" extended year is set again (to 1970)\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\n\"\\n\"\n;\n$cal\n->\nclear\n();\necho\n\"After calling variant with no arguments\\n\"\n;\nprint_r\n(\ngetSetFields\n(\n$cal\n));\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::createInstance()",
    "output": "<?php\nini_set\n(\n'intl.default_locale'\n,\n'es_ES'\n);\nini_set\n(\n'date.timezone'\n,\n'Europe/Madrid'\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n();\necho\n\"No arguments\\n\"\n;\nvar_dump\n(\nget_class\n(\n$cal\n),\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n));\necho\n\"\\n\"\n;\necho\n\"Explicit timezone\\n\"\n;\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\nIntlTimeZone\n::\ngetGMT\n());\nvar_dump\n(\nget_class\n(\n$cal\n),\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n));\necho\n\"\\n\"\n;\necho\n\"Explicit locale (with calendar)\\n\"\n;\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'es_ES@calendar=persian'\n);\nvar_dump\n(\nget_class\n(\n$cal\n),\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n));"
  },
  {
    "input": "Example #1 IntlCalendar::equals()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\n$cal1\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'es_ES'\n);\n$cal2\n= clone\n$cal1\n;\nvar_dump\n(\n$cal1\n->\nequals\n(\n$cal2\n));\n//TRUE\n//The locale is not included in the comparison\n$cal2\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'pt_PT'\n);\n$cal2\n->\nsetTime\n(\n$cal1\n->\ngetTime\n());\nvar_dump\n(\n$cal1\n->\nequals\n(\n$cal2\n));\n//TRUE\n//And set fields state is not included as well\n$cal2\n->\nclear\n(\nIntlCalendar\n::\nFIELD_YEAR\n);\nvar_dump\n(\n$cal1\n->\nisSet\n(\nIntlCalendar\n::\nFIELD_YEAR\n) ==\n\n$cal2\n->\nisSet\n(\nIntlCalendar\n::\nFIELD_YEAR\n));\n//FALSE\nvar_dump\n(\n$cal1\n->\nequals\n(\n$cal2\n));\n//TRUE\n//Neither is the calendar type\n$cal2\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'es_ES@calendar=islamic'\n);\n$cal2\n->\nsetTime\n(\n$cal1\n->\ngetTime\n());\nvar_dump\n(\n$cal1\n->\nequals\n(\n$cal2\n));\n//TRUE\n//Only the time is\n$cal2\n= clone\n$cal1\n;\n$cal2\n->\nsetTime\n(\n$cal1\n->\ngetTime\n() +\n1.\n);\nvar_dump\n(\n$cal1\n->\nequals\n(\n$cal2\n));\n//FALSE"
  },
  {
    "input": "Example #1 IntlCalendar::fieldDifference()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'fr_FR'\n);\n$cal1\n=\nIntlCalendar\n::\nfromDateTime\n(\n'2012-02-29 09:00:11'\n);\n$cal2\n=\nIntlCalendar\n::\nfromDateTime\n(\n'2013-03-01 09:19:29'\n);\n$time\n=\n$cal2\n->\ngetTime\n();\necho\n\"Time before: \"\n,\nIntlDateFormatter\n::\nformatObject\n(\n$cal1\n),\n\"\\n\"\n;\nprintf\n(\n\n\"The difference in time is %d year(s), %d month(s), \"\n\n.\n\"%d day(s), %d hour(s) and %d minute(s)\\n\"\n,\n\n$cal1\n->\nfieldDifference\n(\n$time\n,\nIntlCalendar\n::\nFIELD_YEAR\n),\n\n$cal1\n->\nfieldDifference\n(\n$time\n,\nIntlCalendar\n::\nFIELD_MONTH\n),\n\n$cal1\n->\nfieldDifference\n(\n$time\n,\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n),\n\n$cal1\n->\nfieldDifference\n(\n$time\n,\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n),\n\n$cal1\n->\nfieldDifference\n(\n$time\n,\nIntlCalendar\n::\nFIELD_MINUTE\n)\n);\n//now it was advanced to the target time, exception for the seconds,\n//for which we did not measure the difference\necho\n\"Time after: \"\n,\nIntlDateFormatter\n::\nformatObject\n(\n$cal1\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::fromDateTime()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\n//same as IntlCalendar::fromDateTime(new DateTime(...))\n$cal1\n=\nIntlCalendar\n::\nfromDateTime\n(\n'2013-02-28 00:01:02 Europe/Berlin'\n);\n//Note the timezone is Europe/Berlin, not the default Europe/Lisbon\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal1\n,\n'yyyy MMMM d HH:mm:ss VVVV'\n,\n'de_DE'\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::get()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\n$class\n= new\nReflectionClass\n(\n'IntlCalendar'\n);\n$fields\n= array();\nforeach (\n$class\n->\ngetConstants\n() as\n$name\n=>\n$val\n) {\n    if (\nstrpos\n(\n$name\n,\n'FIELD_'\n) !==\n0\n||\n$val\n>\n22\n)\n        continue;\n\n$fields\n[\n$val\n] =\n$name\n;\n}\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n();\n// current time\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\nforeach (\n$fields\nas\n$val\n=>\n$name\n) {\n    echo\n\"\n$val\n (\n$name\n)\"\n,\n\"\\n    \"\n,\n$cal\n->\nget\n(\n$val\n),\n\"\\n\"\n;\n}"
  },
  {
    "input": "Example #1 IntlCalendar::getActualMaximum()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\n$cal\n=\nIntlCalendar\n::\nfromDateTime\n(\n'2013-02-15'\n);\nvar_dump\n(\n$cal\n->\ngetActualMaximum\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n));\n//28\n$cal\n->\nadd\n(\nIntlCalendar\n::\nFIELD_EXTENDED_YEAR\n, -\n1\n);\nvar_dump\n(\n$cal\n->\ngetActualMaximum\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n));\n//29"
  },
  {
    "input": "Example #1 IntlCalendar::getAvailableLocales()",
    "output": "<?php\nprint_r\n(\nIntlCalendar\n::\ngetAvailableLocales\n());"
  },
  {
    "input": "Example #1 IntlCalendar::getDayOfWeekType()",
    "output": "<?php\nforeach (array(\n'en_US'\n,\n'ar_SA'\n) as\n$locale\n) {\n    echo\n\"Locale: \"\n,\nLocale\n::\ngetDisplayName\n(\n$locale\n,\n\"en_US\"\n),\n\"\\n\"\n;\n\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\n'UTC'\n,\n$locale\n);\n    for (\n$i\n=\nIntlCalendar\n::\nDOW_SUNDAY\n;\n$i\n<=\nIntlCalendar\n::\nDOW_SATURDAY\n;\n$i\n++) {\n\n$type\n=\n$cal\n->\ngetDayOfWeekType\n(\n$i\n);\n\n$transition\n= (\n$type\n!==\nIntlCalendar\n::\nDOW_TYPE_WEEKDAY\n)\n            ?\n$cal\n->\ngetWeekendTransition\n(\n$i\n)\n            :\n''\n;\n        echo\n$i\n,\n\" \"\n,\n$type\n,\n\" \"\n,\n$transition\n,\n\"\\n\"\n;\n    }\n    echo\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 IntlCalendar::getErrorCode() and\n   IntlCalendar::getErrorMessage()",
    "output": "<?php\nini_set\n(\n\"intl.error_level\"\n,\nE_WARNING\n);\nini_set\n(\n\"intl.default_locale\"\n,\n\"nl\"\n);\n$intlcal\n= new\nIntlGregorianCalendar\n(\n2012\n,\n1\n,\n29\n);\nvar_dump\n(\n\n$intlcal\n->\ngetErrorCode\n(),\n\n$intlcal\n->\ngetErrorMessage\n()\n);\n$intlcal\n->\nfieldDifference\n(-\n1e100\n,\nIntlCalendar\n::\nFIELD_SECOND\n);\nvar_dump\n(\n\n$intlcal\n->\ngetErrorCode\n(),\n\n$intlcal\n->\ngetErrorMessage\n()\n);"
  },
  {
    "input": "Example #1 IntlCalendar::getErrorMessage()",
    "output": "<?php\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\n'UTC'\n,\n'en_US'\n);\nvar_dump\n(\n$cal\n->\ngetErrorMessage\n());\n$cal\n->\ngetWeekendTransition\n(\nIntlCalendar\n::\nDOW_WEDNESDAY\n);\nvar_dump\n(\n$cal\n->\ngetErrorMessage\n());"
  },
  {
    "input": "Example #1 IntlCalendar::getFirstDayOfWeek()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\n$cal1\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'es_ES'\n);\nvar_dump\n(\n$cal1\n->\ngetFirstDayOfWeek\n());\n// Monday\n$cal1\n->\nset\n(\n2013\n,\n1\n/* February */\n,\n3\n);\n// a Sunday\nvar_dump\n(\n$cal1\n->\nget\n(\nIntlCalendar\n::\nFIELD_WEEK_OF_YEAR\n));\n// 5\n$cal2\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'en_US'\n);\nvar_dump\n(\n$cal2\n->\ngetFirstDayOfWeek\n());\n// Sunday\n$cal2\n->\nset\n(\n2013\n,\n1\n/* February */\n,\n3\n);\n// a Sunday\nvar_dump\n(\n$cal2\n->\nget\n(\nIntlCalendar\n::\nFIELD_WEEK_OF_YEAR\n));\n// 6"
  },
  {
    "input": "Example #1 IntlCalendar::getKeyworkValuesForLocale()",
    "output": "<?php\nprint_r\n(\n\niterator_to_array\n(\n\nIntlCalendar\n::\ngetKeywordValuesForLocale\n(\n\n'calendar'\n,\n'fa_IR'\n,\ntrue\n)));\nprint_r\n(\n\niterator_to_array\n(\n\nIntlCalendar\n::\ngetKeywordValuesForLocale\n(\n\n'calendar'\n,\n'fa_IR'\n,\nfalse\n)));"
  },
  {
    "input": "Example #1 Maxima examples",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\nini_set\n(\n'intl.default_locale'\n,\n'it_IT'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n3\n/* April */\n,\n6\n);\nvar_dump\n(\n\n$cal\n->\ngetLeastMaximum\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n),\n// 28\n\n$cal\n->\ngetActualMaximum\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n),\n// 30\n\n$cal\n->\ngetMaximum\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n)\n// 31\n);"
  },
  {
    "input": "Example #1 IntlCalendar::getLocale()",
    "output": "<?php\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\nIntlTimeZone\n::\ngetGMT\n(),\n'en_US_CALIFORNIA'\n);\nvar_dump\n(\n\n$cal\n->\ngetLocale\n(\nLocale\n::\nACTUAL_LOCALE\n),\n\n$cal\n->\ngetLocale\n(\nLocale\n::\nVALID_LOCALE\n)\n);"
  },
  {
    "input": "Example #1 IntlCalendar::getMinimalDaysInFirstWeek()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n0\n/* January */\n,\n2\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\n'cccc'\n));\n// Wednesday\nvar_dump\n(\n$cal\n->\ngetMinimalDaysInFirstWeek\n(),\n// 1\n$cal\n->\ngetFirstDayofWeek\n());\n// 1 (Sunday)\n// Week 1 of 2013\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\n\"'Week 'w' of 'Y\"\n));\n$cal\n->\nsetMinimalDaysInFirstWeek\n(\n4\n);\n// Still Week 1 of 2013 (1st week has 5 days in the new year)\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\n\"'Week 'w' of 'Y\"\n));\n$cal\n->\nsetMinimalDaysInFirstWeek\n(\n6\n);\n// Week 53 of 2012\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\n\"'Week 'w' of 'Y\"\n));"
  },
  {
    "input": "Example #1 IntlCalendar::getNow()",
    "output": "<?php\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n'es_ES'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'Europe/Madrid'\n);\n$val\n=\nIntlCalendar\n::\ngetNow\n();\nvar_dump\n(\n$val\n);\necho\n$formatter\n->\nformat\n(\nIntlCalendar\n::\ngetNow\n() /\n1000.\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::getRepeatedWallTimeOption()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\nini_set\n(\n'intl.error_level'\n,\nE_WARNING\n);\n//On October 27th at 0200, the clock goes back 1 hour and from GMT+01 to GMT+00\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n9\n/* October */\n,\n27\n,\n1\n,\n30\n);\nvar_dump\n(\n$cal\n->\ngetRepeatedWalltimeOption\n());\n// 0 WALLTIME_LAST\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n\nNULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'UTC'\n);\nvar_dump\n(\n$formatter\n->\nformat\n(\n$cal\n->\ngetTime\n() /\n1000.\n));\n$cal\n->\nsetRepeatedWalltimeOption\n(\nIntlCalendar\n::\nWALLTIME_FIRST\n);\nvar_dump\n(\n$cal\n->\ngetRepeatedWalltimeOption\n());\n// 1 WALLTIME_FIRST\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n,\n1\n);\nvar_dump\n(\n$formatter\n->\nformat\n(\n$cal\n->\ngetTime\n() /\n1000.\n));"
  },
  {
    "input": "Example #1 IntlCalendar::getSkippedWallTimeOption()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\nini_set\n(\n'intl.error_level'\n,\nE_WARNING\n);\n//On March 31st at 0100, the clock goes forward 1 hour and from GMT+00 to GMT+01\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n2\n/* March */\n,\n31\n,\n1\n,\n30\n);\nvar_dump\n(\n\n$cal\n->\nisLenient\n(),\n// true\n\n$cal\n->\ngetSkippedWalltimeOption\n()\n// 0 WALLTIME_LAST\n);\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n\nNULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'UTC'\n);\nvar_dump\n(\n$formatter\n->\nformat\n(\n$cal\n->\ngetTime\n() /\n1000\n));\n$cal\n->\nsetSkippedWallTimeOption\n(\nIntlCalendar\n::\nWALLTIME_FIRST\n);\nvar_dump\n(\n$cal\n->\ngetSkippedWalltimeOption\n());\n// 1 WALLTIME_FIRST\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n,\n1\n);\nvar_dump\n(\n$formatter\n->\nformat\n(\n$cal\n->\ngetTime\n() /\n1000\n));\n$cal\n->\nsetSkippedWallTimeOption\n(\nIntlCalendar\n::\nWALLTIME_NEXT_VALID\n);\nvar_dump\n(\n$cal\n->\ngetSkippedWalltimeOption\n());\n// 2 WALLTIME_NEXT_VALID\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n,\n1\n);\nvar_dump\n(\n$formatter\n->\nformat\n(\n$cal\n->\ngetTime\n() /\n1000\n));"
  },
  {
    "input": "Example #1 IntlCalendar::getTime()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n4\n/* May */\n,\n1\n,\n0\n,\n0\n,\n0\n);\n$time\n=\n$cal\n->\ngetTime\n();\nvar_dump\n(\n$time\n,\n$time\n/\n1000\n==\nstrtotime\n(\n'2013-05-01 00:00:00'\n));\n//true"
  },
  {
    "input": "Example #1 IntlCalendar::getTimeZone()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n();\nprint_r\n(\n$cal\n->\ngetTimeZone\n());\n$cal\n->\nsetTimeZone\n(\n'UTC'\n);\nprint_r\n(\n$cal\n->\ngetTimeZone\n());\n$cal\n=\nIntlCalendar\n::\nfromDateTime\n(\n'2012-01-01 00:00:00 GMT+03:33'\n);\nprint_r\n(\n$cal\n->\ngetTimeZone\n());"
  },
  {
    "input": "Example #1 IntlCalendar::getType()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'en_US'\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\nNULL\n,\n'@calendar=ethiopic-amete-alem'\n);\nvar_dump\n(\n$cal\n->\ngetType\n());\n$cal\n= new\nIntlGregorianCalendar\n();\nvar_dump\n(\n$cal\n->\ngetType\n());"
  },
  {
    "input": "Example #1 IntlCalendar::inDaylightTime()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'pt_PT'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n6\n/* July */\n,\n1\n,\n4\n,\n56\n,\n31\n);\nvar_dump\n(\n$cal\n->\ninDaylightTime\n());\n// true\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_MONTH\n,\n11\n/* December */\n);\nvar_dump\n(\n$cal\n->\ninDaylightTime\n());\n// false\n//DST end transition on 2013-10-27 at 0200 (wall time back 1 hour)\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n9\n/* October */\n,\n27\n,\n1\n,\n30\n,\n0\n);\nvar_dump\n(\n$cal\n->\ninDaylightTime\n());\n// false (default WALLTIME_LAST)\n$cal\n->\nsetRepeatedWallTimeOption\n(\nIntlCalendar\n::\nWALLTIME_FIRST\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n,\n1\n);\n// force time recalculation\nvar_dump\n(\n$cal\n->\ninDaylightTime\n());\n// true"
  },
  {
    "input": "Example #1 IntlCalendar::isEquivalentTo()",
    "output": "<?php\n$cal1\n=\nIntlCalendar\n::\ncreateInstance\n(\n'Europe/Lisbon'\n,\n'pt_PT'\n);\n$cal2\n=\nIntlCalendar\n::\ncreateInstance\n(\n'Europe/Lisbon'\n,\n'es_ES'\n);\n$cal2\n->\nclear\n();\nvar_dump\n(\n$cal1\n->\nisEquivalentTo\n(\n$cal2\n));\n// true\n$cal3\n=\nIntlCalendar\n::\ncreateInstance\n(\n'Europe/Lisbon'\n,\n'en_US'\n);\nvar_dump\n(\n$cal1\n->\nisEquivalentTo\n(\n$cal3\n));\n// false\nvar_dump\n(\n$cal1\n->\ngetFirstDayOfWeek\n(),\n// 2 (Monday)\n$cal3\n->\ngetFirstDayOfWeek\n());\n// 1 (Sunday)"
  },
  {
    "input": "Example #1 IntlCalendar::isLenient()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'pt_PT'\n);\nini_set\n(\n'intl.use_exceptions'\n,\n'1'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n6\n/* July */\n,\n1\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n// 01/07/2013, 00:00:00\n$cal\n->\nisLenient\n());\n// true\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\n33\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\n// 02/08/2013, 00:00:00\n$cal\n->\nsetLenient\n(\nfalse\n);\nvar_dump\n(\n$cal\n->\nisLenient\n());\n// false\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\n33\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\n// error"
  },
  {
    "input": "Example #1 IntlCalendar::isWeekend()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\nNULL\n,\n'en_US'\n);\n$cal\n->\nset\n(\n2013\n,\n6\n/* July */\n,\n7\n);\n// a Sunday\nvar_dump\n(\n$cal\n->\nisWeekend\n());\n// true\nvar_dump\n(\n$cal\n->\nisWeekend\n(\nstrtotime\n(\n'2013-07-01 00:00:00'\n)));\n// false, Monday\n$cal\n= new\nIntlGregorianCalendar\n(\nNULL\n,\n'ar_SA'\n);\n$cal\n->\nset\n(\n2013\n,\n6\n/* July */\n,\n7\n);\n// a Sunday\nvar_dump\n(\n$cal\n->\nisWeekend\n());\n// false, Sunday not in weekend in this calendar"
  },
  {
    "input": "Example #1 IntlCalendar::roll()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'pt_PT'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n5\n/* June */\n,\n30\n);\n$cal\n->\nadd\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\n1\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\n// \"01/07/2013, 00:00:00\"\n$cal\n->\nset\n(\n2013\n,\n5\n/* June */\n,\n30\n);\n$cal\n->\nroll\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\ntrue\n);\n// roll up, same as rolling +1\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\n// \"01/06/2013, 00:00:00\""
  },
  {
    "input": "Example #1 IntlCalendar::set()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'pt_PT'\n);\n//Calls made later have priority\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n6\n/* July */\n,\n1\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_YEAR\n,\n2012\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_EXTENDED_YEAR\n,\n2011\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n6\n/* July */\n,\n1\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_YEAR\n,\n2012\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_EXTENDED_YEAR\n,\n2011\n);\n//the time has not been recalculated yet. If we clear the extended year,\n//the year set before will be used\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_EXTENDED_YEAR\n);\nvar_dump\n(\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n));"
  },
  {
    "input": "Example #1 IntlCalendar::setDate() example",
    "output": "<?php\n$intlCal\n=\nIntlCalendar\n::\ncreateInstance\n(\n'UTC'\n);\n$intlCal\n->\nsetDate\n(\n2012\n,\n1\n,\n29\n);\n?>"
  },
  {
    "input": "Example #1 IntlCalendar::setDateTime() example",
    "output": "<?php\n$intlCal\n=\nIntlCalendar\n::\ncreateInstance\n(\n'UTC'\n);\n$intlCal\n->\nsetDateTime\n(\n2012\n,\n1\n,\n29\n,\n23\n,\n58\n);\n?>"
  },
  {
    "input": "Example #1 IntlCalendar::setFirstDayOfWeek()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'es_ES'\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n();\n$cal\n->\nset\n(\n2013\n,\n5\n/* June */\n,\n30\n);\n// A Sunday\nvar_dump\n(\n$cal\n->\ngetFirstDayOfWeek\n());\n// 2 (Monday)\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n, <<<EOD\n'local day of week: 'cc'\nweek of month    : 'W'\nweek of year     : 'ww\nEOD\n),\n\"\\n\"\n;\n$cal\n->\nsetFirstDayOfWeek\n(\nIntlCalendar\n::\nDOW_SUNDAY\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n, <<<EOD\n'local day of week: 'cc'\nweek of month    : 'W'\nweek of year     : 'ww\nEOD\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::setTime()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'fr_FR'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n5\n/* May */\n,\n1\n,\n12\n,\n0\n,\n0\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;\n/* In Europe/Lisbon, on 2013-10-27 at 0200, the clock goes back one hour and\n   the timezone from UTC+01 to UTC+00 */\n$cal\n->\nsetTime\n(\nstrtotime\n(\n'2013-10-27 00:30:00 UTC'\n) *\n1000.\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;\n$cal\n->\nsetTime\n(\nstrtotime\n(\n'2013-10-27 01:30:00 UTC'\n) *\n1000.\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::setTimeZone()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Lisbon'\n);\nini_set\n(\n'intl.default_locale'\n,\n'es_ES'\n);\n$cal\n= new\nIntlGregorianCalendar\n(\n2013\n,\n5\n/* May */\n,\n1\n,\n12\n,\n0\n,\n0\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;\necho\n\"(instant\n{\n$cal\n->\ngetTime\n()}\n)\\n\"\n;\n$cal\n->\nsetTimeZone\n(\nIntlTimeZone\n::\ngetGMT\n());\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;\necho\n\"(instant\n{\n$cal\n->\ngetTime\n()}\n)\\n\"\n;\n$cal\n->\nsetTimeZone\n(\n'GMT+03:33'\n);\necho\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\"\\n\"\n;\necho\n\"(instant\n{\n$cal\n->\ngetTime\n()}\n)\\n\"\n;"
  },
  {
    "input": "Example #1 IntlCalendar::toDateTime()",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\nini_set\n(\n'intl.default_locale'\n,\n'pt_PT'\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\n'Europe/Lisbon'\n);\n//current time\n$dt\n=\n$cal\n->\ntoDateTime\n();\nprint_r\n(\n$dt\n);"
  },
  {
    "input": "Example #1 IntlGregorianCalendar::createFromDate() example",
    "output": "<?php\n$intlCalendar\n=\nIntlGregorianCalendar\n::\ncreateFromDate\n(\n2023\n,\n11\n,\n23\n);\nvar_dump\n(\n$intlCalendar\n);\n?>"
  },
  {
    "input": "Example #1 IntlGregorianCalendar::createFromDateTime() example",
    "output": "<?php\n$intlCalendar\n=\nIntlGregorianCalendar\n::\ncreateFromDateTime\n(\n2023\n,\n11\n,\n23\n,\n12\n,\n00\n);\nvar_dump\n(\n$intlCalendar\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_create() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\"en_US\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n\"First Formatted output is \"\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\"de-DE\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n\"Second Formatted output is \"\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\"en_US\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n,\n\"MM/dd/yyyy\"\n);\necho\n\"First Formatted output with pattern is \"\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\"de-DE\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n,\n\"MM/dd/yyyy\"\n);\necho\n\"Second Formatted output with pattern is \"\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\"en_US\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n\"First Formatted output is \"\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\"de-DE\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n\"Second Formatted output is \"\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\"en_US\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n,\n\"MM/dd/yyyy\"\n);\necho\n\"First Formatted output with pattern is \"\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\"de-DE\"\n,\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\nIntlDateFormatter\n::\nGREGORIAN\n,\n\"MM/dd/yyyy\"\n);\necho\n\"Second Formatted output with pattern is \"\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #3 Example of invalid locale handling",
    "output": "<?php\ntry {\n\n$fmt\n= new\nIntlDateFormatter\n(\n\n'invalid_locale'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'dunno'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n    );\n} catch (\n\\Error $e\n) {\n\n// ...\n}\n?>"
  },
  {
    "input": "Example #1 datefmt_format() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'First Formatted output is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Second Formatted output is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'First Formatted output with pattern is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n\"Second Formatted output with pattern is \"\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'First Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Second Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'First Formatted output with pattern is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'Second Formatted output with pattern is '\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #3 With IntlCalendar object",
    "output": "<?php\n$tz\n=\nreset\n(\niterator_to_array\n(\nIntlTimeZone\n::\ncreateEnumeration\n(\n'FR'\n)));\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n\n'fr_FR'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n$tz\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$cal\n=\nIntlCalendar\n::\ncreateInstance\n(\n$tz\n,\n'@calendar=islamic-civil'\n);\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_MONTH\n,\n8\n);\n//9th month, Ramadan\n$cal\n->\nset\n(\nIntlCalendar\n::\nFIELD_DAY_OF_MONTH\n,\n1\n);\n//1st day\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_HOUR_OF_DAY\n);\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_MINUTE\n);\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_SECOND\n);\n$cal\n->\nclear\n(\nIntlCalendar\n::\nFIELD_MILLISECOND\n);\necho\n\"In this islamic year, Ramadan started/will start on:\\n\\t\"\n,\n\n$formatter\n->\nformat\n(\n$cal\n),\n\"\\n\"\n;\n//Itʼs the formatterʼs timezone that is used:\n$formatter\n->\nsetTimeZone\n(\n'Asia/Tokyo'\n);\necho\n\"After changing timezone:\\n\\t\"\n,\n\n$formatter\n->\nformat\n(\n$cal\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 IntlDateFormatter::formatObject() examples",
    "output": "<?php\n/* default timezone is irrelevant; timezone taken from the object */\nini_set\n(\n'date.timezone'\n,\n'UTC'\n);\n/* default locale is taken from this ini setting */\nini_set\n(\n'intl.default_locale'\n,\n'fr_FR'\n);\n$cal\n=\nIntlCalendar\n::\nfromDateTime\n(\n\"2013-06-06 17:05:06 Europe/Dublin\"\n);\necho\n\"default:\\n\\t\"\n,\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n),\n\n\"\\n\"\n;\necho\n\"long \\$format (full):\\n\\t\"\n,\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\nIntlDateFormatter\n::\nFULL\n),\n\n\"\\n\"\n;\necho\n\"array \\$format (none, full):\\n\\t\"\n,\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n, array(\n\nIntlDateFormatter\n::\nNONE\n,\n\nIntlDateFormatter\n::\nFULL\n)),\n\n\"\\n\"\n;\necho\n\"string \\$format (d 'of' MMMM y):\\n\\t\"\n,\n\nIntlDateFormatter\n::\nformatObject\n(\n$cal\n,\n\"d 'of' MMMM y\"\n,\n'en_US'\n),\n\n\"\\n\"\n;\necho\n\"with DateTime:\\n\\t\"\n,\n\nIntlDateFormatter\n::\nformatObject\n(\n                new\nDateTime\n(\n\"2013-09-09 09:09:09 Europe/Madrid\"\n),\n\nIntlDateFormatter\n::\nFULL\n,\n\n'es_ES'\n),\n\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 datefmt_get_calendar() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'calendar of the formatter is : '\n.\ndatefmt_get_calendar\n(\n$fmt\n);\ndatefmt_set_calendar\n(\n$fmt\n,\nIntlDateFormatter\n::\nTRADITIONAL\n);\necho\n'Now calendar of the formatter is : '\n.\ndatefmt_get_calendar\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'calendar of the formatter is : '\n.\n$fmt\n->\ngetCalendar\n();\n$fmt\n->\nsetCalendar\n(\nIntlDateFormatter\n::\nTRADITIONAL\n);\necho\n'Now calendar of the formatter is : '\n.\n$fmt\n->\ngetCalendar\n();\n?>"
  },
  {
    "input": "Example #3 Example of invalid locale handling",
    "output": "<?php\ntry {\n\n$fmt\n= new\nIntlDateFormatter\n(\n\n'invalid_locale'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'dunno'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n    );\n\n$cal\n=\n$fmt\n->\ngetCalendar\n();\n} catch (\n\\Error $e\n) {\n\n// ...\n}\n?>"
  },
  {
    "input": "Example #1 datefmt_get_datetype() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'datetype of the formatter is : '\n.\ndatefmt_get_datetype\n(\n$fmt\n);\necho\n'First Formatted output with datetype is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nSHORT\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Now datetype of the formatter is : '\n.\ndatefmt_get_datetype\n(\n$fmt\n);\necho\n'Second Formatted output with datetype is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'datetype of the formatter is : '\n.\n$fmt\n->\ngetDateType\n();\necho\n'First Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nSHORT\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Now datetype of the formatter is : '\n.\n$fmt\n->\ngetDateType\n();\necho\n'Second Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_error_code() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$str\n=\ndatefmt_format\n(\n$fmt\n,\n0\n);\nprintf\n(\n\n\"ERROR: %s (%d)\\n\"\n,\n\ndatefmt_get_error_message\n(\n$fmt\n),\n\ndatefmt_get_error_code\n(\n$fmt\n)\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$str\n=\n$fmt\n->\nformat\n(\n0\n);\nprintf\n(\n\n\"ERROR: %s (%d)\\n\"\n,\n\n$fmt\n->\ngetErrorMessage\n(),\n\n$fmt\n->\ngetErrorCode\n()\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_error_message() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$str\n=\ndatefmt_format\n(\n$fmt\n,\n0\n);\nprintf\n(\n\n\"ERROR: %s (%d)\\n\"\n,\n\ndatefmt_get_error_message\n(\n$fmt\n),\n\ndatefmt_get_error_code\n(\n$fmt\n)\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$str\n=\n$fmt\n->\nformat\n(\n0\n);\nprintf\n(\n\n\"ERROR: %s (%d)\\n\"\n,\n\n$fmt\n->\ngetErrorMessage\n(),\n\n$fmt\n->\ngetErrorCode\n()\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_locale() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'locale of the formatter is : '\n.\ndatefmt_get_locale\n(\n$fmt\n);\necho\n'First Formatted output is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'locale of the formatter is : '\n.\ndatefmt_get_locale\n(\n$fmt\n);\necho\n'Second Formatted output is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'locale of the formatter is : '\n.\n$fmt\n->\ngetLocale\n();\necho\n'First Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'locale of the formatter is : '\n.\n$fmt\n->\ngetLocale\n();\necho\n'Second Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_pattern() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'pattern of the formatter is : '\n.\ndatefmt_get_pattern\n(\n$fmt\n);\necho\n'First Formatted output with pattern is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\ndatefmt_set_pattern\n(\n$fmt\n,\n'yyyymmdd hh:mm:ss z'\n);\necho\n'Now pattern of the formatter is : '\n.\ndatefmt_get_pattern\n(\n$fmt\n);\necho\n'Second Formatted output with pattern is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'pattern of the formatter is : '\n.\n$fmt\n->\ngetPattern\n();\necho\n'First Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n->\nsetPattern\n(\n'yyyymmdd hh:mm:ss z'\n);\necho\n'Now pattern of the formatter is : '\n.\n$fmt\n->\ngetPattern\n();\necho\n'Second Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_timetype() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'timetype of the formatter is : '\n.\ndatefmt_get_timetype\n(\n$fmt\n);\necho\n'First Formatted output with timetype is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nSHORT\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Now timetype of the formatter is : '\n.\ndatefmt_get_timetype\n(\n$fmt\n);\necho\n'Second Formatted output with timetype is '\n.\ndatefmt_format\n(\n$fmt\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'timetype of the formatter is : '\n.\n$fmt\n->\ngetTimeType\n();\necho\n'First Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nSHORT\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Now timetype of the formatter is : '\n.\n$fmt\n->\ngetTimeType\n();\necho\n'Second Formatted output is '\n.\n$fmt\n->\nformat\n(\n0\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_get_timezone_id() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'timezone_id of the formatter is: '\n.\ndatefmt_get_timezone_id\n(\n$fmt\n) .\n\"\\n\"\n;\ndatefmt_set_timezone\n(\n$fmt\n,\n'Europe/Madrid'\n);\necho\n'Now timezone_id of the formatter is: '\n.\ndatefmt_get_timezone_id\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'timezone_id of the formatter is: '\n.\n$fmt\n->\ngetTimezoneId\n() .\n\"\\n\"\n;\n$fmt\n->\nsetTimezone\n(\n'Europe/Madrid'\n);\necho\n'Now timezone_id of the formatter is: '\n.\n$fmt\n->\ngetTimezoneId\n();\n?>"
  },
  {
    "input": "Example #1 IntlDateFormatter::getCalendarObject() example",
    "output": "<?php\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n\n\"fr_FR@calendar=islamic\"\n,\n\nNULL\n,\n\nNULL\n,\n\n\"GMT-01:00\"\n,\n\nIntlDateFormatter\n::\nTRADITIONAL\n);\n$cal\n=\n$formatter\n->\ngetCalendarObject\n();\nvar_dump\n(\n\n$cal\n->\ngetType\n(),\n\n$cal\n->\ngetTimeZone\n(),\n\n$cal\n->\ngetLocale\n(\nLocale\n::\nVALID_LOCALE\n)\n);"
  },
  {
    "input": "Example #1 IntlDateFormatter::getTimeZone() examples",
    "output": "<?php\n$madrid\n=\nIntlDateFormatter\n::\ncreate\n(\nNULL\n,\nNULL\n,\nNULL\n,\n'Europe/Madrid'\n);\n$lisbon\n=\nIntlDateFormatter\n::\ncreate\n(\nNULL\n,\nNULL\n,\nNULL\n,\n'Europe/Lisbon'\n);\nvar_dump\n(\n$madrid\n->\ngetTimezone\n());\necho\n$madrid\n->\ngetTimezone\n()->\ngetDisplayName\n(\n\nfalse\n,\nIntlTimeZone\n::\nDISPLAY_GENERIC_LOCATION\n,\n\"en_US\"\n),\n\"\\n\"\n;\necho\n$lisbon\n->\ngetTimeZone\n()->\ngetId\n(),\n\"\\n\"\n;\n//The id can also be retrieved with ->getTimezoneId()\necho\n$lisbon\n->\ngetTimeZoneId\n(),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 datefmt_is_lenient() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'dd/mm/yyyy'\n);\necho\n'lenient of the formatter is : '\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\ndatefmt_set_lenient\n(\n$fmt\n,\nfalse\n);\necho\n'Now lenient of the formatter is : '\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').Result is : \"\n.\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n\"dd/mm/yyyy\"\n);\necho\n\"lenient of the formatter is : \"\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n){\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n$fmt\n->\nsetLenient\n(\nFALSE\n);\necho\n'Now lenient of the formatter is : '\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n?>"
  },
  {
    "input": "Example #1 datefmt_localtime() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$arr\n=\ndatefmt_localtime\n(\n$fmt\n,\n'Wednesday, December 31, 1969 4:00:00 PM PT'\n,\n0\n);\necho\n'First parsed output is '\n;\nif (\n$arr\n) {\n    foreach (\n$arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n :\n$value\n , \"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n$arr\n=\n$fmt\n->\nlocaltime\n(\n'Wednesday, December 31, 1969 4:00:00 PM PT'\n,\n0\n);\necho\n'First parsed output is '\n;\nif (\n$arr\n) {\n    foreach (\n$arr\nas\n$key\n=>\n$value\n) {\n        echo\n\"\n$key\n :\n$value\n , \"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'First parsed output is '\n.\n$fmt\n->\nparse\n(\n'Wednesday, December 20, 1989 4:00:00 PM PT'\n);\n$fmt\n= new\nIntlDateFormatter\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\n?>"
  },
  {
    "input": "Example #2 datefmt_parse() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'First parsed output is '\n.\ndatefmt_parse\n(\n$fmt\n,\n'Wednesday, December 20, 1989 4:00:00 PM PT'\n);\n$fmt\n=\ndatefmt_create\n(\n\n'de-DE'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'Second parsed output is '\n.\ndatefmt_parse\n(\n$fmt\n,\n'Mittwoch, 20. Dezember 1989 16:00 Uhr GMT-08:00'\n);\n?>"
  },
  {
    "input": "Example #1 datefmt_set_calendar() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'calendar of the formatter is : '\n.\ndatefmt_get_calendar\n(\n$fmt\n);\ndatefmt_set_calendar\n(\n$fmt\n,\nIntlDateFormatter\n::\nTRADITIONAL\n);\necho\n'Now calendar of the formatter is : '\n.\ndatefmt_get_calendar\n(\n$fmt\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n);\necho\n'calendar of the formatter is : '\n.\n$fmt\n->\ngetCalendar\n();\n$fmt\n->\nsetCalendar\n(\nIntlDateFormatter\n::\nTRADITIONAL\n);\necho\n'Now calendar of the formatter is : '\n.\n$fmt\n->\ngetCalendar\n();\n?>"
  },
  {
    "input": "Example #3 Example with IntlCalendar argument",
    "output": "<?php\n$time\n=\nstrtotime\n(\n\"2013-03-03 00:00:00 UTC\"\n);\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\n\"en_US\"\n,\nNULL\n,\nNULL\n,\n\"Europe/Amsterdam\"\n);\necho\n\"before: \"\n,\n$formatter\n->\nformat\n(\n$time\n),\n\"\\n\"\n;\n/* note that the calendar's locale is not used! */\n$formatter\n->\nsetCalendar\n(\nIntlCalendar\n::\ncreateInstance\n(\n\n\"America/New_York\"\n,\n\"pt_PT@calendar=islamic\"\n));\necho\n\"after:  \"\n,\n$formatter\n->\nformat\n(\n$time\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 datefmt_set_lenient() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'dd/MM/yyyy'\n);\necho\n'lenient of the formatter is : '\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\ndatefmt_set_lenient\n(\n$fmt\n,\nfalse\n);\necho\n\"\\nNow lenient of the formatter is : \"\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\necho\n\"\\nTrying to do parse('35/13/1971').\\nResult is : \"\n.\ndatefmt_parse\n(\n$fmt\n,\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'dd/MM/yyyy'\n);\necho\n'lenient of the formatter is : '\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n$fmt\n->\nsetLenient\n(\nFALSE\n);\necho\n\"\\nNow lenient of the formatter is : \"\n;\nif (\n$fmt\n->\nisLenient\n()) {\n    echo\n'TRUE'\n;\n} else {\n    echo\n'FALSE'\n;\n}\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\necho\n\"\\n Trying to do parse('35/13/1971').\\nResult is : \"\n.\n$fmt\n->\nparse\n(\n'35/13/1971'\n);\nif (\nintl_get_error_code\n() !=\n0\n) {\n    echo\n\"\\nError_msg is : \"\n.\nintl_get_error_message\n();\n    echo\n\"\\nError_code is : \"\n.\nintl_get_error_code\n();\n}\n?>"
  },
  {
    "input": "Example #1 datefmt_set_pattern() example",
    "output": "<?php\n$fmt\n=\ndatefmt_create\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'Pattern of the formatter is : '\n,\ndatefmt_get_pattern\n(\n$fmt\n),\nPHP_EOL\n;\necho\n'First Formatted output with pattern is '\n,\ndatefmt_format\n(\n$fmt\n,\n0\n),\nPHP_EOL\n;\ndatefmt_set_pattern\n(\n$fmt\n,\n'yyyyMMdd hh:mm:ss z'\n);\necho\n'Now pattern of the formatter is : '\n,\ndatefmt_get_pattern\n(\n$fmt\n),\nPHP_EOL\n;\necho\n'Second Formatted output with pattern is '\n,\ndatefmt_format\n(\n$fmt\n,\n0\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$fmt\n= new\nIntlDateFormatter\n(\n\n'en_US'\n,\n\nIntlDateFormatter\n::\nFULL\n,\nIntlDateFormatter\n::\nFULL\n,\n\n'America/Los_Angeles'\n,\n\nIntlDateFormatter\n::\nGREGORIAN\n,\n\n'MM/dd/yyyy'\n);\necho\n'Pattern of the formatter is : '\n,\n$fmt\n->\ngetPattern\n(),\nPHP_EOL\n;\necho\n'First Formatted output is '\n,\n$fmt\n->\nformat\n(\n0\n),\nPHP_EOL\n;\n$fmt\n->\nsetPattern\n(\n'yyyyMMdd hh:mm:ss z'\n);\necho\n'Now pattern of the formatter is : '\n,\n$fmt\n->\ngetPattern\n(),\nPHP_EOL\n;\necho\n'Second Formatted output is '\n,\n$fmt\n->\nformat\n(\n0\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 IntlDateFormatter::setTimeZone() examples",
    "output": "<?php\nini_set\n(\n'date.timezone'\n,\n'Europe/Amsterdam'\n);\n$formatter\n=\nIntlDateFormatter\n::\ncreate\n(\nNULL\n,\nNULL\n,\nNULL\n,\n\"UTC\"\n);\n$formatter\n->\nsetTimeZone\n(\nNULL\n);\necho\n\"NULL\\n    \"\n,\n$formatter\n->\ngetTimeZone\n()->\ngetId\n(),\n\"\\n\"\n;\n$formatter\n->\nsetTimeZone\n(\nIntlTimeZone\n::\ncreateTimeZone\n(\n'Europe/Lisbon'\n));\necho\n\"IntlTimeZone\\n    \"\n,\n$formatter\n->\ngetTimeZone\n()->\ngetId\n(),\n\"\\n\"\n;\n$formatter\n->\nsetTimeZone\n(new\nDateTimeZone\n(\n'Europe/Paris'\n));\necho\n\"DateTimeZone\\n    \"\n,\n$formatter\n->\ngetTimeZone\n()->\ngetId\n(),\n\"\\n\"\n;\n$formatter\n->\nsetTimeZone\n(\n'Europe/Rome'\n);\necho\n\"String\\n    \"\n,\n$formatter\n->\ngetTimeZone\n()->\ngetId\n(),\n\"\\n\"\n;\n$formatter\n->\nsetTimeZone\n(\n'GMT+00:30'\n);\nprint_r\n(\n$formatter\n->\ngetTimeZone\n());"
  },
  {
    "input": "Example #1 resourcebundle_count() example",
    "output": "<?php\n$r\n=\nresourcebundle_create\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\nresourcebundle_count\n(\n$r\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$r\n= new\nResourceBundle\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n->\ncount\n();\n?>"
  },
  {
    "input": "Example #1 resourcebundle_create() example",
    "output": "<?php\n$r\n=\nresourcebundle_create\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'teststring'\n];\n?>"
  },
  {
    "input": "Example #2 ResourceBundle::create() example",
    "output": "<?php\n$r\n=\nResourceBundle\n::\ncreate\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'teststring'\n];\n?>"
  },
  {
    "input": "Example #1 resourcebundle_get() example",
    "output": "<?php\n$r\n=\nresourcebundle_create\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\nresourcebundle_get\n(\n$r\n,\n'somestring'\n);\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$r\n= new\nResourceBundle\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n->\nget\n(\n'somestring'\n);\n?>"
  },
  {
    "input": "Example #1 resourcebundle_get_error_code() example",
    "output": "<?php\n$r\n=\nresourcebundle_create\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'somestring'\n];\nif(\nintl_is_failure\n(\nresourcebundle_get_error_code\n(\n$r\n))) {\n\nreport_error\n(\n\"Bundle error\"\n);\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$r\n= new\nResourceBundle\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'somestring'\n];\nif(\nintl_is_failure\n(\nResourceBundle\n::\ngetErrorCode\n(\n$r\n))) {\n\nreport_error\n(\n\"Bundle error\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 resourcebundle_get_error_message() example",
    "output": "<?php\n$r\n=\nresourcebundle_create\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'somestring'\n];\nif(\nintl_is_failure\n(\nresourcebundle_get_error_code\n(\n$r\n))) {\n\nreport_error\n(\n\"Bundle error: \"\n.\nresourcebundle_get_error_message\n(\n$r\n));\n}\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$r\n= new\nResourceBundle\n(\n'es'\n,\n\"/usr/share/data/myapp\"\n);\necho\n$r\n[\n'somestring'\n];\nif(\nintl_is_failure\n(\nResourceBundle\n::\ngetErrorCode\n(\n$r\n))) {\n\nreport_error\n(\n\"Bundle error: \"\n.\nResourceBundle\n::\ngetErrorMessage\n(\n$r\n));\n}\n?>"
  },
  {
    "input": "Example #1 resourcebundle_locales() example",
    "output": "<?php\n$bundle\n=\n\"/user/share/data/myapp\"\n;\necho\njoin\n(\nPHP_EOL\n,\nresourcebundle_locales\n(\n$bundle\n));\n?>"
  },
  {
    "input": "Example #2 OO example",
    "output": "<?php\n$bundle\n=\n\"/usr/share/data/myapp\"\n;\n$r\n= new\nResourceBundle\n(\n'es'\n,\n$bundle\n);\necho\njoin\n(\n\"\\n\"\n,\n$r\n->\ngetLocales\n(\n$bundle\n));\n?>"
  },
  {
    "input": "Example #1 Spoofchecker::areConfusable() example",
    "output": "<?php\n$checker\n= new\nSpoofchecker\n();\n$checker\n->\nareConfusable\n(\n'google.com'\n,\n'goog1e.com'\n);\n// true\n// Lower l can be confused with digit one\n$checker\n->\nareConfusable\n(\n'google.com'\n,\n'g00g1e.com'\n);\n// false\n// Zero (0) cannot be easily confused with \"o\" letter"
  },
  {
    "input": "Example #1 Spoofchecker::isSuspicious() example",
    "output": "<?php\n$checker\n= new\nSpoofchecker\n();\n$checker\n->\nisSuspicious\n(\n'google.com'\n);\n// FALSE: only ASCII characters\n$checker\n->\nisSuspicious\n(\n'Рaypal.com'\n);\n// TRUE\n// The first letter is from Cyrylic, not a regular latin \"P\""
  },
  {
    "input": "Example #1 Retrieving the registered transliterator IDs",
    "output": "<?php\nprint_r\n(\nTransliterator\n::\nlistIDs\n());\n?>"
  },
  {
    "input": "Example #1 Converting escaped UTF-16 code units",
    "output": "<?php\n$s\n=\n\"\\u304A\\u65E9\\u3046\\u3054\\u3056\\u3044\\u307E\\u3059\"\n;\necho\ntransliterator_transliterate\n(\n\"Hex-Any/Java\"\n,\n$s\n),\n\"\\n\"\n;\n//now the reverse operation with a supplementary character\n$supplChar\n=\nhtml_entity_decode\n(\n'&#x1D11E;'\n);\necho\nmb_strlen\n(\n$supplChar\n,\n\"UTF-8\"\n),\n\"\\n\"\n;\n$encSupplChar\n=\ntransliterator_transliterate\n(\n\"Any-Hex/Java\"\n,\n$supplChar\n);\n//echoes two encoded UTF-16 code units\necho\n$encSupplChar\n,\n\"\\n\"\n;\n//and back\necho\ntransliterator_transliterate\n(\n\"Hex-Any/Java\"\n,\n$encSupplChar\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 IntlDatePatternGenerator::getBestPattern() example",
    "output": "<?php\n$skeleton\n=\n'YYYYMMdd'\n;\n$today\n=\n\\DateTimeImmutable\n::\ncreateFromFormat\n(\n'Y-m-d'\n,\n'2021-04-24'\n);\n\n$patternGenerator\n= new\n\\IntlDatePatternGenerator\n(\n'de_DE'\n);\n$pattern\n=\n$patternGenerator\n->\ngetBestPattern\n(\n$skeleton\n);\necho\n'de: '\n,\n\\IntlDateFormatter\n::\nformatObject\n(\n$today\n,\n$pattern\n,\n'de_DE'\n),\n\"\\n\"\n;\n\n$patternGenerator\n= new\n\\IntlDatePatternGenerator\n(\n'en_US'\n);\n$pattern\n=\n$patternGenerator\n->\ngetBestPattern\n(\n$skeleton\n);\necho\n'en: '\n,\n\\IntlDateFormatter\n::\nformatObject\n(\n$today\n,\n$pattern\n,\n'en_US'\n);\n?>"
  },
  {
    "input": "Example #1 Converting from UTF-8 to UTF-16 and back",
    "output": "<?php\n$utf8_string\n=\n\"\\x5A\\x6F\\xC3\\xAB\"\n;\n// 'Zoë' in UTF-8\n$utf16_string\n=\nUConverter\n::\ntranscode\n(\n$utf8_string\n,\n'UTF-16BE'\n,\n'UTF-8'\n);\necho\nbin2hex\n(\n$utf16_string\n),\n\"\\n\"\n;\n$new_utf8_string\n=\nUConverter\n::\ntranscode\n(\n$utf16_string\n,\n'UTF-8'\n,\n'UTF-16BE'\n);\necho\nbin2hex\n(\n$new_utf8_string\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 grapheme_extract() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\nurlencode\n(\ngrapheme_extract\n(\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n,\n1\n,\nGRAPHEME_EXTR_COUNT\n,\n2\n));\n?>"
  },
  {
    "input": "Example #1 grapheme_stripos() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd\n=\n\"O\\xCC\\x88\"\n;\n// 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\nprint\ngrapheme_stripos\n(\n$char_a_ring_nfd\n.\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n,\n$char_O_diaeresis_nfd\n);\n?>"
  },
  {
    "input": "Example #1 grapheme_stristr() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd\n=\n\"O\\xCC\\x88\"\n;\n// 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\nprint\nurlencode\n(\ngrapheme_stristr\n(\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n.\n$char_a_ring_nfd\n,\n$char_O_diaeresis_nfd\n));\n?>"
  },
  {
    "input": "Example #1 grapheme_strlen() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\ngrapheme_strlen\n(\n'abc'\n.\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n.\n$char_a_ring_nfd\n);\n?>"
  },
  {
    "input": "Example #1 grapheme_strpos() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\ngrapheme_strpos\n(\n$char_a_ring_nfd\n.\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n,\n$char_o_diaeresis_nfd\n);\n?>"
  },
  {
    "input": "Example #1 grapheme_strripos() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd\n=\n\"O\\xCC\\x88\"\n;\n// 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\nprint\ngrapheme_strripos\n(\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n.\n$char_o_diaeresis_nfd\n,\n$char_O_diaeresis_nfd\n);\n?>"
  },
  {
    "input": "Example #1 grapheme_strrpos() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\ngrapheme_strrpos\n(\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n.\n$char_o_diaeresis_nfd\n,\n$char_o_diaeresis_nfd\n);\n?>"
  },
  {
    "input": "Example #1 grapheme_strstr() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\nurlencode\n(\ngrapheme_stristr\n(\n$char_a_ring_nfd\n.\n$char_o_diaeresis_nfd\n.\n$char_a_ring_nfd\n,\n$char_o_diaeresis_nfd\n));\n?>"
  },
  {
    "input": "Example #1 grapheme_substr() example",
    "output": "<?php\n$char_a_ring_nfd\n=\n\"a\\xCC\\x8A\"\n;\n// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd\n=\n\"o\\xCC\\x88\"\n;\n// 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\nprint\nurlencode\n(\ngrapheme_substr\n(\n\"ao\"\n.\n$char_a_ring_nfd\n.\n\"bc\"\n.\n$char_o_diaeresis_nfd\n.\n\"O\"\n,\n2\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 idn_to_ascii() example",
    "output": "<?php\necho\nidn_to_ascii\n(\n'täst.de'\n);\n?>"
  },
  {
    "input": "Example #1 idn_to_utf8() example",
    "output": "<?php\necho\nidn_to_utf8\n(\n'xn--tst-qla.de'\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharage\n(\n\"\\u{2603}\"\n));\nvar_dump\n(\nIntlChar\n::\ncharage\n(\n\"\\u{1F576}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharDigitValue\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\ncharDigitValue\n(\n\"\\u{0662}\"\n));\nvar_dump\n(\nIntlChar\n::\ncharDigitValue\n(\n\"\\u{0E53}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharDirection\n(\n\"A\"\n) ===\nIntlChar\n::\nCHAR_DIRECTION_LEFT_TO_RIGHT\n);\nvar_dump\n(\nIntlChar\n::\ncharDirection\n(\n\"\\u{05E9}\"\n) ===\nIntlChar\n::\nCHAR_DIRECTION_RIGHT_TO_LEFT\n);\nvar_dump\n(\nIntlChar\n::\ncharDirection\n(\n\"+\"\n) ===\nIntlChar\n::\nCHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR\n);\nvar_dump\n(\nIntlChar\n::\ncharDirection\n(\n\".\"\n) ===\nIntlChar\n::\nCHAR_DIRECTION_COMMON_NUMBER_SEPARATOR\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharFromName\n(\n\"LATIN CAPITAL LETTER A\"\n));\nvar_dump\n(\nIntlChar\n::\ncharFromName\n(\n\"SNOWMAN\"\n));\nvar_dump\n(\nIntlChar\n::\ncharFromName\n(\n\"RECYCLING SYMBOL FOR TYPE-1 PLASTICS\"\n));\nvar_dump\n(\nIntlChar\n::\ncharFromName\n(\n\"A RANDOM STRING WHICH DOESN'T CORRESPOND TO ANY UNICODE CHARACTER\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharMirror\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\ncharMirror\n(\n\"<\"\n));\nvar_dump\n(\nIntlChar\n::\ncharMirror\n(\n\"(\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharName\n(\n\".\"\n));\nvar_dump\n(\nIntlChar\n::\ncharName\n(\n\".\"\n,\nIntlChar\n::\nUNICODE_CHAR_NAME\n));\nvar_dump\n(\nIntlChar\n::\ncharName\n(\n\"\\u{2603}\"\n));\nvar_dump\n(\nIntlChar\n::\ncharName\n(\n\"\\u{0000}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ncharType\n(\n\"A\"\n) ===\nIntlChar\n::\nCHAR_CATEGORY_UPPERCASE_LETTER\n);\nvar_dump\n(\nIntlChar\n::\ncharType\n(\n\".\"\n) ===\nIntlChar\n::\nCHAR_CATEGORY_OTHER_PUNCTUATION\n);\nvar_dump\n(\nIntlChar\n::\ncharType\n(\n\"\\t\"\n) ===\nIntlChar\n::\nCHAR_CATEGORY_CONTROL_CHAR\n);\nvar_dump\n(\nIntlChar\n::\ncharType\n(\n\"\\u{2603}\"\n) ===\nIntlChar\n::\nCHAR_CATEGORY_OTHER_SYMBOL\n);\nvar_dump\n(\nIntlChar\n::\ncharType\n(\n\"multiple chars\"\n) ===\nnull\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\n$values\n= [\n\"A\"\n,\n63\n,\n123\n,\n9731\n];\nforeach (\n$values\nas\n$value\n) {\n\nvar_dump\n(\nIntlChar\n::\nchr\n(\n$value\n));\n}\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ndigit\n(\n\"0\"\n));\nvar_dump\n(\nIntlChar\n::\ndigit\n(\n\"3\"\n));\nvar_dump\n(\nIntlChar\n::\ndigit\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\ndigit\n(\n\"A\"\n,\n16\n));\n?>"
  },
  {
    "input": "Example #1 Enumerating over a sample range of code points",
    "output": "<?php\nIntlChar\n::\nenumCharNames\n(\n0x2600\n,\n0x2610\n, function(\n$codepoint\n,\n$nameChoice\n,\n$name\n) {\n\nprintf\n(\n\"U+%04x %s\\n\"\n,\n$codepoint\n,\n$name\n);\n});\n?>"
  },
  {
    "input": "Example #1 Enumerating over a sample range of code points",
    "output": "<?php\nIntlChar\n::\nenumCharTypes\n(function(\n$start\n,\n$end\n,\n$type\n) {\n\nprintf\n(\n\"U+%04x through U+%04x are in category %d\\n\"\n,\n$start\n,\n$end\n,\n$type\n);\n});\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nforDigit\n(\n0\n));\nvar_dump\n(\nIntlChar\n::\nforDigit\n(\n3\n));\nvar_dump\n(\nIntlChar\n::\nforDigit\n(\n3\n,\n10\n));\nvar_dump\n(\nIntlChar\n::\nforDigit\n(\n10\n));\nvar_dump\n(\nIntlChar\n::\nforDigit\n(\n10\n,\n16\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetBidiPairedBracket\n(\n91\n));\nvar_dump\n(\nIntlChar\n::\ngetBidiPairedBracket\n(\n'['\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetBlockCode\n(\n\"A\"\n) ===\nIntlChar\n::\nBLOCK_CODE_BASIC_LATIN\n);\nvar_dump\n(\nIntlChar\n::\ngetBlockCode\n(\n\"Φ\"\n) ===\nIntlChar\n::\nBLOCK_CODE_GREEK\n);\nvar_dump\n(\nIntlChar\n::\ngetBlockCode\n(\n\"\\u{2603}\"\n) ===\nIntlChar\n::\nBLOCK_CODE_MISCELLANEOUS_SYMBOLS\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetCombiningClass\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\ngetCombiningClass\n(\n\"\\u{0334}\"\n));\nvar_dump\n(\nIntlChar\n::\ngetCombiningClass\n(\n\"\\u{0358}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetFC_NFKC_Closure\n(\n\"\\u{2121}\"\n));\nvar_dump\n(\nIntlChar\n::\ngetFC_NFKC_Closure\n(\n\"\\u{1D2D}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMaxValue\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMaxValue\n(\nIntlChar\n::\nPROPERTY_SCRIPT\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMaxValue\n(\nIntlChar\n::\nPROPERTY_IDEOGRAPHIC\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMaxValue\n(\n999999999\n));\n// Some made-up value\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMinValue\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMinValue\n(\nIntlChar\n::\nPROPERTY_SCRIPT\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMinValue\n(\nIntlChar\n::\nPROPERTY_IDEOGRAPHIC\n));\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyMinValue\n(\n999999999\n));\n// Some made-up value\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyValue\n(\n\"A\"\n,\nIntlChar\n::\nPROPERTY_ALPHABETIC\n) ===\n1\n);\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyValue\n(\n\"[\"\n,\nIntlChar\n::\nPROPERTY_BIDI_MIRRORED\n) ===\n1\n);\nvar_dump\n(\nIntlChar\n::\ngetIntPropertyValue\n(\n\"Φ\"\n,\nIntlChar\n::\nPROPERTY_BLOCK\n) ===\nIntlChar\n::\nBLOCK_CODE_GREEK\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetNumericValue\n(\n\"4\"\n));\nvar_dump\n(\nIntlChar\n::\ngetNumericValue\n(\n\"x\"\n));\nvar_dump\n(\nIntlChar\n::\ngetNumericValue\n(\n\"\\u{216C}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetPropertyEnum\n(\n'Bidi_Class'\n) ===\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyEnum\n(\n'script'\n) ===\nIntlChar\n::\nPROPERTY_SCRIPT\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyEnum\n(\n'IDEOGRAPHIC'\n) ===\nIntlChar\n::\nPROPERTY_IDEOGRAPHIC\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyEnum\n(\n'Some made-up string'\n) ===\nIntlChar\n::\nPROPERTY_INVALID_CODE\n);\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetPropertyName\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyName\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n,\nIntlChar\n::\nSHORT_PROPERTY_NAME\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyName\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n,\nIntlChar\n::\nLONG_PROPERTY_NAME\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyName\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n,\nIntlChar\n::\nLONG_PROPERTY_NAME\n+\n1\n));\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueEnum\n(\nIntlChar\n::\nPROPERTY_BLOCK\n,\n'greek'\n) ===\nIntlChar\n::\nBLOCK_CODE_GREEK\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueEnum\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n,\n'RIGHT_TO_LEFT'\n) ===\nIntlChar\n::\nCHAR_DIRECTION_RIGHT_TO_LEFT\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueEnum\n(\nIntlChar\n::\nPROPERTY_BIDI_CLASS\n,\n'some made-up string'\n) ===\nIntlChar\n::\nPROPERTY_INVALID_CODE\n);\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueEnum\n(\n123456789\n,\n'RIGHT_TO_LEFT'\n) ===\nIntlChar\n::\nPROPERTY_INVALID_CODE\n);\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueName\n(\nIntlChar\n::\nPROPERTY_BLOCK\n,\nIntlChar\n::\nBLOCK_CODE_GREEK\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueName\n(\nIntlChar\n::\nPROPERTY_BLOCK\n,\nIntlChar\n::\nBLOCK_CODE_GREEK\n,\nIntlChar\n::\nSHORT_PROPERTY_NAME\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueName\n(\nIntlChar\n::\nPROPERTY_BLOCK\n,\nIntlChar\n::\nBLOCK_CODE_GREEK\n,\nIntlChar\n::\nLONG_PROPERTY_NAME\n));\nvar_dump\n(\nIntlChar\n::\ngetPropertyValueName\n(\nIntlChar\n::\nPROPERTY_BLOCK\n,\nIntlChar\n::\nBLOCK_CODE_GREEK\n,\nIntlChar\n::\nLONG_PROPERTY_NAME\n+\n1\n));\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ngetUnicodeVersion\n());\n?>"
  },
  {
    "input": "Example #1 Testing different properties",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"A\"\n,\nIntlChar\n::\nPROPERTY_ALPHABETIC\n));\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"A\"\n,\nIntlChar\n::\nPROPERTY_CASE_SENSITIVE\n));\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"A\"\n,\nIntlChar\n::\nPROPERTY_BIDI_MIRRORED\n));\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"[\"\n,\nIntlChar\n::\nPROPERTY_ALPHABETIC\n));\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"[\"\n,\nIntlChar\n::\nPROPERTY_CASE_SENSITIVE\n));\nvar_dump\n(\nIntlChar\n::\nhasBinaryProperty\n(\n\"[\"\n,\nIntlChar\n::\nPROPERTY_BIDI_MIRRORED\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisalnum\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisalnum\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisalnum\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisalpha\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisalpha\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisalpha\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisbase\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisbase\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisbase\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisblank\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisblank\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisblank\n(\n\"\\t\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\niscntrl\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\niscntrl\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\niscntrl\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\niscntrl\n(\n\"\\u{200e}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisdefined\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisdefined\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisdefined\n(\n\"\\u{FDD0}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisdigit\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisdigit\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisdigit\n(\n\"\\t\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisgraph\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisgraph\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisgraph\n(\n\"\\u{2603}\"\n));\nvar_dump\n(\nIntlChar\n::\nisgraph\n(\n\"\\n\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisIDIgnorable\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDIgnorable\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisIDIgnorable\n(\n\"\\u{007F}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisIDPart\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDPart\n(\n\"$\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDPart\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDPart\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisIDStart\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDStart\n(\n\"$\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDStart\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisIDStart\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisISOControl\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisISOControl\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisISOControl\n(\n\"\\u{200e}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisJavaIDPart\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDPart\n(\n\"$\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDPart\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDPart\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisJavaIDStart\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDStart\n(\n\"$\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDStart\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaIDStart\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisJavaSpaceChar\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaSpaceChar\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaSpaceChar\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaSpaceChar\n(\n\"\\t\"\n));\nvar_dump\n(\nIntlChar\n::\nisJavaSpaceChar\n(\n\"\\u{00A0}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nislower\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nislower\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\nislower\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\nislower\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\nislower\n(\n\"1\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisMirrored\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisMirrored\n(\n\"<\"\n));\nvar_dump\n(\nIntlChar\n::\nisMirrored\n(\n\"(\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisprint\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisprint\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisprint\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisprint\n(\n\"\\u{200e}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nispunct\n(\n\".\"\n));\nvar_dump\n(\nIntlChar\n::\nispunct\n(\n\",\"\n));\nvar_dump\n(\nIntlChar\n::\nispunct\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nispunct\n(\n\"$\"\n));"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisspace\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisspace\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisspace\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisspace\n(\n\"\\t\"\n));\nvar_dump\n(\nIntlChar\n::\nisspace\n(\n\"\\u{00A0}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\n// Latin Capital Letter Dz with Caron U+01C4\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"Ǆ\"\n));\n// Latin Capital Letter D with Small Letter Z with Caron U+01C5\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"ǅ\"\n));\n// Latin Small Letter Dz with Caron U+01C6\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"ǆ\"\n));\n// Greek Capital Letter Alpha with Prosgegrammeni U+1FBC\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"ᾼ\"\n));\n// Greek Small Letter Alpha with Ypogegrammeni U+1FB3\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"ᾳ\"\n));\n// Greek Capital Letter Alpha U+0391\nvar_dump\n(\nIntlChar\n::\nistitle\n(\n\"Α\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisUAlphabetic\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisUAlphabetic\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisUAlphabetic\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisULowercase\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisULowercase\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\nisULowercase\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisULowercase\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisULowercase\n(\n\"1\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisupper\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisupper\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\nisupper\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisupper\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisupper\n(\n\"1\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisUUppercase\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisUUppercase\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\nisUUppercase\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisUUppercase\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\nisUUppercase\n(\n\"1\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisUWhiteSpace\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisUWhiteSpace\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nisUWhiteSpace\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\nisUWhiteSpace\n(\n\"\\t\"\n));\nvar_dump\n(\nIntlChar\n::\nisUWhiteSpace\n(\n\"\\u{00A0}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\niswhitespace\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\niswhitespace\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\niswhitespace\n(\n\"\\n\"\n));\nvar_dump\n(\nIntlChar\n::\niswhitespace\n(\n\"\\t\"\n));\nvar_dump\n(\nIntlChar\n::\niswhitespace\n(\n\"\\u{00A0}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nisxdigit\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nisxdigit\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\nisxdigit\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\nord\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\nord\n(\n\" \"\n));\nvar_dump\n(\nIntlChar\n::\nord\n(\n\"\\u{2603}\"\n));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ntolower\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\nord\n(\n\"A\"\n)));\nvar_dump\n(\nIntlChar\n::\ntolower\n(\nord\n(\n\"a\"\n)));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"Ǆ\"\n));\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"ǆ\"\n));\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\n\"ᾳ\"\n);\nvar_dump\n(\nIntlChar\n::\ntotitle\n(\nord\n(\n\"A\"\n)));\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\n\"A\"\n));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\n\"a\"\n));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\n\"Φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\n\"φ\"\n));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\n\"1\"\n));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\nord\n(\n\"A\"\n)));\nvar_dump\n(\nIntlChar\n::\ntoupper\n(\nord\n(\n\"a\"\n)));\n?>"
  },
  {
    "input": "Example #1 intl_error_name() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'en_RU'\n);\n$err_code\n=\ncollator_get_error_code\n(\n$coll\n);\nprintf\n(\n\"Symbolic name for %d is %s\\n.\"\n,\n$err_code\n,\nintl_error_name\n(\n$err_code\n) );\n?>"
  },
  {
    "input": "Example #1 intl_get_error_code() example",
    "output": "<?php\n$coll\n=\ncollator_create\n(\n'<bad_param>'\n);\nif( !\n$coll\n) {\n\nhandle_error\n(\nintl_get_error_code\n() );\n}\n?>"
  },
  {
    "input": "Example #1 intl_get_error_message() example",
    "output": "<?php\nif(\nCollator\n::\ngetAvailableLocales\n() ===\nfalse\n) {\n\nshow_error\n(\nintl_get_error_message\n() );\n}\n?>"
  },
  {
    "input": "Example #1 intl_is_failure() example",
    "output": "<?php\nfunction\ncheck\n(\n$err_code\n)\n{\n\nvar_export\n(\nintl_is_failure\n(\n$err_code\n) );\n    echo\n\"\\n\"\n;\n}\ncheck\n(\nU_ZERO_ERROR\n);\ncheck\n(\nU_USING_FALLBACK_WARNING\n);\ncheck\n(\nU_ILLEGAL_ARGUMENT_ERROR\n);\n?>"
  },
  {
    "input": "Example #3 Script example",
    "output": "<?php\n// Enable output character encoding conversion only for this page\n// Set HTTP output character encoding to SJIS\nmb_http_output\n(\n'SJIS'\n);\n// Start buffering and specify \"mb_output_handler\" as\n// callback function\nob_start\n(\n'mb_output_handler'\n);\n?>"
  },
  {
    "input": "Example #1 Testing different code points",
    "output": "<?php\n$values\n= [\n65\n,\n63\n,\n0x20AC\n,\n128024\n];\nforeach (\n$values\nas\n$value\n) {\n\nvar_dump\n(\nmb_chr\n(\n$value\n,\n'UTF-8'\n));\n\nvar_dump\n(\nmb_chr\n(\n$value\n,\n'ISO-8859-1'\n));\n}\n?>"
  },
  {
    "input": "Example #1 mb_convert_case() example",
    "output": "<?php\n$str\n=\n\"mary had a Little lamb and she loved it so\"\n;\n$str\n=\nmb_convert_case\n(\n$str\n,\nMB_CASE_UPPER\n,\n\"UTF-8\"\n);\necho\n$str\n;\n// Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\n$str\n=\nmb_convert_case\n(\n$str\n,\nMB_CASE_TITLE\n,\n\"UTF-8\"\n);\necho\n$str\n;\n// Prints Mary Had A Little Lamb And She Loved It So\n?>"
  },
  {
    "input": "Example #2 mb_convert_case() example with non-Latin UTF-8 text",
    "output": "<?php\n$str\n=\n\"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\"\n;\n$str\n=\nmb_convert_case\n(\n$str\n,\nMB_CASE_UPPER\n,\n\"UTF-8\"\n);\necho\n$str\n;\n// Prints ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ, ΔΡΑΣΚΕΛΊΖΕΙ ΥΠΈΡ ΝΩΘΡΟΎ ΚΥΝΌΣ\n$str\n=\nmb_convert_case\n(\n$str\n,\nMB_CASE_TITLE\n,\n\"UTF-8\"\n);\necho\n$str\n;\n// Prints Τάχιστη Αλώπηξ Βαφήσ Ψημένη Γη, Δρασκελίζει Υπέρ Νωθρού Κυνόσ\n?>"
  },
  {
    "input": "Example #1 mb_convert_encoding() example",
    "output": "<?php\n/* Convert internal character encoding to SJIS */\n$str\n=\nmb_convert_encoding\n(\n$str\n,\n\"SJIS\"\n);\n/* Convert EUC-JP to UTF-7 */\n$str\n=\nmb_convert_encoding\n(\n$str\n,\n\"UTF-7\"\n,\n\"EUC-JP\"\n);\n/* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */\n$str\n=\nmb_convert_encoding\n(\n$str\n,\n\"UCS-2LE\"\n,\n\"JIS, eucjp-win, sjis-win\"\n);\n/* If mbstring.language is \"Japanese\", \"auto\" is expanded to \"ASCII,JIS,UTF-8,EUC-JP,SJIS\" */\n$str\n=\nmb_convert_encoding\n(\n$str\n,\n\"EUC-JP\"\n,\n\"auto\"\n);\n?>"
  },
  {
    "input": "Example #1 mb_convert_kana() example",
    "output": "<?php\n/* Convert all \"kana\" to \"zen-kaku\" \"kata-kana\" */\n$str\n=\nmb_convert_kana\n(\n$str\n,\n\"KVC\"\n);\n/* Convert \"han-kaku\" \"kata-kana\" to \"zen-kaku\" \"kata-kana\"\n   and \"zen-kaku\" alphanumeric to \"han-kaku\" */\n$str\n=\nmb_convert_kana\n(\n$str\n,\n\"KVa\"\n);\n?>"
  },
  {
    "input": "Example #1 mb_convert_variables() example",
    "output": "<?php\n/* Convert variables $post1, $post2 to internal encoding */\n$interenc\n=\nmb_internal_encoding\n();\n$inputenc\n=\nmb_convert_variables\n(\n$interenc\n,\n\"ASCII,UTF-8,SJIS-win\"\n,\n$post1\n,\n$post2\n);\n?>"
  },
  {
    "input": "Example #1 map example",
    "output": "<?php\n$convmap\n= array (\n\nint start_code1\n,\nint end_code1\n,\nint offset1\n,\nint mask1\n,\n\nint start_code2\n,\nint end_code2\n,\nint offset2\n,\nint mask2\n,\n   ........\n\nint start_codeN\n,\nint end_codeN\n,\nint offsetN\n,\nint maskN\n);\n// Specify Unicode value for start_codeN and end_codeN\n// Add offsetN to value and take bit-wise 'AND' with maskN,\n// then convert value to numeric string reference.\n?>"
  },
  {
    "input": "Example #2 map example escapes JavaScript string",
    "output": "<?php\nfunction\nescape_javascript_string\n(\n$str\n) {\n\n$map\n= [\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n0\n,\n0\n,\n// 49\n\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n\n0\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n0\n,\n0\n,\n0\n,\n// 99\n\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n0\n,\n\n0\n,\n0\n,\n0\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n// 149\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n// 199\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n// 249\n\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n// 255\n\n];\n\n// Char encoding is UTF-8\n\n$mblen\n=\nmb_strlen\n(\n$str\n,\n'UTF-8'\n);\n\n$utf32\n=\nbin2hex\n(\nmb_convert_encoding\n(\n$str\n,\n'UTF-32'\n,\n'UTF-8'\n));\n  for (\n$i\n=\n0\n,\n$encoded\n=\n''\n;\n$i\n<\n$mblen\n;\n$i\n++) {\n\n$u\n=\nsubstr\n(\n$utf32\n,\n$i\n*\n8\n,\n8\n);\n\n$v\n=\nbase_convert\n(\n$u\n,\n16\n,\n10\n);\n      if (\n$v\n<\n256\n&&\n$map\n[\n$v\n]) {\n\n$encoded\n.=\n'\\\\x'\n.\nsubstr\n(\n$u\n,\n6\n,\n2\n);\n      } else if (\n$v\n==\n2028\n) {\n\n$encoded\n.=\n'\\\\u2028'\n;\n      } else if (\n$v\n==\n2029\n) {\n\n$encoded\n.=\n'\\\\u2029'\n;\n      } else {\n\n$encoded\n.=\nmb_convert_encoding\n(\nhex2bin\n(\n$u\n),\n'UTF-8'\n,\n'UTF-32'\n);\n      }\n   }\n   return\n$encoded\n;\n}\n\n// Test data\n$convmap\n= [\n0x0\n,\n0xffff\n,\n0\n,\n0xffff\n];\n$msg\n=\n''\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n1000\n;\n$i\n++) {\n\n// chr() cannot generate correct UTF-8 data larger value than 128, use mb_decode_numericentity().\n\n$msg\n.=\nmb_decode_numericentity\n(\n'&#'\n.\n$i\n.\n';'\n,\n$convmap\n,\n'UTF-8'\n);\n}\n\n// var_dump($msg);\nvar_dump\n(\nescape_javascript_string\n(\n$msg\n));"
  },
  {
    "input": "Example #1 mb_detect_encoding() example",
    "output": "<?php\n// Detect character encoding with current detect_order\necho\nmb_detect_encoding\n(\n$str\n);\n// \"auto\" is expanded according to mbstring.language\necho\nmb_detect_encoding\n(\n$str\n,\n\"auto\"\n);\n// Specify \"encodings\" parameter by list separated by comma\necho\nmb_detect_encoding\n(\n$str\n,\n\"JIS, eucjp-win, sjis-win\"\n);\n// Use array to specify \"encodings\" parameter\n$encodings\n= [\n\n\"ASCII\"\n,\n\n\"JIS\"\n,\n\n\"EUC-JP\"\n];\necho\nmb_detect_encoding\n(\n$str\n,\n$encodings\n);\n?>"
  },
  {
    "input": "Example #2 Effect of strict parameter",
    "output": "<?php\n// 'áéóú' encoded in ISO-8859-1\n$str\n=\n\"\\xE1\\xE9\\xF3\\xFA\"\n;\n// The string is not valid ASCII or UTF-8, but UTF-8 is considered a closer match\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ASCII'\n,\n'UTF-8'\n],\nfalse\n));\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ASCII'\n,\n'UTF-8'\n],\ntrue\n));\n// If a valid encoding is found, the strict parameter does not change the result\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ASCII'\n,\n'UTF-8'\n,\n'ISO-8859-1'\n],\nfalse\n));\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ASCII'\n,\n'UTF-8'\n,\n'ISO-8859-1'\n],\ntrue\n));\n?>"
  },
  {
    "input": "Example #3 Effect of order when multiple encodings match",
    "output": "<?php\n$str\n=\n\"\\xC4\\xA2\"\n;\n// The string is valid in all three encodings, so the first one listed will be returned\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'UTF-8'\n,\n'ISO-8859-1'\n,\n'ISO-8859-5'\n]));\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ISO-8859-1'\n,\n'ISO-8859-5'\n,\n'UTF-8'\n]));\nvar_dump\n(\nmb_detect_encoding\n(\n$str\n, [\n'ISO-8859-5'\n,\n'UTF-8'\n,\n'ISO-8859-1'\n]));\n?>"
  },
  {
    "input": "Example #1 mb_detect_order() examples",
    "output": "<?php\n/* Set detection order by enumerated list */\nmb_detect_order\n(\n\"eucjp-win,sjis-win,UTF-8\"\n);\n/* Set detection order by array */\n$ary\n[] =\n\"ASCII\"\n;\n$ary\n[] =\n\"JIS\"\n;\n$ary\n[] =\n\"EUC-JP\"\n;\nmb_detect_order\n(\n$ary\n);\n/* Display current detection order */\necho\nimplode\n(\n\", \"\n,\nmb_detect_order\n());\n?>"
  },
  {
    "input": "Example #1 mb_encode_mimeheader() example",
    "output": "<?php\n$name\n=\n\"太郎\"\n;\n// kanji\n$mbox\n=\n\"kru\"\n;\n$doma\n=\n\"gtinn.mon\"\n;\n$addr\n=\n'\"'\n.\naddcslashes\n(\nmb_encode_mimeheader\n(\n$name\n,\n\"UTF-7\"\n,\n\"Q\"\n),\n'\"'\n) .\n'\" <'\n.\n$mbox\n.\n\"@\"\n.\n$doma\n.\n\">\"\n;\necho\n$addr\n;\n?>"
  },
  {
    "input": "Example #1 map example",
    "output": "<?php\n$convmap\n= array (\n\nint start_code1\n,\nint end_code1\n,\nint offset1\n,\nint mask1\n,\n\nint start_code2\n,\nint end_code2\n,\nint offset2\n,\nint mask2\n,\n ........\n\nint start_codeN\n,\nint end_codeN\n,\nint offsetN\n,\nint maskN\n);\n// Specify Unicode value for start_codeN and end_codeN\n// Add offsetN to value and take bit-wise 'AND' with maskN, then\n// it converts value to numeric string reference.\n?>"
  },
  {
    "input": "Example #2 mb_encode_numericentity() example",
    "output": "<?php\n/* Convert Left side of ISO-8859-1 to HTML numeric character reference */\n$convmap\n= array(\n0x80\n,\n0xff\n,\n0\n,\n0xff\n);\n$str\n=\nmb_encode_numericentity\n(\n$str\n,\n$convmap\n,\n\"ISO-8859-1\"\n);\n/* Convert user defined SJIS-win code in block 95-104 to numeric\n   string reference */\n$convmap\n= array(\n\n0xe000\n,\n0xe03e\n,\n0x1040\n,\n0xffff\n,\n\n0xe03f\n,\n0xe0bb\n,\n0x1041\n,\n0xffff\n,\n\n0xe0bc\n,\n0xe0fa\n,\n0x1084\n,\n0xffff\n,\n\n0xe0fb\n,\n0xe177\n,\n0x1085\n,\n0xffff\n,\n\n0xe178\n,\n0xe1b6\n,\n0x10c8\n,\n0xffff\n,\n\n0xe1b7\n,\n0xe233\n,\n0x10c9\n,\n0xffff\n,\n\n0xe234\n,\n0xe272\n,\n0x110c\n,\n0xffff\n,\n\n0xe273\n,\n0xe2ef\n,\n0x110d\n,\n0xffff\n,\n\n0xe2f0\n,\n0xe32e\n,\n0x1150\n,\n0xffff\n,\n\n0xe32f\n,\n0xe3ab\n,\n0x1151\n,\n0xffff\n);\n$str\n=\nmb_encode_numericentity\n(\n$str\n,\n$convmap\n,\n\"sjis-win\"\n);\n?>"
  },
  {
    "input": "Example #1 mb_encoding_aliases() example",
    "output": "<?php\n$encoding\n=\n'ASCII'\n;\n$known_encodings\n=\nmb_list_encodings\n();\nif (\nin_array\n(\n$encoding\n,\n$known_encodings\n)) {\n\n$aliases\n=\nmb_encoding_aliases\n(\n$encoding\n);\n\nprint_r\n(\n$aliases\n);\n} else {\n    echo\n\"Unknown (\n$encoding\n) encoding.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 mb_ereg_replace_callback() example",
    "output": "<?php\n// this text was used in 2002\n// we want to get this up to date for 2003\n$text\n=\n\"April fools day is 04/01/2002\\n\"\n;\n$text\n.=\n\"Last christmas was 12/24/2001\\n\"\n;\n// the callback function\nfunction\nnext_year\n(\n$matches\n)\n{\n\n// as usual: $matches[0] is the complete match\n  // $matches[1] the match for the first subpattern\n  // enclosed in '(...)' and so on\n\nreturn\n$matches\n[\n1\n].(\n$matches\n[\n2\n]+\n1\n);\n}\necho\nmb_ereg_replace_callback\n(\n\n\"(\\d{2}/\\d{2}/)(\\d{4})\"\n,\n\n\"next_year\"\n,\n\n$text\n);\n?>"
  },
  {
    "input": "Example #2 mb_ereg_replace_callback() using anonymous function",
    "output": "<?php\n// this text was used in 2002\n// we want to get this up to date for 2003\n$text\n=\n\"April fools day is 04/01/2002\\n\"\n;\n$text\n.=\n\"Last christmas was 12/24/2001\\n\"\n;\necho\nmb_ereg_replace_callback\n(\n\n\"(\\d{2}/\\d{2}/)(\\d{4})\"\n,\n            function (\n$matches\n) {\n               return\n$matches\n[\n1\n].(\n$matches\n[\n2\n]+\n1\n);\n            },\n\n$text\n);\n?>"
  },
  {
    "input": "Example #1 mb_internal_encoding() example",
    "output": "<?php\n/* Set internal character encoding to UTF-8 */\nmb_internal_encoding\n(\n\"UTF-8\"\n);\n/* Display current internal character encoding */\necho\nmb_internal_encoding\n();\n?>"
  },
  {
    "input": "Example #1 mb_list_encodings() example",
    "output": "<?php\nprint_r\n(\nmb_list_encodings\n());\n?>"
  },
  {
    "input": "Example #1 A basic mb_ord() example",
    "output": "<?php\nvar_dump\n(\nmb_ord\n(\n\"A\"\n,\n\"UTF-8\"\n));\nvar_dump\n(\nmb_ord\n(\n\"🐘\"\n,\n\"UTF-8\"\n));\nvar_dump\n(\nmb_ord\n(\n\"\\x80\"\n,\n\"ISO-8859-1\"\n));\nvar_dump\n(\nmb_ord\n(\n\"\\x80\"\n,\n\"Windows-1252\"\n));\n?>"
  },
  {
    "input": "Example #1 mb_output_handler() example",
    "output": "<?php\nmb_http_output\n(\n\"UTF-8\"\n);\nob_start\n(\n\"mb_output_handler\"\n);\n?>"
  },
  {
    "input": "Example #1 mb_preferred_mime_name() example",
    "output": "<?php\n$outputenc\n=\n\"sjis-win\"\n;\nmb_http_output\n(\n$outputenc\n);\nob_start\n(\n\"mb_output_handler\"\n);\nheader\n(\n\"Content-Type: text/html; charset=\"\n.\nmb_preferred_mime_name\n(\n$outputenc\n));\n?>"
  },
  {
    "input": "Example #1 mb_str_pad() example",
    "output": "<?php\nvar_dump\n(\nmb_str_pad\n(\n'▶▶'\n,\n6\n,\n'❤❓❇'\n,\nSTR_PAD_RIGHT\n));\n// string(18) \"▶▶❤❓❇❤\"\nvar_dump\n(\nmb_str_pad\n(\n'▶▶'\n,\n6\n,\n'❤❓❇'\n,\nSTR_PAD_LEFT\n));\n// string(18) \"❤❓❇❤▶▶\"\nvar_dump\n(\nmb_str_pad\n(\n'▶▶'\n,\n6\n,\n'❤❓❇'\n,\nSTR_PAD_BOTH\n));\n// string(18) \"❤❓▶▶❤❓\"\nvar_dump\n(\nmb_str_pad\n(\n\"🎉\"\n,\n3\n,\n\"祝\"\n,\nSTR_PAD_LEFT\n));\n// string(10) \"祝祝🎉\"\n?>"
  },
  {
    "input": "Example #1 mb_strimwidth() example",
    "output": "<?php\necho\nmb_strimwidth\n(\n\"Hello World\"\n,\n0\n,\n10\n,\n\"...\"\n);\n// output: \"Hello W...\"\n?>"
  },
  {
    "input": "Example #1 mb_strtolower() example",
    "output": "<?php\n$str\n=\n\"Mary Had A Little Lamb and She LOVED It So\"\n;\n$str\n=\nmb_strtolower\n(\n$str\n);\necho\n$str\n;\n// Prints mary had a little lamb and she loved it so\n?>"
  },
  {
    "input": "Example #2 mb_strtolower() example with non-Latin UTF-8 text",
    "output": "<?php\n$str\n=\n\"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\"\n;\n$str\n=\nmb_strtolower\n(\n$str\n,\n'UTF-8'\n);\necho\n$str\n;\n// Prints τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\n?>"
  },
  {
    "input": "Example #1 mb_strtoupper() example",
    "output": "<?php\n$str\n=\n\"Mary Had A Little Lamb and She LOVED It So\"\n;\n$str\n=\nmb_strtoupper\n(\n$str\n);\necho\n$str\n;\n// Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\n?>"
  },
  {
    "input": "Example #2 mb_strtoupper() example with non-Latin UTF-8 text",
    "output": "<?php\n$str\n=\n\"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\"\n;\n$str\n=\nmb_strtoupper\n(\n$str\n,\n'UTF-8'\n);\necho\n$str\n;\n// Prints ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ, ΔΡΑΣΚΕΛΊΖΕΙ ΥΠΈΡ ΝΩΘΡΟΎ ΚΥΝΌΣ\n?>"
  },
  {
    "input": "Example #1 mb_strwidth() example",
    "output": "<?php\nvar_dump\n(\n\nmb_strwidth\n(\n'a'\n),\n// LATIN SMALL LETTER A\n\nmb_strwidth\n(\n\"\\u{ff41}\"\n)\n// FULLWIDTH LATIN SMALL LETTER A\n);\n?>"
  },
  {
    "input": "Example #1 mb_substitute_character() example",
    "output": "<?php\n/* Set with Unicode U+3013 (GETA MARK) */\nmb_substitute_character\n(\n0x3013\n);\n/* Set hex format */\nmb_substitute_character\n(\n\"long\"\n);\n/* Display current setting */\necho\nmb_substitute_character\n();\n?>"
  },
  {
    "input": "Example #1 mb_substr_count() example",
    "output": "<?php\necho\nmb_substr_count\n(\n\"This is a test\"\n,\n\"is\"\n);\n// prints out 2\n?>"
  },
  {
    "input": "Example #1 pspell_add_to_personal()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_add_to_personal\n(\n$pspell\n,\n\"Vlad\"\n);\npspell_save_wordlist\n(\n$pspell\n);\n?>"
  },
  {
    "input": "Example #1 pspell_check() Example",
    "output": "<?php\n$pspell\n=\npspell_new\n(\n\"en\"\n);\nif (\npspell_check\n(\n$pspell\n,\n\"testt\"\n)) {\n    echo\n\"This is a valid spelling\"\n;\n} else {\n    echo\n\"Sorry, wrong spelling\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 pspell_add_to_personal() Example",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_add_to_personal\n(\n$pspell\n,\n\"Vlad\"\n);\npspell_clear_session\n(\n$pspell\n);\npspell_save_wordlist\n(\n$pspell\n);\n//\"Vlad\" will not be saved\n?>"
  },
  {
    "input": "Example #1 pspell_config_create()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\npspell_config_repl\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.repl\"\n);\n$pspell\n=\npspell_new_personal\n(\n$pspell_config\n,\n\"en\"\n);\n?>"
  },
  {
    "input": "Example #1 pspell_config_ignore()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_ignore\n(\n$pspell_config\n,\n5\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_check\n(\n$pspell\n,\n\"abcd\"\n);\n//will not result in an error\n?>"
  },
  {
    "input": "Example #1 pspell_config_mode() Example",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_mode\n(\n$pspell_config\n,\nPSPELL_FAST\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_check\n(\n$pspell\n,\n\"thecat\"\n);\n?>"
  },
  {
    "input": "Example #1 pspell_config_personal()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_check\n(\n$pspell\n,\n\"thecat\"\n);\n?>"
  },
  {
    "input": "Example #1 pspell_config_repl()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\npspell_config_repl\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.repl\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_check\n(\n$pspell\n,\n\"thecat\"\n);\n?>"
  },
  {
    "input": "Example #1 pspell_config_runtogether()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_runtogether\n(\n$pspell_config\n,\ntrue\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_check\n(\n$pspell\n,\n\"thecat\"\n);\n?>"
  },
  {
    "input": "Example #1 pspell_new()",
    "output": "<?php\n$pspell\n=\npspell_new\n(\n\"en\"\n,\n\"\"\n,\n\"\"\n,\n\"\"\n,\n                     (\nPSPELL_FAST\n|\nPSPELL_RUN_TOGETHER\n));\n?>"
  },
  {
    "input": "Example #1 pspell_new_config()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\npspell_config_repl\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.repl\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\n?>"
  },
  {
    "input": "Example #1 pspell_new_personal()",
    "output": "<?php\n$pspell\n=\npspell_new_personal\n(\n\"/var/dictionaries/custom.pws\"\n,\n\n\"en\"\n,\n\"\"\n,\n\"\"\n,\n\"\"\n,\nPSPELL_FAST\n|\nPSPELL_RUN_TOGETHER\n);\n?>"
  },
  {
    "input": "Example #1 pspell_add_to_personal()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/tmp/dicts/newdict\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_add_to_personal\n(\n$pspell\n,\n\"Vlad\"\n);\npspell_save_wordlist\n(\n$pspell\n);\n?>"
  },
  {
    "input": "Example #1 pspell_store_replacement()",
    "output": "<?php\n$pspell_config\n=\npspell_config_create\n(\n\"en\"\n);\npspell_config_personal\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.pws\"\n);\npspell_config_repl\n(\n$pspell_config\n,\n\"/var/dictionaries/custom.repl\"\n);\n$pspell\n=\npspell_new_config\n(\n$pspell_config\n);\npspell_store_replacement\n(\n$pspell\n,\n$misspelled\n,\n$correct\n);\npspell_save_wordlist\n(\n$pspell\n);\n?>"
  },
  {
    "input": "Example #1 pspell_suggest() example",
    "output": "<?php\n$pspell\n=\npspell_new\n(\n\"en\"\n);\nif (!\npspell_check\n(\n$pspell\n,\n\"testt\"\n)) {\n\n$suggestions\n=\npspell_suggest\n(\n$pspell\n,\n\"testt\"\n);\n    foreach (\n$suggestions\nas\n$suggestion\n) {\n        echo\n\"Possible spelling:\n$suggestion\n<br />\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Basic recode_file() example",
    "output": "<?php\n$input\n=\nfopen\n(\n'input.txt'\n,\n'r'\n);\n$output\n=\nfopen\n(\n'output.txt'\n,\n'w'\n);\nrecode_file\n(\n\"us..flat\"\n,\n$input\n,\n$output\n);\n?>"
  },
  {
    "input": "Example #1 Basic recode_string() example",
    "output": "<?php\necho\nrecode_string\n(\n\"us..flat\"\n,\n\"The following character has a diacritical mark: á\"\n);\n?>"
  },
  {
    "input": "Example #1 exif_imagetype() example",
    "output": "<?php\nif (\nexif_imagetype\n(\n'image.gif'\n) !=\nIMAGETYPE_GIF\n) {\n    echo\n'The picture is not a gif'\n;\n}\n?>"
  },
  {
    "input": "Example #1 exif_read_data() example",
    "output": "<?php\necho\n\"test1.jpg:<br />\\n\"\n;\n$exif\n=\nexif_read_data\n(\n'tests/test1.jpg'\n,\n'IFD0'\n);\necho\n$exif\n===\nfalse\n?\n\"No header data found.<br />\\n\"\n:\n\"Image contains headers<br />\\n\"\n;\n$exif\n=\nexif_read_data\n(\n'tests/test2.jpg'\n,\n0\n,\ntrue\n);\necho\n\"test2.jpg:<br />\\n\"\n;\nforeach (\n$exif\nas\n$key\n=>\n$section\n) {\n    foreach (\n$section\nas\n$name\n=>\n$val\n) {\n        echo\n\"\n$key\n.\n$name\n:\n$val\n<br />\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 exif_read_data() with streams available as of PHP 7.2.0",
    "output": "<?php\n// Open a the file, this should be in binary mode\n$fp\n=\nfopen\n(\n'/path/to/image.jpg'\n,\n'rb'\n);\nif (!\n$fp\n) {\n    echo\n'Error: Unable to open image for reading'\n;\n    exit;\n}\n// Attempt to read the exif headers\n$headers\n=\nexif_read_data\n(\n$fp\n);\nif (!\n$headers\n) {\n    echo\n'Error: Unable to read exif headers'\n;\n    exit;\n}\n// Print the 'COMPUTED' headers\necho\n'EXIF Headers:'\n.\nPHP_EOL\n;\nforeach (\n$headers\n[\n'COMPUTED'\n] as\n$header\n=>\n$value\n) {\n\nprintf\n(\n' %s => %s%s'\n,\n$header\n,\n$value\n,\nPHP_EOL\n);\n}\n?>"
  },
  {
    "input": "Example #1 exif_tagname() example",
    "output": "<?php\necho\n\"256: \"\n.\nexif_tagname\n(\n256\n).\nPHP_EOL\n;\necho\n\"257: \"\n.\nexif_tagname\n(\n257\n).\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 exif_thumbnail() example",
    "output": "<?php\n$image\n=\nexif_thumbnail\n(\n'/path/to/image.jpg'\n,\n$width\n,\n$height\n,\n$type\n);\nif (\n$image\n!==\nfalse\n) {\n\nheader\n(\n'Content-type: '\n.\nimage_type_to_mime_type\n(\n$type\n));\n    echo\n$image\n;\n    exit;\n} else {\n\n// no thumbnail available, handle the error here\n\necho\n'No thumbnail available'\n;\n}\n?>"
  },
  {
    "input": "Example #1 PNG creation with PHP",
    "output": "<?php\nheader\n(\n\"Content-type: image/png\"\n);\n$string\n=\n$_GET\n[\n'text'\n];\n$im\n=\nimagecreatefrompng\n(\n\"images/button1.png\"\n);\n$orange\n=\nimagecolorallocate\n(\n$im\n,\n220\n,\n210\n,\n60\n);\n$px\n= (\nimagesx\n(\n$im\n) -\n7.5\n*\nstrlen\n(\n$string\n)) /\n2\n;\nimagestring\n(\n$im\n,\n3\n,\n$px\n,\n9\n,\n$string\n,\n$orange\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Adding watermarks to images using alpha channels",
    "output": "<?php\n// Load the stamp and the photo to apply the watermark to\n$stamp\n=\nimagecreatefrompng\n(\n'stamp.png'\n);\n$im\n=\nimagecreatefromjpeg\n(\n'photo.jpeg'\n);\n// Set the margins for the stamp and get the height/width of the stamp image\n$marge_right\n=\n10\n;\n$marge_bottom\n=\n10\n;\n$sx\n=\nimagesx\n(\n$stamp\n);\n$sy\n=\nimagesy\n(\n$stamp\n);\n// Copy the stamp image onto our photo using the margin offsets and the photo\n// width to calculate positioning of the stamp.\nimagecopy\n(\n$im\n,\n$stamp\n,\nimagesx\n(\n$im\n) -\n$sx\n-\n$marge_right\n,\nimagesy\n(\n$im\n) -\n$sy\n-\n$marge_bottom\n,\n0\n,\n0\n,\nimagesx\n(\n$stamp\n),\nimagesy\n(\n$stamp\n));\n// Output\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Using imagecopymerge() to create a translucent watermark",
    "output": "<?php\n// Load the stamp and the photo to apply the watermark to\n$im\n=\nimagecreatefromjpeg\n(\n'photo.jpeg'\n);\n// First we create our stamp image manually from GD\n$stamp\n=\nimagecreatetruecolor\n(\n100\n,\n70\n);\nimagefilledrectangle\n(\n$stamp\n,\n0\n,\n0\n,\n99\n,\n69\n,\n0x0000FF\n);\nimagefilledrectangle\n(\n$stamp\n,\n9\n,\n9\n,\n90\n,\n60\n,\n0xFFFFFF\n);\nimagestring\n(\n$stamp\n,\n5\n,\n20\n,\n20\n,\n'libGD'\n,\n0x0000FF\n);\nimagestring\n(\n$stamp\n,\n3\n,\n20\n,\n40\n,\n'(c) 2007-9'\n,\n0x0000FF\n);\n// Set the margins for the stamp and get the height/width of the stamp image\n$marge_right\n=\n10\n;\n$marge_bottom\n=\n10\n;\n$sx\n=\nimagesx\n(\n$stamp\n);\n$sy\n=\nimagesy\n(\n$stamp\n);\n// Merge the stamp onto our photo with an opacity of 50%\nimagecopymerge\n(\n$im\n,\n$stamp\n,\nimagesx\n(\n$im\n) -\n$sx\n-\n$marge_right\n,\nimagesy\n(\n$im\n) -\n$sy\n-\n$marge_bottom\n,\n0\n,\n0\n,\nimagesx\n(\n$stamp\n),\nimagesy\n(\n$stamp\n),\n50\n);\n// Save the image to file\nimagepng\n(\n$im\n,\n'photo_stamp.png'\n);\n?>"
  },
  {
    "input": "Example #1 Using gd_info()",
    "output": "<?php\nvar_dump\n(\ngd_info\n());\n?>"
  },
  {
    "input": "Example #1 getimagesize() and MIME types",
    "output": "<?php\n$size\n=\ngetimagesize\n(\n$filename\n);\n$fp\n=\nfopen\n(\n$filename\n,\n\"rb\"\n);\nif (\n$size\n&&\n$fp\n) {\n\nheader\n(\n\"Content-type:\n{\n$size\n[\n'mime'\n]}\n\"\n);\n\nfpassthru\n(\n$fp\n);\n    exit;\n} else {\n\n// error\n}\n?>"
  },
  {
    "input": "Example #2 getimagesize() example",
    "output": "<?php\nlist(\n$width\n,\n$height\n,\n$type\n,\n$attr\n) =\ngetimagesize\n(\n\"img/flag.jpg\"\n);\necho\n\"<img src=\\\"img/flag.jpg\\\"\n$attr\n alt=\\\"getimagesize() example\\\" />\"\n;\n?>"
  },
  {
    "input": "Example #3 getimagesize (URL)",
    "output": "<?php\n$size\n=\ngetimagesize\n(\n\"http://www.example.com/gifs/logo.gif\"\n);\n// if the file name has space in it, encode it properly\n$size\n=\ngetimagesize\n(\n\"http://www.example.com/gifs/lo%20go.gif\"\n);\n?>"
  },
  {
    "input": "Example #4 getimagesize() returning IPTC",
    "output": "<?php\n$size\n=\ngetimagesize\n(\n\"testimg.jpg\"\n,\n$info\n);\nif (isset(\n$info\n[\n\"APP13\"\n])) {\n\n$iptc\n=\niptcparse\n(\n$info\n[\n\"APP13\"\n]);\n\nvar_dump\n(\n$iptc\n);\n}\n?>"
  },
  {
    "input": "Example #1 getimagesizefromstring() example",
    "output": "<?php\n$img\n=\n'/path/to/test.png'\n;\n// Open as a file\n$size_info1\n=\ngetimagesize\n(\n$img\n);\n// Or open as a string\n$data\n=\nfile_get_contents\n(\n$img\n);\n$size_info2\n=\ngetimagesizefromstring\n(\n$data\n);\n?>"
  },
  {
    "input": "Example #1 image_type_to_extension() example",
    "output": "<?php\n// Create image instance\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Save image\nimagepng\n(\n$im\n,\n'./test'\n.\nimage_type_to_extension\n(\nIMAGETYPE_PNG\n));\n?>"
  },
  {
    "input": "Example #1 image_type_to_mime_type() example",
    "output": "<?php\nheader\n(\n\"Content-type: \"\n.\nimage_type_to_mime_type\n(\nIMAGETYPE_PNG\n));\n?>"
  },
  {
    "input": "Example #1 image2wbmp() example",
    "output": "<?php\n$file\n=\n'php.png'\n;\n$image\n=\nimagecreatefrompng\n(\n$file\n);\nheader\n(\n'Content-Type: '\n.\nimage_type_to_mime_type\n(\nIMAGETYPE_WBMP\n));\nimage2wbmp\n(\n$image\n);\n// output the stream directly\n?>"
  },
  {
    "input": "Example #1 imageaffinematrixconcat() example",
    "output": "<?php\n$m1\n=\nimageaffinematrixget\n(\nIMG_AFFINE_TRANSLATE\n, array(\n'x'\n=>\n2\n,\n'y'\n=>\n3\n));\n$m2\n=\nimageaffinematrixget\n(\nIMG_AFFINE_SCALE\n, array(\n'x'\n=>\n4\n,\n'y'\n=>\n5\n));\n$matrix\n=\nimageaffinematrixconcat\n(\n$m1\n,\n$m2\n);\nprint_r\n(\n$matrix\n);\n?>"
  },
  {
    "input": "Example #1 imageaffinematrixget() example",
    "output": "<?php\n$matrix\n=\nimageaffinematrixget\n(\nIMG_AFFINE_TRANSLATE\n, array(\n'x'\n=>\n2\n,\n'y'\n=>\n3\n));\nprint_r\n(\n$matrix\n);\n?>"
  },
  {
    "input": "Example #1 imagealphablending() usage example",
    "output": "<?php\n// Create image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Set alphablending to on\nimagealphablending\n(\n$im\n,\ntrue\n);\n// Draw a square\nimagefilledrectangle\n(\n$im\n,\n30\n,\n30\n,\n70\n,\n70\n,\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n));\n// Output\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 A comparison of two lines, one with anti-aliasing switched on",
    "output": "<?php\n// Setup an anti-aliased image and a normal image\n$aa\n=\nimagecreatetruecolor\n(\n400\n,\n100\n);\n$normal\n=\nimagecreatetruecolor\n(\n200\n,\n100\n);\n// Switch antialiasing on for one image\nimageantialias\n(\n$aa\n,\ntrue\n);\n// Allocate colors\n$red\n=\nimagecolorallocate\n(\n$normal\n,\n255\n,\n0\n,\n0\n);\n$red_aa\n=\nimagecolorallocate\n(\n$aa\n,\n255\n,\n0\n,\n0\n);\n// Draw two lines, one with AA enabled\nimageline\n(\n$normal\n,\n0\n,\n0\n,\n200\n,\n100\n,\n$red\n);\nimageline\n(\n$aa\n,\n0\n,\n0\n,\n200\n,\n100\n,\n$red_aa\n);\n// Merge the two images side by side for output (AA: left, Normal: Right)\nimagecopymerge\n(\n$aa\n,\n$normal\n,\n200\n,\n0\n,\n0\n,\n0\n,\n200\n,\n100\n,\n100\n);\n// Output image\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$aa\n);\n?>"
  },
  {
    "input": "Example #1 Drawing a circle with imagearc()",
    "output": "<?php\n// create a 200*200 image\n$img\n=\nimagecreatetruecolor\n(\n200\n,\n200\n);\n// allocate some colors\n$white\n=\nimagecolorallocate\n(\n$img\n,\n255\n,\n255\n,\n255\n);\n$red\n=\nimagecolorallocate\n(\n$img\n,\n255\n,\n0\n,\n0\n);\n$green\n=\nimagecolorallocate\n(\n$img\n,\n0\n,\n255\n,\n0\n);\n$blue\n=\nimagecolorallocate\n(\n$img\n,\n0\n,\n0\n,\n255\n);\n// draw the head\nimagearc\n(\n$img\n,\n100\n,\n100\n,\n200\n,\n200\n,\n0\n,\n360\n,\n$white\n);\n// mouth\nimagearc\n(\n$img\n,\n100\n,\n100\n,\n150\n,\n150\n,\n25\n,\n155\n,\n$red\n);\n// left and then the right eye\nimagearc\n(\n$img\n,\n60\n,\n75\n,\n50\n,\n50\n,\n0\n,\n360\n,\n$green\n);\nimagearc\n(\n$img\n,\n140\n,\n75\n,\n50\n,\n50\n,\n0\n,\n360\n,\n$blue\n);\n// output image in the browser\nheader\n(\n\"Content-type: image/png\"\n);\nimagepng\n(\n$img\n);\n?>"
  },
  {
    "input": "Example #1 Saving a BMP file",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'BMP with PHP'\n,\n$text_color\n);\n// Save the image\nimagebmp\n(\n$im\n,\n'php.bmp'\n);\n?>"
  },
  {
    "input": "Example #1 imagechar() example",
    "output": "<?php\n$im\n=\nimagecreate\n(\n100\n,\n100\n);\n$string\n=\n'PHP'\n;\n$bg\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n// prints a black \"P\" in the top left corner\nimagechar\n(\n$im\n,\n1\n,\n0\n,\n0\n,\n$string\n,\n$black\n);\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagecharup() example",
    "output": "<?php\n$im\n=\nimagecreate\n(\n100\n,\n100\n);\n$string\n=\n'Note that the first letter is a N'\n;\n$bg\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n// prints a black \"Z\" on a white background\nimagecharup\n(\n$im\n,\n3\n,\n10\n,\n10\n,\n$string\n,\n$black\n);\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagecolorallocate() example",
    "output": "<?php\n$im\n=\nimagecreate\n(\n100\n,\n100\n);\n// sets background to red\n$background\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n// sets some colors\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n// hexadecimal way\n$white\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0x00\n,\n0x00\n,\n0x00\n);\n?>"
  },
  {
    "input": "Example #1 Example of using imagecolorallocatealpha()",
    "output": "<?php\n$size\n=\n300\n;\n$image\n=\nimagecreatetruecolor\n(\n$size\n,\n$size\n);\n// something to get a white background with black border\n$back\n=\nimagecolorallocate\n(\n$image\n,\n255\n,\n255\n,\n255\n);\n$border\n=\nimagecolorallocate\n(\n$image\n,\n0\n,\n0\n,\n0\n);\nimagefilledrectangle\n(\n$image\n,\n0\n,\n0\n,\n$size\n-\n1\n,\n$size\n-\n1\n,\n$back\n);\nimagerectangle\n(\n$image\n,\n0\n,\n0\n,\n$size\n-\n1\n,\n$size\n-\n1\n,\n$border\n);\n$yellow_x\n=\n100\n;\n$yellow_y\n=\n75\n;\n$red_x\n=\n120\n;\n$red_y\n=\n165\n;\n$blue_x\n=\n187\n;\n$blue_y\n=\n125\n;\n$radius\n=\n150\n;\n// allocate colors with alpha values\n$yellow\n=\nimagecolorallocatealpha\n(\n$image\n,\n255\n,\n255\n,\n0\n,\n75\n);\n$red\n=\nimagecolorallocatealpha\n(\n$image\n,\n255\n,\n0\n,\n0\n,\n75\n);\n$blue\n=\nimagecolorallocatealpha\n(\n$image\n,\n0\n,\n0\n,\n255\n,\n75\n);\n// drawing 3 overlapped circle\nimagefilledellipse\n(\n$image\n,\n$yellow_x\n,\n$yellow_y\n,\n$radius\n,\n$radius\n,\n$yellow\n);\nimagefilledellipse\n(\n$image\n,\n$red_x\n,\n$red_y\n,\n$radius\n,\n$radius\n,\n$red\n);\nimagefilledellipse\n(\n$image\n,\n$blue_x\n,\n$blue_y\n,\n$radius\n,\n$radius\n,\n$blue\n);\n// don't forget to output a correct header!\nheader\n(\n'Content-Type: image/png'\n);\n// and finally, output the result\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 Access distinct RGB values",
    "output": "<?php\n$im\n=\nimagecreatefrompng\n(\n\"php.png\"\n);\n$rgb\n=\nimagecolorat\n(\n$im\n,\n10\n,\n15\n);\n$r\n= (\n$rgb\n>>\n16\n) &\n0xFF\n;\n$g\n= (\n$rgb\n>>\n8\n) &\n0xFF\n;\n$b\n=\n$rgb\n&\n0xFF\n;\nvar_dump\n(\n$r\n,\n$g\n,\n$b\n);\n?>"
  },
  {
    "input": "Example #2 Human-readable RGB values using imagecolorsforindex()",
    "output": "<?php\n$im\n=\nimagecreatefrompng\n(\n\"php.png\"\n);\n$rgb\n=\nimagecolorat\n(\n$im\n,\n10\n,\n15\n);\n$colors\n=\nimagecolorsforindex\n(\n$im\n,\n$rgb\n);\nvar_dump\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #1 Search for a set of colors in an image",
    "output": "<?php\n// Start with an image and convert it to a palette-based image\n$im\n=\nimagecreatefrompng\n(\n'figures/imagecolorclosest.png'\n);\nimagetruecolortopalette\n(\n$im\n,\nfalse\n,\n255\n);\n// Search colors (RGB)\n$colors\n= array(\n    array(\n254\n,\n145\n,\n154\n),\n    array(\n153\n,\n145\n,\n188\n),\n    array(\n153\n,\n90\n,\n145\n),\n    array(\n255\n,\n137\n,\n92\n)\n);\n// Loop through each search and find the closest color in the palette.\n// Return the search number, the search RGB and the converted RGB match\nforeach(\n$colors\nas\n$id\n=>\n$rgb\n)\n{\n\n$result\n=\nimagecolorclosest\n(\n$im\n,\n$rgb\n[\n0\n],\n$rgb\n[\n1\n],\n$rgb\n[\n2\n]);\n\n$result\n=\nimagecolorsforindex\n(\n$im\n,\n$result\n);\n\n$result\n=\n\"(\n{\n$result\n[\n'red'\n]}\n,\n{\n$result\n[\n'green'\n]}\n,\n{\n$result\n[\n'blue'\n]}\n)\"\n;\n    echo\n\"#\n$id\n: Search (\n$rgb\n[\n0\n]\n,\n$rgb\n[\n1\n]\n,\n$rgb\n[\n2\n]\n); Closest match:\n$result\n.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Search for a set of colors in an image",
    "output": "<?php\n// Start with an image and convert it to a palette-based image\n$im\n=\nimagecreatefrompng\n(\n'figures/imagecolorclosest.png'\n);\nimagetruecolortopalette\n(\n$im\n,\nfalse\n,\n255\n);\n// Search colors (RGB)\n$colors\n= array(\n    array(\n254\n,\n145\n,\n154\n,\n50\n),\n    array(\n153\n,\n145\n,\n188\n,\n127\n),\n    array(\n153\n,\n90\n,\n145\n,\n0\n),\n    array(\n255\n,\n137\n,\n92\n,\n84\n)\n);\n// Loop through each search and find the closest color in the palette.\n// Return the search number, the search RGB and the converted RGB match\nforeach(\n$colors\nas\n$id\n=>\n$rgb\n)\n{\n\n$result\n=\nimagecolorclosestalpha\n(\n$im\n,\n$rgb\n[\n0\n],\n$rgb\n[\n1\n],\n$rgb\n[\n2\n],\n$rgb\n[\n3\n]);\n\n$result\n=\nimagecolorsforindex\n(\n$im\n,\n$result\n);\n\n$result\n=\n\"(\n{\n$result\n[\n'red'\n]}\n,\n{\n$result\n[\n'green'\n]}\n,\n{\n$result\n[\n'blue'\n]}\n,\n{\n$result\n[\n'alpha'\n]}\n)\"\n;\n    echo\n\"#\n$id\n: Search (\n$rgb\n[\n0\n]\n,\n$rgb\n[\n1\n]\n,\n$rgb\n[\n2\n]\n,\n$rgb\n[\n3\n]\n); Closest match:\n$result\n.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Example of using imagecolorclosesthwb()",
    "output": "<?php\n$im\n=\nimagecreatefromgif\n(\n'php.gif'\n);\necho\n'HWB: '\n.\nimagecolorclosesthwb\n(\n$im\n,\n116\n,\n115\n,\n152\n);\n?>"
  },
  {
    "input": "Example #1 Using imagecolordeallocate()",
    "output": "<?php\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\nimagecolordeallocate\n(\n$im\n,\n$white\n);\n?>"
  },
  {
    "input": "Example #1 Get colors from the GD logo",
    "output": "<?php\n// Setup an image\n$im\n=\nimagecreatefrompng\n(\n'./gdlogo.png'\n);\n$colors\n= Array();\n$colors\n[] =\nimagecolorexact\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n$colors\n[] =\nimagecolorexact\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$colors\n[] =\nimagecolorexact\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$colors\n[] =\nimagecolorexact\n(\n$im\n,\n100\n,\n255\n,\n52\n);\nprint_r\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #1 Get colors from the GD logo",
    "output": "<?php\n// Setup an image\n$im\n=\nimagecreatefrompng\n(\n'./gdlogo.png'\n);\n$colors\n= Array();\n$colors\n[] =\nimagecolorexactalpha\n(\n$im\n,\n255\n,\n0\n,\n0\n,\n0\n);\n$colors\n[] =\nimagecolorexactalpha\n(\n$im\n,\n0\n,\n0\n,\n0\n,\n127\n);\n$colors\n[] =\nimagecolorexactalpha\n(\n$im\n,\n255\n,\n255\n,\n255\n,\n55\n);\n$colors\n[] =\nimagecolorexactalpha\n(\n$im\n,\n100\n,\n255\n,\n52\n,\n20\n);\nprint_r\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #1 imagecolormatch() example",
    "output": "<?php\n// Setup the true color and palette images\n$im1\n=\nimagecreatefrompng\n(\n'./gdlogo.png'\n);\n$im2\n=\nimagecreate\n(\nimagesx\n(\n$im1\n),\nimagesy\n(\n$im1\n));\n// Add some colors to $im2\n$colors\n= Array();\n$colors\n[] =\nimagecolorallocate\n(\n$im2\n,\n255\n,\n36\n,\n74\n);\n$colors\n[] =\nimagecolorallocate\n(\n$im2\n,\n40\n,\n0\n,\n240\n);\n$colors\n[] =\nimagecolorallocate\n(\n$im2\n,\n82\n,\n100\n,\n255\n);\n$colors\n[] =\nimagecolorallocate\n(\n$im2\n,\n84\n,\n63\n,\n44\n);\n// Match these colors with the true color image\nimagecolormatch\n(\n$im1\n,\n$im2\n);\n?>"
  },
  {
    "input": "Example #1 Using imagecoloresolve() to get colors from an image",
    "output": "<?php\n// Load an image\n$im\n=\nimagecreatefromgif\n(\n'phplogo.gif'\n);\n// Get closest colors from the image\n$colors\n= array();\n$colors\n[] =\nimagecolorresolve\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$colors\n[] =\nimagecolorresolve\n(\n$im\n,\n0\n,\n0\n,\n200\n);\n// Output\nprint_r\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #1 Using imagecoloresolvealpha() to get colors from an image",
    "output": "<?php\n// Load an image\n$im\n=\nimagecreatefromgif\n(\n'phplogo.gif'\n);\n// Get closest colors from the image\n$colors\n= array();\n$colors\n[] =\nimagecolorresolvealpha\n(\n$im\n,\n255\n,\n255\n,\n255\n,\n0\n);\n$colors\n[] =\nimagecolorresolvealpha\n(\n$im\n,\n0\n,\n0\n,\n200\n,\n127\n);\n// Output\nprint_r\n(\n$colors\n);\n?>"
  },
  {
    "input": "Example #1 imagecolorset() example",
    "output": "<?php\n// Create a 300x100 image\n$im\n=\nimagecreate\n(\n300\n,\n100\n);\n// Set the background to be red\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n// Get the color index for the background\n$bg\n=\nimagecolorat\n(\n$im\n,\n0\n,\n0\n);\n// Set the backgrund to be blue\nimagecolorset\n(\n$im\n,\n$bg\n,\n0\n,\n0\n,\n255\n);\n// Output the image to the browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagecolorsforindex() example",
    "output": "<?php\n// open an image\n$im\n=\nimagecreatefrompng\n(\n'nexen.png'\n);\n// get a color\n$start_x\n=\n40\n;\n$start_y\n=\n50\n;\n$color_index\n=\nimagecolorat\n(\n$im\n,\n$start_x\n,\n$start_y\n);\n// make it human readable\n$color_tran\n=\nimagecolorsforindex\n(\n$im\n,\n$color_index\n);\n// what is it ?\nprint_r\n(\n$color_tran\n);\n?>"
  },
  {
    "input": "Example #1 Getting total number of colors in an image using imagecolorstotal()",
    "output": "<?php\n// Create image instance\n$im\n=\nimagecreatefromgif\n(\n'php.gif'\n);\necho\n'Total colors in image: '\n.\nimagecolorstotal\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagecolortransparent() example",
    "output": "<?php\n// Create a 55x30 image\n$im\n=\nimagecreatetruecolor\n(\n55\n,\n30\n);\n$red\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n// Make the background transparent\nimagecolortransparent\n(\n$im\n,\n$black\n);\n// Draw a red rectangle\nimagefilledrectangle\n(\n$im\n,\n4\n,\n4\n,\n50\n,\n25\n,\n$red\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./imagecolortransparent.png'\n);\n?>"
  },
  {
    "input": "Example #1 Embossing the PHP.net logo",
    "output": "<?php\n$image\n=\nimagecreatefromgif\n(\n'http://www.php.net/images/php.gif'\n);\n$emboss\n= array(array(\n2\n,\n0\n,\n0\n), array(\n0\n, -\n1\n,\n0\n), array(\n0\n,\n0\n, -\n1\n));\nimageconvolution\n(\n$image\n,\n$emboss\n,\n1\n,\n127\n);\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$image\n,\nnull\n,\n9\n);\n?>"
  },
  {
    "input": "Example #2 Gaussian blur",
    "output": "<?php\n$image\n=\nimagecreatetruecolor\n(\n180\n,\n40\n);\n// Writes the text and apply a gaussian blur on the image\nimagestring\n(\n$image\n,\n5\n,\n10\n,\n8\n,\n'Gaussian Blur Text'\n,\n0x00ff00\n);\n$gaussian\n= array(array(\n1.0\n,\n2.0\n,\n1.0\n), array(\n2.0\n,\n4.0\n,\n2.0\n), array(\n1.0\n,\n2.0\n,\n1.0\n));\nimageconvolution\n(\n$image\n,\n$gaussian\n,\n16\n,\n0\n);\n// Rewrites the text for comparison\nimagestring\n(\n$image\n,\n5\n,\n10\n,\n18\n,\n'Gaussian Blur Text'\n,\n0x00ff00\n);\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$image\n,\nnull\n,\n9\n);\n?>"
  },
  {
    "input": "Example #1 Cropping the PHP.net logo",
    "output": "<?php\n// Create image instances\n$src\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n$dest\n=\nimagecreatetruecolor\n(\n80\n,\n40\n);\n// Copy\nimagecopy\n(\n$dest\n,\n$src\n,\n0\n,\n0\n,\n20\n,\n13\n,\n80\n,\n40\n);\n// Output and free from memory\nheader\n(\n'Content-Type: image/gif'\n);\nimagegif\n(\n$dest\n);\n?>"
  },
  {
    "input": "Example #1 Merging two copies of the PHP.net logo with 75% transparency",
    "output": "<?php\n// Create image instances\n$dest\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n$src\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n// Copy and merge\nimagecopymerge\n(\n$dest\n,\n$src\n,\n10\n,\n10\n,\n0\n,\n0\n,\n100\n,\n47\n,\n75\n);\n// Output\nheader\n(\n'Content-Type: image/gif'\n);\nimagegif\n(\n$dest\n);\n?>"
  },
  {
    "input": "Example #1 imagecopymergegray() usage",
    "output": "<?php\n// Create image instances\n$dest\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n$src\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n// Copy and merge - Gray = 20%\nimagecopymergegray\n(\n$dest\n,\n$src\n,\n10\n,\n10\n,\n0\n,\n0\n,\n100\n,\n47\n,\n20\n);\n// Output\nheader\n(\n'Content-Type: image/gif'\n);\nimagegif\n(\n$dest\n);\n?>"
  },
  {
    "input": "Example #1 \n     Creating a new GD image stream and outputting an image.",
    "output": "<?php\nheader\n(\n\"Content-Type: image/png\"\n);\n$im\n= @\nimagecreate\n(\n110\n,\n20\n)\n    or die(\n\"Cannot Initialize new GD image stream\"\n);\n$background_color\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n\"A Simple Text String\"\n,\n$text_color\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Convert an BMP image to a PNG image using imagecreatefrombmp()",
    "output": "<?php\n// Load the BMP file\n$im\n=\nimagecreatefrombmp\n(\n'./example.bmp'\n);\n// Convert it to a PNG file with default settings\nimagepng\n(\n$im\n,\n'./example.png'\n);\n?>"
  },
  {
    "input": "Example #1 imagecreatefromgd() example",
    "output": "<?php\n// Load the gd image\n$im\n= @\nimagecreatefromgd\n(\n'./test.gd'\n);\n// Test if the image was loaded\nif(!\n$im\n)\n{\n     die(\n'Unable to load gd image!'\n);\n}\n// Do image operations here\n// Save the image\nimagegd\n(\n$im\n,\n'./test_updated.gd'\n);\n?>"
  },
  {
    "input": "Example #1 imagecreatefromgd2() example",
    "output": "<?php\n// Load the gd2 image\n$im\n=\nimagecreatefromgd2\n(\n'./test.gd2'\n);\n// Apply an effect on the image, in this\n// case negate the image\nif(\nfunction_exists\n(\n'imagefilter'\n))\n{\n\nimagefilter\n(\n$im\n,\nIMG_FILTER_NEGATE\n);\n}\n// Save the image\nimagegd2\n(\n$im\n,\n'./test_updated.gd2'\n);\n?>"
  },
  {
    "input": "Example #1 imagecreatefromgd2part() example",
    "output": "<?php\n// For this example we need the image size before\n$image\n=\ngetimagesize\n(\n'./test.gd2'\n);\n// Create the image instance now we got the image\n// sizes\n$im\n=\nimagecreatefromgd2part\n(\n'./test.gd2'\n,\n4\n,\n4\n, (\n$image\n[\n0\n] /\n2\n) -\n6\n, (\n$image\n[\n1\n] /\n2\n) -\n6\n);\n// Do an image operation, in this case we emboss the image\nif(\nfunction_exists\n(\n'imagefilter'\n))\n{\n\nimagefilter\n(\n$im\n,\nIMG_FILTER_EMBOSS\n);\n}\n// Save optimized image\nimagegd2\n(\n$im\n,\n'./test_emboss.gd2'\n);\n?>"
  },
  {
    "input": "Example #1 Example to handle an error during loading of a GIF",
    "output": "<?php\nfunction\nLoadGif\n(\n$imgname\n)\n{\n\n/* Attempt to open */\n\n$im\n= @\nimagecreatefromgif\n(\n$imgname\n);\n\n/* See if it failed */\n\nif(!\n$im\n)\n    {\n\n/* Create a blank image */\n\n$im\n=\nimagecreatetruecolor\n(\n150\n,\n30\n);\n\n$bgc\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n\n$tc\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n150\n,\n30\n,\n$bgc\n);\n\n/* Output an error message */\n\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'Error loading '\n.\n$imgname\n,\n$tc\n);\n    }\n    return\n$im\n;\n}\nheader\n(\n'Content-Type: image/gif'\n);\n$img\n=\nLoadGif\n(\n'bogus.image'\n);\nimagegif\n(\n$img\n);\n?>"
  },
  {
    "input": "Example #1 Example to handle an error during loading of a JPEG",
    "output": "<?php\nfunction\nLoadJpeg\n(\n$imgname\n)\n{\n\n/* Attempt to open */\n\n$im\n= @\nimagecreatefromjpeg\n(\n$imgname\n);\n\n/* See if it failed */\n\nif(!\n$im\n)\n    {\n\n/* Create a black image */\n\n$im\n=\nimagecreatetruecolor\n(\n150\n,\n30\n);\n\n$bgc\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n\n$tc\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n150\n,\n30\n,\n$bgc\n);\n\n/* Output an error message */\n\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'Error loading '\n.\n$imgname\n,\n$tc\n);\n    }\n    return\n$im\n;\n}\nheader\n(\n'Content-Type: image/jpeg'\n);\n$img\n=\nLoadJpeg\n(\n'bogus.image'\n);\nimagejpeg\n(\n$img\n);\n?>"
  },
  {
    "input": "Example #1 Example to handle an error during loading of a PNG",
    "output": "<?php\nfunction\nLoadPNG\n(\n$imgname\n)\n{\n\n/* Attempt to open */\n\n$im\n= @\nimagecreatefrompng\n(\n$imgname\n);\n\n/* See if it failed */\n\nif(!\n$im\n)\n    {\n\n/* Create a blank image */\n\n$im\n=\nimagecreatetruecolor\n(\n150\n,\n30\n);\n\n$bgc\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n\n$tc\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n150\n,\n30\n,\n$bgc\n);\n\n/* Output an error message */\n\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'Error loading '\n.\n$imgname\n,\n$tc\n);\n    }\n    return\n$im\n;\n}\nheader\n(\n'Content-Type: image/png'\n);\n$img\n=\nLoadPNG\n(\n'bogus.image'\n);\nimagepng\n(\n$img\n);\n?>"
  },
  {
    "input": "Example #1 imagecreatefromstring() example",
    "output": "<?php\n$data\n=\n'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAMAAAB/2U7WAAAABl'\n\n.\n'BMVEUAAAD///+l2Z/dAAAASUlEQVR4XqWQUQoAIAxC2/0vXZDr'\n\n.\n'EX4IJTRkb7lobNUStXsB0jIXIAMSsQnWlsV+wULF4Avk9fLq2r'\n\n.\n'8a5HSE35Q3eO2XP1A1wQkZSgETvDtKdQAAAABJRU5ErkJggg=='\n;\n$data\n=\nbase64_decode\n(\n$data\n);\n$im\n=\nimagecreatefromstring\n(\n$data\n);\nif (\n$im\n!==\nfalse\n) {\n\nheader\n(\n'Content-Type: image/png'\n);\n\nimagepng\n(\n$im\n);\n}\nelse {\n    echo\n'An error occurred.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Example to handle an error during loading of a WBMP",
    "output": "<?php\nfunction\nLoadWBMP\n(\n$imgname\n)\n{\n\n/* Attempt to open */\n\n$im\n= @\nimagecreatefromwbmp\n(\n$imgname\n);\n\n/* See if it failed */\n\nif(!\n$im\n)\n    {\n\n/* Create a blank image */\n\n$im\n=\nimagecreatetruecolor\n(\n150\n,\n30\n);\n\n$bgc\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n\n$tc\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n150\n,\n30\n,\n$bgc\n);\n\n/* Output an error message */\n\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'Error loading '\n.\n$imgname\n,\n$tc\n);\n    }\n    return\n$im\n;\n}\nheader\n(\n'Content-Type: image/vnd.wap.wbmp'\n);\n$img\n=\nLoadWBMP\n(\n'bogus.image'\n);\nimagewbmp\n(\n$img\n);\n?>"
  },
  {
    "input": "Example #1 Convert an WebP image to a jpeg image using imagecreatefromwebp()",
    "output": "<?php\n// Load the WebP file\n$im\n=\nimagecreatefromwebp\n(\n'./example.webp'\n);\n// Convert it to a jpeg file with 100% quality\nimagejpeg\n(\n$im\n,\n'./example.jpeg'\n,\n100\n);\n?>"
  },
  {
    "input": "Example #1 Convert an XBM image to a png image using imagecreatefromxbm()",
    "output": "<?php\n// Load the xbm file\n$xbm\n=\nimagecreatefromxbm\n(\n'./example.xbm'\n);\n// Convert it to a png file\nimagepng\n(\n$xbm\n,\n'./example.png'\n);\n?>"
  },
  {
    "input": "Example #1 Creating an image instance using imagecreatefromxpm()",
    "output": "<?php\n// Check for XPM support\nif(!(\nimagetypes\n() &\nIMG_XPM\n))\n{\n    die(\n'Support for xpm was not found!'\n);\n}\n// Create the image instance\n$xpm\n=\nimagecreatefromxpm\n(\n'./example.xpm'\n);\n// Do image operations here\n// PHP has no support for writing xpm images\n// so in this case we save the image as a\n// jpeg file with 100% quality\nimagejpeg\n(\n$xpm\n,\n'./example.jpg'\n,\n100\n);\n?>"
  },
  {
    "input": "Example #1 \n     Creating a new GD image stream and outputting an image.",
    "output": "<?php\nheader\n(\n'Content-Type: image/png'\n);\n$im\n= @\nimagecreatetruecolor\n(\n120\n,\n20\n)\n      or die(\n'Cannot Initialize new GD image stream'\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagedashedline() example",
    "output": "<?php\n// Create a 100x100 image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\n// Draw a vertical dashed line\nimagedashedline\n(\n$im\n,\n50\n,\n25\n,\n50\n,\n75\n,\n$white\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./dashedline.png'\n);\n?>"
  },
  {
    "input": "Example #2 Alternative to imagedashedline()",
    "output": "<?php\n// Create a 100x100 image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\n// Define our style: First 4 pixels is white and the\n// next 4 is transparent. This creates the dashed line effect\n$style\n= Array(\n\n$white\n,\n\n$white\n,\n\n$white\n,\n\n$white\n,\n\nIMG_COLOR_TRANSPARENT\n,\n\nIMG_COLOR_TRANSPARENT\n,\n\nIMG_COLOR_TRANSPARENT\n,\n\nIMG_COLOR_TRANSPARENT\n\n);\nimagesetstyle\n(\n$im\n,\n$style\n);\n// Draw the dashed line\nimageline\n(\n$im\n,\n50\n,\n25\n,\n50\n,\n75\n,\nIMG_COLOR_STYLED\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./imageline.png'\n);\n?>"
  },
  {
    "input": "Example #1 Using imagedestroy() prior to PHP 8.0.0",
    "output": "<?php\n// create a 100 x 100 image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// alter or save the image\n// frees image from memory\nimagedestroy\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imageellipse() example",
    "output": "<?php\n// Create a blank image.\n$image\n=\nimagecreatetruecolor\n(\n400\n,\n300\n);\n// Select the background color.\n$bg\n=\nimagecolorallocate\n(\n$image\n,\n0\n,\n0\n,\n0\n);\n// Fill the background with the color selected above.\nimagefill\n(\n$image\n,\n0\n,\n0\n,\n$bg\n);\n// Choose a color for the ellipse.\n$col_ellipse\n=\nimagecolorallocate\n(\n$image\n,\n255\n,\n255\n,\n255\n);\n// Draw the ellipse.\nimageellipse\n(\n$image\n,\n200\n,\n150\n,\n300\n,\n200\n,\n$col_ellipse\n);\n// Output the image.\nheader\n(\n\"Content-type: image/png\"\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 imagefill() example",
    "output": "<?php\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// sets background to red\n$red\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\nimagefill\n(\n$im\n,\n0\n,\n0\n,\n$red\n);\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Creating a 3D looking pie",
    "output": "<?php\n// create image\n$image\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// allocate some colors\n$white\n=\nimagecolorallocate\n(\n$image\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\n$gray\n=\nimagecolorallocate\n(\n$image\n,\n0xC0\n,\n0xC0\n,\n0xC0\n);\n$darkgray\n=\nimagecolorallocate\n(\n$image\n,\n0x90\n,\n0x90\n,\n0x90\n);\n$navy\n=\nimagecolorallocate\n(\n$image\n,\n0x00\n,\n0x00\n,\n0x80\n);\n$darknavy\n=\nimagecolorallocate\n(\n$image\n,\n0x00\n,\n0x00\n,\n0x50\n);\n$red\n=\nimagecolorallocate\n(\n$image\n,\n0xFF\n,\n0x00\n,\n0x00\n);\n$darkred\n=\nimagecolorallocate\n(\n$image\n,\n0x90\n,\n0x00\n,\n0x00\n);\n// make the 3D effect\nfor (\n$i\n=\n60\n;\n$i\n>\n50\n;\n$i\n--) {\n\nimagefilledarc\n(\n$image\n,\n50\n,\n$i\n,\n100\n,\n50\n,\n0\n,\n45\n,\n$darknavy\n,\nIMG_ARC_PIE\n);\n\nimagefilledarc\n(\n$image\n,\n50\n,\n$i\n,\n100\n,\n50\n,\n45\n,\n75\n,\n$darkgray\n,\nIMG_ARC_PIE\n);\n\nimagefilledarc\n(\n$image\n,\n50\n,\n$i\n,\n100\n,\n50\n,\n75\n,\n360\n,\n$darkred\n,\nIMG_ARC_PIE\n);\n}\nimagefilledarc\n(\n$image\n,\n50\n,\n50\n,\n100\n,\n50\n,\n0\n,\n45\n,\n$navy\n,\nIMG_ARC_PIE\n);\nimagefilledarc\n(\n$image\n,\n50\n,\n50\n,\n100\n,\n50\n,\n45\n,\n75\n,\n$gray\n,\nIMG_ARC_PIE\n);\nimagefilledarc\n(\n$image\n,\n50\n,\n50\n,\n100\n,\n50\n,\n75\n,\n360\n,\n$red\n,\nIMG_ARC_PIE\n);\n// flush image\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 imagefilledellipse() example",
    "output": "<?php\n// create a blank image\n$image\n=\nimagecreatetruecolor\n(\n400\n,\n300\n);\n// fill the background color\n$bg\n=\nimagecolorallocate\n(\n$image\n,\n0\n,\n0\n,\n0\n);\n// choose a color for the ellipse\n$col_ellipse\n=\nimagecolorallocate\n(\n$image\n,\n255\n,\n255\n,\n255\n);\n// draw the white ellipse\nimagefilledellipse\n(\n$image\n,\n200\n,\n150\n,\n300\n,\n200\n,\n$col_ellipse\n);\n// output the picture\nheader\n(\n\"Content-type: image/png\"\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 imagefilledpolygon() example",
    "output": "<?php\n// set up array of points for polygon\n$values\n= array(\n\n40\n,\n50\n,\n// Point 1 (x, y)\n\n20\n,\n240\n,\n// Point 2 (x, y)\n\n60\n,\n60\n,\n// Point 3 (x, y)\n\n240\n,\n20\n,\n// Point 4 (x, y)\n\n50\n,\n40\n,\n// Point 5 (x, y)\n\n10\n,\n10\n// Point 6 (x, y)\n\n);\n// create image\n$image\n=\nimagecreatetruecolor\n(\n250\n,\n250\n);\n// allocate colors\n$bg\n=\nimagecolorallocate\n(\n$image\n,\n0\n,\n0\n,\n0\n);\n$blue\n=\nimagecolorallocate\n(\n$image\n,\n0\n,\n0\n,\n255\n);\n// fill the background\nimagefilledrectangle\n(\n$image\n,\n0\n,\n0\n,\n249\n,\n249\n,\n$bg\n);\n// draw a polygon\nimagefilledpolygon\n(\n$image\n,\n$values\n,\n$blue\n);\n// flush image\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 imagefilledrectangle() usage",
    "output": "<?php\n// Create a 55x30 image\n$im\n=\nimagecreatetruecolor\n(\n55\n,\n30\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n// Draw a white rectangle\nimagefilledrectangle\n(\n$im\n,\n4\n,\n4\n,\n50\n,\n25\n,\n$white\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./imagefilledrectangle.png'\n);\n?>"
  },
  {
    "input": "Example #1 Filling an ellipse with a color",
    "output": "<?php\n// Create the image handle, set the background to white\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n100\n,\n100\n,\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n));\n// Draw an ellipse to fill with a black border\nimageellipse\n(\n$im\n,\n50\n,\n50\n,\n50\n,\n50\n,\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n));\n// Set the border and fill colors\n$border\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$fill\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n// Fill the selection\nimagefilltoborder\n(\n$im\n,\n50\n,\n50\n,\n$border\n,\n$fill\n);\n// Output\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagefilter() grayscale example",
    "output": "<?php\n$im\n=\nimagecreatefrompng\n(\n'dave.png'\n);\nif(\n$im\n&&\nimagefilter\n(\n$im\n,\nIMG_FILTER_GRAYSCALE\n))\n{\n    echo\n'Image converted to grayscale.'\n;\n\nimagepng\n(\n$im\n,\n'dave.png'\n);\n}\nelse\n{\n    echo\n'Conversion to grayscale failed.'\n;\n}\n?>"
  },
  {
    "input": "Example #2 imagefilter() brightness example",
    "output": "<?php\n$im\n=\nimagecreatefrompng\n(\n'sean.png'\n);\nif(\n$im\n&&\nimagefilter\n(\n$im\n,\nIMG_FILTER_BRIGHTNESS\n,\n20\n))\n{\n    echo\n'Image brightness changed.'\n;\n\nimagepng\n(\n$im\n,\n'sean.png'\n);\n}\nelse\n{\n    echo\n'Image brightness change failed.'\n;\n}\n?>"
  },
  {
    "input": "Example #3 imagefilter() colorize example",
    "output": "<?php\n$im\n=\nimagecreatefrompng\n(\n'philip.png'\n);\n/* R, G, B, so 0, 255, 0 is green */\nif(\n$im\n&&\nimagefilter\n(\n$im\n,\nIMG_FILTER_COLORIZE\n,\n0\n,\n255\n,\n0\n))\n{\n    echo\n'Image successfully shaded green.'\n;\n\nimagepng\n(\n$im\n,\n'philip.png'\n);\n}\nelse\n{\n    echo\n'Green shading failed.'\n;\n}\n?>"
  },
  {
    "input": "Example #4 imagefilter() negate example",
    "output": "<?php\n// Define our negate function so its portable for\n// php versions without imagefilter()\nfunction\nnegate\n(\n$im\n)\n{\n    if(\nfunction_exists\n(\n'imagefilter'\n))\n    {\n        return\nimagefilter\n(\n$im\n,\nIMG_FILTER_NEGATE\n);\n    }\n    for(\n$x\n=\n0\n;\n$x\n<\nimagesx\n(\n$im\n); ++\n$x\n)\n    {\n        for(\n$y\n=\n0\n;\n$y\n<\nimagesy\n(\n$im\n); ++\n$y\n)\n        {\n\n$index\n=\nimagecolorat\n(\n$im\n,\n$x\n,\n$y\n);\n\n$rgb\n=\nimagecolorsforindex\n(\n$index\n);\n\n$color\n=\nimagecolorallocate\n(\n$im\n,\n255\n-\n$rgb\n[\n'red'\n],\n255\n-\n$rgb\n[\n'green'\n],\n255\n-\n$rgb\n[\n'blue'\n]);\n\nimagesetpixel\n(\n$im\n,\n$x\n,\n$y\n,\n$color\n);\n        }\n    }\n    return(\ntrue\n);\n}\n$im\n=\nimagecreatefromjpeg\n(\n'kalle.jpg'\n);\nif(\n$im\n&&\nnegate\n(\n$im\n))\n{\n    echo\n'Image successfully converted to negative colors.'\n;\n\nimagejpeg\n(\n$im\n,\n'kalle.jpg'\n,\n100\n);\n}\nelse\n{\n    echo\n'Converting to negative colors failed.'\n;\n}\n?>"
  },
  {
    "input": "Example #5 imagefilter() pixelate example",
    "output": "<?php\n// Load the PHP logo, we need to create two instances\n// to show the differences\n$logo1\n=\nimagecreatefrompng\n(\n'./php.png'\n);\n$logo2\n=\nimagecreatefrompng\n(\n'./php.png'\n);\n// Create the image instance we want to show the\n// differences on\n$output\n=\nimagecreatetruecolor\n(\nimagesx\n(\n$logo1\n) *\n2\n,\nimagesy\n(\n$logo1\n));\n// Apply pixelation to each instance, with a block\n// size of 3\nimagefilter\n(\n$logo1\n,\nIMG_FILTER_PIXELATE\n,\n3\n);\nimagefilter\n(\n$logo2\n,\nIMG_FILTER_PIXELATE\n,\n3\n,\ntrue\n);\n// Merge the differences onto the output image\nimagecopy\n(\n$output\n,\n$logo1\n,\n0\n,\n0\n,\n0\n,\n0\n,\nimagesx\n(\n$logo1\n) -\n1\n,\nimagesy\n(\n$logo1\n) -\n1\n);\nimagecopy\n(\n$output\n,\n$logo2\n,\nimagesx\n(\n$logo2\n),\n0\n,\n0\n,\n0\n,\nimagesx\n(\n$logo2\n) -\n1\n,\nimagesy\n(\n$logo2\n) -\n1\n);\n// Output the differences\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$output\n);\n?>"
  },
  {
    "input": "Example #6 imagefilter() scatter example",
    "output": "<?php\n// Load the image\n$logo\n=\nimagecreatefrompng\n(\n'./php.png'\n);\n// Apply a very soft scatter effect to the image\nimagefilter\n(\n$logo\n,\nIMG_FILTER_SCATTER\n,\n3\n,\n5\n);\n// Output the image with the scatter effect\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$logo\n);\n?>"
  },
  {
    "input": "Example #1 Using imagefontheight() on built-in fonts",
    "output": "<?php\necho\n'Font height: '\n.\nimagefontheight\n(\n4\n);\n?>"
  },
  {
    "input": "Example #2 Using imagefontheight() together with imageloadfont()",
    "output": "<?php\n// Load a .gdf font\n$font\n=\nimageloadfont\n(\n'anonymous.gdf'\n);\necho\n'Font height: '\n.\nimagefontheight\n(\n$font\n);\n?>"
  },
  {
    "input": "Example #1 Using imagefontwidth() on built-in fonts",
    "output": "<?php\necho\n'Font width: '\n.\nimagefontwidth\n(\n4\n);\n?>"
  },
  {
    "input": "Example #2 Using imagefontwidth() together with imageloadfont()",
    "output": "<?php\n// Load a .gdf font\n$font\n=\nimageloadfont\n(\n'anonymous.gdf'\n);\necho\n'Font width: '\n.\nimagefontwidth\n(\n$font\n);\n?>"
  },
  {
    "input": "Example #1 imageftbbox() example",
    "output": "<?php\n// Create a 300x150 image\n$im\n=\nimagecreatetruecolor\n(\n300\n,\n150\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n// Set the background to be white\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n299\n,\n299\n,\n$white\n);\n// Path to our font file\n$font\n=\n'./arial.ttf'\n;\n// First we create our bounding box\n$bbox\n=\nimageftbbox\n(\n10\n,\n0\n,\n$font\n,\n'The PHP Documentation Group'\n);\n// This is our cordinates for X and Y\n$x\n=\n$bbox\n[\n0\n] + (\nimagesx\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n4\n] /\n2\n) -\n5\n;\n$y\n=\n$bbox\n[\n1\n] + (\nimagesy\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n5\n] /\n2\n) -\n5\n;\nimagefttext\n(\n$im\n,\n10\n,\n0\n,\n$x\n,\n$y\n,\n$black\n,\n$font\n,\n'The PHP Documentation Group'\n);\n// Output to browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagefttext() example",
    "output": "<?php\n// Create a 300x100 image\n$im\n=\nimagecreatetruecolor\n(\n300\n,\n100\n);\n$red\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0x00\n,\n0x00\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0x00\n,\n0x00\n,\n0x00\n);\n// Make the background red\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n299\n,\n99\n,\n$red\n);\n// Path to our ttf font file\n$font_file\n=\n'./arial.ttf'\n;\n// Draw the text 'PHP Manual' using font size 13\nimagefttext\n(\n$im\n,\n13\n,\n0\n,\n105\n,\n55\n,\n$black\n,\n$font_file\n,\n'PHP Manual'\n);\n// Output image to the browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagegammacorrect() usage",
    "output": "<?php\n// Create image instance\n$im\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n// Correct gamma, out = 1.537\nimagegammacorrect\n(\n$im\n,\n1.0\n,\n1.537\n);\n// Save\nimagegif\n(\n$im\n,\n'./php_gamma_corrected.gif'\n);\n?>"
  },
  {
    "input": "Example #1 Outputting a GD image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n\"A Simple Text String\"\n,\n$text_color\n);\n// Output the image\nimagegd\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #2 Saving a GD image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n\"A Simple Text String\"\n,\n$text_color\n);\n// Save the gd image\n// The file format for GD images is .gd, see http://www.libgd.org/GdFileFormats\nimagegd\n(\n$im\n,\n'simple.gd'\n);\n?>"
  },
  {
    "input": "Example #1 Outputting a GD2 image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n\"A Simple Text String\"\n,\n$text_color\n);\n// Output the image\nimagegd2\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #2 Saving a GD2 image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n\"A Simple Text String\"\n,\n$text_color\n);\n// Save the gd2 image\n// The file format for GD2 images is .gd2, see http://www.libgd.org/GdFileFormats\nimagegd2\n(\n$im\n,\n'simple.gd2'\n);\n?>"
  },
  {
    "input": "Example #1 Outputting an image using imagegif()",
    "output": "<?php\n// Create a new image instance\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Make the background white\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n99\n,\n99\n,\n0xFFFFFF\n);\n// Draw a text string on the image\nimagestring\n(\n$im\n,\n3\n,\n40\n,\n20\n,\n'GD Library'\n,\n0xFFBA00\n);\n// Output the image to browser\nheader\n(\n'Content-Type: image/gif'\n);\nimagegif\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #2 Converting a PNG image to GIF using imagegif()",
    "output": "<?php\n// Load the PNG\n$png\n=\nimagecreatefrompng\n(\n'./php.png'\n);\n// Save the image as a GIF\nimagegif\n(\n$png\n,\n'./php.gif'\n);\n// We're done\necho\n'Converted PNG image to GIF with success!'\n;\n?>"
  },
  {
    "input": "Example #1 Turn on interlacing using imageinterlace()",
    "output": "<?php\n// Create an image instance\n$im\n=\nimagecreatefromgif\n(\n'php.gif'\n);\n// Enable interlancing\nimageinterlace\n(\n$im\n,\ntrue\n);\n// Save the interlaced image\nimagegif\n(\n$im\n,\n'./php_interlaced.gif'\n);\n?>"
  },
  {
    "input": "Example #1 Simple detection of true color image instances using imageistruecolor()",
    "output": "<?php\n// $im is an image instance\n// Check if image is a true color image or not\nif(!\nimageistruecolor\n(\n$im\n))\n{\n\n// Create a new true color image instance\n\n$tc\n=\nimagecreatetruecolor\n(\nimagesx\n(\n$im\n),\nimagesy\n(\n$im\n));\n\n// Copy over the pixels\n\nimagecopy\n(\n$tc\n,\n$im\n,\n0\n,\n0\n,\n0\n,\n0\n,\nimagesx\n(\n$im\n),\nimagesy\n(\n$im\n));\n\n$im\n=\n$tc\n;\n\n$tc\n=\nNULL\n;\n\n// OR use imagepalettetotruecolor()\n}\n// Continue working with image instance\n?>"
  },
  {
    "input": "Example #1 Outputting a JPEG image to the browser",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Set the content type header - in this case image/jpeg\nheader\n(\n'Content-Type: image/jpeg'\n);\n// Output the image\nimagejpeg\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #2 Saving a JPEG image to a file",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Save the image as 'simpletext.jpg'\nimagejpeg\n(\n$im\n,\n'simpletext.jpg'\n);\n?>"
  },
  {
    "input": "Example #3 Outputting the image at 75% quality to the browser",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Set the content type header - in this case image/jpeg\nheader\n(\n'Content-Type: image/jpeg'\n);\n// Skip the file parameter using NULL, then set the quality to 75%\nimagejpeg\n(\n$im\n,\nNULL\n,\n75\n);\n?>"
  },
  {
    "input": "Example #1 imagelayereffect() example",
    "output": "<?php\n// Setup an image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Set a background\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n100\n,\n100\n,\nimagecolorallocate\n(\n$im\n,\n220\n,\n220\n,\n220\n));\n// Apply the overlay alpha blending flag\nimagelayereffect\n(\n$im\n,\nIMG_EFFECT_OVERLAY\n);\n// Draw two grey ellipses\nimagefilledellipse\n(\n$im\n,\n50\n,\n50\n,\n40\n,\n40\n,\nimagecolorallocate\n(\n$im\n,\n100\n,\n255\n,\n100\n));\nimagefilledellipse\n(\n$im\n,\n50\n,\n50\n,\n50\n,\n80\n,\nimagecolorallocate\n(\n$im\n,\n100\n,\n100\n,\n255\n));\nimagefilledellipse\n(\n$im\n,\n50\n,\n50\n,\n80\n,\n50\n,\nimagecolorallocate\n(\n$im\n,\n255\n,\n100\n,\n100\n));\n// Output\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Drawing a thick line",
    "output": "<?php\nfunction\nimagelinethick\n(\n$image\n,\n$x1\n,\n$y1\n,\n$x2\n,\n$y2\n,\n$color\n,\n$thick\n=\n1\n)\n{\n\n/* this way it works well only for orthogonal lines\n    imagesetthickness($image, $thick);\n    return imageline($image, $x1, $y1, $x2, $y2, $color);\n    */\n\nif (\n$thick\n==\n1\n) {\n        return\nimageline\n(\n$image\n,\n$x1\n,\n$y1\n,\n$x2\n,\n$y2\n,\n$color\n);\n    }\n\n$t\n=\n$thick\n/\n2\n-\n0.5\n;\n    if (\n$x1\n==\n$x2\n||\n$y1\n==\n$y2\n) {\n        return\nimagefilledrectangle\n(\n$image\n,\nround\n(\nmin\n(\n$x1\n,\n$x2\n) -\n$t\n),\nround\n(\nmin\n(\n$y1\n,\n$y2\n) -\n$t\n),\nround\n(\nmax\n(\n$x1\n,\n$x2\n) +\n$t\n),\nround\n(\nmax\n(\n$y1\n,\n$y2\n) +\n$t\n),\n$color\n);\n    }\n\n$k\n= (\n$y2\n-\n$y1\n) / (\n$x2\n-\n$x1\n);\n//y = kx + q\n\n$a\n=\n$t\n/\nsqrt\n(\n1\n+\npow\n(\n$k\n,\n2\n));\n\n$points\n= array(\n\nround\n(\n$x1\n- (\n1\n+\n$k\n)*\n$a\n),\nround\n(\n$y1\n+ (\n1\n-\n$k\n)*\n$a\n),\n\nround\n(\n$x1\n- (\n1\n-\n$k\n)*\n$a\n),\nround\n(\n$y1\n- (\n1\n+\n$k\n)*\n$a\n),\n\nround\n(\n$x2\n+ (\n1\n+\n$k\n)*\n$a\n),\nround\n(\n$y2\n- (\n1\n-\n$k\n)*\n$a\n),\n\nround\n(\n$x2\n+ (\n1\n-\n$k\n)*\n$a\n),\nround\n(\n$y2\n+ (\n1\n+\n$k\n)*\n$a\n),\n    );\n\nimagefilledpolygon\n(\n$image\n,\n$points\n,\n4\n,\n$color\n);\n    return\nimagepolygon\n(\n$image\n,\n$points\n,\n4\n,\n$color\n);\n}\n?>"
  },
  {
    "input": "Example #1 imageloadfont() usage example",
    "output": "<?php\n// Create a new image instance\n$im\n=\nimagecreatetruecolor\n(\n50\n,\n20\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n// Make the background white\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n49\n,\n19\n,\n$white\n);\n// Load the gd font and write 'Hello'\n$font\n=\nimageloadfont\n(\n'./04b.gdf'\n);\nimagestring\n(\n$im\n,\n$font\n,\n0\n,\n0\n,\n'Hello'\n,\n$black\n);\n// Output to browser\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imageopenpolygon() example",
    "output": "<?php\n// Create a blank image\n$image\n=\nimagecreatetruecolor\n(\n400\n,\n300\n);\n// Allocate a color for the polygon\n$col_poly\n=\nimagecolorallocate\n(\n$image\n,\n255\n,\n255\n,\n255\n);\n// Draw the polygon\nimageopenpolygon\n(\n$image\n, array(\n\n0\n,\n0\n,\n\n100\n,\n200\n,\n\n300\n,\n200\n\n),\n\n$col_poly\n);\n// Output the picture to the browser\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 imagepalettecopy() example",
    "output": "<?php\n// Create two palette images\n$palette1\n=\nimagecreate\n(\n100\n,\n100\n);\n$palette2\n=\nimagecreate\n(\n100\n,\n100\n);\n// Allocate the background to be\n// green in the first palette image\n$green\n=\nimagecolorallocate\n(\n$palette1\n,\n0\n,\n255\n,\n0\n);\n// Copy the palette from image 1 to image 2\nimagepalettecopy\n(\n$palette2\n,\n$palette1\n);\n// Since the palette is now copied we can use the\n// green color allocated to image 1 without using\n// imagecolorallocate() twice\nimagefilledrectangle\n(\n$palette2\n,\n0\n,\n0\n,\n99\n,\n99\n,\n$green\n);\n// Output image to the browser\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$palette2\n);\n?>"
  },
  {
    "input": "Example #1 \n     Converts any image object to true color",
    "output": "<?php\n// Backwards compatiblity\nif(!\nfunction_exists\n(\n'imagepalettetotruecolor'\n))\n{\n    function\nimagepalettetotruecolor\n(&\n$src\n)\n    {\n        if(\nimageistruecolor\n(\n$src\n))\n        {\n            return(\ntrue\n);\n        }\n\n$dst\n=\nimagecreatetruecolor\n(\nimagesx\n(\n$src\n),\nimagesy\n(\n$src\n));\n\nimagecopy\n(\n$dst\n,\n$src\n,\n0\n,\n0\n,\n0\n,\n0\n,\nimagesx\n(\n$src\n),\nimagesy\n(\n$src\n));\n\n$src\n=\n$dst\n;\n        return(\ntrue\n);\n    }\n}\n// Helper closure\n$typeof\n= function() use(\n$im\n)\n{\n    echo\n'typeof($im) = '\n. (\nimageistruecolor\n(\n$im\n) ?\n'true color'\n:\n'palette'\n),\nPHP_EOL\n;\n};\n// Create a palette based image\n$im\n=\nimagecreate\n(\n100\n,\n100\n);\n$typeof\n();\n// Convert it to true color\nimagepalettetotruecolor\n(\n$im\n);\n$typeof\n();\n?>"
  },
  {
    "input": "Example #1 imagepolygon() example",
    "output": "<?php\n// Create a blank image\n$image\n=\nimagecreatetruecolor\n(\n400\n,\n300\n);\n// Allocate a color for the polygon\n$col_poly\n=\nimagecolorallocate\n(\n$image\n,\n255\n,\n255\n,\n255\n);\n// Draw the polygon\nimagepolygon\n(\n$image\n, array(\n\n0\n,\n0\n,\n\n100\n,\n200\n,\n\n300\n,\n200\n\n),\n\n$col_poly\n);\n// Output the picture to the browser\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$image\n);\n?>"
  },
  {
    "input": "Example #1 Simple imagerectangle() example",
    "output": "<?php\n// Create a 200 x 200 image\n$canvas\n=\nimagecreatetruecolor\n(\n200\n,\n200\n);\n// Allocate colors\n$pink\n=\nimagecolorallocate\n(\n$canvas\n,\n255\n,\n105\n,\n180\n);\n$white\n=\nimagecolorallocate\n(\n$canvas\n,\n255\n,\n255\n,\n255\n);\n$green\n=\nimagecolorallocate\n(\n$canvas\n,\n132\n,\n135\n,\n28\n);\n// Draw three rectangles each with its own color\nimagerectangle\n(\n$canvas\n,\n50\n,\n50\n,\n150\n,\n150\n,\n$pink\n);\nimagerectangle\n(\n$canvas\n,\n45\n,\n60\n,\n120\n,\n100\n,\n$white\n);\nimagerectangle\n(\n$canvas\n,\n100\n,\n120\n,\n75\n,\n160\n,\n$green\n);\n// Output\nheader\n(\n'Content-Type: image/jpeg'\n);\nimagejpeg\n(\n$canvas\n);\n?>"
  },
  {
    "input": "Example #1 Setting and getting the resolution of an image",
    "output": "<?php\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\nimageresolution\n(\n$im\n,\n200\n);\nprint_r\n(\nimageresolution\n(\n$im\n));\nimageresolution\n(\n$im\n,\n300\n,\n72\n);\nprint_r\n(\nimageresolution\n(\n$im\n));\n?>"
  },
  {
    "input": "Example #1 Basic imagesavealpha() Usage",
    "output": "<?php\n// Load a png image with alpha channel\n$png\n=\nimagecreatefrompng\n(\n'./alphachannel_example.png'\n);\n// Turn off alpha blending\nimagealphablending\n(\n$png\n,\nfalse\n);\n// Do desired operations\n// Set alpha flag\nimagesavealpha\n(\n$png\n,\ntrue\n);\n// Output image to browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$png\n);\n?>"
  },
  {
    "input": "Example #1 imagesetbrush() example",
    "output": "<?php\n// Load a mini php logo\n$php\n=\nimagecreatefrompng\n(\n'./php.png'\n);\n// Create the main image, 100x100\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Fill the background with white\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n299\n,\n99\n,\n$white\n);\n// Set the brush\nimagesetbrush\n(\n$im\n,\n$php\n);\n// Draw a couple of brushes, each overlaying each\nimageline\n(\n$im\n,\n50\n,\n50\n,\n50\n,\n60\n,\nIMG_COLOR_BRUSHED\n);\n// Output image to the browser\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagesetinterpolation() example",
    "output": "<?php\n// Load an image\n$im\n=\nimagecreate\n(\n500\n,\n500\n);\n// By default interpolation is IMG_BILINEAR_FIXED, switch\n// to use the 'Mitchell' filter:\nimagesetinterpolation\n(\n$im\n,\nIMG_MITCHELL\n);\n// Continue to work with $im ...\n?>"
  },
  {
    "input": "Example #1 imagesetstyle() example",
    "output": "<?php\nheader\n(\n\"Content-type: image/jpeg\"\n);\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n$w\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$red\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n/* Draw a dashed line, 5 red pixels, 5 white pixels */\n$style\n= array(\n$red\n,\n$red\n,\n$red\n,\n$red\n,\n$red\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n);\nimagesetstyle\n(\n$im\n,\n$style\n);\nimageline\n(\n$im\n,\n0\n,\n0\n,\n100\n,\n100\n,\nIMG_COLOR_STYLED\n);\n/* Draw a line of happy faces using imagesetbrush() with imagesetstyle */\n$style\n= array(\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$w\n,\n$red\n);\nimagesetstyle\n(\n$im\n,\n$style\n);\n$brush\n=\nimagecreatefrompng\n(\n\"http://www.libpng.org/pub/png/images/smile.happy.png\"\n);\n$w2\n=\nimagecolorallocate\n(\n$brush\n,\n255\n,\n255\n,\n255\n);\nimagecolortransparent\n(\n$brush\n,\n$w2\n);\nimagesetbrush\n(\n$im\n,\n$brush\n);\nimageline\n(\n$im\n,\n100\n,\n0\n,\n0\n,\n100\n,\nIMG_COLOR_STYLEDBRUSHED\n);\nimagejpeg\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagesetthickness() example",
    "output": "<?php\n// Create a 200x100 image\n$im\n=\nimagecreatetruecolor\n(\n200\n,\n100\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0x00\n,\n0x00\n,\n0x00\n);\n// Set the background to be white\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n299\n,\n99\n,\n$white\n);\n// Set the line thickness to 5\nimagesetthickness\n(\n$im\n,\n5\n);\n// Draw the rectangle\nimagerectangle\n(\n$im\n,\n14\n,\n14\n,\n185\n,\n85\n,\n$black\n);\n// Output image to the browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagesettile() example",
    "output": "<?php\n// Load an external image\n$zend\n=\nimagecreatefromgif\n(\n'./zend.gif'\n);\n// Create a 200x200 image\n$im\n=\nimagecreatetruecolor\n(\n200\n,\n200\n);\n// Set the tile\nimagesettile\n(\n$im\n,\n$zend\n);\n// Make the image repeat\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n199\n,\n199\n,\nIMG_COLOR_TILED\n);\n// Output image to the browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagestring() example",
    "output": "<?php\n// Create a 100*30 image\n$im\n=\nimagecreate\n(\n100\n,\n30\n);\n// White background and blue text\n$bg\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n$textcolor\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n255\n);\n// Write the string at the top left\nimagestring\n(\n$im\n,\n5\n,\n0\n,\n0\n,\n'Hello world!'\n,\n$textcolor\n);\n// Output the image\nheader\n(\n'Content-type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 imagestringup() example",
    "output": "<?php\n// create a 100*100 image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Write the text\n$textcolor\n=\nimagecolorallocate\n(\n$im\n,\n0xFF\n,\n0xFF\n,\n0xFF\n);\nimagestringup\n(\n$im\n,\n3\n,\n40\n,\n80\n,\n'gd library'\n,\n$textcolor\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./stringup.png'\n);\n?>"
  },
  {
    "input": "Example #1 Using imagesx()",
    "output": "<?php\n// create a 300*200 image\n$img\n=\nimagecreatetruecolor\n(\n300\n,\n200\n);\necho\nimagesx\n(\n$img\n);\n// 300\n?>"
  },
  {
    "input": "Example #1 Using imagesy()",
    "output": "<?php\n// create a 300*200 image\n$img\n=\nimagecreatetruecolor\n(\n300\n,\n200\n);\necho\nimagesy\n(\n$img\n);\n// 200\n?>"
  },
  {
    "input": "Example #1 Converting a true color image to a palette-based image",
    "output": "<?php\n// Create a new true color image\n$im\n=\nimagecreatetruecolor\n(\n100\n,\n100\n);\n// Convert to palette-based with no dithering and 255 colors\nimagetruecolortopalette\n(\n$im\n,\nfalse\n,\n255\n);\n// Save the image\nimagepng\n(\n$im\n,\n'./paletteimage.png'\n);\n?>"
  },
  {
    "input": "Example #1 imagettfbbox() example",
    "output": "<?php\n// Create a 300x150 image\n$im\n=\nimagecreatetruecolor\n(\n300\n,\n150\n);\n$black\n=\nimagecolorallocate\n(\n$im\n,\n0\n,\n0\n,\n0\n);\n$white\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n255\n,\n255\n);\n// Set the background to be white\nimagefilledrectangle\n(\n$im\n,\n0\n,\n0\n,\n299\n,\n299\n,\n$white\n);\n// Path to our font file\n$font\n=\n'./arial.ttf'\n;\n// First we create our bounding box for the first text\n$bbox\n=\nimagettfbbox\n(\n10\n,\n45\n,\n$font\n,\n'Powered by PHP '\n.\nphpversion\n());\n// This is our cordinates for X and Y\n$x\n=\n$bbox\n[\n0\n] + (\nimagesx\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n4\n] /\n2\n) -\n25\n;\n$y\n=\n$bbox\n[\n1\n] + (\nimagesy\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n5\n] /\n2\n) -\n5\n;\n// Write it\nimagettftext\n(\n$im\n,\n10\n,\n45\n,\n$x\n,\n$y\n,\n$black\n,\n$font\n,\n'Powered by PHP '\n.\nphpversion\n());\n// Create the next bounding box for the second text\n$bbox\n=\nimagettfbbox\n(\n10\n,\n45\n,\n$font\n,\n'and Zend Engine '\n.\nzend_version\n());\n// Set the cordinates so its next to the first text\n$x\n=\n$bbox\n[\n0\n] + (\nimagesx\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n4\n] /\n2\n) +\n10\n;\n$y\n=\n$bbox\n[\n1\n] + (\nimagesy\n(\n$im\n) /\n2\n) - (\n$bbox\n[\n5\n] /\n2\n) -\n5\n;\n// Write it\nimagettftext\n(\n$im\n,\n10\n,\n45\n,\n$x\n,\n$y\n,\n$black\n,\n$font\n,\n'and Zend Engine '\n.\nzend_version\n());\n// Output to browser\nheader\n(\n'Content-Type: image/png'\n);\nimagepng\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #1 Checking for PNG support",
    "output": "<?php\nif (\nimagetypes\n() &\nIMG_PNG\n) {\n    echo\n\"PNG Support is enabled\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Outputting a WBMP image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Set the content type header - in this case image/vnd.wap.wbmp\n// Hint: see image_type_to_mime_type() for content-types\nheader\n(\n'Content-Type: image/vnd.wap.wbmp'\n);\n// Output the image\nimagewbmp\n(\n$im\n);\n?>"
  },
  {
    "input": "Example #2 Saving the WBMP image",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Save the image\nimagewbmp\n(\n$im\n,\n'simpletext.wbmp'\n);\n?>"
  },
  {
    "input": "Example #3 Outputting the image with a different foreground",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Set the content type header - in this case image/vnd.wap.wbmp\n// Hint: see image_type_to_mime_type() for content-types\nheader\n(\n'Content-Type: image/vnd.wap.wbmp'\n);\n// Set a replacement foreground color\n$foreground_color\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\nimagewbmp\n(\n$im\n,\nNULL\n,\n$foreground_color\n);\n?>"
  },
  {
    "input": "Example #1 Saving an WebP file",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'WebP with PHP'\n,\n$text_color\n);\n// Save the image\nimagewebp\n(\n$im\n,\n'php.webp'\n);\n?>"
  },
  {
    "input": "Example #1 Saving an XBM file",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Save the image\nimagexbm\n(\n$im\n,\n'simpletext.xbm'\n);\n?>"
  },
  {
    "input": "Example #2 Saving an XBM file with a different foreground color",
    "output": "<?php\n// Create a blank image and add some text\n$im\n=\nimagecreatetruecolor\n(\n120\n,\n20\n);\n$text_color\n=\nimagecolorallocate\n(\n$im\n,\n233\n,\n14\n,\n91\n);\nimagestring\n(\n$im\n,\n1\n,\n5\n,\n5\n,\n'A Simple Text String'\n,\n$text_color\n);\n// Set a replacement foreground color\n$foreground_color\n=\nimagecolorallocate\n(\n$im\n,\n255\n,\n0\n,\n0\n);\n// Save the image\nimagexbm\n(\n$im\n,\nNULL\n,\n$foreground_color\n);\n?>"
  },
  {
    "input": "Example #1 Embedding IPTC data into a JPEG",
    "output": "<?php\n// iptc_make_tag() function by Thies C. Arntzen\nfunction\niptc_make_tag\n(\n$rec\n,\n$data\n,\n$value\n)\n{\n\n$length\n=\nstrlen\n(\n$value\n);\n\n$retval\n=\nchr\n(\n0x1C\n) .\nchr\n(\n$rec\n) .\nchr\n(\n$data\n);\n    if(\n$length\n<\n0x8000\n)\n    {\n\n$retval\n.=\nchr\n(\n$length\n>>\n8\n) .\nchr\n(\n$length\n&\n0xFF\n);\n    }\n    else\n    {\n\n$retval\n.=\nchr\n(\n0x80\n) .\n\nchr\n(\n0x04\n) .\n\nchr\n((\n$length\n>>\n24\n) &\n0xFF\n) .\n\nchr\n((\n$length\n>>\n16\n) &\n0xFF\n) .\n\nchr\n((\n$length\n>>\n8\n) &\n0xFF\n) .\n\nchr\n(\n$length\n&\n0xFF\n);\n    }\n    return\n$retval\n.\n$value\n;\n}\n// Path to jpeg file\n$path\n=\n'./phplogo.jpg'\n;\n// Set the IPTC tags\n$iptc\n= array(\n\n'2#120'\n=>\n'Test image'\n,\n\n'2#116'\n=>\n'Copyright 2008-2009, The PHP Group'\n);\n// Convert the IPTC tags into binary code\n$data\n=\n''\n;\nforeach(\n$iptc\nas\n$tag\n=>\n$string\n)\n{\n\n$tag\n=\nsubstr\n(\n$tag\n,\n2\n);\n\n$data\n.=\niptc_make_tag\n(\n2\n,\n$tag\n,\n$string\n);\n}\n// Embed the IPTC data\n$content\n=\niptcembed\n(\n$data\n,\n$path\n);\n// Write the new image data out to the file.\n$fp\n=\nfopen\n(\n$path\n,\n\"wb\"\n);\nfwrite\n(\n$fp\n,\n$content\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 iptcparse() used together with getimagesize()",
    "output": "<?php\n$size\n=\ngetimagesize\n(\n'./test.jpg'\n,\n$info\n);\nif(isset(\n$info\n[\n'APP13'\n]))\n{\n\n$iptc\n=\niptcparse\n(\n$info\n[\n'APP13'\n]);\n\nvar_dump\n(\n$iptc\n);\n}\n?>"
  },
  {
    "input": "Example #1 jpeg2wbmp() example",
    "output": "<?php\n// Path to the target jpeg\n$path\n=\n'./test.jpg'\n;\n// Get the image sizes\n$image\n=\ngetimagesize\n(\n$path\n);\n// Convert image\njpeg2wbmp\n(\n$path\n,\n'./test.wbmp'\n,\n$image\n[\n1\n],\n$image\n[\n0\n],\n5\n);\n?>"
  },
  {
    "input": "Example #1 png2wbmp() example",
    "output": "<?php\n// Path to the target png\n$path\n=\n'./test.png'\n;\n// Get the image sizes\n$image\n=\ngetimagesize\n(\n$path\n);\n// Convert image\npng2wbmp\n(\n$path\n,\n'./test.wbmp'\n,\n$image\n[\n1\n],\n$image\n[\n0\n],\n7\n);\n?>"
  },
  {
    "input": "Example #1 Gmagick Example",
    "output": "<?php\n//Instantiate a new Gmagick object\n$image\n= new\nGmagick\n(\n'example.jpg'\n);\n//Make thumbnail from image loaded. 0 for either axes preserves aspect ratio\n$image\n->\nthumbnailimage\n(\n100\n,\n0\n);\n//Create a border around the image, then simulate how the image will look like as an oil painting\n//Notice the chaining of mutator methods which is supported in gmagick\n$image\n->\nborderimage\n(\n\"yellow\"\n,\n8\n,\n8\n)->\noilpaintimage\n(\n0.3\n);\n//Write the current image at the current state to a file\n$image\n->\nwrite\n(\n'example_thumbnail.jpg'\n);\n?>"
  },
  {
    "input": "Example #1 Gmagick::despeckleimage() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1  Gmagick::setCompressionQuality()",
    "output": "<?php\n$gm\n= new\nGmagick\n();\n$gm\n->\nread\n(\n\"magick:rose\"\n);\n$gm\n->\nsetCompressionQuality\n(\n2\n);\n?>"
  },
  {
    "input": "Example #1 Creating a thumbnail in Imagick",
    "output": "<?php\nheader\n(\n'Content-type: image/jpeg'\n);\n$image\n= new\nImagick\n(\n'image.jpg'\n);\n// If 0 is provided as a width or height parameter,\n// aspect ratio is maintained\n$image\n->\nthumbnailImage\n(\n100\n,\n0\n);\necho\n$image\n;\n?>"
  },
  {
    "input": "Example #2 Make a thumbnail of all JPG files in a directory",
    "output": "<?php\n$images\n= new\nImagick\n(\nglob\n(\n'images/*.JPG'\n));\nforeach(\n$images\nas\n$image\n) {\n\n// Providing 0 forces thumbnailImage to maintain aspect ratio\n\n$image\n->\nthumbnailImage\n(\n1024\n,\n0\n);\n}\n$images\n->\nwriteImages\n();\n?>"
  },
  {
    "input": "Example #3 Creating a reflection of an image",
    "output": "<?php\n/* Read the image */\n$im\n= new\nImagick\n(\n\"test.png\"\n);\n/* Thumbnail the image */\n$im\n->\nthumbnailImage\n(\n200\n,\nnull\n);\n/* Create a border for the image */\n$im\n->\nborderImage\n(new\nImagickPixel\n(\n\"white\"\n),\n5\n,\n5\n);\n/* Clone the image and flip it */\n$reflection\n=\n$im\n->\nclone\n();\n$reflection\n->\nflipImage\n();\n/* Create gradient. It will be overlayed on the reflection */\n$gradient\n= new\nImagick\n();\n/* Gradient needs to be large enough for the image and the borders */\n$gradient\n->\nnewPseudoImage\n(\n$reflection\n->\ngetImageWidth\n() +\n10\n,\n$reflection\n->\ngetImageHeight\n() +\n10\n,\n\"gradient:transparent-black\"\n);\n/* Composite the gradient on the reflection */\n$reflection\n->\ncompositeImage\n(\n$gradient\n,\nimagick\n::\nCOMPOSITE_OVER\n,\n0\n,\n0\n);\n/* Add some opacity. Requires ImageMagick 6.2.9 or later */\n$reflection\n->\nsetImageOpacity\n(\n0.3\n);\n/* Create an empty canvas */\n$canvas\n= new\nImagick\n();\n/* Canvas needs to be large enough to hold the both images */\n$width\n=\n$im\n->\ngetImageWidth\n() +\n40\n;\n$height\n= (\n$im\n->\ngetImageHeight\n() *\n2\n) +\n30\n;\n$canvas\n->\nnewImage\n(\n$width\n,\n$height\n, new\nImagickPixel\n(\n\"black\"\n));\n$canvas\n->\nsetImageFormat\n(\n\"png\"\n);\n/* Composite the original image and the reflection on the canvas */\n$canvas\n->\ncompositeImage\n(\n$im\n,\nimagick\n::\nCOMPOSITE_OVER\n,\n20\n,\n10\n);\n$canvas\n->\ncompositeImage\n(\n$reflection\n,\nimagick\n::\nCOMPOSITE_OVER\n,\n20\n,\n$im\n->\ngetImageHeight\n() +\n10\n);\n/* Output the image*/\nheader\n(\n\"Content-Type: image/png\"\n);\necho\n$canvas\n;\n?>"
  },
  {
    "input": "Example #4 Filling text with gradient",
    "output": "<?php\n/* Create a new imagick object */\n$im\n= new\nImagick\n();\n/* Create new image. This will be used as fill pattern */\n$im\n->\nnewPseudoImage\n(\n50\n,\n50\n,\n\"gradient:red-black\"\n);\n/* Create imagickdraw object */\n$draw\n= new\nImagickDraw\n();\n/* Start a new pattern called \"gradient\" */\n$draw\n->\npushPattern\n(\n'gradient'\n,\n0\n,\n0\n,\n50\n,\n50\n);\n/* Composite the gradient on the pattern */\n$draw\n->\ncomposite\n(\nImagick\n::\nCOMPOSITE_OVER\n,\n0\n,\n0\n,\n50\n,\n50\n,\n$im\n);\n/* Close the pattern */\n$draw\n->\npopPattern\n();\n/* Use the pattern called \"gradient\" as the fill */\n$draw\n->\nsetFillPatternURL\n(\n'#gradient'\n);\n/* Set font size to 52 */\n$draw\n->\nsetFontSize\n(\n52\n);\n/* Annotate some text */\n$draw\n->\nannotation\n(\n20\n,\n50\n,\n\"Hello World!\"\n);\n/* Create a new canvas object and a white image */\n$canvas\n= new\nImagick\n();\n$canvas\n->\nnewImage\n(\n350\n,\n70\n,\n\"white\"\n);\n/* Draw the ImagickDraw on to the canvas */\n$canvas\n->\ndrawImage\n(\n$draw\n);\n/* 1px black border around the image */\n$canvas\n->\nborderImage\n(\n'black'\n,\n1\n,\n1\n);\n/* Set the format to PNG */\n$canvas\n->\nsetImageFormat\n(\n'png'\n);\n/* Output the image */\nheader\n(\n\"Content-Type: image/png\"\n);\necho\n$canvas\n;\n?>"
  },
  {
    "input": "Example #5 Read in GIF image and resize all frames",
    "output": "<?php\n/* Create a new imagick object and read in GIF */\n$im\n= new\nImagick\n(\n\"example.gif\"\n);\n/* Resize all frames */\nforeach (\n$im\nas\n$frame\n) {\n\n/* 50x50 frames */\n\n$frame\n->\nthumbnailImage\n(\n50\n,\n50\n);\n\n/* Set the virtual canvas to correct size */\n\n$frame\n->\nsetImagePage\n(\n50\n,\n50\n,\n0\n,\n0\n);\n}\n/* Notice writeImages instead of writeImage */\n$im\n->\nwriteImages\n(\n\"example_small.gif\"\n,\ntrue\n);\n?>"
  },
  {
    "input": "Example #6 Create a PHP logo",
    "output": "<?php\n/* Set width and height in proportion of genuine PHP logo */\n$width\n=\n400\n;\n$height\n=\n210\n;\n/* Create an Imagick object with transparent canvas */\n$img\n= new\nImagick\n();\n$img\n->\nnewImage\n(\n$width\n,\n$height\n, new\nImagickPixel\n(\n'transparent'\n));\n/* New ImagickDraw instance for ellipse draw */\n$draw\n= new\nImagickDraw\n();\n/* Set purple fill color for ellipse */\n$draw\n->\nsetFillColor\n(\n'#777bb4'\n);\n/* Set ellipse dimensions */\n$draw\n->\nellipse\n(\n$width\n/\n2\n,\n$height\n/\n2\n,\n$width\n/\n2\n,\n$height\n/\n2\n,\n0\n,\n360\n);\n/* Draw ellipse onto the canvas */\n$img\n->\ndrawImage\n(\n$draw\n);\n/* Reset fill color from purple to black for text (note: we are reusing ImagickDraw object) */\n$draw\n->\nsetFillColor\n(\n'black'\n);\n/* Set stroke border to white color */\n$draw\n->\nsetStrokeColor\n(\n'white'\n);\n/* Set stroke border thickness */\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n/* Set font kerning (negative value means that letters are closer to each other) */\n$draw\n->\nsetTextKerning\n(-\n8\n);\n/* Set font and font size used in PHP logo */\n$draw\n->\nsetFont\n(\n'Handel Gothic.ttf'\n);\n$draw\n->\nsetFontSize\n(\n150\n);\n/* Center text horizontally and vertically */\n$draw\n->\nsetGravity\n(\nImagick\n::\nGRAVITY_CENTER\n);\n/* Add center \"php\" with Y offset of -10 to canvas (inside ellipse) */\n$img\n->\nannotateImage\n(\n$draw\n,\n0\n, -\n10\n,\n0\n,\n'php'\n);\n$img\n->\nsetImageFormat\n(\n'png'\n);\n/* Set appropriate header for PNG and output the image */\nheader\n(\n'Content-Type: image/png'\n);\necho\n$img\n;\n?>"
  },
  {
    "input": "Example #1  Imagick::adaptiveThresholdImage()",
    "output": "<?php\nfunction\nadaptiveThresholdImage\n(\n$imagePath\n,\n$width\n,\n$height\n,\n$adaptiveOffset\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$adaptiveOffsetQuantum\n=\nintval\n(\n$adaptiveOffset\n*\n\\Imagick\n::\ngetQuantum\n());\n\n$imagick\n->\nadaptiveThresholdImage\n(\n$width\n,\n$height\n,\n$adaptiveOffsetQuantum\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::addNoiseImage()",
    "output": "<?php\nfunction\naddNoiseImage\n(\n$noiseType\n,\n$imagePath\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\naddNoiseImage\n(\n$noiseType\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::affineTransformImage()",
    "output": "<?php\nfunction\naffineTransformImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$angle\n=\ndeg2rad\n(\n40\n);\n\n$affineRotate\n= array(\n\n\"sx\"\n=>\ncos\n(\n$angle\n),\n\"sy\"\n=>\ncos\n(\n$angle\n),\n\n\"rx\"\n=>\nsin\n(\n$angle\n),\n\"ry\"\n=> -\nsin\n(\n$angle\n),\n\n\"tx\"\n=>\n0\n,\n\"ty\"\n=>\n0\n,\n    );\n\n$draw\n->\naffine\n(\n$affineRotate\n);\n\n$imagick\n->\naffineTransformImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Imagick::appendImages() example",
    "output": "<?php\n/* Create new imagick object */\n$im\n= new\nImagick\n();\n/* create red, green and blue images */\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"red\"\n);\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"green\"\n);\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"blue\"\n);\n/* Append the images into one */\n$im\n->\nresetIterator\n();\n$combined\n=\n$im\n->\nappendImages\n(\ntrue\n);\n/* Output the image */\n$combined\n->\nsetImageFormat\n(\n\"png\"\n);\nheader\n(\n\"Content-Type: image/png\"\n);\necho\n$combined\n;\n?>"
  },
  {
    "input": "Example #1  Imagick::autoLevelImage()",
    "output": "<?php\nfunction\nautoLevelImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::blackThresholdImage()",
    "output": "<?php\nfunction\nblackThresholdImage\n(\n$imagePath\n,\n$thresholdColor\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nblackthresholdimage\n(\n$thresholdColor\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::blueShiftImage()",
    "output": "<?php\nfunction\nblueShiftImage\n(\n$imagePath\n,\n$blueShift\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nblueShiftImage\n(\n$blueShift\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::borderImage()",
    "output": "<?php\nfunction\nborderImage\n(\n$imagePath\n,\n$color\n,\n$width\n,\n$height\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nborderImage\n(\n$color\n,\n$width\n,\n$height\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::brightnessContrastImage()",
    "output": "<?php\nfunction\nbrightnessContrastImage\n(\n$imagePath\n,\n$brightness\n,\n$contrast\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nbrightnessContrastImage\n(\n$brightness\n,\n$contrast\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::charcoalImage()",
    "output": "<?php\nfunction\ncharcoalImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ncharcoalImage\n(\n$radius\n,\n$sigma\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Imagick object cloning in different versions of imagick",
    "output": "<?php\n// Cloning an Imagick object in imagick 2.x and 3.0:\n$newImage\n=\n$image\n->\nclone\n();\n// Cloning an Imagick object from 3.1.0 on:\n$newImage\n= clone\n$image\n;\n?>"
  },
  {
    "input": "Example #1  Imagick::colorizeImage()",
    "output": "<?php\nfunction\ncolorizeImage\n(\n$imagePath\n,\n$color\n,\n$opacity\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$opacity\n=\n$opacity\n/\n255.0\n;\n\n$opacityColor\n= new\n\\ImagickPixel\n(\n\"rgba(0, 0, 0,\n$opacity\n)\"\n);\n\n$imagick\n->\ncolorizeImage\n(\n$color\n,\n$opacityColor\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::colorMatrixImage()",
    "output": "<?php\nfunction\ncolorMatrixImage\n(\n$imagePath\n,\n$colorMatrix\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageOpacity\n(\n1\n);\n\n//A color matrix should look like:\n    //    $colorMatrix = [\n    //        1.5, 0.0, 0.0, 0.0, 0.0, -0.157,\n    //        0.0, 1.0, 0.5, 0.0, 0.0, -0.157,\n    //        0.0, 0.0, 1.5, 0.0, 0.0, -0.157,\n    //        0.0, 0.0, 0.0, 1.0, 0.0,  0.0,\n    //        0.0, 0.0, 0.0, 0.0, 1.0,  0.0,\n    //        0.0, 0.0, 0.0, 0.0, 0.0,  1.0\n    //    ];\n\n$background\n= new\n\\Imagick\n();\n\n$background\n->\nnewPseudoImage\n(\n$imagick\n->\ngetImageWidth\n(),\n$imagick\n->\ngetImageHeight\n(),\n\"pattern:checkerboard\"\n);\n\n$background\n->\nsetImageFormat\n(\n'png'\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n$imagick\n->\ncolorMatrixImage\n(\n$colorMatrix\n);\n\n\n$background\n->\ncompositeImage\n(\n$imagick\n,\n\\Imagick\n::\nCOMPOSITE_ATOP\n,\n0\n,\n0\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$background\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::contrastImage()",
    "output": "<?php\nfunction\ncontrastImage\n(\n$imagePath\n,\n$contrastType\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n    if (\n$contrastType\n!=\n2\n) {\n\n$imagick\n->\ncontrastImage\n(\n$contrastType\n);\n    }\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::convolveImage()",
    "output": "<?php\nfunction\nconvolveImage\n(\n$imagePath\n,\n$bias\n,\n$kernelMatrix\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n//$edgeFindingKernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1,];\n\n$imagick\n->\nsetImageBias\n(\n$bias\n*\n\\Imagick\n::\ngetQuantum\n());\n\n$imagick\n->\nconvolveImage\n(\n$kernelMatrix\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::cropImage()",
    "output": "<?php\nfunction\ncropImage\n(\n$imagePath\n,\n$startX\n,\n$startY\n,\n$width\n,\n$height\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ncropImage\n(\n$width\n,\n$height\n,\n$startX\n,\n$startY\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::deskewImage()",
    "output": "<?php\nfunction\ndeskewImage\n(\n$threshold\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n\"images/NYTimes-Page1-11-11-1918.jpg\"\n));\n\n$deskewImagick\n= clone\n$imagick\n;\n\n\n//This is the only thing required for deskewing.\n\n$deskewImagick\n->\ndeskewImage\n(\n$threshold\n);\n\n//The rest of this example is to make the result obvious - because\n    //otherwise the result is not obvious.\n\n$trim\n=\n9\n;\n\n$deskewImagick\n->\ncropImage\n(\n$deskewImagick\n->\ngetImageWidth\n() -\n$trim\n,\n$deskewImagick\n->\ngetImageHeight\n(),\n$trim\n,\n0\n);\n\n$imagick\n->\ncropImage\n(\n$imagick\n->\ngetImageWidth\n() -\n$trim\n,\n$imagick\n->\ngetImageHeight\n(),\n$trim\n,\n0\n);\n\n$deskewImagick\n->\nresizeimage\n(\n$deskewImagick\n->\ngetImageWidth\n() /\n2\n,\n$deskewImagick\n->\ngetImageHeight\n() /\n2\n,\n\\Imagick\n::\nFILTER_LANCZOS\n,\n1\n);\n\n$imagick\n->\nresizeimage\n(\n$imagick\n->\ngetImageWidth\n() /\n2\n,\n$imagick\n->\ngetImageHeight\n() /\n2\n,\n\\Imagick\n::\nFILTER_LANCZOS\n,\n1\n);\n\n$newCanvas\n= new\n\\Imagick\n();\n\n$newCanvas\n->\nnewimage\n(\n$imagick\n->\ngetImageWidth\n() +\n$deskewImagick\n->\ngetImageWidth\n() +\n20\n,\n$imagick\n->\ngetImageHeight\n(),\n'red'\n,\n'jpg'\n);\n\n$newCanvas\n->\ncompositeimage\n(\n$imagick\n,\n\\Imagick\n::\nCOMPOSITE_COPY\n,\n5\n,\n0\n);\n\n$newCanvas\n->\ncompositeimage\n(\n$deskewImagick\n,\n\\Imagick\n::\nCOMPOSITE_COPY\n,\n$imagick\n->\ngetImageWidth\n() +\n10\n,\n0\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$newCanvas\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::despeckleImage()",
    "output": "<?php\nfunction\ndespeckleImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ndespeckleImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::edgeImage()",
    "output": "<?php\nfunction\nedgeImage\n(\n$imagePath\n,\n$radius\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nedgeImage\n(\n$radius\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::embossImage()",
    "output": "<?php\nfunction\nembossImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nembossImage\n(\n$radius\n,\n$sigma\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::enhanceImage()",
    "output": "<?php\nfunction\nenhanceImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nenhanceImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::equalizeImage()",
    "output": "<?php\nfunction\nequalizeImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nequalizeImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::filter()",
    "output": "<?php\nfunction\nfilter\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$matrix\n= [\n        [-\n1\n,\n0\n, -\n1\n],\n        [\n0\n,\n5\n,\n0\n],\n        [-\n1\n,\n0\n, -\n1\n],\n    ];\n\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n\n$strength\n=\n0.5\n;\n\n$kernel\n->\nscale\n(\n$strength\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$kernel\n->\naddUnityKernel\n(\n1\n-\n$strength\n);\n\n$imagick\n->\nfilter\n(\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::flipImage()",
    "output": "<?php\nfunction\nflipImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nflipImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Imagick::floodfillPaintImage() example",
    "output": "<?php\n/* Create new imagick object */\n$im\n= new\nImagick\n();\n/* create red, green and blue images */\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"red\"\n);\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"green\"\n);\n$im\n->\nnewImage\n(\n100\n,\n50\n,\n\"blue\"\n);\n/* Append the images into one */\n$im\n->\nresetIterator\n();\n$combined\n=\n$im\n->\nappendImages\n(\ntrue\n);\n/* Save the intermediate image for comparison */\n$combined\n->\nwriteImage\n(\n\"floodfillpaint_intermediate.png\"\n);\n/* The target pixel to paint */\n$x\n=\n1\n;\n$y\n=\n1\n;\n/* Get the color we are painting */\n$target\n=\n$combined\n->\ngetImagePixelColor\n(\n$x\n,\n$y\n);\n/* Paints pixel in position 1,1 black and all neighboring\n   pixels that match the target color */\n$combined\n->\nfloodfillPaintImage\n(\n\"black\"\n,\n1\n,\n$target\n,\n$x\n,\n$y\n,\nfalse\n);\n/* Save the result */\n$combined\n->\nwriteImage\n(\n\"floodfillpaint_result.png\"\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::flopImage()",
    "output": "<?php\nfunction\nflopImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nflopImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::forwardFourierTransformImage()",
    "output": "<?php\n//Utility function for forwardTransformImage\nfunction\ncreateMask\n() {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n0\n);\n\n$draw\n->\nsetStrokeColor\n(\n'rgb(255, 255, 255)'\n);\n\n$draw\n->\nsetFillColor\n(\n'rgb(255, 255, 255)'\n);\n\n//Draw a circle on the y-axis, with it's centre\n    //at x, y that touches the origin\n\n$draw\n->\ncircle\n(\n250\n,\n250\n,\n220\n,\n250\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n512\n,\n512\n,\n\"black\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\n$imagick\n->\ngaussianBlurImage\n(\n20\n,\n20\n);\n\n$imagick\n->\nautoLevelImage\n();\n    return\n$imagick\n;\n}\nfunction\nforwardFourierTransformImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nresizeimage\n(\n512\n,\n512\n,\n\\Imagick\n::\nFILTER_LANCZOS\n,\n1\n);\n\n$mask\n=\ncreateMask\n();\n\n$imagick\n->\nforwardFourierTransformImage\n(\ntrue\n);\n    @\n$imagick\n->\nsetimageindex\n(\n0\n);\n\n$magnitude\n=\n$imagick\n->\ngetimage\n();\n    @\n$imagick\n->\nsetimageindex\n(\n1\n);\n\n$imagickPhase\n=\n$imagick\n->\ngetimage\n();\n    if (\ntrue\n) {\n\n$imagickPhase\n->\ncompositeImage\n(\n$mask\n,\n\\Imagick\n::\nCOMPOSITE_MULTIPLY\n,\n0\n,\n0\n);\n    }\n    if (\nfalse\n) {\n\n$output\n= clone\n$imagickPhase\n;\n\n$output\n->\nsetimageformat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$output\n->\ngetImageBlob\n();\n    }\n\n$magnitude\n->\ninverseFourierTransformImage\n(\n$imagickPhase\n,\ntrue\n);\n\n$magnitude\n->\nsetimageformat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$magnitude\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::frameImage()",
    "output": "<?php\nfunction\nframeImage\n(\n$imagePath\n,\n$color\n,\n$width\n,\n$height\n,\n$innerBevel\n,\n$outerBevel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$width\n=\n$width\n+\n$innerBevel\n+\n$outerBevel\n;\n\n$height\n=\n$height\n+\n$innerBevel\n+\n$outerBevel\n;\n\n$imagick\n->\nframeimage\n(\n\n$color\n,\n\n$width\n,\n\n$height\n,\n\n$innerBevel\n,\n\n$outerBevel\n\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Create a sinusoidal gradient",
    "output": "<?php\n$imagick\n= new\nImagick\n();\n$imagick\n->\nnewPseudoImage\n(\n200\n,\n200\n,\n'gradient:black-white'\n);\n$arguments\n= array(\n3\n, -\n90\n);\n$imagick\n->\nfunctionImage\n(\nImagick\n::\nFUNCTION_SINUSOID\n,\n$arguments\n);\nheader\n(\n\"Content-Type: image/png\"\n);\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\necho\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #2 Create a gradient from the polynomial (4x^2 - 4x + 1)",
    "output": "<?php\n$imagick\n= new\nImagick\n();\n$imagick\n->\nnewPseudoImage\n(\n200\n,\n200\n,\n'gradient:black-white'\n);\n$arguments\n= array(\n4\n, -\n4\n,\n1\n);\n$imagick\n->\nfunctionImage\n(\nImagick\n::\nFUNCTION_POLYNOMIAL\n,\n$arguments\n);\nheader\n(\n\"Content-Type: image/png\"\n);\n$imagick\n->\nsetimageformat\n(\n\"png\"\n);\necho\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #3 \n     Create a complex gradient from the\n     polynomial (4x^2 - 4x^2 + 1) modulated by a sinusoidal gradient",
    "output": "<?php\n$imagick1\n= new\nImagick\n();\n$imagick1\n->\nnewPseudoImage\n(\n200\n,\n200\n,\n'gradient:black-white'\n);\n$arguments\n= array(\n9\n, -\n90\n);\n$imagick1\n->\nfunctionImage\n(\nImagick\n::\nFUNCTION_SINUSOID\n,\n$arguments\n);\n$imagick2\n= new\nImagick\n();\n$imagick2\n->\nnewPseudoImage\n(\n200\n,\n200\n,\n'gradient:black-white'\n);\n$arguments\n= array(\n0.5\n,\n0\n);\n$imagick2\n->\nfunctionImage\n(\nImagick\n::\nFUNCTION_SINUSOID\n,\n$arguments\n);\n$imagick1\n->\ncompositeimage\n(\n$imagick2\n,\nImagick\n::\nCOMPOSITE_MULTIPLY\n,\n0\n,\n0\n);\nheader\n(\n\"Content-Type: image/png\"\n);\n$imagick1\n->\nsetImageFormat\n(\n\"png\"\n);\necho\n$imagick1\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #1  Imagick::fxImage()",
    "output": "<?php\nfunction\nfxImage\n() {\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewPseudoImage\n(\n200\n,\n200\n,\n\"xc:white\"\n);\n\n$fx\n=\n'xx=i-w/2; yy=j-h/2; rr=hypot(xx,yy); (.5-rr/140)*1.2+.5'\n;\n\n$fxImage\n=\n$imagick\n->\nfxImage\n(\n$fx\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n\n$fxImage\n->\nsetimageformat\n(\n'png'\n);\n    echo\n$fxImage\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::gammaImage()",
    "output": "<?php\nfunction\ngammaImage\n(\n$imagePath\n,\n$gamma\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ngammaImage\n(\n$gamma\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::gaussianBlurImage()",
    "output": "<?php\nfunction\ngaussianBlurImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ngaussianBlurImage\n(\n$radius\n,\n$sigma\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Using Imagick::getImageGeometry()",
    "output": "<?php\n$imagick\n= new\nImagick\n();\n$imagick\n->\nnewImage\n(\n100\n,\n200\n,\n\"black\"\n);\nprint_r\n(\n$imagick\n->\ngetImageGeometry\n());\n?>"
  },
  {
    "input": "Example #1 Generates  Imagick::getImageHistogram()",
    "output": "<?php\nfunction\ngetColorStatistics\n(\n$histogramElements\n,\n$colorChannel\n) {\n\n$colorStatistics\n= [];\n    foreach (\n$histogramElements\nas\n$histogramElement\n) {\n\n$color\n=\n$histogramElement\n->\ngetColorValue\n(\n$colorChannel\n);\n\n$color\n=\nintval\n(\n$color\n*\n255\n);\n\n$count\n=\n$histogramElement\n->\ngetColorCount\n();\n        if (\narray_key_exists\n(\n$color\n,\n$colorStatistics\n)) {\n\n$colorStatistics\n[\n$color\n] +=\n$count\n;\n        }\n        else {\n\n$colorStatistics\n[\n$color\n] =\n$count\n;\n        }\n    }\n\nksort\n(\n$colorStatistics\n);\n\n    return\n$colorStatistics\n;\n}\n\nfunction\ngetImageHistogram\n(\n$imagePath\n) {\n\n$backgroundColor\n=\n'black'\n;\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n0\n);\n//make the lines be as thin as possible\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\n$histogramWidth\n=\n256\n;\n\n$histogramHeight\n=\n100\n;\n// the height for each RGB segment\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n//Resize the image to be small, otherwise PHP tends to run out of memory\n    //This might lead to bad results for images that are pathologically 'pixelly'\n\n$imagick\n->\nadaptiveResizeImage\n(\n200\n,\n200\n,\ntrue\n);\n\n$histogramElements\n=\n$imagick\n->\ngetImageHistogram\n();\n\n$histogram\n= new\n\\Imagick\n();\n\n$histogram\n->\nnewpseudoimage\n(\n$histogramWidth\n,\n$histogramHeight\n*\n3\n,\n'xc:black'\n);\n\n$histogram\n->\nsetImageFormat\n(\n'png'\n);\n\n$getMax\n= function (\n$carry\n,\n$item\n)  {\n        if (\n$item\n>\n$carry\n) {\n            return\n$item\n;\n        }\n        return\n$carry\n;\n    };\n\n$colorValues\n= [\n\n'red'\n=>\ngetColorStatistics\n(\n$histogramElements\n,\n\\Imagick\n::\nCOLOR_RED\n),\n\n'lime'\n=>\ngetColorStatistics\n(\n$histogramElements\n,\n\\Imagick\n::\nCOLOR_GREEN\n),\n\n'blue'\n=>\ngetColorStatistics\n(\n$histogramElements\n,\n\\Imagick\n::\nCOLOR_BLUE\n),\n    ];\n\n$max\n=\narray_reduce\n(\n$colorValues\n[\n'red'\n] ,\n$getMax\n,\n0\n);\n\n$max\n=\narray_reduce\n(\n$colorValues\n[\n'lime'\n] ,\n$getMax\n,\n$max\n);\n\n$max\n=\narray_reduce\n(\n$colorValues\n[\n'blue'\n] ,\n$getMax\n,\n$max\n);\n\n$scale\n=\n$histogramHeight\n/\n$max\n;\n\n$count\n=\n0\n;\n    foreach (\n$colorValues\nas\n$color\n=>\n$values\n) {\n\n$draw\n->\nsetstrokecolor\n(\n$color\n);\n\n$offset\n= (\n$count\n+\n1\n) *\n$histogramHeight\n;\n        foreach (\n$values\nas\n$index\n=>\n$value\n) {\n\n$draw\n->\nline\n(\n$index\n,\n$offset\n,\n$index\n,\n$offset\n- (\n$value\n*\n$scale\n));\n        }\n\n$count\n++;\n    }\n\n$histogram\n->\ndrawImage\n(\n$draw\n);\n\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$histogram\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::getPixelIterator()",
    "output": "<?php\nfunction\ngetPixelIterator\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n=\n$imagick\n->\ngetPixelIterator\n();\n    foreach (\n$imageIterator\nas\n$row\n=>\n$pixels\n) {\n/* Loop through pixel rows */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n/* Loop through the pixels in the row (columns) */\n            /** @var $pixel \\ImagickPixel */\n\nif (\n$column\n%\n2\n) {\n\n$pixel\n->\nsetColor\n(\n\"rgba(0, 0, 0, 0)\"\n);\n/* Paint every second pixel black*/\n\n}\n        }\n\n$imageIterator\n->\nsyncIterator\n();\n/* Sync the iterator, this is important to do on each iteration */\n\n}\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1 Getting the size of a raw RGB image set at 200x400, after scaling to 400x800 (compared to width / height)",
    "output": "<?php\n//Set size first and then load the raw image\n$img\n= new\nImagick\n();\n$img\n->\nsetSize\n(\n200\n,\n400\n);\n$img\n->\nreadImage\n(\n\"image.rgb\"\n);\n$img\n->\nscaleImage\n(\n400\n,\n800\n);\n$size\n=\n$img\n->\ngetSize\n();\nprint_r\n(\n$size\n);\necho\n$img\n->\ngetImageWidth\n().\n\"x\"\n.\n$img\n->\ngetImageHeight\n();\n?>"
  },
  {
    "input": "Example #1  Imagick::haldClutImage()",
    "output": "<?php\nfunction\nhaldClutImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagickPalette\n= new\n\\Imagick\n(\nrealpath\n(\n\"images/hald/hald_8.png\"\n));\n\n$imagickPalette\n->\nsepiatoneImage\n(\n55\n);\n\n$imagick\n->\nhaldClutImage\n(\n$imagickPalette\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::identifyFormat()",
    "output": "<?php\n        $output\n=\n\"Output of 'Trim box: %@ number of unique colors: %k' is: <br/>\"\n;\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n\"./images/artifact/mask.png\"\n));\n\n$output\n.=\n$imagick\n->\nidentifyFormat\n(\n\"Trim box: %@ number of unique colors: %k\"\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::implodeImage()",
    "output": "<?php\nfunction\nimplodeImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nimplodeImage\n(\n0.0001\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Imagick::importImagePixels() example",
    "output": "<?php\n/* Generate array of pixels. 2000 pixels per color stripe */\n$count\n=\n2000\n*\n3\n;\n$pixels\n=\n\narray_merge\n(\narray_pad\n(array(),\n$count\n,\n0\n),\n\narray_pad\n(array(),\n$count\n,\n255\n),\n\narray_pad\n(array(),\n$count\n,\n0\n),\n\narray_pad\n(array(),\n$count\n,\n255\n),\n\narray_pad\n(array(),\n$count\n,\n0\n));\n/* Width and height. The area is amount of pixels divided\n   by three. Three comes from 'RGB', three values per pixel */\n$width\n=\n$height\n=\npow\n((\ncount\n(\n$pixels\n) /\n3\n),\n0.5\n);\n/* Create empty image */\n$im\n= new\nImagick\n();\n$im\n->\nnewImage\n(\n$width\n,\n$height\n,\n'gray'\n);\n/* Import the pixels into image.\n   width * height * strlen(\"RGB\") must match count($pixels) */\n$im\n->\nimportImagePixels\n(\n0\n,\n0\n,\n$width\n,\n$height\n,\n\"RGB\"\n,\nImagick\n::\nPIXEL_CHAR\n,\n$pixels\n);\n/* output as jpeg image */\n$im\n->\nsetImageFormat\n(\n'jpg'\n);\nheader\n(\n\"Content-Type: image/jpg\"\n);\necho\n$im\n;\n?>"
  },
  {
    "input": "Example #1  Imagick::levelImage()",
    "output": "<?php\nfunction\nlevelImage\n(\n$blackPoint\n,\n$gamma\n,\n$whitePoint\n) {\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewPseudoimage\n(\n500\n,\n500\n,\n'gradient:black-white'\n);\n\n$imagick\n->\nsetFormat\n(\n'png'\n);\n\n$quantum\n=\n$imagick\n->\ngetQuantum\n();\n\n$imagick\n->\nlevelImage\n(\n$blackPoint\n/\n100\n,\n$gamma\n,\n$quantum\n*\n$whitePoint\n/\n100\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::linearStretchImage()",
    "output": "<?php\nfunction\nlinearStretchImage\n(\n$imagePath\n,\n$blackThreshold\n,\n$whiteThreshold\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$pixels\n=\n$imagick\n->\ngetImageWidth\n() *\n$imagick\n->\ngetImageHeight\n();\n\n$imagick\n->\nlinearStretchImage\n(\n$blackThreshold\n*\n$pixels\n,\n$whiteThreshold\n*\n$pixels\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::magnifyImage()",
    "output": "<?php\nfunction\nmagnifyImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nmagnifyImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::medianFilterImage()",
    "output": "<?php\nfunction\nmedianFilterImage\n(\n$radius\n,\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n    @\n$imagick\n->\nmedianFilterImage\n(\n$radius\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::mergeImageLayers()",
    "output": "<?php\nfunction\nmergeImageLayers\n(\n$layerMethodType\n,\n$imagePath1\n,\n$imagePath2\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick2\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath2\n));\n\n$imagick\n->\naddImage\n(\n$imagick2\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n$result\n=\n$imagick\n->\nmergeImageLayers\n(\n$layerMethodType\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$result\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::modulateImage()",
    "output": "<?php\nfunction\nmodulateImage\n(\n$imagePath\n,\n$hue\n,\n$brightness\n,\n$saturation\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nmodulateImage\n(\n$brightness\n,\n$saturation\n,\n$hue\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Convolve Imagick::morphology()",
    "output": "<?php\n        $imagick\n=\n$this\n->\ngetCharacter\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_GAUSSIAN\n,\n\"5,1\"\n);\n\n$imagick\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CONVOLVE\n,\n2\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #2 Correlate Imagick::morphology()",
    "output": "<?php\n\n// Top-left pixel must be black\n        // Bottom right pixel must be white\n        // We don't care about the rest.\n\n\n$imagick\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\nself\n::\n$correlateMatrix\n, [\n2\n,\n2\n]);\n\n$imagick\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CORRELATE\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #3 Erode Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_ERODE\n,\n2\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #4 Erode Intensity Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacter\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"1\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_ERODE_INTENSITY\n,\n2\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #5 Dilate Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DILATE\n,\n4\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #6 Dilate intensity Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacter\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"1\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DILATE_INTENSITY\n,\n4\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #7 Distance with Chebyshev kernel Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_CHEBYSHEV\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DISTANCE\n,\n3\n,\n$kernel\n);\n\n$canvas\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #8 Distance with Manhattan kernel Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_MANHATTAN\n,\n\"5\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DISTANCE\n,\n3\n,\n$kernel\n);\n\n$canvas\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #9 Distance with ocatagonal kernel Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGONAL\n,\n\"5\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DISTANCE\n,\n3\n,\n$kernel\n);\n\n$canvas\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #10 Distance with Euclidean kernel Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_EUCLIDEAN\n,\n\"4\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_DISTANCE\n,\n3\n,\n$kernel\n);\n\n$canvas\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #11 Edge Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_EDGE\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #12 Open Imagick::morphology()",
    "output": "<?php\n\n// As a result you will see that 'Open' smoothed the outline, by rounding off any sharp points, and remove any parts that is smaller than the shape used. It will also disconnect or 'open' any thin bridges.\n\n$canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"6\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_OPEN\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #13 Open intensity Imagick::morphology()",
    "output": "<?php\n\n// As a result you will see that 'Open' smoothed the outline, by rounding off any sharp points, and remove any parts that is smaller than the shape used. It will also disconnect or 'open' any thin bridges.\n\n$canvas\n=\n$this\n->\ngetCharacter\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"6\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_OPEN_INTENSITY\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #14 Close Imagick::morphology()",
    "output": "<?php\n\n//The basic use of the 'Close' method is to reduce or remove any 'holes' or 'gaps' about the size of the kernel 'Structure Element'. That is 'close' parts of the background that are about that size.\n\n$canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"6\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CLOSE\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #15 Close Intensity Imagick::morphology()",
    "output": "<?php\n\n//The basic use of the 'Close' method is to reduce or remove any 'holes' or 'gaps' about the size of the kernel 'Structure Element'. That is 'close' parts of the background that are about that size.\n\n$canvas\n=\n$this\n->\ngetCharacter\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"6\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CLOSE_INTENSITY\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #16 Smooth Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_SMOOTH\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #17 Edge in Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_EDGE_IN\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #18 Edge out Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_OCTAGON\n,\n\"3\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_EDGE_OUT\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #19 The 'TopHat' method, or more specifically 'White Top Hat', returns the pixels that were removed by a Opening of the shape, that is the pixels that were removed to round off the points, and the connecting bridged between shapes. Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"5\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_TOP_HAT\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #20 The 'BottomHat' method, also known as 'Black TopHat' is the pixels that a Closing of the shape adds to the image. That is the pixels that were used to fill in the 'holes', 'gaps', and 'bridges'. Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"5\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_BOTTOM_HAT\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #21 Hit and Miss Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n//This finds all the pixels with 3 pixels of the right edge\n\n$matrix\n= [[\n1\n,\nfalse\n,\nfalse\n,\n0\n]];\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n\n$matrix\n,\n            [\n0\n,\n0\n]\n        );\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_HIT_AND_MISS\n,\n1\n,\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #22 Thinning Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$leftEdgeKernel\n=\n\\ImagickKernel\n::\nfromMatrix\n([[\n0\n,\n1\n]], [\n1\n,\n0\n]);\n\n$rightEdgeKernel\n=\n\\ImagickKernel\n::\nfromMatrix\n([[\n1\n,\n0\n]], [\n0\n,\n0\n]);\n\n$leftEdgeKernel\n->\naddKernel\n(\n$rightEdgeKernel\n);\n\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_THINNING\n,\n3\n,\n$leftEdgeKernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #23 Thicken Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$leftEdgeKernel\n=\n\\ImagickKernel\n::\nfromMatrix\n([[\n0\n,\n1\n]], [\n1\n,\n0\n]);\n\n$rightEdgeKernel\n=\n\\ImagickKernel\n::\nfromMatrix\n([[\n1\n,\n0\n]], [\n0\n,\n0\n]);\n\n$leftEdgeKernel\n->\naddKernel\n(\n$rightEdgeKernel\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_THICKEN\n,\n3\n,\n$leftEdgeKernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #24 Thick to generate a convex hull Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$diamondKernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DIAMOND\n,\n\"1\"\n);\n\n$convexKernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_CONVEX_HULL\n,\n\"\"\n);\n\n// The thicken morphology doesn't handle small gaps. We close them\n        // with the close morphology.\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CLOSE\n,\n1\n,\n$diamondKernel\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_THICKEN\n, -\n1\n,\n$convexKernel\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_CLOSE\n,\n1\n,\n$diamondKernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #25 Iterative morphology Imagick::morphology()",
    "output": "<?php\n        $canvas\n=\n$this\n->\ngetCharacterOutline\n();\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\\Imagick\n::\nKERNEL_DISK\n,\n\"2\"\n);\n\n$canvas\n->\nmorphology\n(\n\\Imagick\n::\nMORPHOLOGY_ITERATIVE\n,\n3\n,\n$kernel\n);\n\n$canvas\n->\nautoLevelImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$canvas\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #26 Helper function to get an image silhouette Imagick::morphology()",
    "output": "<?php\nfunction\ngetCharacterOutline\n() {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n\"./images/character.png\"\n));\n\n$character\n= new\n\\Imagick\n();\n\n$character\n->\nnewPseudoImage\n(\n\n$imagick\n->\ngetImageWidth\n(),\n\n$imagick\n->\ngetImageHeight\n(),\n\n\"canvas:white\"\n\n);\n\n$canvas\n= new\n\\Imagick\n();\n\n$canvas\n->\nnewPseudoImage\n(\n\n$imagick\n->\ngetImageWidth\n(),\n\n$imagick\n->\ngetImageHeight\n(),\n\n\"canvas:black\"\n\n);\n\n$character\n->\ncompositeimage\n(\n\n$imagick\n,\n\n\\Imagick\n::\nCOMPOSITE_COPYOPACITY\n,\n\n0\n,\n0\n\n);\n\n$canvas\n->\ncompositeimage\n(\n\n$character\n,\n\n\\Imagick\n::\nCOMPOSITE_ATOP\n,\n\n0\n,\n0\n\n);\n\n$canvas\n->\nsetFormat\n(\n'png'\n);\n    return\n$canvas\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::motionBlurImage()",
    "output": "<?php\nfunction\nmotionBlurImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$angle\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nmotionBlurImage\n(\n$radius\n,\n$sigma\n,\n$angle\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::negateImage()",
    "output": "<?php\nfunction\nnegateImage\n(\n$imagePath\n,\n$grayOnly\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nnegateImage\n(\n$grayOnly\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::newPseudoImage()",
    "output": "<?php\nfunction\nnewPseudoImage\n(\n$canvasType\n) {\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewPseudoImage\n(\n300\n,\n300\n,\n$canvasType\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n//newPseudoImage('gradient:red-rgba(64, 255, 255, 0.5)');\n//newPseudoImage(\"radial-gradient:red-blue\");\nnewPseudoImage\n(\n\"plasma:fractal\"\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::normalizeImage()",
    "output": "<?php\nfunction\nnormalizeImage\n(\n$imagePath\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$original\n= clone\n$imagick\n;\n\n$original\n->\ncropimage\n(\n$original\n->\ngetImageWidth\n() /\n2\n,\n$original\n->\ngetImageHeight\n(),\n0\n,\n0\n);\n\n$imagick\n->\nnormalizeImage\n(\n$channel\n);\n\n$imagick\n->\ncompositeimage\n(\n$original\n,\n\\Imagick\n::\nCOMPOSITE_ATOP\n,\n0\n,\n0\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::oilPaintImage()",
    "output": "<?php\nfunction\noilPaintImage\n(\n$imagePath\n,\n$radius\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\noilPaintImage\n(\n$radius\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::orderedPosterizeImage()",
    "output": "<?php\nfunction\norderedPosterizeImage\n(\n$imagePath\n,\n$orderedPosterizeType\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n\n\n$imagick\n->\norderedPosterizeImage\n(\n$orderedPosterizeType\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n//orderedPosterizeImage($imagePath, 'o4x4,3,3');\n//orderedPosterizeImage($imagePath, 'o8x8,6,6');\norderedPosterizeImage\n(\n$imagePath\n,\n'h8x8a'\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::posterizeImage()",
    "output": "<?php\nfunction\nposterizeImage\n(\n$imagePath\n,\n$posterizeType\n,\n$numberLevels\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nposterizeImage\n(\n$numberLevels\n,\n$posterizeType\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\nposterizeImage\n(\n$imagePath\n,\n\\Imagick\n::\nDITHERMETHOD_RIEMERSMA\n,\n8\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::quantizeImage()",
    "output": "<?php\nfunction\nquantizeImage\n(\n$imagePath\n,\n$numberColors\n,\n$colorSpace\n,\n$treeDepth\n,\n$dither\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nquantizeImage\n(\n$numberColors\n,\n$colorSpace\n,\n$treeDepth\n,\n$dither\n,\nfalse\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::queryFonts()",
    "output": "<?php\n        $output\n=\n''\n;\n\n$output\n.=\n\"Fonts that match 'Helvetica*' are:<br/>\"\n;\n\n$fontList\n=\n\\Imagick\n::\nqueryFonts\n(\n\"Helvetica*\"\n);\n\n        foreach (\n$fontList\nas\n$fontName\n) {\n\n$output\n.=\n'<li>'\n.\n$fontName\n.\n\"</li>\"\n;\n        }\n        return\n$output\n;\n?>"
  },
  {
    "input": "Example #1  Imagick::queryFormats()",
    "output": "<?php\n\nfunction\nrender\n() {\n\n$output\n=\n\"\"\n;\n\n$input\n=\n\\Imagick\n::\nqueryformats\n();\n\n$columns\n=\n6\n;\n\n$output\n.=\n\"<table border='2'>\"\n;\n        for (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$input\n);\n$i\n+=\n$columns\n) {\n\n$output\n.=\n\"<tr>\"\n;\n            for (\n$c\n=\n0\n;\n$c\n<\n$columns\n;\n$c\n++) {\n\n$output\n.=\n\"<td>\"\n;\n                if ((\n$i\n+\n$c\n) <\ncount\n(\n$input\n)) {\n\n$output\n.=\n$input\n[\n$i\n+\n$c\n];\n                }\n\n$output\n.=\n\"</td>\"\n;\n            }\n\n$output\n.=\n\"</tr>\"\n;\n        }\n\n$output\n.=\n\"</table>\"\n;\n        return\n$output\n;\n    }\n?>"
  },
  {
    "input": "Example #1  Imagick::radialBlurImage()",
    "output": "<?php\nfunction\nradialBlurImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n//Blur 3 times with different radii\n\n$imagick\n->\nradialBlurImage\n(\n3\n);\n\n$imagick\n->\nradialBlurImage\n(\n5\n);\n\n$imagick\n->\nradialBlurImage\n(\n7\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::raiseImage()",
    "output": "<?php\nfunction\nraiseImage\n(\n$imagePath\n,\n$width\n,\n$height\n,\n$x\n,\n$y\n,\n$raise\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n//x and y do nothing?\n\n$imagick\n->\nraiseImage\n(\n$width\n,\n$height\n,\n$x\n,\n$y\n,\n$raise\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::randomThresholdImage()",
    "output": "<?php\nfunction\nrandomThresholdimage\n(\n$imagePath\n,\n$lowThreshold\n,\n$highThreshold\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nrandomThresholdimage\n(\n\n$lowThreshold\n*\n\\Imagick\n::\ngetQuantum\n(),\n\n$highThreshold\n*\n\\Imagick\n::\ngetQuantum\n(),\n\n$channel\n\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::readImageBlob()",
    "output": "<?php\nfunction\nreadImageBlob\n() {\n\n$base64\n=\n\"iVBORw0KGgoAAAANSUhEUgAAAM0AAAD\n NCAMAAAAsYgRbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5c\n cllPAAAABJQTFRF3NSmzMewPxIG//ncJEJsldTou1jHgAAAARBJREFUeNrs2EEK\n gCAQBVDLuv+V20dENbMY831wKz4Y/VHb/5RGQ0NDQ0NDQ0NDQ0NDQ0NDQ\n 0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0PzMWtyaGhoaGhoaGhoaGhoaGhoxtb0QGho\n aGhoaGhoaGhoaGhoaMbRLEvv50VTQ9OTQ5OpyZ01GpM2g0bfmDQaL7S+ofFC6x\n v3ZpxJiywakzbvd9r3RWPS9I2+MWk0+kbf0Hih9Y17U0nTHibrDDQ0NDQ0NDQ0\n NDQ0NDQ0NTXbRSL/AK72o6GhoaGhoRlL8951vwsNDQ0NDQ1NDc0WyHtDTEhD\n Q0NDQ0NTS5MdGhoaGhoaGhoaGhoaGhoaGhoaGhoaGposzSHAAErMwwQ2HwRQ\n AAAAAElFTkSuQmCC\"\n;\n\n$imageBlob\n=\nbase64_decode\n(\n$base64\n);\n\n$imagick\n= new\nImagick\n();\n\n$imagick\n->\nreadImageBlob\n(\n$imageBlob\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::recolorImage()",
    "output": "<?php\nfunction\nrecolorImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$remapColor\n= [\n1\n,\n0\n,\n0\n,\n\n0\n,\n0\n,\n1\n,\n\n0\n,\n1\n,\n0\n,];\n//$remapColor = [\n//    1.438, -0.122, -0.016,  0, 0, -0.03,\n//    -0.062,  1.378, -0.016,  0, 0,  0.05,\n//    -0.062, -0.122, 1.483,   0, 0, -0.02,\n//];\n\n@\n$imagick\n->\nrecolorImage\n(\n$remapColor\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::reduceNoiseImage()",
    "output": "<?php\nfunction\nreduceNoiseImage\n(\n$imagePath\n,\n$reduceNoise\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n    @\n$imagick\n->\nreduceNoiseImage\n(\n$reduceNoise\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::resampleImage()",
    "output": "<?php\nfunction\nresampleImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nresampleImage\n(\n200\n,\n200\n,\n\\Imagick\n::\nFILTER_LANCZOS\n,\n1\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::resizeImage()",
    "output": "<?php\nfunction\nresizeImage\n(\n$imagePath\n,\n$width\n,\n$height\n,\n$filterType\n,\n$blur\n,\n$bestFit\n,\n$cropZoom\n) {\n\n//The blur factor where > 1 is blurry, < 1 is sharp.\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nresizeImage\n(\n$width\n,\n$height\n,\n$filterType\n,\n$blur\n,\n$bestFit\n);\n\n$cropWidth\n=\n$imagick\n->\ngetImageWidth\n();\n\n$cropHeight\n=\n$imagick\n->\ngetImageHeight\n();\n    if (\n$cropZoom\n) {\n\n$newWidth\n=\n$cropWidth\n/\n2\n;\n\n$newHeight\n=\n$cropHeight\n/\n2\n;\n\n$imagick\n->\ncropimage\n(\n\n$newWidth\n,\n\n$newHeight\n,\n            (\n$cropWidth\n-\n$newWidth\n) /\n2\n,\n            (\n$cropHeight\n-\n$newHeight\n) /\n2\n\n);\n\n$imagick\n->\nscaleimage\n(\n\n$imagick\n->\ngetImageWidth\n() *\n4\n,\n\n$imagick\n->\ngetImageHeight\n() *\n4\n\n);\n    }\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::rollImage()",
    "output": "<?php\nfunction\nrollImage\n(\n$imagePath\n,\n$rollX\n,\n$rollY\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nrollimage\n(\n$rollX\n,\n$rollY\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::rotateImage()",
    "output": "<?php\nfunction\nrotateImage\n(\n$imagePath\n,\n$angle\n,\n$color\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nrotateimage\n(\n$color\n,\n$angle\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::rotationalBlurImage()",
    "output": "<?php\nfunction\nrotationalBlurImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nrotationalBlurImage\n(\n3\n);\n\n$imagick\n->\nrotationalBlurImage\n(\n5\n);\n\n$imagick\n->\nrotationalBlurImage\n(\n7\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::scaleImage()",
    "output": "<?php\nfunction\nscaleImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nscaleImage\n(\n150\n,\n150\n,\ntrue\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::segmentImage()",
    "output": "<?php\nfunction\nsegmentImage\n(\n$imagePath\n,\n$colorSpace\n,\n$clusterThreshold\n,\n$smoothThreshold\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsegmentImage\n(\n$colorSpace\n,\n$clusterThreshold\n,\n$smoothThreshold\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\nsegmentImage\n(\n$imagePath\n,\n\\Imagick\n::\nCOLORSPACE_RGB\n,\n5\n,\n5\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::selectiveBlurImage()",
    "output": "<?php\nfunction\nselectiveBlurImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$threshold\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nselectiveBlurImage\n(\n$radius\n,\n$sigma\n,\n$threshold\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::separateImageChannel()",
    "output": "<?php\nfunction\nseparateImageChannel\n(\n$imagePath\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nseparateimagechannel\n(\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\nseparateImageChannel\n(\n$imagePath\n,\n\\Imagick\n::\nCHANNEL_GREEN\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::sepiaToneImage()",
    "output": "<?php\nfunction\nsepiaToneImage\n(\n$imagePath\n,\n$sepia\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsepiaToneImage\n(\n$sepia\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setCompressionQuality()",
    "output": "<?php\nfunction\nsetCompressionQuality\n(\n$imagePath\n,\n$quality\n) {\n\n$backgroundImagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nsetCompressionQuality\n(\n$quality\n);\n\n$imagick\n->\nnewPseudoImage\n(\n\n$backgroundImagick\n->\ngetImageWidth\n(),\n\n$backgroundImagick\n->\ngetImageHeight\n(),\n\n'canvas:white'\n\n);\n\n$imagick\n->\ncompositeImage\n(\n\n$backgroundImagick\n,\n\n\\Imagick\n::\nCOMPOSITE_ATOP\n,\n\n0\n,\n\n0\n\n);\n\n\n$imagick\n->\nsetFormat\n(\n\"jpg\"\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageArtifact()",
    "output": "<?php\nfunction\nsetImageArtifact\n() {\n\n$src1\n= new\n\\Imagick\n(\nrealpath\n(\n\"./images/artifact/source1.png\"\n));\n\n$src2\n= new\n\\Imagick\n(\nrealpath\n(\n\"./images/artifact/source2.png\"\n));\n\n$src2\n->\nsetImageVirtualPixelMethod\n(\n\\Imagick\n::\nVIRTUALPIXELMETHOD_TRANSPARENT\n);\n\n$src2\n->\nsetImageArtifact\n(\n'compose:args'\n,\n\"1,0,-0.5,0.5\"\n);\n\n$src1\n->\ncompositeImage\n(\n$src2\n,\nImagick\n::\nCOMPOSITE_MATHEMATICS\n,\n0\n,\n0\n);\n\n\n$src1\n->\nsetImageFormat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$src1\n->\ngetImagesBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageBias()",
    "output": "<?php\n//requires ImageMagick version 6.9.0-1 to have an effect on convolveImage\nfunction\nsetImageBias\n(\n$bias\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n\"images/stack.jpg\"\n));\n\n$xKernel\n= array(\n        -\n0.70\n,\n0\n,\n0.70\n,\n        -\n0.70\n,\n0\n,\n0.70\n,\n        -\n0.70\n,\n0\n,\n0.70\n\n);\n\n$imagick\n->\nsetImageBias\n(\n$bias\n*\n\\Imagick\n::\ngetQuantum\n());\n\n$imagick\n->\nconvolveImage\n(\n$xKernel\n,\n\\Imagick\n::\nCHANNEL_ALL\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n\nheader\n(\n'Content-type: image/png'\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageClipMask()",
    "output": "<?php\nfunction\nsetImageClipMask\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nreadImage\n(\nrealpath\n(\n$imagePath\n));\n\n$width\n=\n$imagick\n->\ngetImageWidth\n();\n\n$height\n=\n$imagick\n->\ngetImageHeight\n();\n\n$clipMask\n= new\n\\Imagick\n();\n\n$clipMask\n->\nnewPseudoImage\n(\n\n$width\n,\n\n$height\n,\n\n\"canvas:transparent\"\n\n);\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetFillColor\n(\n'white'\n);\n\n$draw\n->\ncircle\n(\n\n$width\n/\n2\n,\n\n$height\n/\n2\n,\n        (\n$width\n/\n2\n) + (\n$width\n/\n4\n),\n\n$height\n/\n2\n\n);\n\n$clipMask\n->\ndrawImage\n(\n$draw\n);\n\n$imagick\n->\nsetImageClipMask\n(\n$clipMask\n);\n\n$imagick\n->\nnegateImage\n(\nfalse\n);\n\n$imagick\n->\nsetFormat\n(\n\"png\"\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImagesBlob\n();\n\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageCompressionQuality()",
    "output": "<?php\nfunction\nsetImageCompressionQuality\n(\n$imagePath\n,\n$quality\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageCompressionQuality\n(\n$quality\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Modify animated Gif with Imagick::setImageDelay()",
    "output": "<?php\n// Modify an animated Gif so that it's frames are played at a variable speed,\n// varying between being shown for 50ms down to 0ms, which will cause the frame\n// to be skipped in most browsers.\n$imagick\n= new\nImagick\n(\nrealpath\n(\n\"Test.gif\"\n));\n$imagick\n=\n$imagick\n->\ncoalesceImages\n();\n$frameCount\n=\n0\n;\nforeach (\n$imagick\nas\n$frame\n) {\n\n$imagick\n->\nsetImageDelay\n(((\n$frameCount\n%\n11\n) *\n5\n));\n\n$frameCount\n++;\n}\n$imagick\n=\n$imagick\n->\ndeconstructImages\n();\n$imagick\n->\nwriteImages\n(\n\"/path/to/save/output.gif\"\n,\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::setImageIterations() usage",
    "output": "<?php\n$imagick\n= new\nImagick\n(\nrealpath\n(\n\"Test.gif\"\n));\n$imagick\n=\n$imagick\n->\ncoalesceImages\n();\n$imagick\n->\nsetImageIterations\n(\n1\n);\n$imagick\n=\n$imagick\n->\ndeconstructImages\n();\n$imagick\n->\nwriteImages\n(\n'/path/to/save/OnceOnly.gif'\n,\ntrue\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageOrientation()",
    "output": "<?php\n//Doesn't appear to do anything\nfunction\nsetImageOrientation\n(\n$imagePath\n,\n$orientationType\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageOrientation\n(\n$orientationType\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::setImageResolution()",
    "output": "<?php\nfunction\nsetImageResolution\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageResolution\n(\n50\n,\n50\n);\n\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Modify animated Gif with Imagick::setImageTicksPerSecond()",
    "output": "<?php\n// Modify an animated gif so the first half of the gif is played at half the\n// speed it currently is, and the second half to be played at double the speed\n// it currently is\n$imagick\n= new\nImagick\n(\nrealpath\n(\n\"Test.gif\"\n));\n$imagick\n=\n$imagick\n->\ncoalesceImages\n();\n$totalFrames\n=\n$imagick\n->\ngetNumberImages\n();\n$frameCount\n=\n0\n;\nforeach (\n$imagick\nas\n$frame\n) {\n\n$imagick\n->\nsetImageTicksPerSecond\n(\n50\n);\n\n    if (\n$frameCount\n< (\n$totalFrames\n/\n2\n)) {\n\n// Modify the frame to be displayed for twice as long as it currently is\n\n$imagick\n->\nsetImageTicksPerSecond\n(\n50\n);\n    } else {\n\n// Modify the frame to be displayed for half as long as it currently is\n\n$imagick\n->\nsetImageTicksPerSecond\n(\n200\n);\n    }\n\n$frameCount\n++;\n}\n$imagick\n=\n$imagick\n->\ndeconstructImages\n();\n$imagick\n->\nwriteImages\n(\n\"/path/to/save/output.gif\"\n,\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Attempt to reach '$extent' sizeImagick::setOption()",
    "output": "<?php\n\nfunction\nrenderJPG\n(\n$extent\n) {\n\n$imagePath\n=\n$this\n->\ncontrol\n->\ngetImagePath\n();\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageFormat\n(\n'jpg'\n);\n\n$imagick\n->\nsetOption\n(\n'jpeg:extent'\n,\n$extent\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #2  Imagick::setOption()",
    "output": "<?php\n\nfunction\nrenderPNG\n(\n$imagePath\n,\n$format\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n$imagick\n->\nsetOption\n(\n'png:format'\n,\n$format\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n\n\n//Save as 64bit PNG.\n\nrenderPNG\n(\n$imagePath\n,\n'png64'\n);\n?>"
  },
  {
    "input": "Example #3  Imagick::setOption()",
    "output": "<?php\n\nfunction\nrenderCustomBitDepthPNG\n() {\n\n$imagePath\n=\n$this\n->\ncontrol\n->\ngetImagePath\n();\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\n\n$imagick\n->\nsetOption\n(\n'png:bit-depth'\n,\n'16'\n);\n\n$imagick\n->\nsetOption\n(\n'png:color-type'\n,\n6\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n\n$crash\n=\ntrue\n;\n        if (\n$crash\n) {\n            echo\n$imagick\n->\ngetImageBlob\n();\n        }\n        else {\n\n$tempFilename\n=\ntempnam\n(\n'./'\n,\n'imagick'\n);\n\n$imagick\n->\nwriteimage\n(\nrealpath\n(\n$tempFilename\n));\n            echo\nfile_get_contents\n(\n$tempFilename\n);\n        }\n    }\n?>"
  },
  {
    "input": "Example #1  Imagick::setProgressMonitor()",
    "output": "<?php\n        $abortReason\n=\nnull\n;\n\n        try {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$this\n->\ncontrol\n->\ngetImagePath\n()));\n\n$startTime\n=\ntime\n();\n\n$callback\n= function (\n$offset\n,\n$span\n)  use (\n$startTime\n, &\n$abortReason\n) {\n                if (((\n100\n*\n$offset\n) /\n$span\n)  >\n20\n) {\n\n$abortReason\n=\n\"Processing reached 20%\"\n;\n                    return\nfalse\n;\n                }\n\n$nowTime\n=\ntime\n();\n                if (\n$nowTime\n-\n$startTime\n>\n5\n) {\n\n$abortReason\n=\n\"Image processing took more than 5 seconds\"\n;\n                    return\nfalse\n;\n                }\n                if ((\n$offset\n%\n5\n) ==\n0\n) {\n                    echo\n\"Progress:\n$offset\n /\n$span\n <br/>\"\n;\n                }\n                return\ntrue\n;\n            };\n\n$imagick\n->\nsetProgressMonitor\n(\n$callback\n);\n\n$imagick\n->\nwaveImage\n(\n2\n,\n15\n);\n            echo\n\"Data len is: \"\n.\nstrlen\n(\n$imagick\n->\ngetImageBlob\n());\n        }\n        catch(\n\\ImagickException $e\n) {\n            if (\n$abortReason\n!=\nnull\n) {\n                echo\n\"Image processing was aborted: \"\n.\n$abortReason\n.\n\"<br/>\"\n;\n            }\n            else {\n                echo\n\"ImagickException caught: \"\n.\n$e\n->\ngetMessage\n().\n\" Exception type is \"\n.\nget_class\n(\n$e\n);\n            }\n        }\n?>"
  },
  {
    "input": "Example #1  Imagick::setSamplingFactors()",
    "output": "<?php\nfunction\nsetSamplingFactors\n(\n$imagePath\n) {\n\n$imagePath\n=\n\"../imagick/images/FineDetail.png\"\n;\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetImageFormat\n(\n'jpg'\n);\n\n$imagick\n->\nsetSamplingFactors\n(array(\n'2x2'\n,\n'1x1'\n,\n'1x1'\n));\n\n$compressed\n=\n$imagick\n->\ngetImageBlob\n();\n\n\n$reopen\n= new\n\\Imagick\n();\n\n$reopen\n->\nreadImageBlob\n(\n$compressed\n);\n\n$reopen\n->\nresizeImage\n(\n\n$reopen\n->\ngetImageWidth\n() *\n4\n,\n\n$reopen\n->\ngetImageHeight\n() *\n4\n,\n\n\\Imagick\n::\nFILTER_POINT\n,\n\n1\n\n);\n\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$reopen\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::shadeImage()",
    "output": "<?php\nfunction\nshadeImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nshadeImage\n(\ntrue\n,\n45\n,\n20\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::shadowImage()",
    "output": "<?php\nfunction\nshadowImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nshadowImage\n(\n0.4\n,\n10\n,\n50\n,\n5\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::sharpenImage()",
    "output": "<?php\nfunction\nsharpenImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsharpenimage\n(\n$radius\n,\n$sigma\n,\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::shaveImage()",
    "output": "<?php\nfunction\nshaveImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nshaveImage\n(\n100\n,\n50\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::shearImage()",
    "output": "<?php\nfunction\nshearImage\n(\n$imagePath\n,\n$color\n,\n$shearX\n,\n$shearY\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nshearimage\n(\n$color\n,\n$shearX\n,\n$shearY\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 \n     Create a gradient image using Imagick::sigmoidalContrastImage()\n     suitable for blending two images together smoothly, with the blending\n     defined by $contrast and $the midpoint",
    "output": "<?php\nfunction\ngenerateBlendImage\n(\n$width\n,\n$height\n,\n$contrast\n=\n10\n,\n$midpoint\n=\n0.5\n) {\n\n$imagick\n= new\nImagick\n();\n\n$imagick\n->\nnewPseudoImage\n(\n$width\n,\n$height\n,\n'gradient:black-white'\n);\n\n$quanta\n=\n$imagick\n->\ngetQuantumRange\n();\n\n$imagick\n->\nsigmoidalContrastImage\n(\ntrue\n,\n$contrast\n,\n$midpoint\n*\n$quanta\n[\n\"quantumRangeLong\"\n]);\n    return\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::sketchImage()",
    "output": "<?php\nfunction\nsketchImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$angle\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsketchimage\n(\n$radius\n,\n$sigma\n,\n$angle\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::smushImages()",
    "output": "<?php\nfunction\nsmushImages\n(\n$imagePath\n,\n$imagePath2\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick2\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath2\n));\n\n$imagick\n->\naddimage\n(\n$imagick2\n);\n\n$smushed\n=\n$imagick\n->\nsmushImages\n(\nfalse\n,\n50\n);\n\n$smushed\n->\nsetImageFormat\n(\n'jpg'\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$smushed\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::solarizeImage()",
    "output": "<?php\nfunction\nsolarizeImage\n(\n$imagePath\n,\n$solarizeThreshold\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsolarizeImage\n(\n$solarizeThreshold\n*\n\\Imagick\n::\ngetQuantum\n());\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 SPARSECOLORMETHOD_BARYCENTRIC Imagick::sparseColorImage()",
    "output": "<?php\n\nfunction\nrenderImageBarycentric2\n() {\n\n$points\n= [\n            [\n0.30\n,\n0.10\n,\n'red'\n],\n            [\n0.10\n,\n0.80\n,\n'blue'\n],\n            [\n0.70\n,\n0.60\n,\n'lime'\n],\n            [\n0.80\n,\n0.20\n,\n'yellow'\n],\n        ];\n\n$imagick\n=\ncreateGradientImage\n(\n\n400\n,\n400\n,\n\n$points\n,\n\n\\Imagick\n::\nSPARSECOLORMETHOD_BARYCENTRIC\n\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #2 SPARSECOLORMETHOD_BILINEAR Imagick::sparseColorImage()",
    "output": "<?php\n\nfunction\nrenderImageBilinear\n() {\n\n$points\n= [[\n0.30\n,\n0.10\n,\n'red'\n], [\n0.10\n,\n0.80\n,\n'blue'\n], [\n0.70\n,\n0.60\n,\n'lime'\n], [\n0.80\n,\n0.20\n,\n'yellow'\n],];\n\n$imagick\n=\ncreateGradientImage\n(\n500\n,\n500\n,\n$points\n,\n\\Imagick\n::\nSPARSECOLORMETHOD_BILINEAR\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #3 SPARSECOLORMETHOD_SPEPARDS Imagick::sparseColorImage()",
    "output": "<?php\n\nfunction\nrenderImageShepards\n() {\n\n$points\n= [\n            [\n0.30\n,\n0.10\n,\n'red'\n],\n            [\n0.10\n,\n0.80\n,\n'blue'\n],\n            [\n0.70\n,\n0.60\n,\n'lime'\n],\n            [\n0.80\n,\n0.20\n,\n'yellow'\n],\n        ];\n\n$imagick\n=\ncreateGradientImage\n(\n600\n,\n600\n,\n$points\n,\n\\Imagick\n::\nSPARSECOLORMETHOD_SPEPARDS\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #4 SPARSECOLORMETHOD_VORONOI Imagick::sparseColorImage()",
    "output": "<?php\n\nfunction\nrenderImageVoronoi\n() {\n\n$points\n= [\n            [\n0.30\n,\n0.10\n,\n'red'\n],\n            [\n0.10\n,\n0.80\n,\n'blue'\n],\n            [\n0.70\n,\n0.60\n,\n'lime'\n],\n            [\n0.80\n,\n0.20\n,\n'yellow'\n],\n        ];\n\n$imagick\n=\ncreateGradientImage\n(\n500\n,\n500\n,\n$points\n,\n\\Imagick\n::\nSPARSECOLORMETHOD_VORONOI\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #5 SPARSECOLORMETHOD_BARYCENTRIC Imagick::sparseColorImage()",
    "output": "<?php\n\nfunction\nrenderImageBarycentric\n() {\n\n$points\n= [\n            [\n0\n,\n0\n,\n'skyblue'\n],\n            [-\n1\n,\n1\n,\n'skyblue'\n],\n            [\n1\n,\n1\n,\n'black'\n],\n        ];\n\n$imagick\n=\ncreateGradientImage\n(\n600\n,\n200\n,\n$points\n,\n\\Imagick\n::\nSPARSECOLORMETHOD_BARYCENTRIC\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n        echo\n$imagick\n->\ngetImageBlob\n();\n    }\n?>"
  },
  {
    "input": "Example #6 createGradientImage is used by other examples. Imagick::sparseColorImage()",
    "output": "<?php\nfunction\ncreateGradientImage\n(\n$width\n,\n$height\n,\n$colorPoints\n,\n$sparseMethod\n,\n$absolute\n=\nfalse\n) {\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n$width\n,\n$height\n,\n\"white\"\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$barycentricPoints\n= array();\n    foreach (\n$colorPoints\nas\n$colorPoint\n) {\n        if (\n$absolute\n==\ntrue\n) {\n\n$barycentricPoints\n[] =\n$colorPoint\n[\n0\n];\n\n$barycentricPoints\n[] =\n$colorPoint\n[\n1\n];\n        }\n        else {\n\n$barycentricPoints\n[] =\n$colorPoint\n[\n0\n] *\n$width\n;\n\n$barycentricPoints\n[] =\n$colorPoint\n[\n1\n] *\n$height\n;\n        }\n        if (\nis_string\n(\n$colorPoint\n[\n2\n])) {\n\n$imagickPixel\n= new\n\\ImagickPixel\n(\n$colorPoint\n[\n2\n]);\n        }\n        else if (\n$colorPoint\n[\n2\n] instanceof\n\\ImagickPixel\n) {\n\n$imagickPixel\n=\n$colorPoint\n[\n2\n];\n        }\n        else{\n\n$errorMessage\n=\nsprintf\n(\n\n\"Value %s is neither a string nor an ImagickPixel class. Cannot use as a color.\"\n,\n\n$colorPoint\n[\n2\n]\n            );\n            throw new\n\\InvalidArgumentException\n(\n\n$errorMessage\n\n);\n        }\n\n$red\n=\n$imagickPixel\n->\ngetColorValue\n(\n\\Imagick\n::\nCOLOR_RED\n);\n\n$green\n=\n$imagickPixel\n->\ngetColorValue\n(\n\\Imagick\n::\nCOLOR_GREEN\n);\n\n$blue\n=\n$imagickPixel\n->\ngetColorValue\n(\n\\Imagick\n::\nCOLOR_BLUE\n);\n\n$alpha\n=\n$imagickPixel\n->\ngetColorValue\n(\n\\Imagick\n::\nCOLOR_ALPHA\n);\n\n$barycentricPoints\n[] =\n$red\n;\n\n$barycentricPoints\n[] =\n$green\n;\n\n$barycentricPoints\n[] =\n$blue\n;\n\n$barycentricPoints\n[] =\n$alpha\n;\n    }\n\n$imagick\n->\nsparseColorImage\n(\n$sparseMethod\n,\n$barycentricPoints\n);\n    return\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::spliceImage()",
    "output": "<?php\nfunction\nspliceImage\n(\n$imagePath\n,\n$startX\n,\n$startY\n,\n$width\n,\n$height\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nspliceImage\n(\n$width\n,\n$height\n,\n$startX\n,\n$startY\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::spreadImage()",
    "output": "<?php\nfunction\nspreadImage\n(\n$imagePath\n,\n$radius\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nspreadImage\n(\n$radius\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::statisticImage()",
    "output": "<?php\nfunction\nstatisticImage\n(\n$imagePath\n,\n$statisticType\n,\n$width\n,\n$height\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nstatisticImage\n(\n\n$statisticType\n,\n\n$width\n,\n\n$height\n,\n\n$channel\n\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\nstatisticImage\n(\n$imagePath\n,\n\\Imagick\n::\nSTATISTIC_MEDIAN\n,\n5\n,\n5\n,\n\\Imagick\n::\nCHANNEL_DEFAULT\n);\n?>"
  },
  {
    "input": "Example #1  Imagick::subImageMatch()",
    "output": "<?php\nfunction\nsubImageMatch\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick2\n= clone\n$imagick\n;\n\n$imagick2\n->\ncropimage\n(\n40\n,\n40\n,\n250\n,\n110\n);\n\n$imagick2\n->\nvignetteimage\n(\n0\n,\n1\n,\n3\n,\n3\n);\n\n$similarity\n=\nnull\n;\n\n$bestMatch\n=\nnull\n;\n\n$comparison\n=\n$imagick\n->\nsubImageMatch\n(\n$imagick2\n,\n$bestMatch\n,\n$similarity\n);\n\n$comparison\n->\nsetImageFormat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::swirlImage()",
    "output": "<?php\nfunction\nswirlImage\n(\n$imagePath\n,\n$swirl\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nswirlImage\n(\n$swirl\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::textureImage()",
    "output": "<?php\nfunction\ntextureImage\n(\n$imagePath\n) {\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n640\n,\n480\n, new\n\\ImagickPixel\n(\n'pink'\n));\n\n$image\n->\nsetImageFormat\n(\n\"jpg\"\n);\n\n$texture\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$texture\n->\nscaleimage\n(\n$image\n->\ngetimagewidth\n() /\n4\n,\n$image\n->\ngetimageheight\n() /\n4\n);\n\n$image\n=\n$image\n->\ntextureImage\n(\n$texture\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$image\n;\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::thresholdImage()",
    "output": "<?php\nfunction\nthresholdimage\n(\n$imagePath\n,\n$threshold\n,\n$channel\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nthresholdimage\n(\n$threshold\n*\n\\Imagick\n::\ngetQuantum\n(),\n$channel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::thumbnailImage()",
    "output": "<?php\nfunction\nthumbnailImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nsetbackgroundcolor\n(\n'rgb(64, 64, 64)'\n);\n\n$imagick\n->\nthumbnailImage\n(\n100\n,\n100\n,\ntrue\n,\ntrue\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::tintImage()",
    "output": "<?php\nfunction\ntintImage\n(\n$r\n,\n$g\n,\n$b\n,\n$a\n) {\n\n$a\n=\n$a\n/\n100\n;\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewPseudoImage\n(\n400\n,\n400\n,\n'gradient:black-white'\n);\n\n$tint\n= new\n\\ImagickPixel\n(\n\"rgb(\n$r\n,\n$g\n,\n$b\n)\"\n);\n\n$opacity\n= new\n\\ImagickPixel\n(\n\"rgb(128, 128, 128,\n$a\n)\"\n);\n\n$imagick\n->\ntintImage\n(\n$tint\n,\n$opacity\n);\n\n$imagick\n->\nsetImageFormat\n(\n'png'\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::transparentPaintImage()",
    "output": "<?php\nfunction\ntransparentPaintImage\n(\n$color\n,\n$alpha\n,\n$fuzz\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n\"images/BlueScreen.jpg\"\n));\n\n//Need to be in a format that supports transparency\n\n$imagick\n->\nsetimageformat\n(\n'png'\n);\n\n$imagick\n->\ntransparentPaintImage\n(\n\n$color\n,\n$alpha\n,\n$fuzz\n*\n\\Imagick\n::\ngetQuantum\n(),\nfalse\n\n);\n\n//Not required, but helps tidy up left over pixels\n\n$imagick\n->\ndespeckleimage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::transposeImage()",
    "output": "<?php\nfunction\ntransposeImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ntransposeImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::transverseImage()",
    "output": "<?php\nfunction\ntransverseImage\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\ntransverseImage\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::uniqueImageColors()",
    "output": "<?php\nfunction\nuniqueImageColors\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n//Reduce the image to 256 colours nicely.\n\n$imagick\n->\nquantizeImage\n(\n256\n,\n\\Imagick\n::\nCOLORSPACE_YIQ\n,\n0\n,\nfalse\n,\nfalse\n);\n\n$imagick\n->\nuniqueImageColors\n();\n\n$imagick\n->\nscaleimage\n(\n$imagick\n->\ngetImageWidth\n(),\n$imagick\n->\ngetImageHeight\n() *\n20\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::unsharpMaskImage()",
    "output": "<?php\nfunction\nunsharpMaskImage\n(\n$imagePath\n,\n$radius\n,\n$sigma\n,\n$amount\n,\n$unsharpThreshold\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nunsharpMaskImage\n(\n$radius\n,\n$sigma\n,\n$amount\n,\n$unsharpThreshold\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::vignetteImage()",
    "output": "<?php\nfunction\nvignetteImage\n(\n$imagePath\n,\n$blackPoint\n,\n$whitePoint\n,\n$x\n,\n$y\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nvignetteImage\n(\n$blackPoint\n,\n$whitePoint\n,\n$x\n,\n$y\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 WaveImage can be quite slow Imagick::waveImage()",
    "output": "<?php\nfunction\nwaveImage\n(\n$imagePath\n,\n$amplitude\n,\n$length\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nwaveImage\n(\n$amplitude\n,\n$length\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  Imagick::whiteThresholdImage()",
    "output": "<?php\nfunction\nwhiteThresholdImage\n(\n$imagePath\n,\n$color\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nwhiteThresholdImage\n(\n$color\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::affine() example",
    "output": "<?php\nfunction\naffine\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$PI\n=\n3.141592653589794\n;\n\n$angle\n=\n60\n*\n$PI\n/\n360\n;\n\n//Scale the drawing co-ordinates.\n\n$affineScale\n= array(\n\"sx\"\n=>\n1.75\n,\n\"sy\"\n=>\n1.75\n,\n\"rx\"\n=>\n0\n,\n\"ry\"\n=>\n0\n,\n\"tx\"\n=>\n0\n,\n\"ty\"\n=>\n0\n);\n\n//Shear the drawing co-ordinates.\n\n$affineShear\n= array(\n\"sx\"\n=>\n1\n,\n\"sy\"\n=>\n1\n,\n\"rx\"\n=>\nsin\n(\n$angle\n),\n\"ry\"\n=> -\nsin\n(\n$angle\n),\n\"tx\"\n=>\n0\n,\n\"ty\"\n=>\n0\n);\n\n//Rotate the drawing co-ordinates. The shear affine matrix\n    //produces incorrectly scaled drawings.\n\n$affineRotate\n= array(\n\"sx\"\n=>\ncos\n(\n$angle\n),\n\"sy\"\n=>\ncos\n(\n$angle\n),\n\"rx\"\n=>\nsin\n(\n$angle\n),\n\"ry\"\n=> -\nsin\n(\n$angle\n),\n\"tx\"\n=>\n0\n,\n\"ty\"\n=>\n0\n,);\n\n//Translate (offset) the drawing\n\n$affineTranslate\n= array(\n\"sx\"\n=>\n1\n,\n\"sy\"\n=>\n1\n,\n\"rx\"\n=>\n0\n,\n\"ry\"\n=>\n0\n,\n\"tx\"\n=>\n30\n,\n\"ty\"\n=>\n30\n);\n\n//The identiy affine matrix\n\n$affineIdentity\n= array(\n\"sx\"\n=>\n1\n,\n\"sy\"\n=>\n1\n,\n\"rx\"\n=>\n0\n,\n\"ry\"\n=>\n0\n,\n\"tx\"\n=>\n0\n,\n\"ty\"\n=>\n0\n);\n\n$examples\n= [\n$affineScale\n,\n$affineShear\n,\n$affineRotate\n,\n$affineTranslate\n,\n$affineIdentity\n,];\n\n$count\n=\n0\n;\n    foreach (\n$examples\nas\n$example\n) {\n\n$draw\n->\npush\n();\n\n$draw\n->\ntranslate\n((\n$count\n%\n2\n) *\n250\n,\nintval\n(\n$count\n/\n2\n) *\n250\n);\n\n$draw\n->\ntranslate\n(\n100\n,\n100\n);\n\n$draw\n->\naffine\n(\n$example\n);\n\n$draw\n->\nrectangle\n(-\n50\n, -\n50\n,\n50\n,\n50\n);\n\n$draw\n->\npop\n();\n\n$count\n++;\n    }\n\n//Create an image object which the draw commands can be rendered into\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n750\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n//Render the draw commands in the ImagickDraw object\n    //into the image.\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\n//Send the image to the browser\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::arc() example",
    "output": "<?php\nfunction\narc\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$startAngle\n,\n$endAngle\n) {\n\n//Create a ImagickDraw object to draw into.\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\narc\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$startAngle\n,\n$endAngle\n);\n\n//Create an image object which the draw commands can be rendered into\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\nIMAGE_WIDTH\n,\nIMAGE_HEIGHT\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n//Render the draw commands in the ImagickDraw object\n    //into the image.\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\n//Send the image to the browser\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::bezier() example",
    "output": "<?php\nfunction\nbezier\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$strokeColor\n= new\n\\ImagickPixel\n(\n$strokeColor\n);\n\n$fillColor\n= new\n\\ImagickPixel\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$smoothPointsSet\n= [\n        [\n            [\n'x'\n=>\n10.0\n*\n5\n,\n'y'\n=>\n10.0\n*\n5\n],\n            [\n'x'\n=>\n30.0\n*\n5\n,\n'y'\n=>\n90.0\n*\n5\n],\n            [\n'x'\n=>\n25.0\n*\n5\n,\n'y'\n=>\n10.0\n*\n5\n],\n            [\n'x'\n=>\n50.0\n*\n5\n,\n'y'\n=>\n50.0\n*\n5\n],\n        ],\n        [\n            [\n'x'\n=>\n50.0\n*\n5\n,\n'y'\n=>\n50.0\n*\n5\n],\n            [\n'x'\n=>\n75.0\n*\n5\n,\n'y'\n=>\n90.0\n*\n5\n],\n            [\n'x'\n=>\n70.0\n*\n5\n,\n'y'\n=>\n10.0\n*\n5\n],\n            [\n'x'\n=>\n90.0\n*\n5\n,\n'y'\n=>\n40.0\n*\n5\n],\n        ],\n    ];\n    foreach (\n$smoothPointsSet\nas\n$points\n) {\n\n$draw\n->\nbezier\n(\n$points\n);\n    }\n\n$disjointPoints\n= [\n        [\n            [\n'x'\n=>\n10\n*\n5\n,\n'y'\n=>\n10\n*\n5\n],\n            [\n'x'\n=>\n30\n*\n5\n,\n'y'\n=>\n90\n*\n5\n],\n            [\n'x'\n=>\n25\n*\n5\n,\n'y'\n=>\n10\n*\n5\n],\n            [\n'x'\n=>\n50\n*\n5\n,\n'y'\n=>\n50\n*\n5\n],\n        ],\n        [\n            [\n'x'\n=>\n50\n*\n5\n,\n'y'\n=>\n50\n*\n5\n],\n            [\n'x'\n=>\n80\n*\n5\n,\n'y'\n=>\n50\n*\n5\n],\n            [\n'x'\n=>\n70\n*\n5\n,\n'y'\n=>\n10\n*\n5\n],\n            [\n'x'\n=>\n90\n*\n5\n,\n'y'\n=>\n40\n*\n5\n],\n         ]\n    ];\n\n$draw\n->\ntranslate\n(\n0\n,\n200\n);\n    foreach (\n$disjointPoints\nas\n$points\n) {\n\n$draw\n->\nbezier\n(\n$points\n);\n    }\n\n//Create an image object which the draw commands can be rendered into\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n//Render the draw commands in the ImagickDraw object\n    //into the image.\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\n//Send the image to the browser\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::circle() example",
    "output": "<?php\nfunction\ncircle\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$originX\n,\n$originY\n,\n$endX\n,\n$endY\n) {\n\n//Create a ImagickDraw object to draw into.\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$strokeColor\n= new\n\\ImagickPixel\n(\n$strokeColor\n);\n\n$fillColor\n= new\n\\ImagickPixel\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\ncircle\n(\n$originX\n,\n$originY\n,\n$endX\n,\n$endY\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::composite() example",
    "output": "<?php\nfunction\ncomposite\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetFillOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/CANDY.TTF\"\n);\n\n$draw\n->\nsetFontSize\n(\n140\n);\n\n$draw\n->\nrectangle\n(\n0\n,\n0\n,\n1000\n,\n300\n);\n\n$draw\n->\nsetFillColor\n(\n'white'\n);\n\n$draw\n->\nsetfillopacity\n(\n1\n);\n\n$draw\n->\nannotation\n(\n50\n,\n180\n,\n\"Lorem Ipsum!\"\n);\n\n//Create an image object which the draw commands can be rendered into\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n1000\n,\n302\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n//Render the draw commands in the ImagickDraw object\n    //into the image.\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\n//Send the image to the browser\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::ellipse() example",
    "output": "<?php\nfunction\nellipse\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nellipse\n(\n125\n,\n70\n,\n100\n,\n50\n,\n0\n,\n360\n);\n\n$draw\n->\nellipse\n(\n350\n,\n70\n,\n100\n,\n50\n,\n0\n,\n315\n);\n\n$draw\n->\npush\n();\n\n$draw\n->\ntranslate\n(\n125\n,\n250\n);\n\n$draw\n->\nrotate\n(\n30\n);\n\n$draw\n->\nellipse\n(\n0\n,\n0\n,\n100\n,\n50\n,\n0\n,\n360\n);\n\n$draw\n->\npop\n();\n\n$draw\n->\npush\n();\n\n$draw\n->\ntranslate\n(\n350\n,\n250\n);\n\n$draw\n->\nrotate\n(\n30\n);\n\n$draw\n->\nellipse\n(\n0\n,\n0\n,\n100\n,\n50\n,\n0\n,\n315\n);\n\n$draw\n->\npop\n();\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::line() example",
    "output": "<?php\nfunction\nline\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nline\n(\n125\n,\n70\n,\n100\n,\n50\n);\n\n$draw\n->\nline\n(\n350\n,\n170\n,\n100\n,\n150\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::matte() example",
    "output": "<?php\nfunction\nmatte\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$paintType\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nmatte\n(\n120\n,\n120\n,\n$paintType\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n100\n,\n300\n,\n200\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::pathCurveToQuadraticBezierAbsolute() example",
    "output": "<?php\nfunction\npathCurveToQuadraticBezierAbsolute\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\npathStart\n();\n\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n250\n);\n\n// This specifies a quadratic bezier curve with the current position as the start\n    // point, the control point is the first two params, and the end point is the last two params.\n\n$draw\n->\npathCurveToQuadraticBezierAbsolute\n(\n\n150\n,\n50\n,\n\n250\n,\n250\n\n);\n\n// This specifies a quadratic bezier curve with the current position as the start\n    // point, the control point is mirrored from the previous curves control point\n    // and the end point is defined by the x, y values.\n\n$draw\n->\npathCurveToQuadraticBezierSmoothAbsolute\n(\n\n450\n,\n250\n\n);\n\n// This specifies a quadratic bezier curve with the current position as the start\n    // point, the control point is mirrored from the previous curves control point\n    // and the end point is defined relative from the current position by the x, y values.\n\n$draw\n->\npathCurveToQuadraticBezierSmoothRelative\n(\n\n200\n,-\n100\n\n);\n\n$draw\n->\npathFinish\n();\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n700\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 \n     ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute() example",
    "output": "<?php\n$draw\n= new\n\\ImagickDraw\n();\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n$draw\n->\nsetStrokeColor\n(\n\"black\"\n);\n$draw\n->\nsetFillColor\n(\n\"blue\"\n);\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n$draw\n->\nsetFontSize\n(\n72\n);\n$draw\n->\npathStart\n();\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is the first two params, and the end point is the last two params.\n$draw\n->\npathCurveToQuadraticBezierAbsolute\n(\n\n150\n,\n50\n,\n\n250\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is mirrored from the previous curves control point\n// and the end point is defined by the x, y values.\n$draw\n->\npathCurveToQuadraticBezierSmoothAbsolute\n(\n\n450\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is mirrored from the previous curves control point\n// and the end point is defined relative from the current position by the x, y values.\n$draw\n->\npathCurveToQuadraticBezierSmoothRelative\n(\n\n200\n,-\n100\n);\n$draw\n->\npathFinish\n();\n$imagick\n= new\n\\Imagick\n();\n$imagick\n->\nnewImage\n(\n700\n,\n500\n,\n$backgroundColor\n);\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n$imagick\n->\ndrawImage\n(\n$draw\n);\nheader\n(\n\"Content-Type: image/png\"\n);\necho\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #1 \n     ImagickDraw::pathCurveToQuadraticBezierSmoothRelative() example",
    "output": "<?php\n$draw\n= new\n\\ImagickDraw\n();\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n$draw\n->\nsetStrokeColor\n(\n\"black\"\n);\n$draw\n->\nsetFillColor\n(\n\"blue\"\n);\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n$draw\n->\nsetFontSize\n(\n72\n);\n$draw\n->\npathStart\n();\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is the first two params, and the end point is the last two params.\n$draw\n->\npathCurveToQuadraticBezierAbsolute\n(\n\n150\n,\n50\n,\n\n250\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is mirrored from the previous curves control point\n// and the end point is defined by the x, y values.\n$draw\n->\npathCurveToQuadraticBezierSmoothAbsolute\n(\n\n450\n,\n250\n);\n// This specifies a quadratic bezier curve with the current position as the start\n// point, the control point is mirrored from the previous curves control point\n// and the end point is defined relative from the current position by the x, y values.\n$draw\n->\npathCurveToQuadraticBezierSmoothRelative\n(\n\n200\n,-\n100\n);\n$draw\n->\npathFinish\n();\n$imagick\n= new\n\\Imagick\n();\n$imagick\n->\nnewImage\n(\n700\n,\n500\n,\n$backgroundColor\n);\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n$imagick\n->\ndrawImage\n(\n$draw\n);\nheader\n(\n\"Content-Type: image/png\"\n);\necho\n$imagick\n->\ngetImageBlob\n();\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::pathStart() example",
    "output": "<?php\nfunction\npathStart\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\npathStart\n();\n\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n50\n);\n\n$draw\n->\npathLineToAbsolute\n(\n100\n,\n50\n);\n\n$draw\n->\npathLineToRelative\n(\n0\n,\n50\n);\n\n$draw\n->\npathLineToHorizontalRelative\n(-\n50\n);\n\n$draw\n->\npathFinish\n();\n\n$draw\n->\npathStart\n();\n\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n50\n);\n\n$draw\n->\npathMoveToRelative\n(\n300\n,\n0\n);\n\n$draw\n->\npathLineToRelative\n(\n50\n,\n0\n);\n\n$draw\n->\npathLineToVerticalRelative\n(\n50\n);\n\n$draw\n->\npathLineToHorizontalAbsolute\n(\n350\n);\n\n$draw\n->\npathclose\n();\n\n$draw\n->\npathFinish\n();\n\n$draw\n->\npathStart\n();\n\n$draw\n->\npathMoveToAbsolute\n(\n50\n,\n300\n);\n\n$draw\n->\npathCurveToAbsolute\n(\n50\n,\n300\n,\n100\n,\n200\n,\n300\n,\n300\n);\n\n$draw\n->\npathLineToVerticalAbsolute\n(\n350\n);\n\n$draw\n->\npathFinish\n();\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::point() example",
    "output": "<?php\nfunction\npoint\n(\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n    for (\n$x\n=\n0\n;\n$x\n<\n10000\n;\n$x\n++) {\n\n$draw\n->\npoint\n(\nrand\n(\n0\n,\n500\n),\nrand\n(\n0\n,\n500\n));\n    }\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::polygon() example",
    "output": "<?php\nfunction\npolygon\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n4\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$points\n= [\n        [\n'x'\n=>\n40\n*\n5\n,\n'y'\n=>\n10\n*\n5\n],\n        [\n'x'\n=>\n20\n*\n5\n,\n'y'\n=>\n20\n*\n5\n],\n        [\n'x'\n=>\n70\n*\n5\n,\n'y'\n=>\n50\n*\n5\n],\n        [\n'x'\n=>\n60\n*\n5\n,\n'y'\n=>\n15\n*\n5\n],\n    ];\n\n$draw\n->\npolygon\n(\n$points\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n300\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::polyline() example",
    "output": "<?php\nfunction\npolyline\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n5\n);\n\n$points\n= [\n        [\n'x'\n=>\n40\n*\n5\n,\n'y'\n=>\n10\n*\n5\n],\n        [\n'x'\n=>\n20\n*\n5\n,\n'y'\n=>\n20\n*\n5\n],\n        [\n'x'\n=>\n70\n*\n5\n,\n'y'\n=>\n50\n*\n5\n],\n        [\n'x'\n=>\n60\n*\n5\n,\n'y'\n=>\n15\n*\n5\n]\n    ];\n\n$draw\n->\npolyline\n(\n$points\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n300\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::popDefs() example",
    "output": "<?php\nfunction\npopDefs\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetstrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\npushDefs\n();\n\n$draw\n->\nsetStrokeColor\n(\n'white'\n);\n\n$draw\n->\nrectangle\n(\n50\n,\n50\n,\n200\n,\n200\n);\n\n$draw\n->\npopDefs\n();\n\n$draw\n->\nrectangle\n(\n300\n,\n50\n,\n450\n,\n200\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::push() example",
    "output": "<?php\nfunction\npush\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\npush\n();\n\n$draw\n->\ntranslate\n(\n50\n,\n50\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$draw\n->\npop\n();\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::pushPattern() example",
    "output": "<?php\nfunction\npushPattern\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\npushPattern\n(\n\"MyFirstPattern\"\n,\n0\n,\n0\n,\n50\n,\n50\n);\n    for (\n$x\n=\n0\n;\n$x\n<\n50\n;\n$x\n+=\n10\n) {\n        for (\n$y\n=\n0\n;\n$y\n<\n50\n;\n$y\n+=\n5\n) {\n\n$positionX\n=\n$x\n+ ((\n$y\n/\n5\n) %\n5\n);\n\n$draw\n->\nrectangle\n(\n$positionX\n,\n$y\n,\n$positionX\n+\n5\n,\n$y\n+\n5\n);\n        }\n    }\n\n$draw\n->\npopPattern\n();\n\n$draw\n->\nsetFillOpacity\n(\n0\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n100\n,\n400\n,\n400\n);\n\n$draw\n->\nsetFillOpacity\n(\n1\n);\n\n$draw\n->\nsetFillOpacity\n(\n1\n);\n\n$draw\n->\npush\n();\n\n$draw\n->\nsetFillPatternURL\n(\n'#MyFirstPattern'\n);\n\n$draw\n->\nsetFillColor\n(\n'yellow'\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n100\n,\n400\n,\n400\n);\n\n$draw\n->\npop\n();\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::rectangle() example",
    "output": "<?php\nfunction\nrectangle\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$strokeColor\n= new\n\\ImagickPixel\n(\n$strokeColor\n);\n\n$fillColor\n= new\n\\ImagickPixel\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::rotate() example",
    "output": "<?php\nfunction\nrotate\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\nrotate\n(\n15\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::roundRectangle() example",
    "output": "<?php\nfunction\nroundRectangle\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$roundX\n,\n$roundY\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nroundRectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$roundX\n,\n$roundY\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::scale() example",
    "output": "<?php\nfunction\nscale\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n4\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\nscale\n(\n1.4\n,\n1.4\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setClipPath() example",
    "output": "<?php\nfunction\nsetClipPath\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$clipPathName\n=\n'testClipPath'\n;\n\n$draw\n->\npushClipPath\n(\n$clipPathName\n);\n\n$draw\n->\nrectangle\n(\n0\n,\n0\n,\n250\n,\n250\n);\n\n$draw\n->\npopClipPath\n();\n\n$draw\n->\nsetClipPath\n(\n$clipPathName\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n100\n,\n400\n,\n400\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setClipRule() example",
    "output": "<?php\nfunction\nsetClipRule\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n//\\Imagick::FILLRULE_EVENODD\n    //\\Imagick::FILLRULE_NONZERO\n\n$clipPathName\n=\n'testClipPath'\n;\n\n$draw\n->\npushClipPath\n(\n$clipPathName\n);\n\n$draw\n->\nsetClipRule\n(\n\\Imagick\n::\nFILLRULE_EVENODD\n);\n\n$draw\n->\nrectangle\n(\n0\n,\n0\n,\n300\n,\n500\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n0\n,\n500\n,\n500\n);\n\n$draw\n->\npopClipPath\n();\n\n$draw\n->\nsetClipPath\n(\n$clipPathName\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setClipUnits() example",
    "output": "<?php\nfunction\nsetClipUnits\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$clipPathName\n=\n'testClipPath'\n;\n\n$draw\n->\nsetClipUnits\n(\n\\Imagick\n::\nRESOLUTION_PIXELSPERINCH\n);\n\n$draw\n->\npushClipPath\n(\n$clipPathName\n);\n\n$draw\n->\nrectangle\n(\n0\n,\n0\n,\n250\n,\n250\n);\n\n$draw\n->\npopClipPath\n();\n\n$draw\n->\nsetClipPath\n(\n$clipPathName\n);\n\n//RESOLUTION_PIXELSPERINCH\n    //RESOLUTION_PIXELSPERCENTIMETER\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFillAlpha() example",
    "output": "<?php\nfunction\nsetFillAlpha\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n200\n,\n300\n);\n    @\n$draw\n->\nsetFillAlpha\n(\n0.4\n);\n\n$draw\n->\nrectangle\n(\n300\n,\n200\n,\n400\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickDraw::setFillColor()",
    "output": "<?php\nfunction\nsetFillColor\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1.5\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n50\n,\n50\n,\n150\n,\n150\n);\n\n$draw\n->\nsetFillColor\n(\n\"rgb(200, 32, 32)\"\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n50\n,\n300\n,\n150\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickDraw::setFillOpacity()",
    "output": "<?php\nfunction\nsetFillOpacity\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n200\n,\n300\n);\n\n$draw\n->\nsetFillOpacity\n(\n0.4\n);\n\n$draw\n->\nrectangle\n(\n300\n,\n200\n,\n400\n,\n300\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFillRule() example",
    "output": "<?php\nfunction\nsetFillRule\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$fillRules\n= [\n\\Imagick\n::\nFILLRULE_NONZERO\n,\n\\Imagick\n::\nFILLRULE_EVENODD\n];\n\n$points\n=\n11\n;\n\n$size\n=\n150\n;\n\n$draw\n->\ntranslate\n(\n175\n,\n160\n);\n    for (\n$x\n=\n0\n;\n$x\n<\n2\n;\n$x\n++) {\n\n$draw\n->\nsetFillRule\n(\n$fillRules\n[\n$x\n]);\n\n$draw\n->\npathStart\n();\n        for (\n$n\n=\n0\n;\n$n\n<\n$points\n*\n2\n;\n$n\n++) {\n            if (\n$n\n>=\n$points\n) {\n\n$angle\n=\nfmod\n(\n$n\n*\n360\n*\n4\n/\n$points\n,\n360\n) *\npi\n() /\n180\n;\n            }\n            else {\n\n$angle\n=\nfmod\n(\n$n\n*\n360\n*\n3\n/\n$points\n,\n360\n) *\npi\n() /\n180\n;\n            }\n\n$positionX\n=\n$size\n*\nsin\n(\n$angle\n);\n\n$positionY\n=\n$size\n*\ncos\n(\n$angle\n);\n            if (\n$n\n==\n0\n) {\n\n$draw\n->\npathMoveToAbsolute\n(\n$positionX\n,\n$positionY\n);\n            }\n            else {\n\n$draw\n->\npathLineToAbsolute\n(\n$positionX\n,\n$positionY\n);\n            }\n        }\n\n$draw\n->\npathClose\n();\n\n$draw\n->\npathFinish\n();\n\n$draw\n->\ntranslate\n(\n325\n,\n0\n);\n    }\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n700\n,\n320\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFont() example",
    "output": "<?php\nfunction\nsetFont\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n36\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/Arial.ttf\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n50\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/Consolas.ttf\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n100\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/CANDY.TTF\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n150\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/Inconsolata-dz.otf\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n200\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n300\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFontFamily() example",
    "output": "<?php\nfunction\nsetFontFamily\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$strokeColor\n= new\n\\ImagickPixel\n(\n$strokeColor\n);\n\n$fillColor\n= new\n\\ImagickPixel\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n48\n);\n\n$draw\n->\nsetFontFamily\n(\n\"Times\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n50\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontFamily\n(\n\"AvantGarde\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n100\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontFamily\n(\n\"NewCenturySchlbk\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n150\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontFamily\n(\n\"Palatino\"\n);\n\n$draw\n->\nannotation\n(\n50\n,\n200\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n450\n,\n250\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFontSize() example",
    "output": "<?php\nfunction\nsetFontSize\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/Arial.ttf\"\n);\n\n$sizes\n= [\n24\n,\n36\n,\n48\n,\n60\n,\n72\n];\n    foreach (\n$sizes\nas\n$size\n) {\n\n$draw\n->\nsetFontSize\n(\n$size\n);\n\n$draw\n->\nannotation\n(\n50\n, (\n$size\n*\n$size\n/\n16\n),\n\"Lorem Ipsum!\"\n);\n    }\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFontStretch() example",
    "output": "<?php\nfunction\nsetFontStretch\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n36\n);\n\n$fontStretchTypes\n= [\n\n\\Imagick\n::\nSTRETCH_ULTRACONDENSED\n,\n\n\\Imagick\n::\nSTRETCH_CONDENSED\n,\n\n\\Imagick\n::\nSTRETCH_SEMICONDENSED\n,\n\n\\Imagick\n::\nSTRETCH_SEMIEXPANDED\n,\n\n\\Imagick\n::\nSTRETCH_EXPANDED\n,\n\n\\Imagick\n::\nSTRETCH_EXTRAEXPANDED\n,\n\n\\Imagick\n::\nSTRETCH_ULTRAEXPANDED\n,\n\n\\Imagick\n::\nSTRETCH_ANY\n\n];\n\n$offset\n=\n0\n;\n    foreach (\n$fontStretchTypes\nas\n$fontStretch\n) {\n\n$draw\n->\nsetFontStretch\n(\n$fontStretch\n);\n\n$draw\n->\nannotation\n(\n50\n,\n75\n+\n$offset\n,\n\"Lorem Ipsum!\"\n);\n\n$offset\n+=\n50\n;\n    }\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFontStyle() example",
    "output": "<?php\nfunction\nsetFontStyle\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetFontSize\n(\n36\n);\n\n$draw\n->\nsetFontStyle\n(\n\\Imagick\n::\nSTYLE_NORMAL\n);\n\n$draw\n->\nannotation\n(\n50\n,\n50\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontStyle\n(\n\\Imagick\n::\nSTYLE_ITALIC\n);\n\n$draw\n->\nannotation\n(\n50\n,\n100\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontStyle\n(\n\\Imagick\n::\nSTYLE_OBLIQUE\n);\n\n$draw\n->\nannotation\n(\n50\n,\n150\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n350\n,\n300\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setFontWeight() example",
    "output": "<?php\nfunction\nsetFontWeight\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetFontSize\n(\n36\n);\n\n$draw\n->\nsetFontWeight\n(\n100\n);\n\n$draw\n->\nannotation\n(\n50\n,\n50\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontWeight\n(\n200\n);\n\n$draw\n->\nannotation\n(\n50\n,\n100\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontWeight\n(\n400\n);\n\n$draw\n->\nannotation\n(\n50\n,\n150\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetFontWeight\n(\n800\n);\n\n$draw\n->\nannotation\n(\n50\n,\n200\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setGravity() example",
    "output": "<?php\nfunction\nsetGravity\n(\n$fillColor\n,\n$strokeColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetFontSize\n(\n24\n);\n\n$gravitySettings\n= array(\n\n\\Imagick\n::\nGRAVITY_NORTHWEST\n=>\n'NorthWest'\n,\n\n\\Imagick\n::\nGRAVITY_NORTH\n=>\n'North'\n,\n\n\\Imagick\n::\nGRAVITY_NORTHEAST\n=>\n'NorthEast'\n,\n\n\\Imagick\n::\nGRAVITY_WEST\n=>\n'West'\n,\n\n\\Imagick\n::\nGRAVITY_CENTER\n=>\n'Centre'\n,\n\n\\Imagick\n::\nGRAVITY_SOUTHWEST\n=>\n'SouthWest'\n,\n\n\\Imagick\n::\nGRAVITY_SOUTH\n=>\n'South'\n,\n\n\\Imagick\n::\nGRAVITY_SOUTHEAST\n=>\n'SouthEast'\n,\n\n\\Imagick\n::\nGRAVITY_EAST\n=>\n'East'\n\n);\n\n$draw\n->\nsetFont\n(\n\"../fonts/Arial.ttf\"\n);\n    foreach (\n$gravitySettings\nas\n$type\n=>\n$description\n) {\n\n$draw\n->\nsetGravity\n(\n$type\n);\n\n$draw\n->\nannotation\n(\n50\n,\n50\n,\n'\"'\n.\n$description\n.\n'\"'\n);\n    }\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeAlpha() example",
    "output": "<?php\nfunction\nsetStrokeAlpha\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n4\n);\n\n$draw\n->\nline\n(\n100\n,\n100\n,\n400\n,\n145\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n225\n,\n350\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n0.1\n);\n\n$draw\n->\nline\n(\n100\n,\n120\n,\n400\n,\n165\n);\n\n$draw\n->\nrectangle\n(\n275\n,\n200\n,\n400\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeAntialias() example",
    "output": "<?php\nfunction\nsetStrokeAntialias\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeAntialias\n(\nfalse\n);\n\n$draw\n->\nline\n(\n100\n,\n100\n,\n400\n,\n105\n);\n\n$draw\n->\nline\n(\n100\n,\n140\n,\n400\n,\n185\n);\n\n$draw\n->\nsetStrokeAntialias\n(\ntrue\n);\n\n$draw\n->\nline\n(\n100\n,\n110\n,\n400\n,\n115\n);\n\n$draw\n->\nline\n(\n100\n,\n150\n,\n400\n,\n195\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n250\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeColor() example",
    "output": "<?php\nfunction\nsetStrokeColor\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n5\n);\n\n$draw\n->\nline\n(\n100\n,\n100\n,\n400\n,\n145\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n225\n,\n350\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n0.1\n);\n\n$draw\n->\nline\n(\n100\n,\n120\n,\n400\n,\n165\n);\n\n$draw\n->\nrectangle\n(\n275\n,\n200\n,\n400\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeDashArray() example",
    "output": "<?php\nfunction\nsetStrokeDashArray\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n4\n);\n\n$draw\n->\nsetStrokeDashArray\n([\n10\n,\n10\n]);\n\n$draw\n->\nrectangle\n(\n100\n,\n50\n,\n225\n,\n175\n);\n\n$draw\n->\nsetStrokeDashArray\n([\n20\n,\n5\n,\n20\n,\n5\n,\n5\n,\n5\n,]);\n\n$draw\n->\nrectangle\n(\n275\n,\n50\n,\n400\n,\n175\n);\n\n$draw\n->\nsetStrokeDashArray\n([\n20\n,\n5\n,\n20\n,\n5\n,\n5\n]);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n225\n,\n350\n);\n\n$draw\n->\nsetStrokeDashArray\n([\n1\n,\n1\n,\n1\n,\n1\n,\n2\n,\n2\n,\n3\n,\n3\n,\n5\n,\n5\n,\n8\n,\n8\n,\n13\n,\n13\n,\n21\n,\n21\n,\n34\n,\n34\n,\n55\n,\n55\n,\n89\n,\n89\n,\n144\n,\n144\n,\n233\n,\n233\n,\n377\n,\n377\n,\n610\n,\n610\n,\n987\n,\n987\n,\n1597\n,\n1597\n,\n2584\n,\n2584\n,\n4181\n,\n4181\n,]);\n\n$draw\n->\nrectangle\n(\n275\n,\n200\n,\n400\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeDashOffset() example",
    "output": "<?php\nfunction\nsetStrokeDashOffset\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n4\n);\n\n$draw\n->\nsetStrokeDashArray\n([\n20\n,\n20\n]);\n\n$draw\n->\nsetStrokeDashOffset\n(\n0\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n50\n,\n225\n,\n175\n);\n\n//Start the dash effect halfway through the solid portion\n\n$draw\n->\nsetStrokeDashOffset\n(\n10\n);\n\n$draw\n->\nrectangle\n(\n275\n,\n50\n,\n400\n,\n175\n);\n\n//Start the dash effect on the space portion\n\n$draw\n->\nsetStrokeDashOffset\n(\n20\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n225\n,\n350\n);\n\n$draw\n->\nsetStrokeDashOffset\n(\n5\n);\n\n$draw\n->\nrectangle\n(\n275\n,\n200\n,\n400\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeLineCap() example",
    "output": "<?php\nfunction\nsetStrokeLineCap\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n25\n);\n\n$lineTypes\n= [\n\\Imagick\n::\nLINECAP_BUTT\n,\n\\Imagick\n::\nLINECAP_ROUND\n,\n\\Imagick\n::\nLINECAP_SQUARE\n,];\n\n$offset\n=\n0\n;\n    foreach (\n$lineTypes\nas\n$lineType\n) {\n\n$draw\n->\nsetStrokeLineCap\n(\n$lineType\n);\n\n$draw\n->\nline\n(\n50\n+\n$offset\n,\n50\n,\n50\n+\n$offset\n,\n250\n);\n\n$offset\n+=\n50\n;\n    }\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n300\n,\n300\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeLineJoin() example",
    "output": "<?php\nfunction\nsetStrokeLineJoin\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n20\n);\n\n$offset\n=\n220\n;\n\n$lineJoinStyle\n= [\n\n\\Imagick\n::\nLINEJOIN_MITER\n,\n\n\\Imagick\n::\nLINEJOIN_ROUND\n,\n\n\\Imagick\n::\nLINEJOIN_BEVEL\n,\n        ];\n    for (\n$x\n=\n0\n;\n$x\n<\ncount\n(\n$lineJoinStyle\n);\n$x\n++) {\n\n$draw\n->\nsetStrokeLineJoin\n(\n$lineJoinStyle\n[\n$x\n]);\n\n$points\n= [\n            [\n'x'\n=>\n40\n*\n5\n,\n'y'\n=>\n10\n*\n5\n+\n$x\n*\n$offset\n],\n            [\n'x'\n=>\n20\n*\n5\n,\n'y'\n=>\n20\n*\n5\n+\n$x\n*\n$offset\n],\n            [\n'x'\n=>\n70\n*\n5\n,\n'y'\n=>\n50\n*\n5\n+\n$x\n*\n$offset\n],\n            [\n'x'\n=>\n40\n*\n5\n,\n'y'\n=>\n10\n*\n5\n+\n$x\n*\n$offset\n],\n        ];\n\n$draw\n->\npolyline\n(\n$points\n);\n    }\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n700\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeMiterLimit() example",
    "output": "<?php\nfunction\nsetStrokeMiterLimit\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n0.6\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n10\n);\n\n$yOffset\n=\n100\n;\n\n$draw\n->\nsetStrokeLineJoin\n(\n\\Imagick\n::\nLINEJOIN_MITER\n);\n    for (\n$y\n=\n0\n;\n$y\n<\n3\n;\n$y\n++) {\n\n$draw\n->\nsetStrokeMiterLimit\n(\n40\n*\n$y\n);\n\n$points\n= [\n            [\n'x'\n=>\n22\n*\n3\n,\n'y'\n=>\n15\n*\n4\n+\n$y\n*\n$yOffset\n],\n            [\n'x'\n=>\n20\n*\n3\n,\n'y'\n=>\n20\n*\n4\n+\n$y\n*\n$yOffset\n],\n            [\n'x'\n=>\n70\n*\n5\n,\n'y'\n=>\n45\n*\n4\n+\n$y\n*\n$yOffset\n],\n        ];\n\n$draw\n->\npolygon\n(\n$points\n);\n    }\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\n$image\n->\nsetImageType\n(\n\\Imagick\n::\nIMGTYPE_PALETTE\n);\n\n$image\n->\nsetImageCompressionQuality\n(\n100\n);\n\n$image\n->\nstripImage\n();\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeOpacity() example",
    "output": "<?php\nfunction\nsetStrokeOpacity\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n10\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n1\n);\n\n$draw\n->\nline\n(\n100\n,\n80\n,\n400\n,\n125\n);\n\n$draw\n->\nrectangle\n(\n25\n,\n200\n,\n150\n,\n350\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n0.5\n);\n\n$draw\n->\nline\n(\n100\n,\n100\n,\n400\n,\n145\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n325\n,\n350\n);\n\n$draw\n->\nsetStrokeOpacity\n(\n0.2\n);\n\n$draw\n->\nline\n(\n100\n,\n120\n,\n400\n,\n165\n);\n\n$draw\n->\nrectangle\n(\n375\n,\n200\n,\n500\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n550\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setStrokeWidth() example",
    "output": "<?php\nfunction\nsetStrokeWidth\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nline\n(\n100\n,\n100\n,\n400\n,\n145\n);\n\n$draw\n->\nrectangle\n(\n100\n,\n200\n,\n225\n,\n350\n);\n\n$draw\n->\nsetStrokeWidth\n(\n5\n);\n\n$draw\n->\nline\n(\n100\n,\n120\n,\n400\n,\n165\n);\n\n$draw\n->\nrectangle\n(\n275\n,\n200\n,\n400\n,\n350\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n400\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setTextAlignment() example",
    "output": "<?php\nfunction\nsetTextAlignment\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetFontSize\n(\n36\n);\n\n$draw\n->\nsetTextAlignment\n(\n\\Imagick\n::\nALIGN_LEFT\n);\n\n$draw\n->\nannotation\n(\n250\n,\n75\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetTextAlignment\n(\n\\Imagick\n::\nALIGN_CENTER\n);\n\n$draw\n->\nannotation\n(\n250\n,\n150\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetTextAlignment\n(\n\\Imagick\n::\nALIGN_RIGHT\n);\n\n$draw\n->\nannotation\n(\n250\n,\n225\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nline\n(\n250\n,\n0\n,\n250\n,\n500\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setTextAntialias() example",
    "output": "<?php\nfunction\nsetTextAntialias\n(\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n'none'\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n1\n);\n\n$draw\n->\nsetFontSize\n(\n32\n);\n\n$draw\n->\nsetTextAntialias\n(\nfalse\n);\n\n$draw\n->\nannotation\n(\n5\n,\n30\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetTextAntialias\n(\ntrue\n);\n\n$draw\n->\nannotation\n(\n5\n,\n65\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n220\n,\n80\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\n//Scale the image so that people can see the aliasing.\n\n$imagick\n->\nscaleImage\n(\n220\n*\n6\n,\n80\n*\n6\n);\n\n$imagick\n->\ncropImage\n(\n640\n,\n480\n,\n0\n,\n0\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setTextDecoration() example",
    "output": "<?php\nfunction\nsetTextDecoration\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$textDecoration\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nsetTextDecoration\n(\n$textDecoration\n);\n\n$draw\n->\nannotation\n(\n50\n,\n75\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n200\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setTextUnderColor() example",
    "output": "<?php\nfunction\nsetTextUnderColor\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$textUnderColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n$draw\n->\nannotation\n(\n50\n,\n75\n,\n\"Lorem Ipsum!\"\n);\n\n$draw\n->\nsetTextUnderColor\n(\n$textUnderColor\n);\n\n$draw\n->\nannotation\n(\n50\n,\n175\n,\n\"Lorem Ipsum!\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setVectorGraphics() example",
    "output": "<?php\nfunction\nsetVectorGraphics\n() {\n\n//Setup a draw object with some drawing in it.\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetFillColor\n(\n\"red\"\n);\n\n$draw\n->\ncircle\n(\n20\n,\n20\n,\n50\n,\n50\n);\n\n$draw\n->\nsetFillColor\n(\n\"blue\"\n);\n\n$draw\n->\ncircle\n(\n50\n,\n70\n,\n50\n,\n50\n);\n\n$draw\n->\nrectangle\n(\n50\n,\n120\n,\n80\n,\n150\n);\n\n//Get the drawing as a string\n\n$SVG\n=\n$draw\n->\ngetVectorGraphics\n();\n\n\n//$svg is a string, and could be saved anywhere a string can be saved\n    //Use the saved drawing to generate a new draw object\n\n$draw2\n= new\n\\ImagickDraw\n();\n\n//Apparently the SVG text is missing the root element.\n\n$draw2\n->\nsetVectorGraphics\n(\n\"<root>\"\n.\n$SVG\n.\n\"</root>\"\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n200\n,\n200\n,\n'white'\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw2\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::setViewBox() example",
    "output": "<?php\nfunction\nsetViewBox\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFontSize\n(\n72\n);\n\n/*\n\n    Sets the overall canvas size to be recorded with the drawing vector data. Usually this will be specified using the same size as the canvas image. When the vector data is saved to SVG or MVG formats, the viewbox is use to specify the size of the canvas image that a viewer will render the vector data on.\n\n     */\n\n$draw\n->\ncircle\n(\n250\n,\n250\n,\n250\n,\n0\n);\n\n$draw\n->\nsetviewbox\n(\n0\n,\n0\n,\n200\n,\n200\n);\n\n$draw\n->\ncircle\n(\n125\n,\n250\n,\n250\n,\n250\n);\n\n$draw\n->\ntranslate\n(\n250\n,\n125\n);\n\n$draw\n->\ncircle\n(\n0\n,\n0\n,\n125\n,\n0\n);\n\n$imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$imagick\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$imagick\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::skewX() example",
    "output": "<?php\nfunction\nskewX\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n,\n\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$skew\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\nskewX\n(\n$skew\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::skewY() example",
    "output": "<?php\nfunction\nskewY\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n,\n\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$skew\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetStrokeWidth\n(\n2\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\nskewY\n(\n$skew\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 ImagickDraw::translate() example",
    "output": "<?php\nfunction\ntranslate\n(\n$strokeColor\n,\n$fillColor\n,\n$backgroundColor\n,\n$fillModifiedColor\n,\n\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n,\n$translateX\n,\n$translateY\n) {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$draw\n->\nsetFillColor\n(\n$fillModifiedColor\n);\n\n$draw\n->\ntranslate\n(\n$translateX\n,\n$translateY\n);\n\n$draw\n->\nrectangle\n(\n$startX\n,\n$startY\n,\n$endX\n,\n$endY\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n$backgroundColor\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickPixel::construct()",
    "output": "<?php\nfunction\nconstruct\n() {\n\n$columns\n=\n4\n;\n\n\n$exampleColors\n= array(\n\n\"rgba(100%, 0%, 0%, 0.5)\"\n,\n\n\"hsb(33.3333%, 100%,  75%)\"\n,\n// medium green\n\n\"hsl(120, 255,   191.25)\"\n,\n//medium green\n\n\"graya(50%, 0.5)\"\n,\n//  semi-transparent mid gray\n\n\"LightCoral\"\n,\n\"none\"\n,\n//\"cmyk(0.9, 0.48, 0.83, 0.50)\",\n\n\"#f00\"\n,\n//  #rgb\n\n\"#ff0000\"\n,\n//  #rrggbb\n\n\"#ff0000ff\"\n,\n//  #rrggbbaa\n\n\"#ffff00000000\"\n,\n//  #rrrrggggbbbb\n\n\"#ffff00000000ffff\"\n,\n//  #rrrrggggbbbbaaaa\n\n\"rgb(255, 0, 0)\"\n,\n//  an integer in the range 0—255 for each component\n\n\"rgb(100.0%, 0.0%, 0.0%)\"\n,\n//  a float in the range 0—100% for each component\n\n\"rgb(255, 0, 0)\"\n,\n//  range 0 - 255\n\n\"rgba(255, 0, 0, 1.0)\"\n,\n//  the same, with an explicit alpha value\n\n\"rgb(100%, 0%, 0%)\"\n,\n//  range 0.0% - 100.0%\n\n\"rgba(100%, 0%, 0%, 1.0)\"\n,\n//  the same, with an explicit alpha value\n\n);\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$count\n=\n0\n;\n\n$black\n= new\n\\ImagickPixel\n(\n'rgb(0, 0, 0)'\n);\n    foreach (\n$exampleColors\nas\n$exampleColor\n) {\n\n$color\n= new\n\\ImagickPixel\n(\n$exampleColor\n);\n\n$draw\n->\nsetstrokewidth\n(\n1.0\n);\n\n$draw\n->\nsetStrokeColor\n(\n$black\n);\n\n$draw\n->\nsetFillColor\n(\n$color\n);\n\n$offsetX\n= (\n$count\n%\n$columns\n) *\n50\n+\n5\n;\n\n$offsetY\n=\nintval\n(\n$count\n/\n$columns\n) *\n50\n+\n5\n;\n\n$draw\n->\nrectangle\n(\n0\n+\n$offsetX\n,\n0\n+\n$offsetY\n,\n40\n+\n$offsetX\n,\n40\n+\n$offsetY\n);\n\n$count\n++;\n    }\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n350\n,\n350\n,\n\"blue\"\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::getColor() usage",
    "output": "<?php\n//Create an ImagickPixel with the predefined color 'brown'\n$color\n= new\nImagickPixel\n(\n'brown'\n);\n//Set the color to have an alpha of 25%\n$color\n->\nsetColorValue\n(\nImagick\n::\nCOLOR_ALPHA\n,\n64\n/\n256.0\n);\n$colorInfo\n=\n$color\n->\ngetColor\n();\necho\n\"Standard values\"\n.\nPHP_EOL\n;\nprint_r\n(\n$colorInfo\n);\n$colorInfo\n=\n$color\n->\ngetColor\n(\n1\n);\necho\n\"Normalized values:\"\n.\nPHP_EOL\n;\nprint_r\n(\n$colorInfo\n);\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::getColorAsString() usage",
    "output": "<?php\n//Create an ImagickPixel with the predefined color 'brown'\n$color\n= new\nImagickPixel\n(\n'brown'\n);\n$color\n->\nsetColorValue\n(\nImagick\n::\nCOLOR_ALPHA\n,\n64\n/\n256.0\n);\n$colorInfo\n=\n$color\n->\ngetColorAsString\n();\nprint_r\n(\n$colorInfo\n);\n?>"
  },
  {
    "input": "Example #1 ImagickPixel getColorCount()",
    "output": "<?php\n    $imagick\n= new\n\\Imagick\n();\n\n$imagick\n->\nnewPseudoImage\n(\n640\n,\n480\n,\n\"magick:logo\"\n);\n\n$histogramElements\n=\n$imagick\n->\ngetImageHistogram\n();\n\n$lastColor\n=\narray_pop\n(\n$histogramElements\n);\n    echo\n\"Last pixel color count is: \"\n.\n$lastColor\n->\ngetColorCount\n();\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::getColorValue() usage",
    "output": "<?php\n\n$color\n= new\nImagickPixel\n(\n'rgba(90%, 20%, 20%, 0.75)'\n);\necho\n\"Alpha value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_ALPHA\n).\nPHP_EOL\n;\necho\n\"\"\n.\nPHP_EOL\n;\necho\n\"Red value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_RED\n).\nPHP_EOL\n;\necho\n\"Green value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_GREEN\n).\nPHP_EOL\n;\necho\n\"Blue value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_BLUE\n).\nPHP_EOL\n;\necho\n\"\"\n.\nPHP_EOL\n;\necho\n\"Cyan value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_CYAN\n).\nPHP_EOL\n;\necho\n\"Magenta value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_MAGENTA\n).\nPHP_EOL\n;\necho\n\"Yellow value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_YELLOW\n).\nPHP_EOL\n;\necho\n\"Black value is \"\n.\n$color\n->\ngetColorValue\n(\nImagick\n::\nCOLOR_BLACK\n).\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1  ImagickPixel::getColorValueQuantum()",
    "output": "<?php\n        $color\n= new\n\\ImagickPixel\n(\n'rgb(128, 5, 255)'\n);\n\n$colorRed\n=\n$color\n->\ngetColorValueQuantum\n(\n\\Imagick\n::\nCOLOR_RED\n);\n\n$colorGreen\n=\n$color\n->\ngetColorValueQuantum\n(\n\\Imagick\n::\nCOLOR_GREEN\n);\n\n$colorBlue\n=\n$color\n->\ngetColorValueQuantum\n(\n\\Imagick\n::\nCOLOR_BLUE\n);\n\n$colorAlpha\n=\n$color\n->\ngetColorValueQuantum\n(\n\\Imagick\n::\nCOLOR_ALPHA\n);\n\nprintf\n(\n\n\"Red: %s Green: %s  Blue %s Alpha: %s\"\n,\n\n$colorRed\n,\n\n$colorGreen\n,\n\n$colorBlue\n,\n\n$colorAlpha\n\n);\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::getHSL() example",
    "output": "<?php\n$color\n= new\nImagickPixel\n(\n'rgb(90%, 10%, 10%)'\n);\n$colorInfo\n=\n$color\n->\ngetHSL\n();\nprint_r\n(\n$colorInfo\n);\n?>"
  },
  {
    "input": "Example #1  ImagickPixel::isSimilar()",
    "output": "<?php\n\n// The tests below are written with the maximum distance expressed as 255\n        // so we need to scale them by the square root of 3 - the diagonal length\n        // of a unit cube.\n\n$root3\n=\n1.732050807568877\n;\n\n$tests\n= array(\n            [\n'rgb(245, 0, 0)'\n,\n'rgb(255, 0, 0)'\n,\n9\n/\n$root3\n,\nfalse\n,],\n            [\n'rgb(245, 0, 0)'\n,\n'rgb(255, 0, 0)'\n,\n10\n/\n$root3\n,\ntrue\n,],\n            [\n'rgb(0, 0, 0)'\n,\n'rgb(7, 7, 0)'\n,\n9\n/\n$root3\n,\nfalse\n,],\n            [\n'rgb(0, 0, 0)'\n,\n'rgb(7, 7, 0)'\n,\n10\n/\n$root3\n,\ntrue\n,],\n            [\n'rgba(0, 0, 0, 1)'\n,\n'rgba(7, 7, 0, 1)'\n,\n9\n/\n$root3\n,\nfalse\n,],\n            [\n'rgba(0, 0, 0, 1)'\n,\n'rgba(7, 7, 0, 1)'\n,\n10\n/\n$root3\n,\ntrue\n,],\n            [\n'rgb(128, 128, 128)'\n,\n'rgb(128, 128, 120)'\n,\n7\n/\n$root3\n,\nfalse\n,],\n            [\n'rgb(128, 128, 128)'\n,\n'rgb(128, 128, 120)'\n,\n8\n/\n$root3\n,\ntrue\n,],\n            [\n'rgb(0, 0, 0)'\n,\n'rgb(255, 255, 255)'\n,\n254.9\n,\nfalse\n,],\n            [\n'rgb(0, 0, 0)'\n,\n'rgb(255, 255, 255)'\n,\n255\n,\ntrue\n,],\n            [\n'rgb(255, 0, 0)'\n,\n'rgb(0, 255, 255)'\n,\n254.9\n,\nfalse\n,],\n            [\n'rgb(255, 0, 0)'\n,\n'rgb(0, 255, 255)'\n,\n255\n,\ntrue\n,],\n            [\n'black'\n,\n'rgba(0, 0, 0)'\n,\n0.0\n,\ntrue\n],\n            [\n'black'\n,\n'rgba(10, 0, 0, 1.0)'\n,\n10.0\n/\n$root3\n,\ntrue\n],);\n\n$output\n=\n\"<table width='100%' class='infoTable'><thead>\n                <tr>\n                <th>\n                Color 1\n                </th>\n                <th>\n                Color 2\n                </th>\n                <th>\n                    Test distance * 255\n                </th>\n                <th>\n                    Is within distance\n                </th>\n                </tr>\n        </thead>\"\n;\n\n$output\n.=\n\"<tbody>\"\n;\n        foreach (\n$tests\nas\n$testInfo\n) {\n\n$color1\n=\n$testInfo\n[\n0\n];\n\n$color2\n=\n$testInfo\n[\n1\n];\n\n$distance\n=\n$testInfo\n[\n2\n];\n\n$expectation\n=\n$testInfo\n[\n3\n];\n\n$testDistance\n= (\n$distance\n/\n255.0\n);\n\n$color1Pixel\n= new\n\\ImagickPixel\n(\n$color1\n);\n\n$color2Pixel\n= new\n\\ImagickPixel\n(\n$color2\n);\n\n$isSimilar\n=\n$color1Pixel\n->\nisPixelSimilar\n(\n$color2Pixel\n,\n$testDistance\n);\n            if (\n$isSimilar\n!==\n$expectation\n) {\n                echo\n\"Test distance failed. Color [\n$color1\n] compared to color [\n$color2\n] is not within distance\n$testDistance\n FAILED.\"\n.\nNL\n;\n            }\n\n$layout\n=\n\"<tr>\n                <td>%s</td>\n                <td>%s</td>\n                <td>%s</td>\n                <td style='text-align: center;'>%s</td>\n            </tr>\"\n;\n\n\n$output\n.=\nsprintf\n(\n\n$layout\n,\n\n$color1\n,\n\n$color2\n,\n\n$distance\n,\n\n$isSimilar\n?\n'yes'\n:\n'no'\n\n);\n        }\n\n$output\n.=\n\"</tbody></table>\"\n;\n\n        return\n$output\n;\n?>"
  },
  {
    "input": "Example #1  ImagickPixel::setColor()",
    "output": "<?php\nfunction\nsetColor\n() {\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$strokeColor\n= new\n\\ImagickPixel\n(\n'green'\n);\n\n$fillColor\n= new\n\\ImagickPixel\n();\n\n$fillColor\n->\nsetColor\n(\n'rgba(100%, 75%, 0%, 1.0)'\n);\n\n$draw\n->\nsetstrokewidth\n(\n3.0\n);\n\n$draw\n->\nsetStrokeColor\n(\n$strokeColor\n);\n\n$draw\n->\nsetFillColor\n(\n$fillColor\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$image\n= new\n\\Imagick\n();\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n\"SteelBlue2\"\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Basic Imagick::setColorValue() usage",
    "output": "<?php\n$color\n= new\n\\ImagickPixel\n(\n'firebrick'\n);\n$color\n->\nsetColorValue\n(\nImagick\n::\nCOLOR_ALPHA\n,\n0.5\n);\nprint_r\n(\n$color\n->\ngetcolor\n(\ntrue\n));\n?>"
  },
  {
    "input": "Example #1  ImagickPixel::setColorValueQuantum()",
    "output": "<?php\nfunction\nsetColorValueQuantum\n() {\n\n$image\n= new\n\\Imagick\n();\n\n$quantumRange\n=\n$image\n->\ngetQuantumRange\n();\n\n$draw\n= new\n\\ImagickDraw\n();\n\n$color\n= new\n\\ImagickPixel\n(\n'blue'\n);\n\n$color\n->\nsetcolorValueQuantum\n(\n\\Imagick\n::\nCOLOR_RED\n,\n128\n*\n$quantumRange\n[\n'quantumRangeLong'\n] /\n256\n);\n\n$draw\n->\nsetstrokewidth\n(\n1.0\n);\n\n$draw\n->\nsetStrokeColor\n(\n$color\n);\n\n$draw\n->\nsetFillColor\n(\n$color\n);\n\n$draw\n->\nrectangle\n(\n200\n,\n200\n,\n300\n,\n300\n);\n\n$image\n->\nnewImage\n(\n500\n,\n500\n,\n\"SteelBlue2\"\n);\n\n$image\n->\nsetImageFormat\n(\n\"png\"\n);\n\n$image\n->\ndrawImage\n(\n$draw\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$image\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1 Use ImagickPixel::setHSL() to modify a color",
    "output": "<?php\n//Create an almost pure red color\n$color\n= new\nImagickPixel\n(\n'rgb(90%, 10%, 10%)'\n);\n//Get it's HSL values\n$colorInfo\n=\n$color\n->\ngetHSL\n();\n//Rotate the hue by 180 degrees\n$newHue\n=\n$colorInfo\n[\n'hue'\n] +\n0.5\n;\nif (\n$newHue\n>\n1\n) {\n\n$newHue\n=\n$newHue\n-\n1\n;\n}\n//Set the ImagickPixel to the new color\n$colorInfo\n=\n$color\n->\nsetHSL\n(\n$newHue\n,\n$colorInfo\n[\n'saturation'\n],\n$colorInfo\n[\n'luminosity'\n]);\n//Check that the new color is blue/green\n$colorInfo\n=\n$color\n->\ngetcolor\n();\nprint_r\n(\n$colorInfo\n);\n?>"
  },
  {
    "input": "Example #1  ImagickPixelIterator::clear()",
    "output": "<?php\nfunction\nclear\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n=\n$imagick\n->\ngetPixelRegionIterator\n(\n100\n,\n100\n,\n250\n,\n200\n);\n\n/* Loop through pixel rows */\n\nforeach (\n$imageIterator\nas\n$pixels\n) {\n\n/** @var $pixel \\ImagickPixel */\n        /* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n            if (\n$column\n%\n2\n) {\n\n/* Paint every second pixel black*/\n\n$pixel\n->\nsetColor\n(\n\"rgba(0, 0, 0, 0)\"\n);\n            }\n        }\n\n/* Sync the iterator, this is important to do on each iteration */\n\n$imageIterator\n->\nsyncIterator\n();\n    }\n\n$imageIterator\n->\nclear\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  ImagickPixelIterator::construct()",
    "output": "<?php\nfunction\nconstruct\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n= new\n\\ImagickPixelIterator\n(\n$imagick\n);\n\n/* Loop through pixel rows */\n\nforeach (\n$imageIterator\nas\n$pixels\n) {\n\n/* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n\n/** @var $pixel \\ImagickPixel */\n\nif (\n$column\n%\n2\n) {\n\n/* Paint every second pixel black*/\n\n$pixel\n->\nsetColor\n(\n\"rgba(0, 0, 0, 0)\"\n);\n            }\n        }\n\n/* Sync the iterator, this is important to do on each iteration */\n\n$imageIterator\n->\nsyncIterator\n();\n    }\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  ImagickPixelIterator::getNextIteratorRow()",
    "output": "<?php\nfunction\ngetNextIteratorRow\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n=\n$imagick\n->\ngetPixelIterator\n();\n\n$count\n=\n0\n;\n    while (\n$pixels\n=\n$imageIterator\n->\ngetNextIteratorRow\n()) {\n        if ((\n$count\n%\n3\n) ==\n0\n) {\n\n/* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n\n/** @var $pixel \\ImagickPixel */\n\nif (\n$column\n%\n2\n) {\n\n/* Paint every second pixel black*/\n\n$pixel\n->\nsetColor\n(\n\"rgba(0, 0, 0, 0)\"\n);\n                }\n            }\n\n/* Sync the iterator, this is important to do on each iteration */\n\n$imageIterator\n->\nsyncIterator\n();\n        }\n\n$count\n+=\n1\n;\n    }\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  ImagickPixelIterator::resetIterator()",
    "output": "<?php\nfunction\nresetIterator\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n=\n$imagick\n->\ngetPixelIterator\n();\n\n/* Loop trough pixel rows */\n\nforeach (\n$imageIterator\nas\n$pixels\n) {\n\n/* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n\n/** @var $pixel \\ImagickPixel */\n\nif (\n$column\n%\n2\n) {\n\n/* Make every second pixel 25% red*/\n\n$pixel\n->\nsetColorValue\n(\n\\Imagick\n::\nCOLOR_RED\n,\n64\n);\n            }\n        }\n\n/* Sync the iterator, this is important to do on each iteration */\n\n$imageIterator\n->\nsyncIterator\n();\n    }\n\n$imageIterator\n->\nresetiterator\n();\n\n/* Loop trough pixel rows */\n\nforeach (\n$imageIterator\nas\n$pixels\n) {\n\n/* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$column\n=>\n$pixel\n) {\n\n/** @var $pixel \\ImagickPixel */\n\nif (\n$column\n%\n3\n) {\n\n$pixel\n->\nsetColorValue\n(\n\\Imagick\n::\nCOLOR_BLUE\n,\n64\n);\n/* Make every second pixel a little blue*/\n                //$pixel->setColor(\"rgba(0, 0, 128, 0)\"); /* Paint every second pixel black*/\n\n}\n        }\n\n$imageIterator\n->\nsyncIterator\n();\n/* Sync the iterator, this is important to do on each iteration */\n\n}\n\n$imageIterator\n->\nclear\n();\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  ImagickPixelIterator::setIteratorRow()",
    "output": "<?php\nfunction\nsetIteratorRow\n(\n$imagePath\n) {\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imageIterator\n=\n$imagick\n->\ngetPixelRegionIterator\n(\n200\n,\n100\n,\n200\n,\n200\n);\n    for (\n$x\n=\n0\n;\n$x\n<\n20\n;\n$x\n++) {\n\n$imageIterator\n->\nsetIteratorRow\n(\n$x\n*\n5\n);\n\n$pixels\n=\n$imageIterator\n->\ngetCurrentIteratorRow\n();\n\n/* Loop through the pixels in the row (columns) */\n\nforeach (\n$pixels\nas\n$pixel\n) {\n\n/** @var $pixel \\ImagickPixel */\n            /* Paint every second pixel black*/\n\n$pixel\n->\nsetColor\n(\n\"rgba(0, 0, 0, 0)\"\n);\n        }\n\n/* Sync the iterator, this is important to do on each iteration */\n\n$imageIterator\n->\nsyncIterator\n();\n    }\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n;\n}\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::addKernel()",
    "output": "<?php\nfunction\naddKernel\n(\n$imagePath\n) {\n\n$matrix1\n= [\n        [-\n1\n, -\n1\n, -\n1\n],\n        [\n0\n,\n0\n,\n0\n],\n        [\n1\n,\n1\n,\n1\n],\n    ];\n\n$matrix2\n= [\n        [-\n1\n,\n0\n,\n1\n],\n        [-\n1\n,\n0\n,\n1\n],\n        [-\n1\n,\n0\n,\n1\n],\n    ];\n\n$kernel1\n=\nImagickKernel\n::\nfromMatrix\n(\n$matrix1\n);\n\n$kernel2\n=\nImagickKernel\n::\nfromMatrix\n(\n$matrix2\n);\n\n$kernel1\n->\naddKernel\n(\n$kernel2\n);\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nfilter\n(\n$kernel1\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::addUnityKernel()",
    "output": "<?php\n\nfunction\nrenderKernelTable\n(\n$matrix\n) {\n\n$output\n=\n\"<table class='infoTable'>\"\n;\n\n        foreach (\n$matrix\nas\n$row\n) {\n\n$output\n.=\n\"<tr>\"\n;\n            foreach (\n$row\nas\n$cell\n) {\n\n$output\n.=\n\"<td style='text-align:left'>\"\n;\n                if (\n$cell\n===\nfalse\n) {\n\n$output\n.=\n\"false\"\n;\n                }\n                else {\n\n$output\n.=\nround\n(\n$cell\n,\n3\n);\n                }\n\n$output\n.=\n\"</td>\"\n;\n            }\n\n$output\n.=\n\"</tr>\"\n;\n        }\n\n\n$output\n.=\n\"</table>\"\n;\n\n        return\n$output\n;\n    }\n\n$matrix\n= [\n        [-\n1\n,\n0\n, -\n1\n],\n        [\n0\n,\n4\n,\n0\n],\n        [-\n1\n,\n0\n, -\n1\n],\n    ];\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n\n$kernel\n->\nscale\n(\n1\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$output\n=\n\"Before adding unity kernel: <br/>\"\n;\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n$kernel\n->\naddUnityKernel\n(\n0.5\n);\n\n$output\n.=\n\"After adding unity kernel: <br/>\"\n;\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n\n\n$kernel\n->\nscale\n(\n1\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$output\n.=\n\"After renormalizing kernel: <br/>\"\n;\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n    echo\n$output\n;\n?>"
  },
  {
    "input": "Example #2  ImagickKernel::addUnityKernel()",
    "output": "<?php\nfunction\naddUnityKernel\n(\n$imagePath\n) {\n\n$matrix\n= [\n        [-\n1\n,\n0\n, -\n1\n],\n        [\n0\n,\n4\n,\n0\n],\n        [-\n1\n,\n0\n, -\n1\n],\n    ];\n\n$kernel\n=\nImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n\n$kernel\n->\nscale\n(\n4\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$kernel\n->\naddUnityKernel\n(\n0.5\n);\n\n$imagick\n= new\n\\Imagick\n(\nrealpath\n(\n$imagePath\n));\n\n$imagick\n->\nfilter\n(\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/jpg\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::fromBuiltin()",
    "output": "<?php\nfunction\nrenderKernel\n(\nImagickKernel $imagickKernel\n) {\n\n$matrix\n=\n$imagickKernel\n->\ngetMatrix\n();\n\n\n$imageMargin\n=\n20\n;\n\n\n$tileSize\n=\n20\n;\n\n$tileSpace\n=\n4\n;\n\n$shadowSigma\n=\n4\n;\n\n$shadowDropX\n=\n20\n;\n\n$shadowDropY\n=\n0\n;\n\n$radius\n= (\n$tileSize\n/\n2\n) *\n0.9\n;\n\n\n$rows\n=\ncount\n(\n$matrix\n);\n\n$columns\n=\ncount\n(\n$matrix\n[\n0\n]);\n\n\n$imagickDraw\n= new\n\\ImagickDraw\n();\n\n$imagickDraw\n->\nsetFillColor\n(\n'#afafaf'\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'none'\n);\n\n\n$imagickDraw\n->\ntranslate\n(\n$imageMargin\n,\n$imageMargin\n);\n\n$imagickDraw\n->\npush\n();\n\nksort\n(\n$matrix\n);\n\n    foreach (\n$matrix\nas\n$row\n) {\n\nksort\n(\n$row\n);\n\n$imagickDraw\n->\npush\n();\n        foreach (\n$row\nas\n$cell\n) {\n            if (\n$cell\n!==\nfalse\n) {\n\n$color\n=\nintval\n(\n255\n*\n$cell\n);\n\n$colorString\n=\nsprintf\n(\n\"rgb(%f, %f, %f)\"\n,\n$color\n,\n$color\n,\n$color\n);\n\n$imagickDraw\n->\nsetFillColor\n(\n$colorString\n);\n\n$imagickDraw\n->\nrectangle\n(\n0\n,\n0\n,\n$tileSize\n,\n$tileSize\n);\n            }\n\n$imagickDraw\n->\ntranslate\n((\n$tileSize\n+\n$tileSpace\n),\n0\n);\n        }\n\n$imagickDraw\n->\npop\n();\n\n$imagickDraw\n->\ntranslate\n(\n0\n, (\n$tileSize\n+\n$tileSpace\n));\n    }\n\n$imagickDraw\n->\npop\n();\n\n$width\n= (\n$columns\n*\n$tileSize\n) + ((\n$columns\n-\n1\n) *\n$tileSpace\n);\n\n$height\n= (\n$rows\n*\n$tileSize\n) + ((\n$rows\n-\n1\n) *\n$tileSpace\n);\n\n$imagickDraw\n->\npush\n();\n\n$imagickDraw\n->\ntranslate\n(\n$width\n/\n2\n,\n$height\n/\n2\n);\n\n$imagickDraw\n->\nsetFillColor\n(\n'rgba(0, 0, 0, 0)'\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'white'\n);\n\n$imagickDraw\n->\ncircle\n(\n0\n,\n0\n,\n$radius\n-\n1\n,\n0\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'black'\n);\n\n$imagickDraw\n->\ncircle\n(\n0\n,\n0\n,\n$radius\n,\n0\n);\n\n$imagickDraw\n->\npop\n();\n\n$canvasWidth\n=\n$width\n+ (\n2\n*\n$imageMargin\n);\n\n$canvasHeight\n=\n$height\n+ (\n2\n*\n$imageMargin\n);\n\n$kernel\n= new\n\\Imagick\n();\n\n$kernel\n->\nnewPseudoImage\n(\n\n$canvasWidth\n,\n\n$canvasHeight\n,\n\n'canvas:none'\n\n);\n\n$kernel\n->\nsetImageFormat\n(\n'png'\n);\n\n$kernel\n->\ndrawImage\n(\n$imagickDraw\n);\n\n\n/* create drop shadow on it's own layer */\n\n$canvas\n=\n$kernel\n->\nclone\n();\n\n$canvas\n->\nsetImageBackgroundColor\n(new\n\\ImagickPixel\n(\n'rgb(0, 0, 0)'\n));\n\n$canvas\n->\nshadowImage\n(\n100\n,\n$shadowSigma\n,\n$shadowDropX\n,\n$shadowDropY\n);\n\n$canvas\n->\nsetImagePage\n(\n$canvasWidth\n,\n$canvasHeight\n, -\n5\n, -\n5\n);\n\n$canvas\n->\ncropImage\n(\n$canvasWidth\n,\n$canvasHeight\n,\n0\n,\n0\n);\n\n\n/* composite original text_layer onto shadow_layer */\n\n$canvas\n->\ncompositeImage\n(\n$kernel\n,\n\\Imagick\n::\nCOMPOSITE_OVER\n,\n0\n,\n0\n);\n\n$canvas\n->\nsetImageFormat\n(\n'png'\n);\n    return\n$canvas\n;\n}\nfunction\ncreateFromBuiltin\n(\n$kernelType\n,\n$kernelFirstTerm\n,\n$kernelSecondTerm\n,\n$kernelThirdTerm\n) {\n\n$string\n=\n''\n;\n    if (\n$kernelFirstTerm\n!=\nfalse\n&&\nstrlen\n(\ntrim\n(\n$kernelFirstTerm\n)) !=\n0\n) {\n\n$string\n.=\n$kernelFirstTerm\n;\n        if (\n$kernelSecondTerm\n!=\nfalse\n&&\nstrlen\n(\ntrim\n(\n$kernelSecondTerm\n)) !=\n0\n) {\n\n$string\n.=\n','\n.\n$kernelSecondTerm\n;\n            if (\n$kernelThirdTerm\n!=\nfalse\n&&\nstrlen\n(\ntrim\n(\n$kernelThirdTerm\n)) !=\n0\n) {\n\n$string\n.=\n','\n.\n$kernelThirdTerm\n;\n            }\n        }\n    }\n\n$kernel\n=\nImagickKernel\n::\nfromBuiltIn\n(\n\n$kernelType\n,\n\n$string\n\n);\n    return\n$kernel\n;\n}\n\nfunction\nfromBuiltin\n(\n$kernelType\n,\n$kernelFirstTerm\n,\n$kernelSecondTerm\n,\n$kernelThirdTerm\n) {\n\n$diamondKernel\n=\ncreateFromBuiltin\n(\n$kernelType\n,\n$kernelFirstTerm\n,\n$kernelSecondTerm\n,\n$kernelThirdTerm\n);\n\n$imagick\n=\nrenderKernel\n(\n$diamondKernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\nfromBuiltin\n(\n\\Imagick\n::\nKERNEL_DIAMOND\n,\n2\n,\nfalse\n,\nfalse\n);\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::fromMatrix()",
    "output": "<?php\nfunction\nrenderKernel\n(\nImagickKernel $imagickKernel\n) {\n\n$matrix\n=\n$imagickKernel\n->\ngetMatrix\n();\n\n\n$imageMargin\n=\n20\n;\n\n\n$tileSize\n=\n20\n;\n\n$tileSpace\n=\n4\n;\n\n$shadowSigma\n=\n4\n;\n\n$shadowDropX\n=\n20\n;\n\n$shadowDropY\n=\n0\n;\n\n$radius\n= (\n$tileSize\n/\n2\n) *\n0.9\n;\n\n\n$rows\n=\ncount\n(\n$matrix\n);\n\n$columns\n=\ncount\n(\n$matrix\n[\n0\n]);\n\n\n$imagickDraw\n= new\n\\ImagickDraw\n();\n\n$imagickDraw\n->\nsetFillColor\n(\n'#afafaf'\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'none'\n);\n\n\n$imagickDraw\n->\ntranslate\n(\n$imageMargin\n,\n$imageMargin\n);\n\n$imagickDraw\n->\npush\n();\n\nksort\n(\n$matrix\n);\n\n    foreach (\n$matrix\nas\n$row\n) {\n\nksort\n(\n$row\n);\n\n$imagickDraw\n->\npush\n();\n        foreach (\n$row\nas\n$cell\n) {\n            if (\n$cell\n!==\nfalse\n) {\n\n$color\n=\nintval\n(\n255\n*\n$cell\n);\n\n$colorString\n=\nsprintf\n(\n\"rgb(%f, %f, %f)\"\n,\n$color\n,\n$color\n,\n$color\n);\n\n$imagickDraw\n->\nsetFillColor\n(\n$colorString\n);\n\n$imagickDraw\n->\nrectangle\n(\n0\n,\n0\n,\n$tileSize\n,\n$tileSize\n);\n            }\n\n$imagickDraw\n->\ntranslate\n((\n$tileSize\n+\n$tileSpace\n),\n0\n);\n        }\n\n$imagickDraw\n->\npop\n();\n\n$imagickDraw\n->\ntranslate\n(\n0\n, (\n$tileSize\n+\n$tileSpace\n));\n    }\n\n$imagickDraw\n->\npop\n();\n\n$width\n= (\n$columns\n*\n$tileSize\n) + ((\n$columns\n-\n1\n) *\n$tileSpace\n);\n\n$height\n= (\n$rows\n*\n$tileSize\n) + ((\n$rows\n-\n1\n) *\n$tileSpace\n);\n\n$imagickDraw\n->\npush\n();\n\n$imagickDraw\n->\ntranslate\n(\n$width\n/\n2\n,\n$height\n/\n2\n);\n\n$imagickDraw\n->\nsetFillColor\n(\n'rgba(0, 0, 0, 0)'\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'white'\n);\n\n$imagickDraw\n->\ncircle\n(\n0\n,\n0\n,\n$radius\n-\n1\n,\n0\n);\n\n$imagickDraw\n->\nsetStrokeColor\n(\n'black'\n);\n\n$imagickDraw\n->\ncircle\n(\n0\n,\n0\n,\n$radius\n,\n0\n);\n\n$imagickDraw\n->\npop\n();\n\n$canvasWidth\n=\n$width\n+ (\n2\n*\n$imageMargin\n);\n\n$canvasHeight\n=\n$height\n+ (\n2\n*\n$imageMargin\n);\n\n$kernel\n= new\n\\Imagick\n();\n\n$kernel\n->\nnewPseudoImage\n(\n\n$canvasWidth\n,\n\n$canvasHeight\n,\n\n'canvas:none'\n\n);\n\n$kernel\n->\nsetImageFormat\n(\n'png'\n);\n\n$kernel\n->\ndrawImage\n(\n$imagickDraw\n);\n\n\n/* create drop shadow on it's own layer */\n\n$canvas\n=\n$kernel\n->\nclone\n();\n\n$canvas\n->\nsetImageBackgroundColor\n(new\n\\ImagickPixel\n(\n'rgb(0, 0, 0)'\n));\n\n$canvas\n->\nshadowImage\n(\n100\n,\n$shadowSigma\n,\n$shadowDropX\n,\n$shadowDropY\n);\n\n$canvas\n->\nsetImagePage\n(\n$canvasWidth\n,\n$canvasHeight\n, -\n5\n, -\n5\n);\n\n$canvas\n->\ncropImage\n(\n$canvasWidth\n,\n$canvasHeight\n,\n0\n,\n0\n);\n\n\n/* composite original text_layer onto shadow_layer */\n\n$canvas\n->\ncompositeImage\n(\n$kernel\n,\n\\Imagick\n::\nCOMPOSITE_OVER\n,\n0\n,\n0\n);\n\n$canvas\n->\nsetImageFormat\n(\n'png'\n);\n    return\n$canvas\n;\n}\nfunction\ncreateFromMatrix\n() {\n\n$matrix\n= [\n        [\n0.5\n,\n0\n,\n0.2\n],\n        [\n0\n,\n1\n,\n0\n],\n        [\n0.9\n,\n0\n,\nfalse\n],\n    ];\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n    return\n$kernel\n;\n}\n\nfunction\nfromMatrix\n() {\n\n$kernel\n=\ncreateFromMatrix\n();\n\n$imagick\n=\nrenderKernel\n(\n$kernel\n);\n\nheader\n(\n\"Content-Type: image/png\"\n);\n    echo\n$imagick\n->\ngetImageBlob\n();\n}\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::getMatrix()",
    "output": "<?php\nfunction\nrenderKernelTable\n(\n$matrix\n) {\n\n$output\n=\n\"<table class='infoTable'>\"\n;\n    foreach (\n$matrix\nas\n$row\n) {\n\n$output\n.=\n\"<tr>\"\n;\n        foreach (\n$row\nas\n$cell\n) {\n\n$output\n.=\n\"<td style='text-align:left'>\"\n;\n            if (\n$cell\n===\nfalse\n) {\n\n$output\n.=\n\"false\"\n;\n            }\n            else {\n\n$output\n.=\nround\n(\n$cell\n,\n3\n);\n            }\n\n$output\n.=\n\"</td>\"\n;\n        }\n\n$output\n.=\n\"</tr>\"\n;\n    }\n\n$output\n.=\n\"</table>\"\n;\n    return\n$output\n;\n}\n\n$output\n=\n\"The built-in kernel name 'ring' with parameters of '2,3.5':<br/>\"\n;\n\n$kernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\n\\Imagick\n::\nKERNEL_RING\n,\n\n\"2,3.5\"\n\n);\n\n$matrix\n=\n$kernel\n->\ngetMatrix\n();\n\n$output\n.=\nrenderKernelTable\n(\n$matrix\n);\n    echo\n$output\n;\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::scale()",
    "output": "<?php\n\nfunction\nrenderKernelTable\n(\n$matrix\n) {\n\n$output\n=\n\"<table class='infoTable'>\"\n;\n\n        foreach (\n$matrix\nas\n$row\n) {\n\n$output\n.=\n\"<tr>\"\n;\n            foreach (\n$row\nas\n$cell\n) {\n\n$output\n.=\n\"<td style='text-align:left'>\"\n;\n                if (\n$cell\n===\nfalse\n) {\n\n$output\n.=\n\"false\"\n;\n                }\n                else {\n\n$output\n.=\nround\n(\n$cell\n,\n3\n);\n                }\n\n$output\n.=\n\"</td>\"\n;\n            }\n\n$output\n.=\n\"</tr>\"\n;\n        }\n\n\n$output\n.=\n\"</table>\"\n;\n\n        return\n$output\n;\n    }\n\n$output\n=\n\"\"\n;\n\n\n$matrix\n= [\n        [-\n1\n,\n0\n, -\n1\n],\n        [\n0\n,\n4\n,\n0\n],\n        [-\n1\n,\n0\n, -\n1\n],\n    ];\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n\n$kernelClone\n= clone\n$kernel\n;\n\n$output\n.=\n\"Start kernel<br/>\"\n;\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n\n\n$output\n.=\n\"Scaling with NORMALIZE_KERNEL_VALUE. The  <br/>\"\n;\n\n$kernel\n->\nscale\n(\n2\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n$kernel\n= clone\n$kernelClone\n;\n\n$output\n.=\n\"Scaling by percent<br/>\"\n;\n\n$kernel\n->\nscale\n(\n2\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_PERCENT\n);\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n\n$matrix2\n= [\n        [-\n1\n, -\n1\n,\n1\n],\n        [ -\n1\n,\nfalse\n,\n1\n],\n        [\n1\n,\n1\n,\n1\n],\n    ];\n\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix2\n);\n\n$output\n.=\n\"Scaling by correlate<br/>\"\n;\n\n$kernel\n->\nscale\n(\n1\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_CORRELATE\n);\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n    return\n$output\n;\n?>"
  },
  {
    "input": "Example #1  ImagickKernel::separate()",
    "output": "<?php\n\n\nfunction\nrenderKernelTable\n(\n$matrix\n) {\n\n$output\n=\n\"<table class='infoTable'>\"\n;\n        foreach (\n$matrix\nas\n$row\n) {\n\n$output\n.=\n\"<tr>\"\n;\n            foreach (\n$row\nas\n$cell\n) {\n\n$output\n.=\n\"<td style='text-align:left'>\"\n;\n                if (\n$cell\n===\nfalse\n) {\n\n$output\n.=\n\"false\"\n;\n                }\n                else {\n\n$output\n.=\nround\n(\n$cell\n,\n3\n);\n                }\n\n$output\n.=\n\"</td>\"\n;\n            }\n\n$output\n.=\n\"</tr>\"\n;\n        }\n\n\n$output\n.=\n\"</table>\"\n;\n\n        return\n$output\n;\n    }\n\n$matrix\n= [\n        [-\n1\n,\n0\n, -\n1\n],\n        [\n0\n,\n4\n,\n0\n],\n        [-\n1\n,\n0\n, -\n1\n],\n    ];\n\n$kernel\n=\n\\ImagickKernel\n::\nfromMatrix\n(\n$matrix\n);\n\n$kernel\n->\nscale\n(\n4\n,\n\\Imagick\n::\nNORMALIZE_KERNEL_VALUE\n);\n\n$diamondKernel\n=\n\\ImagickKernel\n::\nfromBuiltIn\n(\n\n\\Imagick\n::\nKERNEL_DIAMOND\n,\n\n\"2\"\n\n);\n\n$kernel\n->\naddKernel\n(\n$diamondKernel\n);\n\n\n$kernelList\n=\n$kernel\n->\nseparate\n();\n\n\n$output\n=\n''\n;\n\n$count\n=\n0\n;\n    foreach (\n$kernelList\nas\n$kernel\n) {\n\n$output\n.=\n\"<br/>Kernel\n$count\n<br/>\"\n;\n\n$output\n.=\nrenderKernelTable\n(\n$kernel\n->\ngetMatrix\n());\n\n$count\n++;\n    }\n    return\n$output\n;\n?>"
  },
  {
    "input": "Example #1 imap_append() example",
    "output": "<?php\n$imap\n=\nimap_open\n(\n\"{imap.example.org}INBOX.Drafts\"\n,\n\"username\"\n,\n\"password\"\n);\n$check\n=\nimap_check\n(\n$imap\n);\necho\n\"Msg Count before append: \"\n.\n$check\n->\nNmsgs\n.\n\"\\n\"\n;\nimap_append\n(\n$imap\n,\n\"{imap.example.org}INBOX.Drafts\"\n\n,\n\"From: me@example.com\\r\\n\"\n\n.\n\"To: you@example.com\\r\\n\"\n\n.\n\"Subject: test\\r\\n\"\n\n.\n\"\\r\\n\"\n\n.\n\"this is a test message, please ignore\\r\\n\"\n\n);\n$check\n=\nimap_check\n(\n$imap\n);\necho\n\"Msg Count after append : \"\n.\n$check\n->\nNmsgs\n.\n\"\\n\"\n;\nimap_close\n(\n$imap\n);\n?>"
  },
  {
    "input": "Example #1 imap_check() example",
    "output": "<?php\n$imap\n=\nimap_check\n(\n$imap_stream\n);\nvar_dump\n(\n$imap\n);\n?>"
  },
  {
    "input": "Example #1 imap_createmailbox() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"username\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n     or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$name1\n=\n\"phpnewbox\"\n;\n$name2\n=\nimap_utf7_encode\n(\n\"phpnewböx\"\n);\n// phpnewb&w7Y-x\n$newname\n=\n$name1\n;\necho\n\"Newname will be '\n$name1\n'<br />\\n\"\n;\n// we will now create a new mailbox \"phptestbox\" in your inbox folder,\n// check its status after creation and finally remove it to restore\n// your inbox to its initial state\nif (@\nimap_createmailbox\n(\n$mbox\n,\nimap_utf7_encode\n(\n\"{imap.example.org}INBOX.\n$newname\n\"\n))) {\n\n$status\n= @\nimap_status\n(\n$mbox\n,\n\"{imap.example.org}INBOX.\n$newname\n\"\n,\nSA_ALL\n);\n    if (\n$status\n) {\n        echo\n\"your new mailbox '\n$name1\n' has the following status:<br />\\n\"\n;\n        echo\n\"Messages:   \"\n.\n$status\n->\nmessages\n.\n\"<br />\\n\"\n;\n        echo\n\"Recent:     \"\n.\n$status\n->\nrecent\n.\n\"<br />\\n\"\n;\n        echo\n\"Unseen:     \"\n.\n$status\n->\nunseen\n.\n\"<br />\\n\"\n;\n        echo\n\"UIDnext:    \"\n.\n$status\n->\nuidnext\n.\n\"<br />\\n\"\n;\n        echo\n\"UIDvalidity:\"\n.\n$status\n->\nuidvalidity\n.\n\"<br />\\n\"\n;\n        if (\nimap_renamemailbox\n(\n$mbox\n,\n\"{imap.example.org}INBOX.\n$newname\n\"\n,\n\"{imap.example.org}INBOX.\n$name2\n\"\n)) {\n            echo\n\"renamed new mailbox from '\n$name1\n' to '\n$name2\n'<br />\\n\"\n;\n\n$newname\n=\n$name2\n;\n        } else {\n            echo\n\"imap_renamemailbox on new mailbox failed: \"\n.\nimap_last_error\n() .\n\"<br />\\n\"\n;\n        }\n    } else {\n        echo\n\"imap_status on new mailbox failed: \"\n.\nimap_last_error\n() .\n\"<br />\\n\"\n;\n    }\n    if (@\nimap_deletemailbox\n(\n$mbox\n,\n\"{imap.example.org}INBOX.\n$newname\n\"\n)) {\n        echo\n\"new mailbox removed to restore initial state<br />\\n\"\n;\n    } else {\n        echo\n\"imap_deletemailbox on new mailbox failed: \"\n.\nimplode\n(\n\"<br />\\n\"\n,\nimap_errors\n()) .\n\"<br />\\n\"\n;\n    }\n} else {\n    echo\n\"could not create new mailbox: \"\n.\nimplode\n(\n\"<br />\\n\"\n,\nimap_errors\n()) .\n\"<br />\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_delete() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}INBOX\"\n,\n\"username\"\n,\n\"password\"\n)\n    or die(\n\"Can't connect: \"\n.\nimap_last_error\n());\n$check\n=\nimap_mailboxmsginfo\n(\n$mbox\n);\necho\n\"Messages before delete: \"\n.\n$check\n->\nNmsgs\n.\n\"<br />\\n\"\n;\nimap_delete\n(\n$mbox\n,\n1\n);\n$check\n=\nimap_mailboxmsginfo\n(\n$mbox\n);\necho\n\"Messages after  delete: \"\n.\n$check\n->\nNmsgs\n.\n\"<br />\\n\"\n;\nimap_expunge\n(\n$mbox\n);\n$check\n=\nimap_mailboxmsginfo\n(\n$mbox\n);\necho\n\"Messages after expunge: \"\n.\n$check\n->\nNmsgs\n.\n\"<br />\\n\"\n;\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_fetch_overview() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}INBOX\"\n,\n\"username\"\n,\n\"password\"\n)\n     or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$MC\n=\nimap_check\n(\n$mbox\n);\n// Fetch an overview for all messages in INBOX\n$result\n=\nimap_fetch_overview\n(\n$mbox\n,\n\"1:\n{\n$MC\n->\nNmsgs\n}\n\"\n,\n0\n);\nforeach (\n$result\nas\n$overview\n) {\n    echo\n\"#\n{\n$overview\n->\nmsgno\n}\n (\n{\n$overview\n->\ndate\n}\n) - From:\n{\n$overview\n->\nfrom\n}\n\n{\n$overview\n->\nsubject\n}\n\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_gc() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}\"\n,\n\"username\"\n,\n\"password\"\n);\nimap_gc\n(\n$mbox\n,\nIMAP_GC_ELT\n);\n?>"
  },
  {
    "input": "Example #1 imap_get_quota() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"mailadmin\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$quota_value\n=\nimap_get_quota\n(\n$mbox\n,\n\"user.kalowsky\"\n);\nif (\nis_array\n(\n$quota_value\n)) {\n    echo\n\"Usage level is: \"\n.\n$quota_value\n[\n'usage'\n];\n    echo\n\"Limit level is: \"\n.\n$quota_value\n[\n'limit'\n];\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #2 imap_get_quota() 4.3 or greater example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"mailadmin\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$quota_values\n=\nimap_get_quota\n(\n$mbox\n,\n\"user.kalowsky\"\n);\nif (\nis_array\n(\n$quota_values\n)) {\n\n$storage\n=\n$quota_values\n[\n'STORAGE'\n];\n   echo\n\"STORAGE usage level is: \"\n.\n$storage\n[\n'usage'\n];\n   echo\n\"STORAGE limit level is: \"\n.\n$storage\n[\n'limit'\n];\n\n$message\n=\n$quota_values\n[\n'MESSAGE'\n];\n   echo\n\"MESSAGE usage level is: \"\n.\n$message\n[\n'usage'\n];\n   echo\n\"MESSAGE limit is: \"\n.\n$message\n[\n'limit'\n];\n\n/* ...  */\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_get_quotaroot() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"kalowsky\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$quota\n=\nimap_get_quotaroot\n(\n$mbox\n,\n\"INBOX\"\n);\nif (\nis_array\n(\n$quota\n)) {\n\n$storage\n=\n$quota\n[\n'STORAGE'\n];\n   echo\n\"STORAGE usage level is: \"\n.\n$storage\n[\n'usage'\n];\n   echo\n\"STORAGE limit level is: \"\n.\n$storage\n[\n'limit'\n];\n\n$message\n=\n$quota\n[\n'MESSAGE'\n];\n   echo\n\"MESSAGE usage level is: \"\n.\n$message\n[\n'usage'\n];\n   echo\n\"MESSAGE limit level is: \"\n.\n$message\n[\n'limit'\n];\n\n/* ...  */\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_getacl() example",
    "output": "<?php\nprint_r\n(\nimap_getacl\n(\n$imap\n,\n'user.joecool'\n));\n?>"
  },
  {
    "input": "Example #1 imap_getmailboxes() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"username\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$list\n=\nimap_getmailboxes\n(\n$mbox\n,\n\"{imap.example.org}\"\n,\n\"*\"\n);\nif (\nis_array\n(\n$list\n)) {\n    foreach (\n$list\nas\n$key\n=>\n$val\n) {\n        echo\n\"(\n$key\n) \"\n;\n        echo\nimap_utf7_decode\n(\n$val\n->\nname\n) .\n\",\"\n;\n        echo\n\"'\"\n.\n$val\n->\ndelimiter\n.\n\"',\"\n;\n        echo\n$val\n->\nattributes\n.\n\"<br />\\n\"\n;\n    }\n} else {\n    echo\n\"imap_getmailboxes failed: \"\n.\nimap_last_error\n() .\n\"\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_is_open() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}INBOX\"\n,\n\"username\"\n,\n\"password\"\n) or die(\nimplode\n(\n\", \"\n,\nimap_errors\n()));\nimap_is_open\n(\n$mbox\n);\n// ...\n?>"
  },
  {
    "input": "Example #1 imap_list() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"username\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$list\n=\nimap_list\n(\n$mbox\n,\n\"{imap.example.org}\"\n,\n\"*\"\n);\nif (\nis_array\n(\n$list\n)) {\n    foreach (\n$list\nas\n$val\n) {\n        echo\nimap_utf7_decode\n(\n$val\n) .\n\"\\n\"\n;\n    }\n} else {\n    echo\n\"imap_list failed: \"\n.\nimap_last_error\n() .\n\"\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_mail_compose() example",
    "output": "<?php\n$envelope\n[\n\"from\"\n]=\n\"joe@example.com\"\n;\n$envelope\n[\n\"to\"\n]  =\n\"foo@example.com\"\n;\n$envelope\n[\n\"cc\"\n]  =\n\"bar@example.com\"\n;\n$part1\n[\n\"type\"\n] =\nTYPEMULTIPART\n;\n$part1\n[\n\"subtype\"\n] =\n\"mixed\"\n;\n$filename\n=\n\"/tmp/imap.c.gz\"\n;\n$fp\n=\nfopen\n(\n$filename\n,\n\"r\"\n);\n$contents\n=\nfread\n(\n$fp\n,\nfilesize\n(\n$filename\n));\nfclose\n(\n$fp\n);\n$part2\n[\n\"type\"\n] =\nTYPEAPPLICATION\n;\n$part2\n[\n\"encoding\"\n] =\nENCBINARY\n;\n$part2\n[\n\"subtype\"\n] =\n\"octet-stream\"\n;\n$part2\n[\n\"description\"\n] =\nbasename\n(\n$filename\n);\n$part2\n[\n\"contents.data\"\n] =\n$contents\n;\n$part3\n[\n\"type\"\n] =\nTYPETEXT\n;\n$part3\n[\n\"subtype\"\n] =\n\"plain\"\n;\n$part3\n[\n\"description\"\n] =\n\"description3\"\n;\n$part3\n[\n\"contents.data\"\n] =\n\"contents.data3\\n\\n\\n\\t\"\n;\n$body\n[\n1\n] =\n$part1\n;\n$body\n[\n2\n] =\n$part2\n;\n$body\n[\n3\n] =\n$part3\n;\necho\nnl2br\n(\nimap_mail_compose\n(\n$envelope\n,\n$body\n));\n?>"
  },
  {
    "input": "Example #1 imap_mailboxmsginfo() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org}INBOX\"\n,\n\"username\"\n,\n\"password\"\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$check\n=\nimap_mailboxmsginfo\n(\n$mbox\n);\nif (\n$check\n) {\n    echo\n\"Date: \"\n.\n$check\n->\nDate\n.\n\"<br />\\n\"\n;\n    echo\n\"Driver: \"\n.\n$check\n->\nDriver\n.\n\"<br />\\n\"\n;\n    echo\n\"Mailbox: \"\n.\n$check\n->\nMailbox\n.\n\"<br />\\n\"\n;\n    echo\n\"Messages: \"\n.\n$check\n->\nNmsgs\n.\n\"<br />\\n\"\n;\n    echo\n\"Recent: \"\n.\n$check\n->\nRecent\n.\n\"<br />\\n\"\n;\n    echo\n\"Unread: \"\n.\n$check\n->\nUnread\n.\n\"<br />\\n\"\n;\n    echo\n\"Deleted: \"\n.\n$check\n->\nDeleted\n.\n\"<br />\\n\"\n;\n    echo\n\"Size: \"\n.\n$check\n->\nSize\n.\n\"<br />\\n\"\n;\n} else {\n    echo\n\"imap_mailboxmsginfo() failed: \"\n.\nimap_last_error\n() .\n\"<br />\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_mime_header_decode() example",
    "output": "<?php\n$text\n=\n\"=?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@example.com>\"\n;\n$elements\n=\nimap_mime_header_decode\n(\n$text\n);\nfor (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$elements\n);\n$i\n++) {\n    echo\n\"Charset:\n{\n$elements\n[\n$i\n]->\ncharset\n}\n\\n\"\n;\n    echo\n\"Text:\n{\n$elements\n[\n$i\n]->\ntext\n}\n\\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Different use of imap_open()",
    "output": "<?php\n// To connect to an IMAP server running on port 143 on the local machine,\n// do the following:\n$mbox\n=\nimap_open\n(\n\"{localhost:143}INBOX\"\n,\n\"user_id\"\n,\n\"password\"\n);\n// To connect to a POP3 server on port 110 on the local server, use:\n$mbox\n=\nimap_open\n(\n\"{localhost:110/pop3}INBOX\"\n,\n\"user_id\"\n,\n\"password\"\n);\n// To connect to an SSL IMAP or POP3 server, add /ssl after the protocol\n// specification:\n$mbox\n=\nimap_open\n(\n\"{localhost:993/imap/ssl}INBOX\"\n,\n\"user_id\"\n,\n\"password\"\n);\n// To connect to an SSL IMAP or POP3 server with a self-signed certificate,\n// add /ssl/novalidate-cert after the protocol specification:\n$mbox\n=\nimap_open\n(\n\"{localhost:995/pop3/ssl/novalidate-cert}\"\n,\n\"user_id\"\n,\n\"password\"\n);\n// To connect to an NNTP server on port 119 on the local server, use:\n$nntp\n=\nimap_open\n(\n\"{localhost:119/nntp}comp.test\"\n,\n\"\"\n,\n\"\"\n);\n// To connect to a remote server replace \"localhost\" with the name or the\n// IP address of the server you want to connect to.\n?>"
  },
  {
    "input": "Example #2 imap_open() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}\"\n,\n\"username\"\n,\n\"password\"\n);\necho\n\"<h1>Mailboxes</h1>\\n\"\n;\n$folders\n=\nimap_listmailbox\n(\n$mbox\n,\n\"{imap.example.org:143}\"\n,\n\"*\"\n);\nif (\n$folders\n==\nfalse\n) {\n    echo\n\"Call failed<br />\\n\"\n;\n} else {\n    foreach (\n$folders\nas\n$val\n) {\n        echo\n$val\n.\n\"<br />\\n\"\n;\n    }\n}\necho\n\"<h1>Headers in INBOX</h1>\\n\"\n;\n$headers\n=\nimap_headers\n(\n$mbox\n);\nif (\n$headers\n==\nfalse\n) {\n    echo\n\"Call failed<br />\\n\"\n;\n} else {\n    foreach (\n$headers\nas\n$val\n) {\n        echo\n$val\n.\n\"<br />\\n\"\n;\n    }\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_ping() Example",
    "output": "<?php\n$imap\n=\nimap_open\n(\n\"{imap.example.org}\"\n,\n\"mailadmin\"\n,\n\"password\"\n);\n// after some sleeping\nif (!\nimap_ping\n(\n$imap\n)) {\n\n// do some stuff to reconnect\n}\n?>"
  },
  {
    "input": "Example #1 imap_reopen() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}INBOX\"\n,\n\"username\"\n,\n\"password\"\n) or die(\nimplode\n(\n\", \"\n,\nimap_errors\n()));\n// ...\nimap_reopen\n(\n$mbox\n,\n\"{imap.example.org:143}INBOX.Sent\"\n) or die(\nimplode\n(\n\", \"\n,\nimap_errors\n()));\n// ..\n?>"
  },
  {
    "input": "Example #1 imap_rfc822_parse_adrlist() example",
    "output": "<?php\n$address_string\n=\n\"Joe Doe <doe@example.com>, postmaster@example.com, root\"\n;\n$address_array\n=\nimap_rfc822_parse_adrlist\n(\n$address_string\n,\n\"example.com\"\n);\nif (!\nis_array\n(\n$address_array\n) ||\ncount\n(\n$address_array\n) <\n1\n) {\n    die(\n\"something is wrong\\n\"\n);\n}\nforeach (\n$address_array\nas\n$id\n=>\n$val\n) {\n    echo\n\"#\n$id\n\\n\"\n;\n    echo\n\"  mailbox : \"\n.\n$val\n->\nmailbox\n.\n\"\\n\"\n;\n    echo\n\"  host    : \"\n.\n$val\n->\nhost\n.\n\"\\n\"\n;\n    echo\n\"  personal: \"\n.\n$val\n->\npersonal\n.\n\"\\n\"\n;\n    echo\n\"  adl     : \"\n.\n$val\n->\nadl\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 imap_rfc822_write_address() example",
    "output": "<?php\necho\nimap_rfc822_write_address\n(\n\"hartmut\"\n,\n\"example.com\"\n,\n\"Hartmut Holzgraefe\"\n);\n?>"
  },
  {
    "input": "Example #1 imap_search() example",
    "output": "<?php\n$imap\n=\nimap_open\n(\n'{imap.example.com:993/imap/ssl}INBOX'\n,\n'foo@example.com'\n,\n'pass123'\n,\nOP_READONLY\n);\n$some\n=\nimap_search\n(\n$imap\n,\n'SUBJECT \"HOWTO be Awesome\" SINCE \"8 August 2008\"'\n,\nSE_UID\n);\n$msgnos\n=\nimap_search\n(\n$imap\n,\n'ALL'\n);\n$uids\n=\nimap_search\n(\n$imap\n,\n'ALL'\n,\nSE_UID\n);\nprint_r\n(\n$some\n);\nprint_r\n(\n$msgnos\n);\nprint_r\n(\n$uids\n);\n?>"
  },
  {
    "input": "Example #1 imap_set_quota() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}\"\n,\n\"mailadmin\"\n,\n\"password\"\n);\nif (!\nimap_set_quota\n(\n$mbox\n,\n\"user.kalowsky\"\n,\n3000\n)) {\n    echo\n\"Error in setting quota\\n\"\n;\n    return;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_setflag_full() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.org:143}\"\n,\n\"username\"\n,\n\"password\"\n)\n     or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$status\n=\nimap_setflag_full\n(\n$mbox\n,\n\"2,5\"\n,\n\"\\\\Seen \\\\Flagged\"\n);\necho\ngettype\n(\n$status\n) .\n\"\\n\"\n;\necho\n$status\n.\n\"\\n\"\n;\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_status() example",
    "output": "<?php\n$mbox\n=\nimap_open\n(\n\"{imap.example.com}\"\n,\n\"username\"\n,\n\"password\"\n,\nOP_HALFOPEN\n)\n      or die(\n\"can't connect: \"\n.\nimap_last_error\n());\n$status\n=\nimap_status\n(\n$mbox\n,\n\"{imap.example.org}INBOX\"\n,\nSA_ALL\n);\nif (\n$status\n) {\n  echo\n\"Messages:   \"\n.\n$status\n->\nmessages\n.\n\"<br />\\n\"\n;\n  echo\n\"Recent:     \"\n.\n$status\n->\nrecent\n.\n\"<br />\\n\"\n;\n  echo\n\"Unseen:     \"\n.\n$status\n->\nunseen\n.\n\"<br />\\n\"\n;\n  echo\n\"UIDnext:    \"\n.\n$status\n->\nuidnext\n.\n\"<br />\\n\"\n;\n  echo\n\"UIDvalidity:\"\n.\n$status\n->\nuidvalidity\n.\n\"<br />\\n\"\n;\n} else {\n  echo\n\"imap_status failed: \"\n.\nimap_last_error\n() .\n\"\\n\"\n;\n}\nimap_close\n(\n$mbox\n);\n?>"
  },
  {
    "input": "Example #1 imap_thread() Example",
    "output": "<?php\n// Here we're outputting the threads of a newsgroup, in HTML\n$nntp\n=\nimap_open\n(\n'{news.example.com:119/nntp}some.newsgroup'\n,\n''\n,\n''\n);\n$threads\n=\nimap_thread\n(\n$nntp\n);\nforeach (\n$threads\nas\n$key\n=>\n$val\n) {\n\n$tree\n=\nexplode\n(\n'.'\n,\n$key\n);\n  if (\n$tree\n[\n1\n] ==\n'num'\n) {\n\n$header\n=\nimap_headerinfo\n(\n$nntp\n,\n$val\n);\n    echo\n\"<ul>\\n\\t<li>\"\n.\n$header\n->\nfromaddress\n.\n\"\\n\"\n;\n  } elseif (\n$tree\n[\n1\n] ==\n'branch'\n) {\n    echo\n\"\\t</li>\\n</ul>\\n\"\n;\n  }\n}\nimap_close\n(\n$nntp\n);\n?>"
  },
  {
    "input": "Example #1 imap_timeout() example",
    "output": "<?php\necho\n\"The current read timeout is \"\n.\nimap_timeout\n(\nIMAP_READTIMEOUT\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Basic imap_utf8() Usage",
    "output": "<?php\necho\nimap_utf8\n(\n\"Johannes =?ISO-8859-1?Q?Schl=FCter?=\"\n);\n?>"
  },
  {
    "input": "Example #1 Calculating the hash and subscribing a user",
    "output": "<?php\n$user\n=\n\"joecool@example.com\"\n;\n$hash\n=\nezmlm_hash\n(\n$user\n);\n$query\n=\nsprintf\n(\n\"INSERT INTO sample VALUES (%s, '%s')\"\n,\n$hash\n,\n$user\n);\n$db\n->\nquery\n(\n$query\n);\n// using PHPLIB db interface\n?>"
  },
  {
    "input": "Example #1 mailparse_determine_best_xfer_encoding() example",
    "output": "<?php\n$fp\n=\nfopen\n(\n'somemail.eml'\n,\n'r'\n);\necho\n'Best encoding: '\n.\nmailparse_determine_best_xfer_encoding\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 mailparse_rfc822_parse_addresses() example",
    "output": "<?php\n$to\n=\n'Wez Furlong <wez@example.com>, doe@example.com'\n;\nvar_dump\n(\nmailparse_rfc822_parse_addresses\n(\n$to\n));\n?>"
  },
  {
    "input": "Example #1 mailparse_stream_encode() example",
    "output": "<?php\n// email.eml contents: hello, this is some text=hello.\n$fp\n=\nfopen\n(\n'email.eml'\n,\n'r'\n);\n$dest\n=\ntmpfile\n();\nmailparse_stream_encode\n(\n$fp\n,\n$dest\n,\n\"quoted-printable\"\n);\nrewind\n(\n$dest\n);\n// Display new file contents\nfpassthru\n(\n$dest\n);\n?>"
  },
  {
    "input": "Example #1 mailparse_uudecode_all() example",
    "output": "<?php\n$text\n= <<<EOD\nTo: fred@example.com\nhello, this is some text hello.\nblah blah blah.\nbegin 644 test.txt\n/=&AI<R!I<R!A('1E<W0*\n`\nend\nEOD;\n$fp\n=\ntmpfile\n();\nfwrite\n(\n$fp\n,\n$text\n);\n$data\n=\nmailparse_uudecode_all\n(\n$fp\n);\necho\n\"BODY\\n\"\n;\nreadfile\n(\n$data\n[\n0\n][\n\"filename\"\n]);\necho\n\"UUE (\n{\n$data\n[\n1\n][\n'origfilename'\n]}\n)\\n\"\n;\nreadfile\n(\n$data\n[\n1\n][\n\"filename\"\n]);\n// Clean up\nunlink\n(\n$data\n[\n0\n][\n\"filename\"\n]);\nunlink\n(\n$data\n[\n1\n][\n\"filename\"\n]);\n?>"
  },
  {
    "input": "Example #1 bcadd() example",
    "output": "<?php\n$a\n=\n'1.234'\n;\n$b\n=\n'5'\n;\necho\nbcadd\n(\n$a\n,\n$b\n);\n// 6\necho\nbcadd\n(\n$a\n,\n$b\n,\n4\n);\n// 6.2340\n?>"
  },
  {
    "input": "Example #1 bcceil() example",
    "output": "<?php\nvar_dump\n(\nbcceil\n(\n'4.3'\n));\nvar_dump\n(\nbcceil\n(\n'9.999'\n));\nvar_dump\n(\nbcceil\n(\n'-3.14'\n));\n?>"
  },
  {
    "input": "Example #1 bccomp() example",
    "output": "<?php\necho\nbccomp\n(\n'1'\n,\n'2'\n) .\n\"\\n\"\n;\n// -1\necho\nbccomp\n(\n'1.00001'\n,\n'1'\n,\n3\n);\n// 0\necho\nbccomp\n(\n'1.00001'\n,\n'1'\n,\n5\n);\n// 1\n?>"
  },
  {
    "input": "Example #1 bcdiv() example",
    "output": "<?php\necho\nbcdiv\n(\n'105'\n,\n'6.55957'\n,\n3\n);\n// 16.007\n?>"
  },
  {
    "input": "Example #1 bcdivmod() example",
    "output": "<?php\nbcscale\n(\n0\n);\n[\n$quot\n,\n$rem\n] =\nbcdivmod\n(\n'5'\n,\n'3'\n);\necho\n$quot\n;\n// 1\necho\n$rem\n;\n// 2\n[\n$quot\n,\n$rem\n] =\nbcdivmod\n(\n'5'\n,\n'-3'\n);\necho\n$quot\n;\n// -1\necho\n$rem\n;\n// 2\n[\n$quot\n,\n$rem\n] =\nbcdivmod\n(\n'-5'\n,\n'3'\n);\necho\n$quot\n;\n// -1\necho\n$rem\n;\n// -2\n[\n$quot\n,\n$rem\n] =\nbcdivmod\n(\n'-5'\n,\n'-3'\n);\necho\n$quot\n;\n// 1\necho\n$rem\n;\n// -2\n?>"
  },
  {
    "input": "Example #2 bcdivmod() with decimals",
    "output": "<?php\n[\n$quot\n,\n$rem\n] =\nbcdivmod\n(\n'5.7'\n,\n'1.3'\n,\n1\n);\necho\n$quot\n;\n// 4\necho\n$rem\n;\n// 0.5\n?>"
  },
  {
    "input": "Example #1 bcfloor() example",
    "output": "<?php\nvar_dump\n(\nbcfloor\n(\n'4.3'\n));\nvar_dump\n(\nbcfloor\n(\n'9.999'\n));\nvar_dump\n(\nbcfloor\n(\n'-3.14'\n));\n?>"
  },
  {
    "input": "Example #1 bcmod() example",
    "output": "<?php\nbcscale\n(\n0\n);\necho\nbcmod\n(\n'5'\n,\n'3'\n);\n//  2\necho\nbcmod\n(\n'5'\n,\n'-3'\n);\n//  2\necho\nbcmod\n(\n'-5'\n,\n'3'\n);\n// -2\necho\nbcmod\n(\n'-5'\n,\n'-3'\n);\n// -2\n?>"
  },
  {
    "input": "Example #2 bcmod() with decimals",
    "output": "<?php\nbcscale\n(\n1\n);\necho\nbcmod\n(\n'5.7'\n,\n'1.3'\n);\n// 0.5 as of PHP 7.2.0; 0 previously\n?>"
  },
  {
    "input": "Example #1 bcmul() example",
    "output": "<?php\necho\nbcmul\n(\n'1.34747474747'\n,\n'35'\n,\n3\n);\n// 47.161\necho\nbcmul\n(\n'2'\n,\n'4'\n);\n// 8\n?>"
  },
  {
    "input": "Example #2 bcmul() scale example",
    "output": "<?php\necho\nbcmul\n(\n'5'\n,\n'2'\n,\n2\n);\n// prints \"10\", not \"10.00\"\n?>"
  },
  {
    "input": "Example #1 bcpow() example",
    "output": "<?php\necho\nbcpow\n(\n'4.2'\n,\n'3'\n,\n2\n);\n// 74.08\n?>"
  },
  {
    "input": "Example #2 bcpow() scale example",
    "output": "<?php\necho\nbcpow\n(\n'5'\n,\n'2'\n,\n2\n);\n// prints \"25\", not \"25.00\"\n?>"
  },
  {
    "input": "Example #1 bcround() examples",
    "output": "<?php\nvar_dump\n(\nbcround\n(\n'3.4'\n));\nvar_dump\n(\nbcround\n(\n'3.5'\n));\nvar_dump\n(\nbcround\n(\n'3.6'\n));\nvar_dump\n(\nbcround\n(\n'3.6'\n,\n0\n));\nvar_dump\n(\nbcround\n(\n'5.045'\n,\n2\n));\nvar_dump\n(\nbcround\n(\n'5.055'\n,\n2\n));\nvar_dump\n(\nbcround\n(\n'345'\n, -\n2\n));\nvar_dump\n(\nbcround\n(\n'345'\n, -\n3\n));\nvar_dump\n(\nbcround\n(\n'678'\n, -\n2\n));\nvar_dump\n(\nbcround\n(\n'678'\n, -\n3\n));\n?>"
  },
  {
    "input": "Example #2 \n    Example of using bcround() with different precision values",
    "output": "<?php\n$number\n=\n'123.45'\n;\nvar_dump\n(\nbcround\n(\n$number\n,\n3\n));\nvar_dump\n(\nbcround\n(\n$number\n,\n2\n));\nvar_dump\n(\nbcround\n(\n$number\n,\n1\n));\nvar_dump\n(\nbcround\n(\n$number\n,\n0\n));\nvar_dump\n(\nbcround\n(\n$number\n, -\n1\n));\nvar_dump\n(\nbcround\n(\n$number\n, -\n2\n));\nvar_dump\n(\nbcround\n(\n$number\n, -\n3\n));\n?>"
  },
  {
    "input": "Example #3 \n    Example of using bcround() with different mode values",
    "output": "<?php\necho\n'Rounding modes with 9.5'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nHalfAwayFromZero\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nHalfTowardsZero\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nHalfEven\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nHalfOdd\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nTowardsZero\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nAwayFromZero\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nNegativeInfinity\n));\nvar_dump\n(\nbcround\n(\n'9.5'\n,\n0\n,\nRoundingMode\n::\nPositiveInfinity\n));\necho\nPHP_EOL\n;\necho\n'Rounding modes with 8.5'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nHalfAwayFromZero\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nHalfTowardsZero\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nHalfEven\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nHalfOdd\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nTowardsZero\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nAwayFromZero\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nNegativeInfinity\n));\nvar_dump\n(\nbcround\n(\n'8.5'\n,\n0\n,\nRoundingMode\n::\nPositiveInfinity\n));\n?>"
  },
  {
    "input": "Example #4 \n    Example of using bcround() with different mode values\n    when specifying precision",
    "output": "<?php\necho\n'Using RoundingMode::HalfAwayFromZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfAwayFromZero\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfAwayFromZero\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfTowardsZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfTowardsZero\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfTowardsZero\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfEven with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfEven\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfEven\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfOdd with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfOdd\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nHalfOdd\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::TowardsZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nTowardsZero\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nTowardsZero\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::AwayFromZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nAwayFromZero\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nAwayFromZero\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::NegativeInfinity with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nNegativeInfinity\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nNegativeInfinity\n));\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::PositiveInfinity with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nbcround\n(\n1.55\n,\n1\n,\nRoundingMode\n::\nPositiveInfinity\n));\nvar_dump\n(\nbcround\n(-\n1.55\n,\n1\n,\nRoundingMode\n::\nPositiveInfinity\n));\n?>"
  },
  {
    "input": "Example #1 bcscale() example",
    "output": "<?php\n// default scale : 3\nbcscale\n(\n3\n);\necho\nbcdiv\n(\n'105'\n,\n'6.55957'\n);\n// 16.007\n// this is the same without bcscale()\necho\nbcdiv\n(\n'105'\n,\n'6.55957'\n,\n3\n);\n// 16.007\n?>"
  },
  {
    "input": "Example #1 bcsqrt() example",
    "output": "<?php\necho\nbcsqrt\n(\n'2'\n,\n3\n);\n// 1.414\n?>"
  },
  {
    "input": "Example #1 bcsub() example",
    "output": "<?php\n$a\n=\n'1.234'\n;\n$b\n=\n'5'\n;\necho\nbcsub\n(\n$a\n,\n$b\n);\n// -3\necho\nbcsub\n(\n$a\n,\n$b\n,\n4\n);\n// -3.7660\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::add() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nadd\n(new\nBcMath\\Number\n(\n'2.34567'\n));\n$ret2\n=\n$number\n->\nadd\n(\n'-3.456'\n);\n$ret3\n=\n$number\n->\nadd\n(\n7\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::add() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nadd\n(new\nBcMath\\Number\n(\n'2.34567'\n),\n1\n);\n$ret2\n=\n$number\n->\nadd\n(\n'-3.456'\n,\n10\n);\n$ret3\n=\n$number\n->\nadd\n(\n7\n,\n0\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::ceil() example",
    "output": "<?php\n$num1\n= new\nBcMath\\Number\n(\n'4.3'\n)->\nceil\n();\n$num2\n= new\nBcMath\\Number\n(\n'9.999'\n)->\nceil\n();\n$num3\n= new\nBcMath\\Number\n(\n'-3.14'\n)->\nceil\n();\nvar_dump\n(\n$num1\n,\n$num2\n,\n$num3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::compare() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\nvar_dump\n(\n\n$number\n->\ncompare\n(new\nBcMath\\Number\n(\n'1.234'\n)),\n\n$number\n->\ncompare\n(\n'1.23400'\n),\n\n$number\n->\ncompare\n(\n'1.23401'\n),\n\n$number\n->\ncompare\n(\n1\n),\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::compare() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\nvar_dump\n(\n\n$number\n->\ncompare\n(new\nBcMath\\Number\n(\n'1.299'\n),\n1\n),\n\n$number\n->\ncompare\n(\n'1.24'\n,\n2\n),\n\n$number\n->\ncompare\n(\n'1.22'\n,\n2\n),\n\n$number\n->\ncompare\n(\n1\n,\n0\n),\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::__construct() example",
    "output": "<?php\n$num1\n= new\nBcMath\\Number\n(\n100\n);\n$num2\n= new\nBcMath\\Number\n(\n'-200'\n);\n$num3\n= new\nBcMath\\Number\n(\n'300.00'\n);\nvar_dump\n(\n$num1\n,\n$num2\n,\n$num3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::div() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'0.002'\n);\n$ret1\n=\n$number\n->\ndiv\n(new\nBcMath\\Number\n(\n'2.000'\n));\n$ret2\n=\n$number\n->\ndiv\n(\n'-3'\n);\n$ret3\n=\n$number\n->\ndiv\n(\n32\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::div() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'0.002'\n);\n$ret1\n=\n$number\n->\ndiv\n(new\nBcMath\\Number\n(\n'2.000'\n),\n15\n);\n$ret2\n=\n$number\n->\ndiv\n(\n'-3'\n,\n5\n);\n$ret3\n=\n$number\n->\ndiv\n(\n32\n,\n2\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #3 BcMath\\Number::div() example of expansioning BcMath\\Number::scale of result object",
    "output": "<?php\nvar_dump\n(\n    new\nBcMath\\Number\n(\n'0.001'\n)->\ndiv\n(\n'10001'\n),\n    new\nBcMath\\Number\n(\n'0.001'\n)->\ndiv\n(\n'10001'\n,\n13\n),\n    new\nBcMath\\Number\n(\n'0.001'\n)->\ndiv\n(\n'100000000000001'\n),\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::divmod() example when scale is not specified",
    "output": "<?php\necho\n'8.3 / 2.22'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'8'\n)->\ndivmod\n(new\nBcMath\\Number\n(\n'2.22'\n));\nvar_dump\n(\n$quot\n,\n$rem\n);\necho\nPHP_EOL\n.\n'8.3 / 8.3'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'8.3'\n)->\ndivmod\n(\n'8.3'\n);\nvar_dump\n(\n$quot\n,\n$rem\n);\necho\nPHP_EOL\n.\n'10 / -3'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'10'\n)->\ndivmod\n(-\n3\n);\nvar_dump\n(\n$quot\n,\n$rem\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::divmod() example of explicitly specifying scale",
    "output": "<?php\necho\n'8.3 / 2.22'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'8'\n)->\ndivmod\n(new\nBcMath\\Number\n(\n'2.22'\n),\n1\n);\nvar_dump\n(\n$quot\n,\n$rem\n);\necho\nPHP_EOL\n.\n'8.3 / 8.3'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'8.3'\n)->\ndivmod\n(\n'8.3'\n,\n4\n);\nvar_dump\n(\n$quot\n,\n$rem\n);\necho\nPHP_EOL\n.\n'10 / -3'\n.\nPHP_EOL\n;\n[\n$quot\n,\n$rem\n] = new\nBcMath\\Number\n(\n'10'\n)->\ndivmod\n(-\n3\n,\n5\n);\nvar_dump\n(\n$quot\n,\n$rem\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::floor() example",
    "output": "<?php\n$num1\n= new\nBcMath\\Number\n(\n'4.3'\n)->\nfloor\n();\n$num2\n= new\nBcMath\\Number\n(\n'9.999'\n)->\nfloor\n();\n$num3\n= new\nBcMath\\Number\n(\n'-3.14'\n)->\nfloor\n();\nvar_dump\n(\n$num1\n,\n$num2\n,\n$num3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::mod() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'8.3'\n);\n$ret1\n=\n$number\n->\nmod\n(new\nBcMath\\Number\n(\n'2.22'\n));\n$ret2\n=\n$number\n->\nmod\n(\n'8.3'\n);\n$ret3\n=\n$number\n->\nmod\n(-\n5\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::mod() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'8.3'\n);\n$ret1\n=\n$number\n->\nmod\n(new\nBcMath\\Number\n(\n'2.22'\n),\n1\n);\n$ret2\n=\n$number\n->\nmod\n(\n'8.3'\n,\n3\n);\n$ret3\n=\n$number\n->\nmod\n(-\n5\n,\n0\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::mul() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nmul\n(new\nBcMath\\Number\n(\n'2.3456'\n));\n$ret2\n=\n$number\n->\nmul\n(\n'-3.4'\n);\n$ret3\n=\n$number\n->\nmul\n(\n7\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::mul() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nmul\n(new\nBcMath\\Number\n(\n'2.3456'\n),\n1\n);\n$ret2\n=\n$number\n->\nmul\n(\n'-3.4'\n,\n10\n);\n$ret3\n=\n$number\n->\nmul\n(\n7\n,\n0\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::pow() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'3.0'\n);\n$ret1\n=\n$number\n->\npow\n(new\nBcMath\\Number\n(\n'5'\n));\n$ret2\n=\n$number\n->\npow\n(\n'-1'\n);\n$ret3\n=\n$number\n->\npow\n(\n0\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::pow() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'3.0'\n);\n$ret1\n=\n$number\n->\npow\n(new\nBcMath\\Number\n(\n'5'\n),\n0\n);\n$ret2\n=\n$number\n->\npow\n(\n'-1'\n,\n2\n);\n$ret3\n=\n$number\n->\npow\n(\n0\n,\n10\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::powmod() example when scale is not specified",
    "output": "<?php\nvar_dump\n(\n    new\nBcMath\\Number\n(\n'8'\n)->\npowmod\n(new\nBcMath\\Number\n(\n'3'\n),\n5\n),\n    new\nBcMath\\Number\n(\n'-8'\n)->\npowmod\n(new\nBcMath\\Number\n(\n'3'\n),\n5\n),\n    new\nBcMath\\Number\n(\n'8'\n)->\npowmod\n(\n'2'\n, -\n3\n),\n    new\nBcMath\\Number\n(\n'-8'\n)->\npowmod\n(\n5\n,\n7\n),\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::powmod() example of explicitly specifying scale",
    "output": "<?php\nvar_dump\n(\n    new\nBcMath\\Number\n(\n'8'\n)->\npowmod\n(new\nBcMath\\Number\n(\n'3'\n),\n5\n,\n1\n),\n    new\nBcMath\\Number\n(\n'-8'\n)->\npowmod\n(new\nBcMath\\Number\n(\n'3'\n),\n5\n,\n2\n),\n    new\nBcMath\\Number\n(\n'8'\n)->\npowmod\n(\n'2'\n, -\n3\n,\n3\n),\n    new\nBcMath\\Number\n(\n'-8'\n)->\npowmod\n(\n5\n,\n7\n,\n4\n),\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::round() example",
    "output": "<?php\nvar_dump\n(\n    new\nBcMath\\Number\n(\n'3.4'\n)->\nround\n(),\n    new\nBcMath\\Number\n(\n'3.5'\n)->\nround\n(),\n    new\nBcMath\\Number\n(\n'3.6'\n)->\nround\n(),\n    new\nBcMath\\Number\n(\n'3.6'\n)->\nround\n(\n0\n),\n    new\nBcMath\\Number\n(\n'5.045'\n)->\nround\n(\n2\n),\n    new\nBcMath\\Number\n(\n'5.055'\n)->\nround\n(\n2\n),\n    new\nBcMath\\Number\n(\n'345'\n)->\nround\n(-\n2\n),\n    new\nBcMath\\Number\n(\n'345'\n)->\nround\n(-\n3\n),\n    new\nBcMath\\Number\n(\n'678'\n)->\nround\n(-\n2\n),\n    new\nBcMath\\Number\n(\n'678'\n)->\nround\n(-\n3\n),\n);\n?>"
  },
  {
    "input": "Example #2 \n    Example of using BcMath\\Number::round() with different precision values",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'123.45'\n);\nvar_dump\n(\n\n$number\n->\nround\n(\n3\n),\n\n$number\n->\nround\n(\n2\n),\n\n$number\n->\nround\n(\n1\n),\n\n$number\n->\nround\n(\n0\n),\n\n$number\n->\nround\n(-\n1\n),\n\n$number\n->\nround\n(-\n2\n),\n\n$number\n->\nround\n(-\n3\n),\n);\n?>"
  },
  {
    "input": "Example #3 \n    Example of using BcMath\\Number::round() with different mode values",
    "output": "<?php\necho\n'Rounding modes with 9.5'\n.\nPHP_EOL\n;\n$number\n= new\nBcMath\\Number\n(\n'9.5'\n);\nvar_dump\n(\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfAwayFromZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfTowardsZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfEven\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfOdd\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nTowardsZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nAwayFromZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nNegativeInfinity\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nPositiveInfinity\n),\n);\necho\nPHP_EOL\n;\necho\n'Rounding modes with 8.5'\n.\nPHP_EOL\n;\n$number\n= new\nBcMath\\Number\n(\n'8.5'\n);\nvar_dump\n(\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfAwayFromZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfTowardsZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfEven\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nHalfOdd\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nTowardsZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nAwayFromZero\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nNegativeInfinity\n),\n\n$number\n->\nround\n(\n0\n,\nRoundingMode\n::\nPositiveInfinity\n),\n);\n?>"
  },
  {
    "input": "Example #4 \n    Example of using BcMath\\Number::round() with different mode values\n    when specifying precision",
    "output": "<?php\n$positive\n= new\nBcMath\\Number\n(\n'1.55'\n);\n$negative\n= new\nBcMath\\Number\n(\n'-1.55'\n);\necho\n'Using RoundingMode::HalfAwayFromZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfAwayFromZero\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfAwayFromZero\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfTowardsZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfTowardsZero\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfTowardsZero\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfEven with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfEven\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfEven\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::HalfOdd with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfOdd\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nHalfOdd\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::TowardsZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nTowardsZero\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nTowardsZero\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::AwayFromZero with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nAwayFromZero\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nAwayFromZero\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::NegativeInfinity with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nNegativeInfinity\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nNegativeInfinity\n),\n);\necho\nPHP_EOL\n;\necho\n'Using RoundingMode::PositiveInfinity with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\n\n$positive\n->\nround\n(\n1\n,\nRoundingMode\n::\nPositiveInfinity\n),\n\n$negative\n->\nround\n(\n1\n,\nRoundingMode\n::\nPositiveInfinity\n),\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::sqrt() example",
    "output": "<?php\nvar_dump\n(\n    new\nBcMath\\Number\n(\n'2'\n)->\nsqrt\n(),\n    new\nBcMath\\Number\n(\n'2'\n)->\nsqrt\n(\n3\n),\n    new\nBcMath\\Number\n(\n'4'\n)->\nsqrt\n(),\n    new\nBcMath\\Number\n(\n'4'\n)->\nsqrt\n(\n3\n),\n);\n?>"
  },
  {
    "input": "Example #1 BcMath\\Number::sub() example when scale is not specified",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nsub\n(new\nBcMath\\Number\n(\n'2.34567'\n));\n$ret2\n=\n$number\n->\nsub\n(\n'-3.456'\n);\n$ret3\n=\n$number\n->\nsub\n(\n7\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #2 BcMath\\Number::sub() example of explicitly specifying scale",
    "output": "<?php\n$number\n= new\nBcMath\\Number\n(\n'1.234'\n);\n$ret1\n=\n$number\n->\nsub\n(new\nBcMath\\Number\n(\n'2.34567'\n),\n1\n);\n$ret2\n=\n$number\n->\nsub\n(\n'-3.456'\n,\n10\n);\n$ret3\n=\n$number\n->\nsub\n(\n7\n,\n0\n);\nvar_dump\n(\n$number\n,\n$ret1\n,\n$ret2\n,\n$ret3\n);\n?>"
  },
  {
    "input": "Example #1 Factorial function using GMP",
    "output": "<?php\nfunction\nfact\n(\n$x\n)\n{\n\n$return\n=\n1\n;\n    for (\n$i\n=\n2\n;\n$i\n<=\n$x\n;\n$i\n++) {\n\n$return\n=\ngmp_mul\n(\n$return\n,\n$i\n);\n    }\n    return\n$return\n;\n}\necho\ngmp_strval\n(\nfact\n(\n1000\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_abs() example",
    "output": "<?php\n$abs1\n=\ngmp_abs\n(\n\"274982683358\"\n);\n$abs2\n=\ngmp_abs\n(\n\"-274982683358\"\n);\necho\ngmp_strval\n(\n$abs1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$abs2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_add() example",
    "output": "<?php\n$sum\n=\ngmp_add\n(\n\"123456789012345\"\n,\n\"76543210987655\"\n);\necho\ngmp_strval\n(\n$sum\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_and() example",
    "output": "<?php\n$and1\n=\ngmp_and\n(\n\"0xfffffffff4\"\n,\n\"0x4\"\n);\n$and2\n=\ngmp_and\n(\n\"0xfffffffff4\"\n,\n\"0x8\"\n);\necho\ngmp_strval\n(\n$and1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$and2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_clrbit() example",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"0xff\"\n);\ngmp_clrbit\n(\n$a\n,\n0\n);\n// index starts at 0, least significant bit\necho\ngmp_strval\n(\n$a\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_cmp() example",
    "output": "<?php\n$cmp1\n=\ngmp_cmp\n(\n\"1234\"\n,\n\"1000\"\n);\n// greater than\n$cmp2\n=\ngmp_cmp\n(\n\"1000\"\n,\n\"1234\"\n);\n// less than\n$cmp3\n=\ngmp_cmp\n(\n\"1234\"\n,\n\"1234\"\n);\n// equal to\necho\n\"\n$cmp1\n\n$cmp2\n\n$cmp3\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_com() example",
    "output": "<?php\n$com\n=\ngmp_com\n(\n\"1234\"\n);\necho\ngmp_strval\n(\n$com\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_div_q() example",
    "output": "<?php\n$div1\n=\ngmp_div_q\n(\n\"100\"\n,\n\"5\"\n);\necho\ngmp_strval\n(\n$div1\n) .\n\"\\n\"\n;\n$div2\n=\ngmp_div_q\n(\n\"1\"\n,\n\"3\"\n);\necho\ngmp_strval\n(\n$div2\n) .\n\"\\n\"\n;\n$div3\n=\ngmp_div_q\n(\n\"1\"\n,\n\"3\"\n,\nGMP_ROUND_PLUSINF\n);\necho\ngmp_strval\n(\n$div3\n) .\n\"\\n\"\n;\n$div4\n=\ngmp_div_q\n(\n\"-1\"\n,\n\"4\"\n,\nGMP_ROUND_PLUSINF\n);\necho\ngmp_strval\n(\n$div4\n) .\n\"\\n\"\n;\n$div5\n=\ngmp_div_q\n(\n\"-1\"\n,\n\"4\"\n,\nGMP_ROUND_MINUSINF\n);\necho\ngmp_strval\n(\n$div5\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Division of GMP numbers",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"0x41682179fbf5\"\n);\n$res\n=\ngmp_div_qr\n(\n$a\n,\n\"0xDEFE75\"\n);\nprintf\n(\n\"Result is: q - %s, r - %s\"\n,\n\ngmp_strval\n(\n$res\n[\n0\n]),\ngmp_strval\n(\n$res\n[\n1\n]));\n?>"
  },
  {
    "input": "Example #1 gmp_div_r() example",
    "output": "<?php\n$div\n=\ngmp_div_r\n(\n\"105\"\n,\n\"20\"\n);\necho\ngmp_strval\n(\n$div\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_divexact() example",
    "output": "<?php\n$div1\n=\ngmp_divexact\n(\n\"10\"\n,\n\"2\"\n);\necho\ngmp_strval\n(\n$div1\n) .\n\"\\n\"\n;\n$div2\n=\ngmp_divexact\n(\n\"10\"\n,\n\"3\"\n);\n// bogus result\necho\ngmp_strval\n(\n$div2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_export() example",
    "output": "<?php\n$number\n=\ngmp_init\n(\n16705\n);\necho\ngmp_export\n(\n$number\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_fact() example",
    "output": "<?php\n$fact1\n=\ngmp_fact\n(\n5\n);\n// 5 * 4 * 3 * 2 * 1\necho\ngmp_strval\n(\n$fact1\n) .\n\"\\n\"\n;\n$fact2\n=\ngmp_fact\n(\n50\n);\n// 50 * 49 * 48, ... etc\necho\ngmp_strval\n(\n$fact2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_gcd() example",
    "output": "<?php\n$gcd\n=\ngmp_gcd\n(\n\"12\"\n,\n\"21\"\n);\necho\ngmp_strval\n(\n$gcd\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Solving a linear Diophantine equation",
    "output": "<?php\n// Solve the equation a*s + b*t = g\n// where a = 12, b = 21, g = gcd(12, 21) = 3\n$a\n=\ngmp_init\n(\n12\n);\n$b\n=\ngmp_init\n(\n21\n);\n$g\n=\ngmp_gcd\n(\n$a\n,\n$b\n);\n$r\n=\ngmp_gcdext\n(\n$a\n,\n$b\n);\n$check_gcd\n= (\ngmp_strval\n(\n$g\n) ==\ngmp_strval\n(\n$r\n[\n'g'\n]));\n$eq_res\n=\ngmp_add\n(\ngmp_mul\n(\n$a\n,\n$r\n[\n's'\n]),\ngmp_mul\n(\n$b\n,\n$r\n[\n't'\n]));\n$check_res\n= (\ngmp_strval\n(\n$g\n) ==\ngmp_strval\n(\n$eq_res\n));\nif (\n$check_gcd\n&&\n$check_res\n) {\n\n$fmt\n=\n\"Solution: %d*%d + %d*%d = %d\\n\"\n;\n\nprintf\n(\n$fmt\n,\ngmp_strval\n(\n$a\n),\ngmp_strval\n(\n$r\n[\n's'\n]),\ngmp_strval\n(\n$b\n),\n\ngmp_strval\n(\n$r\n[\n't'\n]),\ngmp_strval\n(\n$r\n[\n'g'\n]));\n} else {\n    echo\n\"Error while solving the equation\\n\"\n;\n}\n// output: Solution: 12*2 + 21*-1 = 3\n?>"
  },
  {
    "input": "Example #1 gmp_hamdist() example",
    "output": "<?php\n$ham1\n=\ngmp_init\n(\n\"1001010011\"\n,\n2\n);\n$ham2\n=\ngmp_init\n(\n\"1011111100\"\n,\n2\n);\necho\ngmp_hamdist\n(\n$ham1\n,\n$ham2\n) .\n\"\\n\"\n;\n/* hamdist is equivalent to: */\necho\ngmp_popcount\n(\ngmp_xor\n(\n$ham1\n,\n$ham2\n)) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_import() example",
    "output": "<?php\n$number\n=\ngmp_import\n(\n\"\\0\"\n);\necho\ngmp_strval\n(\n$number\n) .\n\"\\n\"\n;\n$number\n=\ngmp_import\n(\n\"\\0\\1\\2\"\n);\necho\ngmp_strval\n(\n$number\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Creating GMP number",
    "output": "<?php\n$a\n=\ngmp_init\n(\n123456\n);\n$b\n=\ngmp_init\n(\n\"0xFFFFDEBACDFEDF7200\"\n);\n?>"
  },
  {
    "input": "Example #1 gmp_intval() example",
    "output": "<?php\n// displays correct result\necho\ngmp_intval\n(\n\"2147483647\"\n) .\n\"\\n\"\n;\n// displays wrong result, above PHP integer limit\necho\ngmp_intval\n(\n\"2147483648\"\n) .\n\"\\n\"\n;\n// displays correct result\necho\ngmp_strval\n(\n\"2147483648\"\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_invert() example",
    "output": "<?php\necho\ngmp_invert\n(\n\"5\"\n,\n\"10\"\n);\n// no inverse, outputs nothing, result is FALSE\n$invert\n=\ngmp_invert\n(\n\"5\"\n,\n\"11\"\n);\necho\ngmp_strval\n(\n$invert\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_jacobi() example",
    "output": "<?php\necho\ngmp_jacobi\n(\n\"1\"\n,\n\"3\"\n) .\n\"\\n\"\n;\necho\ngmp_jacobi\n(\n\"2\"\n,\n\"3\"\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_legendre() example",
    "output": "<?php\necho\ngmp_legendre\n(\n\"1\"\n,\n\"3\"\n) .\n\"\\n\"\n;\necho\ngmp_legendre\n(\n\"2\"\n,\n\"3\"\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_mod() example",
    "output": "<?php\n$mod\n=\ngmp_mod\n(\n\"8\"\n,\n\"3\"\n);\necho\ngmp_strval\n(\n$mod\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_mul() example",
    "output": "<?php\n$mul\n=\ngmp_mul\n(\n\"12345678\"\n,\n\"2000\"\n);\necho\ngmp_strval\n(\n$mul\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_neg() example",
    "output": "<?php\n$neg1\n=\ngmp_neg\n(\n\"1\"\n);\necho\ngmp_strval\n(\n$neg1\n) .\n\"\\n\"\n;\n$neg2\n=\ngmp_neg\n(\n\"-1\"\n);\necho\ngmp_strval\n(\n$neg2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_nextprime() example",
    "output": "<?php\n$prime1\n=\ngmp_nextprime\n(\n10\n);\n// next prime number greater than 10\n$prime2\n=\ngmp_nextprime\n(-\n1000\n);\n// next prime number greater than -1000\necho\ngmp_strval\n(\n$prime1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$prime2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_or() example",
    "output": "<?php\n$or1\n=\ngmp_or\n(\n\"0xfffffff2\"\n,\n\"4\"\n);\necho\ngmp_strval\n(\n$or1\n,\n16\n) .\n\"\\n\"\n;\n$or2\n=\ngmp_or\n(\n\"0xfffffff2\"\n,\n\"2\"\n);\necho\ngmp_strval\n(\n$or2\n,\n16\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_perfect_square() example",
    "output": "<?php\n// 3 * 3, perfect square\nvar_dump\n(\ngmp_perfect_square\n(\n\"9\"\n));\n// not a perfect square\nvar_dump\n(\ngmp_perfect_square\n(\n\"7\"\n));\n// 1234567890 * 1234567890, perfect square\nvar_dump\n(\ngmp_perfect_square\n(\n\"1524157875019052100\"\n));\n?>"
  },
  {
    "input": "Example #1 gmp_popcount() example",
    "output": "<?php\n$pop1\n=\ngmp_init\n(\n\"10000101\"\n,\n2\n);\n// 3 1's\necho\ngmp_popcount\n(\n$pop1\n) .\n\"\\n\"\n;\n$pop2\n=\ngmp_init\n(\n\"11111110\"\n,\n2\n);\n// 7 1's\necho\ngmp_popcount\n(\n$pop2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_pow() example",
    "output": "<?php\n$pow1\n=\ngmp_pow\n(\n\"2\"\n,\n31\n);\necho\ngmp_strval\n(\n$pow1\n) .\n\"\\n\"\n;\n$pow2\n=\ngmp_pow\n(\n\"0\"\n,\n0\n);\necho\ngmp_strval\n(\n$pow2\n) .\n\"\\n\"\n;\n$pow3\n=\ngmp_pow\n(\n\"2\"\n, -\n1\n);\n// Negative exp, generates warning\necho\ngmp_strval\n(\n$pow3\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_powm() example",
    "output": "<?php\n$pow1\n=\ngmp_powm\n(\n\"2\"\n,\n\"31\"\n,\n\"2147483649\"\n);\necho\ngmp_strval\n(\n$pow1\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_prob_prime() example",
    "output": "<?php\n// definitely not a prime\necho\ngmp_prob_prime\n(\n\"6\"\n) .\n\"\\n\"\n;\n// probably a prime\necho\ngmp_prob_prime\n(\n\"1111111111111111111\"\n) .\n\"\\n\"\n;\n// definitely a prime\necho\ngmp_prob_prime\n(\n\"11\"\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_random() example",
    "output": "<?php\n$rand1\n=\ngmp_random\n(\n1\n);\n// random number from 0 to 1 * bits per limb\n$rand2\n=\ngmp_random\n(\n2\n);\n// random number from 0 to 2 * bits per limb\necho\ngmp_strval\n(\n$rand1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$rand2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_random_bits() example",
    "output": "<?php\n$rand1\n=\ngmp_random_bits\n(\n3\n);\n// random number from 0 to 7\n$rand2\n=\ngmp_random_bits\n(\n5\n);\n// random number from 0 to 31\necho\ngmp_strval\n(\n$rand1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$rand2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_random_range() example",
    "output": "<?php\n$rand1\n=\ngmp_random_range\n(\n0\n,\n100\n);\n// random number between 0 and 100\n$rand2\n=\ngmp_random_range\n(-\n100\n, -\n10\n);\n// random number between -100 and -10\necho\ngmp_strval\n(\n$rand1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$rand2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_random_seed() example",
    "output": "<?php\n// set the seed\ngmp_random_seed\n(\n100\n);\nvar_dump\n(\ngmp_strval\n(\ngmp_random\n(\n1\n)));\n// set the seed to something else\ngmp_random_seed\n(\ngmp_init\n(-\n100\n));\nvar_dump\n(\ngmp_strval\n(\ngmp_random_bits\n(\n10\n)));\n// set the seed to something invalid\nvar_dump\n(\ngmp_random_seed\n(\n'not a number'\n));"
  },
  {
    "input": "Example #1 gmp_scan0() example",
    "output": "<?php\n// \"0\" bit is found at position 3. index starts at 0\n$s1\n=\ngmp_init\n(\n\"10111\"\n,\n2\n);\necho\ngmp_scan0\n(\n$s1\n,\n0\n) .\n\"\\n\"\n;\n// \"0\" bit is found at position 7. index starts at 5\n$s2\n=\ngmp_init\n(\n\"101110000\"\n,\n2\n);\necho\ngmp_scan0\n(\n$s2\n,\n5\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_scan1() example",
    "output": "<?php\n// \"1\" bit is found at position 3. index starts at 0\n$s1\n=\ngmp_init\n(\n\"01000\"\n,\n2\n);\necho\ngmp_scan1\n(\n$s1\n,\n0\n) .\n\"\\n\"\n;\n// \"1\" bit is found at position 9. index starts at 5\n$s2\n=\ngmp_init\n(\n\"01000001111\"\n,\n2\n);\necho\ngmp_scan1\n(\n$s2\n,\n5\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_setbit() example - 0 index",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"2\"\n);\n//\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\ngmp_setbit\n(\n$a\n,\n0\n);\n// 0b10 now becomes 0b11\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 gmp_setbit() example - 1 index",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"0xfd\"\n);\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\ngmp_setbit\n(\n$a\n,\n1\n);\n// index starts at 0\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 gmp_setbit() example - clearing a bit",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"0xff\"\n);\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\ngmp_setbit\n(\n$a\n,\n0\n,\nfalse\n);\n// clear bit at index 0\necho\ngmp_strval\n(\n$a\n),\n' -> 0b'\n,\ngmp_strval\n(\n$a\n,\n2\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_sign() example",
    "output": "<?php\n// positive\necho\ngmp_sign\n(\n\"500\"\n) .\n\"\\n\"\n;\n// negative\necho\ngmp_sign\n(\n\"-500\"\n) .\n\"\\n\"\n;\n// zero\necho\ngmp_sign\n(\n\"0\"\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_sqrt() example",
    "output": "<?php\n$sqrt1\n=\ngmp_sqrt\n(\n\"9\"\n);\n$sqrt2\n=\ngmp_sqrt\n(\n\"7\"\n);\n$sqrt3\n=\ngmp_sqrt\n(\n\"1524157875019052100\"\n);\necho\ngmp_strval\n(\n$sqrt1\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$sqrt2\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$sqrt3\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_sqrtrem() example",
    "output": "<?php\nlist(\n$sqrt1\n,\n$sqrt1rem\n) =\ngmp_sqrtrem\n(\n\"9\"\n);\nlist(\n$sqrt2\n,\n$sqrt2rem\n) =\ngmp_sqrtrem\n(\n\"7\"\n);\nlist(\n$sqrt3\n,\n$sqrt3rem\n) =\ngmp_sqrtrem\n(\n\"1048576\"\n);\necho\ngmp_strval\n(\n$sqrt1\n) .\n\", \"\n.\ngmp_strval\n(\n$sqrt1rem\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$sqrt2\n) .\n\", \"\n.\ngmp_strval\n(\n$sqrt2rem\n) .\n\"\\n\"\n;\necho\ngmp_strval\n(\n$sqrt3\n) .\n\", \"\n.\ngmp_strval\n(\n$sqrt3rem\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Converting a GMP number to a string",
    "output": "<?php\n$a\n=\ngmp_init\n(\n\"0x41682179fbf5\"\n);\nprintf\n(\n\"Decimal: %s, 36-based: %s\"\n,\ngmp_strval\n(\n$a\n),\ngmp_strval\n(\n$a\n,\n36\n));\n?>"
  },
  {
    "input": "Example #1 gmp_sub() example",
    "output": "<?php\n$sub\n=\ngmp_sub\n(\n\"281474976710656\"\n,\n\"4294967296\"\n);\n// 2^48 - 2^32\necho\ngmp_strval\n(\n$sub\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gmp_testbit() example",
    "output": "<?php\n$n\n=\ngmp_init\n(\n\"1000000\"\n);\nvar_dump\n(\ngmp_testbit\n(\n$n\n,\n1\n));\ngmp_setbit\n(\n$n\n,\n1\n);\nvar_dump\n(\ngmp_testbit\n(\n$n\n,\n1\n));\n?>"
  },
  {
    "input": "Example #1 gmp_xor() example",
    "output": "<?php\n$xor1\n=\ngmp_init\n(\n\"1101101110011101\"\n,\n2\n);\n$xor2\n=\ngmp_init\n(\n\"0110011001011001\"\n,\n2\n);\n$xor3\n=\ngmp_xor\n(\n$xor1\n,\n$xor2\n);\necho\ngmp_strval\n(\n$xor3\n,\n2\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 abs() example",
    "output": "<?php\nvar_dump\n(\nabs\n(-\n4.2\n));\nvar_dump\n(\nabs\n(\n5\n));\nvar_dump\n(\nabs\n(-\n5\n));\n?>"
  },
  {
    "input": "Example #1 base_convert() example",
    "output": "<?php\n$hexadecimal\n=\n'a37334'\n;\necho\nbase_convert\n(\n$hexadecimal\n,\n16\n,\n2\n);\n?>"
  },
  {
    "input": "Example #1 bindec() example",
    "output": "<?php\necho\nbindec\n(\n'110011'\n) .\n\"\\n\"\n;\necho\nbindec\n(\n'000110011'\n) .\n\"\\n\"\n;\necho\nbindec\n(\n'111'\n);\n?>"
  },
  {
    "input": "Example #2 bindec() interprets input as unsigned integers",
    "output": "<?php\n/*\n * The lesson from this example is in the output\n * rather than the PHP code itself.\n */\n$magnitude_lower\n=\npow\n(\n2\n, (\nPHP_INT_SIZE\n*\n8\n) -\n2\n);\np\n(\n$magnitude_lower\n-\n1\n);\np\n(\n$magnitude_lower\n,\n'See the rollover?  Watch it next time around...'\n);\np\n(\nPHP_INT_MAX\n,\n'PHP_INT_MAX'\n);\np\n(~\nPHP_INT_MAX\n,\n'interpreted to be one more than PHP_INT_MAX'\n);\nif (\nPHP_INT_SIZE\n==\n4\n) {\n\n$note\n=\n'interpreted to be the largest unsigned integer'\n;\n} else {\n\n$note\n=\n'interpreted to be the largest unsigned integer\n              (18446744073709551615) but skewed by float precision'\n;\n}\np\n(-\n1\n,\n$note\n);\nfunction\np\n(\n$input\n,\n$note\n=\n''\n) {\n    echo\n\"input:\n$input\n\\n\"\n;\n\n$format\n=\n'%0'\n. (\nPHP_INT_SIZE\n*\n8\n) .\n'b'\n;\n\n$bin\n=\nsprintf\n(\n$format\n,\n$input\n);\n    echo\n\"binary:\n$bin\n\\n\"\n;\n\nini_set\n(\n'precision'\n,\n20\n);\n// For readability on 64 bit boxes.\n\n$dec\n=\nbindec\n(\n$bin\n);\n    echo\n'bindec():     '\n.\n$dec\n.\n\"\\n\"\n;\n    if (\n$note\n) {\n        echo\n\"NOTE:\n$note\n\\n\"\n;\n    }\n    echo\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ceil() example",
    "output": "<?php\necho\nceil\n(\n4.3\n);\n// 5\necho\nceil\n(\n9.999\n);\n// 10\necho\nceil\n(-\n3.14\n);\n// -3\n?>"
  },
  {
    "input": "Example #1 cos() example",
    "output": "<?php\necho\ncos\n(\nM_PI\n);\n// -1\n?>"
  },
  {
    "input": "Example #1 decbin() example",
    "output": "<?php\necho\ndecbin\n(\n12\n) .\n\"\\n\"\n;\necho\ndecbin\n(\n26\n);\n?>"
  },
  {
    "input": "Example #1 dechex() example",
    "output": "<?php\necho\ndechex\n(\n10\n) .\n\"\\n\"\n;\necho\ndechex\n(\n47\n);\n?>"
  },
  {
    "input": "Example #2 dechex() example with large integers",
    "output": "<?php\n// The output below assumes a 32-bit platform.\n// Note that the output is the same for all values.\necho\ndechex\n(-\n1\n).\n\"\\n\"\n;\necho\ndechex\n(\nPHP_INT_MAX\n*\n2\n+\n1\n).\n\"\\n\"\n;\necho\ndechex\n(\npow\n(\n2\n,\n32\n) -\n1\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 decoct() example",
    "output": "<?php\necho\ndecoct\n(\n15\n) .\n\"\\n\"\n;\necho\ndecoct\n(\n264\n);\n?>"
  },
  {
    "input": "Example #1 deg2rad() example",
    "output": "<?php\necho\ndeg2rad\n(\n45\n);\n// 0.785398163397\nvar_dump\n(\ndeg2rad\n(\n45\n) ===\nM_PI_4\n);\n// bool(true)\n?>"
  },
  {
    "input": "Example #1 exp() example",
    "output": "<?php\necho\nexp\n(\n12\n) .\n\"\\n\"\n;\necho\nexp\n(\n5.7\n);\n?>"
  },
  {
    "input": "Example #1 Using fdiv()",
    "output": "<?php\nvar_dump\n(\nfdiv\n(\n5.7\n,\n1.3\n));\n// float(4.384615384615385)\nvar_dump\n(\nfdiv\n(\n4\n,\n2\n));\n// float(2)\nvar_dump\n(\nfdiv\n(\n1.0\n,\n0.0\n));\n// float(INF)\nvar_dump\n(\nfdiv\n(-\n1.0\n,\n0.0\n));\n// float(-INF)\nvar_dump\n(\nfdiv\n(\n0.0\n,\n0.0\n));\n// float(NAN)\n?>"
  },
  {
    "input": "Example #1 floor() example",
    "output": "<?php\necho\nfloor\n(\n4.3\n);\n// 4\necho\nfloor\n(\n9.999\n);\n// 9\necho\nfloor\n(-\n3.14\n);\n// -4\n?>"
  },
  {
    "input": "Example #1 Using fmod()",
    "output": "<?php\n$x\n=\n5.7\n;\n$y\n=\n1.3\n;\n$r\n=\nfmod\n(\n$x\n,\n$y\n);\n// $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7\n?>"
  },
  {
    "input": "Example #1 fpow() example",
    "output": "<?php\nvar_dump\n(\nfpow\n(\n10\n,\n2\n));\nvar_dump\n(\nfpow\n(\n0\n, -\n3\n));\nvar_dump\n(\nfpow\n(-\n1\n,\n5.5\n));\n?>"
  },
  {
    "input": "Example #1 hexdec() example",
    "output": "<?php\nvar_dump\n(\nhexdec\n(\n\"See\"\n));\nvar_dump\n(\nhexdec\n(\n\"ee\"\n));\n// both print \"int(238)\"\nvar_dump\n(\nhexdec\n(\n\"that\"\n));\n// print \"int(10)\"\nvar_dump\n(\nhexdec\n(\n\"a0\"\n));\n// print \"int(160)\"\n?>"
  },
  {
    "input": "Example #1 intdiv() example",
    "output": "<?php\nvar_dump\n(\nintdiv\n(\n3\n,\n2\n));\nvar_dump\n(\nintdiv\n(-\n3\n,\n2\n));\nvar_dump\n(\nintdiv\n(\n3\n, -\n2\n));\nvar_dump\n(\nintdiv\n(-\n3\n, -\n2\n));\nvar_dump\n(\nintdiv\n(\nPHP_INT_MAX\n,\nPHP_INT_MAX\n));\nvar_dump\n(\nintdiv\n(\nPHP_INT_MIN\n,\nPHP_INT_MIN\n));\nvar_dump\n(\nintdiv\n(\nPHP_INT_MIN\n, -\n1\n));\nvar_dump\n(\nintdiv\n(\n1\n,\n0\n));\n?>"
  },
  {
    "input": "Example #1 is_finite() example",
    "output": "<?php\n$float\n=\n1.2345\n;\nvar_dump\n(\n$float\n,\nis_finite\n(\n$float\n));\n$nan\n=\nsqrt\n(-\n1\n);\nvar_dump\n(\n$nan\n,\nis_finite\n(\n$nan\n));\n$inf\n=\n1e308\n*\n2\n;\nvar_dump\n(\n$inf\n,\nis_finite\n(\n$inf\n));\n?>"
  },
  {
    "input": "Example #1 is_infinite() example",
    "output": "<?php\n$inf\n=\n1e308\n*\n2\n;\nvar_dump\n(\n$inf\n,\nis_infinite\n(\n$inf\n));\n$negative_inf\n= -\n$inf\n;\nvar_dump\n(\n$negative_inf\n,\nis_infinite\n(\n$negative_inf\n));\n?>"
  },
  {
    "input": "Example #1 is_nan() example",
    "output": "<?php\n$nan\n=\nsqrt\n(-\n1\n);\nvar_dump\n(\n$nan\n,\nis_nan\n(\n$nan\n));\n?>"
  },
  {
    "input": "Example #1 Example uses of max()",
    "output": "<?php\necho\nmax\n(\n2\n,\n3\n,\n1\n,\n6\n,\n7\n);\n// 7\necho\nmax\n(array(\n2\n,\n4\n,\n5\n));\n// 5\n// Here we are comparing -1 < 0, so 'hello' is the highest value\necho\nmax\n(\n'hello'\n, -\n1\n);\n// hello\n// With multiple arrays of different lengths, max returns the longest\n$val\n=\nmax\n(array(\n2\n,\n2\n,\n2\n), array(\n1\n,\n1\n,\n1\n,\n1\n));\n// array(1, 1, 1, 1)\n// Multiple arrays of the same length are compared from left to right\n// so in our example: 2 == 2, but 5 > 4\n$val\n=\nmax\n(array(\n2\n,\n4\n,\n8\n), array(\n2\n,\n5\n,\n1\n));\n// array(2, 5, 1)\n// If both an array and non-array are given, the array will be returned\n// as comparisons treat arrays as greater than any other value\n$val\n=\nmax\n(\n'string'\n, array(\n2\n,\n5\n,\n7\n),\n42\n);\n// array(2, 5, 7)\n// If one argument is NULL or a boolean, it will be compared against\n// other values using the rule FALSE < TRUE regardless of the other types involved\n// In the below example, -10 is treated as TRUE in the comparison\n$val\n=\nmax\n(-\n10\n,\nFALSE\n);\n// -10\n// 0, on the other hand, is treated as FALSE, so is \"lower than\" TRUE\n$val\n=\nmax\n(\n0\n,\nTRUE\n);\n// TRUE\n?>"
  },
  {
    "input": "Example #1 Example uses of min()",
    "output": "<?php\necho\nmin\n(\n2\n,\n3\n,\n1\n,\n6\n,\n7\n);\n// 1\necho\nmin\n(array(\n2\n,\n4\n,\n5\n));\n// 2\n// Here we are comparing -1 < 0, so -1 is the lowest value\necho\nmin\n(\n'hello'\n, -\n1\n);\n// -1\n// With multiple arrays of different lengths, min returns the shortest\n$val\n=\nmin\n(array(\n2\n,\n2\n,\n2\n), array(\n1\n,\n1\n,\n1\n,\n1\n));\n// array(2, 2, 2)\n// Multiple arrays of the same length are compared from left to right\n// so in our example: 2 == 2, but 4 < 5\n$val\n=\nmin\n(array(\n2\n,\n4\n,\n8\n), array(\n2\n,\n5\n,\n1\n));\n// array(2, 4, 8)\n// If both an array and non-array are given, the array is never returned\n// as comparisons treat arrays as greater than any other value\n$val\n=\nmin\n(\n'string'\n, array(\n2\n,\n5\n,\n7\n),\n42\n);\n// string\n// If one argument is NULL or a boolean, it will be compared against\n// other values using the rules FALSE < TRUE and NULL == FALSE regardless of the\n// other types involved\n// In the below examples, both -10 and 10 are treated as TRUE in the comparison\n$val\n=\nmin\n(-\n10\n,\nFALSE\n,\n10\n);\n// FALSE\n$val\n=\nmin\n(-\n10\n,\nNULL\n,\n10\n);\n// NULL\n// 0, on the other hand, is treated as FALSE, so is \"lower than\" TRUE\n$val\n=\nmin\n(\n0\n,\nTRUE\n);\n// 0\n?>"
  },
  {
    "input": "Example #1 octdec() example",
    "output": "<?php\necho\noctdec\n(\n'77'\n) .\n\"\\n\"\n;\necho\noctdec\n(\ndecoct\n(\n45\n));\n?>"
  },
  {
    "input": "Example #1 pi() example",
    "output": "<?php\necho\npi\n();\n// 3.1415926535898\necho\nM_PI\n;\n// 3.1415926535898\n?>"
  },
  {
    "input": "Example #1 Some examples of pow()",
    "output": "<?php\nvar_dump\n(\npow\n(\n2\n,\n8\n));\n// int(256)\necho\npow\n(-\n1\n,\n20\n),\nPHP_EOL\n;\n// 1\necho\npow\n(\n0\n,\n0\n),\nPHP_EOL\n;\n// 1\necho\npow\n(\n10\n, -\n1\n),\nPHP_EOL\n;\n// 0.1\nvar_dump\n(\npow\n(new\nGMP\n(\n\"3\"\n), new\nGMP\n(\n\"2\"\n)));\n// object(GMP)\necho\npow\n(-\n1\n,\n5.5\n);\n// NAN\n?>"
  },
  {
    "input": "Example #1 rad2deg() example",
    "output": "<?php\necho\nrad2deg\n(\nM_PI_4\n);\n// 45\n?>"
  },
  {
    "input": "Example #1 round() examples",
    "output": "<?php\nvar_dump\n(\nround\n(\n3.4\n));\nvar_dump\n(\nround\n(\n3.5\n));\nvar_dump\n(\nround\n(\n3.6\n));\nvar_dump\n(\nround\n(\n3.6\n,\n0\n));\nvar_dump\n(\nround\n(\n5.045\n,\n2\n));\nvar_dump\n(\nround\n(\n5.055\n,\n2\n));\nvar_dump\n(\nround\n(\n345\n, -\n2\n));\nvar_dump\n(\nround\n(\n345\n, -\n3\n));\nvar_dump\n(\nround\n(\n678\n, -\n2\n));\nvar_dump\n(\nround\n(\n678\n, -\n3\n));\n?>"
  },
  {
    "input": "Example #2 How precision affects a float",
    "output": "<?php\n$number\n=\n135.79\n;\nvar_dump\n(\nround\n(\n$number\n,\n3\n));\nvar_dump\n(\nround\n(\n$number\n,\n2\n));\nvar_dump\n(\nround\n(\n$number\n,\n1\n));\nvar_dump\n(\nround\n(\n$number\n,\n0\n));\nvar_dump\n(\nround\n(\n$number\n, -\n1\n));\nvar_dump\n(\nround\n(\n$number\n, -\n2\n));\nvar_dump\n(\nround\n(\n$number\n, -\n3\n));\n?>"
  },
  {
    "input": "Example #3 mode examples",
    "output": "<?php\necho\n'Rounding modes with 9.5'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n9.5\n,\n0\n,\nPHP_ROUND_HALF_UP\n));\nvar_dump\n(\nround\n(\n9.5\n,\n0\n,\nPHP_ROUND_HALF_DOWN\n));\nvar_dump\n(\nround\n(\n9.5\n,\n0\n,\nPHP_ROUND_HALF_EVEN\n));\nvar_dump\n(\nround\n(\n9.5\n,\n0\n,\nPHP_ROUND_HALF_ODD\n));\necho\nPHP_EOL\n;\necho\n'Rounding modes with 8.5'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n8.5\n,\n0\n,\nPHP_ROUND_HALF_UP\n));\nvar_dump\n(\nround\n(\n8.5\n,\n0\n,\nPHP_ROUND_HALF_DOWN\n));\nvar_dump\n(\nround\n(\n8.5\n,\n0\n,\nPHP_ROUND_HALF_EVEN\n));\nvar_dump\n(\nround\n(\n8.5\n,\n0\n,\nPHP_ROUND_HALF_ODD\n));\n?>"
  },
  {
    "input": "Example #4 mode with precision examples",
    "output": "<?php\necho\n'Using PHP_ROUND_HALF_UP with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n1.55\n,\n1\n,\nPHP_ROUND_HALF_UP\n));\nvar_dump\n(\nround\n(-\n1.55\n,\n1\n,\nPHP_ROUND_HALF_UP\n));\necho\nPHP_EOL\n;\necho\n'Using PHP_ROUND_HALF_DOWN with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n1.55\n,\n1\n,\nPHP_ROUND_HALF_DOWN\n));\nvar_dump\n(\nround\n(-\n1.55\n,\n1\n,\nPHP_ROUND_HALF_DOWN\n));\necho\nPHP_EOL\n;\necho\n'Using PHP_ROUND_HALF_EVEN with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n1.55\n,\n1\n,\nPHP_ROUND_HALF_EVEN\n));\nvar_dump\n(\nround\n(-\n1.55\n,\n1\n,\nPHP_ROUND_HALF_EVEN\n));\necho\nPHP_EOL\n;\necho\n'Using PHP_ROUND_HALF_ODD with 1 decimal digit precision'\n.\nPHP_EOL\n;\nvar_dump\n(\nround\n(\n1.55\n,\n1\n,\nPHP_ROUND_HALF_ODD\n));\nvar_dump\n(\nround\n(-\n1.55\n,\n1\n,\nPHP_ROUND_HALF_ODD\n));\n?>"
  },
  {
    "input": "Example #1 sin() example",
    "output": "<?php\n// Precision depends on your precision directive\necho\nsin\n(\ndeg2rad\n(\n60\n));\n//  0.866025403 ...\necho\nsin\n(\n60\n);\n// -0.304810621 ...\n?>"
  },
  {
    "input": "Example #1 sqrt() example",
    "output": "<?php\n// Precision depends on your precision directive\necho\nsqrt\n(\n9\n);\n// 3\necho\nsqrt\n(\n10\n);\n// 3.16227766 ...\n?>"
  },
  {
    "input": "Example #1 tan() example",
    "output": "<?php\necho\ntan\n(\nM_PI_4\n);\n// 1\n?>"
  },
  {
    "input": "Example #1 Evaluating a FDF document",
    "output": "<?php\n// Open fdf from input string provided by the extension\n// The pdf form contained several input text fields with the names\n// volume, date, comment, publisher, preparer, and two checkboxes\n// show_publisher and show_preparer.\n$fdf\n=\nfdf_open_string\n(\n$HTTP_FDF_DATA\n);\n$volume\n=\nfdf_get_value\n(\n$fdf\n,\n\"volume\"\n);\necho\n\"The volume field has the value '<b>\n$volume\n</b>'<br />\"\n;\n$date\n=\nfdf_get_value\n(\n$fdf\n,\n\"date\"\n);\necho\n\"The date field has the value '<b>\n$date\n</b>'<br />\"\n;\n$comment\n=\nfdf_get_value\n(\n$fdf\n,\n\"comment\"\n);\necho\n\"The comment field has the value '<b>\n$comment\n</b>'<br />\"\n;\nif (\nfdf_get_value\n(\n$fdf\n,\n\"show_publisher\"\n) ==\n\"On\"\n) {\n\n$publisher\n=\nfdf_get_value\n(\n$fdf\n,\n\"publisher\"\n);\n  echo\n\"The publisher field has the value '<b>\n$publisher\n</b>'<br />\"\n;\n} else\n  echo\n\"Publisher shall not be shown.<br />\"\n;\nif (\nfdf_get_value\n(\n$fdf\n,\n\"show_preparer\"\n) ==\n\"On\"\n) {\n\n$preparer\n=\nfdf_get_value\n(\n$fdf\n,\n\"preparer\"\n);\n  echo\n\"The preparer field has the value '<b>\n$preparer\n</b>'<br />\"\n;\n} else\n  echo\n\"Preparer shall not be shown.<br />\"\n;\nfdf_close\n(\n$fdf\n);\n?>"
  },
  {
    "input": "Example #1 Adding JavaScript code to a FDF",
    "output": "<?php\n$fdf\n=\nfdf_create\n();\nfdf_add_doc_javascript\n(\n$fdf\n,\n\"PlusOne\"\n,\n\"function PlusOne(x)\\r{\\r  return x+1;\\r}\\r\"\n);\nfdf_save\n(\n$fdf\n);\n?>"
  },
  {
    "input": "Example #1 Populating a PDF document",
    "output": "<?php\n$outfdf\n=\nfdf_create\n();\nfdf_set_value\n(\n$outfdf\n,\n\"volume\"\n,\n$volume\n,\n0\n);\nfdf_set_file\n(\n$outfdf\n,\n\"http:/testfdf/resultlabel.pdf\"\n);\nfdf_save\n(\n$outfdf\n,\n\"outtest.fdf\"\n);\nfdf_close\n(\n$outfdf\n);\nHeader\n(\n\"Content-type: application/vnd.fdf\"\n);\n$fp\n=\nfopen\n(\n\"outtest.fdf\"\n,\n\"r\"\n);\nfpassthru\n(\n$fp\n);\nunlink\n(\n\"outtest.fdf\"\n);\n?>"
  },
  {
    "input": "Example #1 Storing an uploaded file",
    "output": "<?php\n  $fdf\n=\nfdf_open_string\n(\n$HTTP_FDF_DATA\n);\n\n$data\n=\nfdf_get_attachment\n(\n$fdf\n,\n\"filename\"\n,\n\"/tmpdir\"\n);\n  echo\n\"The uploaded file is stored in\n$data\n[\npath\n]\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Detecting all fieldnames in a FDF",
    "output": "<?php\n$fdf\n=\nfdf_open\n(\n$HTTP_FDF_DATA\n);\nfor (\n$field\n=\nfdf_next_field_name\n(\n$fdf\n);\n\n$field\n!=\n\"\"\n;\n\n$field\n=\nfdf_next_field_name\n(\n$fdf\n,\n$field\n)) {\n    echo\n\"field:\n$field\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Accessing the form data",
    "output": "<?php\n// Save the FDF data into a temp file\n$fdffp\n=\nfopen\n(\n\"test.fdf\"\n,\n\"w\"\n);\nfwrite\n(\n$fdffp\n,\n$HTTP_FDF_DATA\n,\nstrlen\n(\n$HTTP_FDF_DATA\n));\nfclose\n(\n$fdffp\n);\n// Open temp file and evaluate data\n$fdf\n=\nfdf_open\n(\n\"test.fdf\"\n);\n/* ... */\nfdf_close\n(\n$fdf\n);\n?>"
  },
  {
    "input": "Example #1 Accessing the form data",
    "output": "<?php\n$fdf\n=\nfdf_open_string\n(\n$HTTP_FDF_DATA\n);\n/* ... */\nfdf_close\n(\n$fdf\n);\n?>"
  },
  {
    "input": "Example #1 Retrieving FDF as a string",
    "output": "<?php\n$fdf\n=\nfdf_create\n();\nfdf_set_value\n(\n$fdf\n,\n\"foo\"\n,\n\"bar\"\n);\n$str\n=\nfdf_save_string\n(\n$fdf\n);\nfdf_close\n(\n$fdf\n);\necho\n$str\n;\n?>"
  },
  {
    "input": "Example #1 Passing FDF data to a second form",
    "output": "<?php\n\n/* set content type for Adobe FDF */\n\nfdf_header\n();\n\n/* start new fdf */\n\n$fdf\n=\nfdf_create\n();\n\n/* set field \"foo\" to value \"bar\" */\n\nfdf_set_value\n(\n$fdf\n,\n\"foo\"\n,\n\"bar\"\n);\n\n/* tell client to display FDF data using \"fdf_form.pdf\" */\n\nfdf_set_file\n(\n$fdf\n,\n\"http://www.example.com/fdf_form.pdf\"\n);\n\n/* output fdf */\n\nfdf_save\n(\n$fdf\n);\n\n/* clean up */\n\nfdf_close\n(\n$fdf\n);\n?>"
  },
  {
    "input": "Example #1 gnupg clearsign example (procedural)",
    "output": "<?php\n// init gnupg\n$res\n=\ngnupg_init\n();\n// not really needed. Clearsign is default\ngnupg_setsignmode\n(\n$res\n,\nGNUPG_SIG_MODE_CLEAR\n);\n// add key with passphrase 'test' for signing\ngnupg_addsignkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n// sign\n$signed\n=\ngnupg_sign\n(\n$res\n,\n\"just a test\"\n);\necho\n$signed\n;\n?>"
  },
  {
    "input": "Example #2 gnupg clearsign example (OO)",
    "output": "<?php\n// new class\n$gnupg\n= new\ngnupg\n();\n// not really needed. Clearsign is default\n$gnupg\n->\nsetsignmode\n(\ngnupg\n::\nSIG_MODE_CLEAR\n);\n// add key with passphrase 'test' for signing\n$gnupg\n->\naddsignkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n// sign\n$signed\n=\n$gnupg\n->\nsign\n(\n\"just a test\"\n);\necho\n$signed\n;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_adddecryptkey() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_adddecryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_adddecryptkey() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nadddecryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_addencryptkey() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_addencryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_addencryptkey() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\naddencryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_addsignkey() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_addsignkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_addsignkey() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\naddsignkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_cleardecryptkeys() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_cleardecryptkeys\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_cleardecryptkeys() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\ncleardecryptkeys\n();\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_clearencryptkeys() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_clearencryptkeys\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_clearencryptkeys() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nclearencryptkeys\n();\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_clearsignkeys() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_clearsignkeys\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_clearsignkeys() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nclearsignkeys\n();\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_decrypt() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_adddecryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$plain\n=\ngnupg_decrypt\n(\n$res\n,\n$encrypted_text\n);\necho\n$plain\n;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_decrypt() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nadddecryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$plain\n=\n$gpg\n->\ndecrypt\n(\n$encrypted_text\n);\necho\n$plain\n;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_decryptverify() example",
    "output": "<?php\n$plaintext\n=\n\"\"\n;\n$res\n=\ngnupg_init\n();\ngnupg_adddecryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$info\n=\ngnupg_decryptverify\n(\n$res\n,\n$text\n,\n$plaintext\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_decryptverify() example",
    "output": "<?php\n$plaintext\n=\n\"\"\n;\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nadddecryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$info\n=\n$gpg\n->\ndecryptverify\n(\n$text\n,\n$plaintext\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_deletekey() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_deletekey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_deletekey() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\ndeletekey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_encrypt() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_addencryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n$enc\n=\ngnupg_encrypt\n(\n$res\n,\n\"just a test\"\n);\necho\n$enc\n;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_encrypt() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\naddencryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n$enc\n=\n$gpg\n->\nencrypt\n(\n\"just a test\"\n);\necho\n$enc\n;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_encryptsign() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_addencryptkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\ngnupg_addsignkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$enc\n=\ngnupg_encryptsign\n(\n$res\n,\n\"just a test\"\n);\necho\n$enc\n;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_encryptsign() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\naddencryptkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n$gpg\n->\naddsignkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$enc\n=\n$gpg\n->\nencryptsign\n(\n\"just a test\"\n);\necho\n$enc\n;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_export() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n$export\n=\ngnupg_export\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\necho\n$export\n;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_export() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$export\n=\n$gpg\n->\nexport\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_getengineinfo() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\nprint_r\n(\ngnupg_getengineinfo\n(\n$res\n));\n?>"
  },
  {
    "input": "Example #2 OO gnupg_getengineinfo() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n([\n\"file_name\"\n=>\n\"/usr/bin/gpg2\"\n,\n\"home_dir\"\n=>\n\"/var/www/.gnupg\"\n]);\nprint_r\n(\n$gpg\n->\ngetengineinfo\n());\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_geterror() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\necho\ngnupg_geterror\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_geterror() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\necho\n$gpg\n->\ngeterror\n();\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_geterrorinfo() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n// this is called without any error\nprint_r\n(\ngnupg_geterrorinfo\n(\n$res\n));\n?>"
  },
  {
    "input": "Example #2 OO gnupg_geterrorinfo() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n// error call\n$gpg\n->\ndecrypt\n(\n'abc'\n);\n// error info should be displayed\nprint_r\n(\n$gpg\n->\ngeterrorinfo\n());\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_getprotocol() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\necho\ngnupg_getprotocol\n(\n$res\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_getprotocol() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\necho\n$gpg\n->\ngetprotocol\n();\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_gettrustlist() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n$items\n=\ngnupg_gettrustlist\n(\n$res\n);\nprint_r\n(\n$items\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_gettrustlist() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$items\n=\n$gpg\n->\ngettrustlist\n();\nprint_r\n(\n$items\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_import() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n$info\n=\ngnupg_import\n(\n$res\n,\n$keydata\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_import() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$info\n=\n$gpg\n->\nimport\n(\n$keydata\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_init() example with default setting",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n?>"
  },
  {
    "input": "Example #2 Procedural gnupg_init() example with overriden file name and home dir",
    "output": "<?php\n$res\n=\ngnupg_init\n([\n\"file_name\"\n=>\n\"/usr/bin/gpg2\"\n,\n\"home_dir\"\n=>\n\"/var/www/.gnupg\"\n]);\n?>"
  },
  {
    "input": "Example #3 OO gnupg initializer example with default setting",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n?>"
  },
  {
    "input": "Example #4 OO gnupg initializer example with overriden file name and home dir",
    "output": "<?php\n$gpg\n= new\ngnupg\n([\n\"file_name\"\n=>\n\"/usr/bin/gpg2\"\n,\n\"home_dir\"\n=>\n\"/var/www/.gnupg\"\n]);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_keyinfo() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n$info\n=\ngnupg_keyinfo\n(\n$res\n,\n'test'\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_keyinfo() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$info\n=\n$gpg\n->\nkeyinfo\n(\n\"test\"\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_listsignatures() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\n$signatures\n=\ngnupg_listsignatures\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\nprint_r\n(\n$signatures\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_listsignatures() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$signatures\n=\n$gpg\n->\nlistsignatures\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n);\nprint_r\n(\n$signatures\n);\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_setarmor() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_setarmor\n(\n$res\n,\n1\n);\n// enable armored output;\ngnupg_setarmor\n(\n$res\n,\n0\n);\n// disable armored output;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_setarmor() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nsetarmor\n(\n1\n);\n// enable armored output;\n$gpg\n->\nsetarmor\n(\n0\n);\n// disable armored output;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_seterrormode() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_seterrormode\n(\n$res\n,\nGNUPG_ERROR_WARNING\n);\n// raise a PHP-Warning in case of an error\n?>"
  },
  {
    "input": "Example #2 OO gnupg_seterrormode() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nseterrormode\n(\ngnupg\n::\nERROR_EXCEPTION\n);\n// throw an exception in case of an error\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_setsignmode() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_setsignmode\n(\n$res\n,\nGNUPG_SIG_MODE_DETACH\n);\n// produce a detached signature\n?>"
  },
  {
    "input": "Example #2 OO gnupg_setsignmode() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\nsetsignmode\n(\ngnupg\n::\nSIG_MODE_DETACH\n);\n// produce a detached signature\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_sign() example",
    "output": "<?php\n$res\n=\ngnupg_init\n();\ngnupg_addsignkey\n(\n$res\n,\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$signed\n=\ngnupg_sign\n(\n$res\n,\n\"just a test\"\n);\necho\n$signed\n;\n?>"
  },
  {
    "input": "Example #2 OO gnupg_sign() example",
    "output": "<?php\n$gpg\n= new\ngnupg\n();\n$gpg\n->\naddsignkey\n(\n\"8660281B6051D071D94B5B230549F9DC851566DC\"\n,\n\"test\"\n);\n$signed\n=\n$gpg\n->\nsign\n(\n\"just a test\"\n);\necho\n$signed\n;\n?>"
  },
  {
    "input": "Example #1 Procedural gnupg_verify() example",
    "output": "<?php\n$plaintext\n=\n\"\"\n;\n$res\n=\ngnupg_init\n();\n// clearsigned\n$info\n=\ngnupg_verify\n(\n$res\n,\n$signed_text\n,\nfalse\n,\n$plaintext\n);\nprint_r\n(\n$info\n);\n// detached signature\n$info\n=\ngnupg_verify\n(\n$res\n,\n$signed_text\n,\n$signature\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #2 OO gnupg_verify() example",
    "output": "<?php\n$plaintext\n=\n\"\"\n;\n$gpg\n= new\ngnupg\n();\n// clearsigned\n$info\n=\n$gpg\n->\nverify\n(\n$signed_text\n,\nfalse\n,\n$plaintext\n);\nprint_r\n(\n$info\n);\n// detached signature\n$info\n=\n$gpg\n->\nverify\n(\n$signed_text\n,\n$signature\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Creating and using a pattern",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"pattern.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_parameter\n(\n$ps\n,\n\"warning\"\n,\n\"true\"\n);\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"pattern.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Pattern example\"\n);\n$pspattern\n=\nps_begin_pattern\n(\n$ps\n,\n10.0\n,\n10.0\n,\n10.0\n,\n10.0\n,\n1\n);\nps_setlinewidth\n(\n$ps\n,\n0.2\n);\nps_setcolor\n(\n$ps\n,\n\"stroke\"\n,\n\"rgb\"\n,\n0.0\n,\n0.0\n,\n1.0\n,\n0.0\n);\nps_moveto\n(\n$ps\n,\n0\n,\n0\n);\nps_lineto\n(\n$ps\n,\n7\n,\n7\n);\nps_stroke\n(\n$ps\n);\nps_moveto\n(\n$ps\n,\n0\n,\n7\n);\nps_lineto\n(\n$ps\n,\n7\n,\n0\n);\nps_stroke\n(\n$ps\n);\nps_end_pattern\n(\n$ps\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_setcolor\n(\n$ps\n,\n\"both\"\n,\n\"pattern\"\n,\n$pspattern\n,\n0.0\n,\n0.0\n,\n0.0\n);\nps_rect\n(\n$ps\n,\n50\n,\n400\n,\n200\n,\n200\n);\nps_fill\n(\n$ps\n);\nps_end_page\n(\n$ps\n);\nps_close\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Creating and using a template",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"template.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_parameter\n(\n$ps\n,\n\"warning\"\n,\n\"true\"\n);\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"template.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Template example\"\n);\n$pstemplate\n=\nps_begin_template\n(\n$ps\n,\n30.0\n,\n30.0\n);\nps_moveto\n(\n$ps\n,\n0\n,\n0\n);\nps_lineto\n(\n$ps\n,\n30\n,\n30\n);\nps_moveto\n(\n$ps\n,\n0\n,\n30\n);\nps_lineto\n(\n$ps\n,\n30\n,\n0\n);\nps_stroke\n(\n$ps\n);\nps_end_template\n(\n$ps\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_place_image\n(\n$ps\n,\n$pstemplate\n,\n20.0\n,\n20.0\n,\n1.0\n);\nps_place_image\n(\n$ps\n,\n$pstemplate\n,\n50.0\n,\n30.0\n,\n0.5\n);\nps_place_image\n(\n$ps\n,\n$pstemplate\n,\n70.0\n,\n70.0\n,\n0.6\n);\nps_place_image\n(\n$ps\n,\n$pstemplate\n,\n30.0\n,\n50.0\n,\n1.3\n);\nps_end_page\n(\n$ps\n);\nps_close\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Hyphennate a text",
    "output": "<?php\n$word\n=\n\"Koordinatensystem\"\n;\n$psdoc\n=\nps_new\n();\nps_set_parameter\n(\n$psdoc\n,\n\"hyphendict\"\n,\n\"hyph_de.dic\"\n);\n$hyphens\n=\nps_hyphenate\n(\n$psdoc\n,\n$word\n);\nfor(\n$i\n=\n0\n;\n$i\n<\nstrlen\n(\n$word\n);\n$i\n++) {\n  echo\n$word\n[\n$i\n];\n  if(\nin_array\n(\n$i\n,\n$hyphens\n))\n    echo\n\"-\"\n;\n}\nps_delete\n(\n$psdoc\n);\n?>"
  },
  {
    "input": "Example #1 Drawing a rectangle",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"rectangle.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"rectangle.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Lineto example\"\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_moveto\n(\n$ps\n,\n100\n,\n100\n);\nps_lineto\n(\n$ps\n,\n100\n,\n200\n);\nps_lineto\n(\n$ps\n,\n200\n,\n200\n);\nps_lineto\n(\n$ps\n,\n200\n,\n100\n);\nps_lineto\n(\n$ps\n,\n100\n,\n100\n);\nps_stroke\n(\n$ps\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Creating and using a spot color",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"spotcolor.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"spotcolor.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Spot color example\"\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_setcolor\n(\n$ps\n,\n\"fill\"\n,\n\"cmyk\"\n,\n0.37\n,\n0.0\n,\n0.34\n,\n0.34\n);\n$spotcolor\n=\nps_makespotcolor\n(\n$ps\n,\n\"PANTONE 5565 C\"\n,\n0\n);\nps_setcolor\n(\n$ps\n,\n\"fill\"\n,\n\"spot\"\n,\n$spotcolor\n,\n0.5\n,\n0.0\n,\n0.0\n);\nps_moveto\n(\n$ps\n,\n100\n,\n100\n);\nps_lineto\n(\n$ps\n,\n100\n,\n200\n);\nps_lineto\n(\n$ps\n,\n200\n,\n200\n);\nps_lineto\n(\n$ps\n,\n200\n,\n100\n);\nps_lineto\n(\n$ps\n,\n100\n,\n100\n);\nps_fill\n(\n$ps\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Rotation of the coordinate system",
    "output": "<?php\nfunction\nrectangle\n(\n$ps\n) {\n\nps_moveto\n(\n$ps\n,\n0\n,\n0\n);\n\nps_lineto\n(\n$ps\n,\n0\n,\n50\n);\n\nps_lineto\n(\n$ps\n,\n50\n,\n50\n);\n\nps_lineto\n(\n$ps\n,\n50\n,\n0\n);\n\nps_lineto\n(\n$ps\n,\n0\n,\n0\n);\n\nps_stroke\n(\n$ps\n);\n}\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"rotation.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"rotation.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Rotation example\"\n);\nps_set_info\n(\n$ps\n,\n\"BoundingBox\"\n,\n\"0 0 596 842\"\n);\n$psfont\n=\nps_findfont\n(\n$ps\n,\n\"Helvetica\"\n,\n\"\"\n,\n0\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_set_text_pos\n(\n$ps\n,\n100\n,\n100\n);\nps_save\n(\n$ps\n);\nps_translate\n(\n$ps\n,\n100\n,\n100\n);\nps_rotate\n(\n$ps\n,\n45\n);\nrectangle\n(\n$ps\n);\nps_restore\n(\n$ps\n);\nps_setfont\n(\n$ps\n,\n$psfont\n,\n8.0\n);\nps_show\n(\n$ps\n,\n\"Text without rotation\"\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Placing text at a given position",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"text.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"rectangle.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Text placement example\"\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\n$psfont\n=\nps_findfont\n(\n$ps\n,\n\"Helvetica\"\n,\n\"\"\n,\n0\n);\nps_setfont\n(\n$ps\n,\n$psfont\n,\n8.0\n);\nps_show_xy\n(\n$ps\n,\n\"Some text at (100, 100)\"\n,\n100\n,\n100\n);\nps_set_value\n(\n$ps\n,\n\"textx\"\n,\n100\n);\nps_set_value\n(\n$ps\n,\n\"texty\"\n,\n120\n);\nps_show\n(\n$ps\n,\n\"Some text at (100, 120)\"\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Drawing a dashed line",
    "output": "<?php\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"polydash.ps\"\n)) {\n   print\n\"Cannot open PostScript file\\n\"\n;\n     exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"polydash.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Poly dash example\"\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_setpolydash\n(\n$ps\n, array(\n10\n,\n5\n,\n2\n,\n5\n));\nps_moveto\n(\n$ps\n,\n100\n,\n100\n);\nps_lineto\n(\n$ps\n,\n200\n,\n200\n);\nps_stroke\n(\n$ps\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 Translation of the coordinate system",
    "output": "<?php\nfunction\nrectangle\n(\n$ps\n) {\n\nps_moveto\n(\n$ps\n,\n0\n,\n0\n);\n\nps_lineto\n(\n$ps\n,\n0\n,\n50\n);\n\nps_lineto\n(\n$ps\n,\n50\n,\n50\n);\n\nps_lineto\n(\n$ps\n,\n50\n,\n0\n);\n\nps_lineto\n(\n$ps\n,\n0\n,\n0\n);\n\nps_stroke\n(\n$ps\n);\n}\n$ps\n=\nps_new\n();\nif (!\nps_open_file\n(\n$ps\n,\n\"translate.ps\"\n)) {\n  print\n\"Cannot open PostScript file\\n\"\n;\n  exit;\n}\nps_set_info\n(\n$ps\n,\n\"Creator\"\n,\n\"translate.php\"\n);\nps_set_info\n(\n$ps\n,\n\"Author\"\n,\n\"Uwe Steinmann\"\n);\nps_set_info\n(\n$ps\n,\n\"Title\"\n,\n\"Translated example\"\n);\nps_set_info\n(\n$ps\n,\n\"BoundingBox\"\n,\n\"0 0 596 842\"\n);\n$psfont\n=\nps_findfont\n(\n$ps\n,\n\"Helvetica\"\n,\n\"\"\n,\n0\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_set_text_pos\n(\n$ps\n,\n100\n,\n100\n);\nps_translate\n(\n$ps\n,\n500\n,\n750\n);\nrectangle\n(\n$ps\n);\nps_translate\n(\n$ps\n, -\n500\n, -\n750\n);\nps_setfont\n(\n$ps\n,\n$psfont\n,\n8.0\n);\nps_show\n(\n$ps\n,\n\"Text at initial position\"\n);\nps_end_page\n(\n$ps\n);\nps_begin_page\n(\n$ps\n,\n596\n,\n842\n);\nps_set_text_pos\n(\n$ps\n,\n100\n,\n100\n);\nps_save\n(\n$ps\n);\nps_translate\n(\n$ps\n,\n500\n,\n750\n);\nrectangle\n(\n$ps\n);\nps_restore\n(\n$ps\n);\nps_setfont\n(\n$ps\n,\n$psfont\n,\n8.0\n);\nps_show\n(\n$ps\n,\n\"Text at initial position\"\n);\nps_end_page\n(\n$ps\n);\nps_delete\n(\n$ps\n);\n?>"
  },
  {
    "input": "Example #1 A rpmdbinfo() example",
    "output": "<?php\nrpmaddtag\n(\nRPMTAG_INSTALLTIME\n);\n$info\n=\nrpmdbinfo\n(\n\"php-pecl-rpminfo\"\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Searching for the package owning a file",
    "output": "<?php\n$info\n=\nrpmdbsearch\n(\n\"/usr/bin/php\"\n,\nRPMTAG_INSTFILENAMES\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 A rpmdefine() example",
    "output": "<?php\n// use an old database (bdb) from an EL-8 chroot\nrpmdefine\n(\n\"_dbpath /var/lib/mock/almalinux-8-x86_64/root/var/lib/rpm\"\n);\nrpmdefine\n(\n\"_db_backend bdb_ro\"\n);\nprint_r\n(\nrpmdbinfo\n(\n\"almalinux-release\"\n)[\n0\n][\n\"Summary\"\n]);\n// use a new database (sqlite) from a Fedora-41 chroot\nrpmdefine\n(\n\"_dbpath /var/lib/mock/fedora-41-x86_64/root/usr/lib/sysimage/rpm\"\n);\nrpmdefine\n(\n\"_db_backend sqlite\"\n);\nprint_r\n(\nrpmdbinfo\n(\n\"fedora-release\"\n)[\n0\n][\n\"Summary\"\n]);\n?>"
  },
  {
    "input": "Example #1 A rpmexpand() example",
    "output": "<?php\n$distro\n=\nrpmexpand\n(\n\"%{?fedora:Fedora %{fedora}}%{?rhel:Enterprise Linux %{rhel}}\"\n);\nprint_r\n(\n$distro\n);\n?>"
  },
  {
    "input": "Example #1 A rpmexpandnumeric() example",
    "output": "<?php\n$bits\n=\nrpmexpandnumeric\n(\n\"%__isa_bits\"\n);\nprint_r\n(\n$bits\n);\n?>"
  },
  {
    "input": "Example #1 A rpminfo() example",
    "output": "<?php\nrpmaddtag\n(\nRPMTAG_BUILDTIME\n);\n$info\n=\nrpminfo\n(\n\"./php-pecl-rpminfo-0.4.2-1.el8.remi.7.4.x86_64.rpm\"\n);\nprint_r\n(\n$info\n);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$fileObject\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet_one'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([\n        [\n'viest'\n,\n23\n],\n        [\n'wjx'\n,\n23\n]\n    ]);\n$file\n->\naddSheet\n(\n'sheet_two'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([\n        [\n'james'\n,\n33\n],\n        [\n'king'\n,\n33\n]\n    ]);\n$file\n->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$excel\n->\nfileName\n(\n'test.xlsx'\n)\n        ->\nheader\n([\n'name'\n,\n'age'\n])\n        ->\ndata\n(\n$data\n)\n        ->\nautoFilter\n(\n'A1:B11'\n)\n// auto filter\n\n->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'/home/viest'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$instance\n->\nconstMemory\n(\n'tutorial.xlsx'\n,\n'sheet'\n);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'/home/viest'\n];\n$excelObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$fileObject\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet_one'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([\n      [\n'viest'\n,\n23\n],\n      [\n'wjx'\n,\n23\n],\n    ]);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'/home/viest'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$instance\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet'\n);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$fileObject\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet_one'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n]);\n$handle\n=\n$file\n->\ngetHandle\n();\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$fileObject\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet_one'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n]);\n?>"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$excel\n->\nfileName\n(\n\"free.xlsx\"\n)\n    ->\nheader\n([\n'name'\n,\n'money'\n]);\nfor(\n$index\n=\n1\n;\n$index\n<\n10\n;\n$index\n++) {\n\n$file\n->\ninsertText\n(\n$index\n,\n0\n,\n'viest'\n);\n\n$file\n->\ninsertText\n(\n$index\n,\n1\n,\n10\n);\n}\n$file\n->\ninsertText\n(\n12\n,\n0\n,\n\"Total\"\n);\n$file\n->\ninsertFormula\n(\n12\n,\n1\n,\n'=SUM(B2:B11)'\n);\n// insert formula\n$file\n->\noutput\n();"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$excel\n->\nfileName\n(\n\"free.xlsx\"\n);\n$file\n->\ninsertImage\n(\n5\n,\n0\n,\n'/vagrant/ASW-G-66.jpg'\n);\n$file\n->\noutput\n();"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$excel\n->\nfileName\n(\n\"free.xlsx\"\n)\n    ->\nheader\n([\n'name'\n,\n'money'\n]);\nfor (\n$index\n=\n0\n;\n$index\n<\n10\n;\n$index\n++) {\n\n$file\n->\ninsertText\n(\n$index\n+\n1\n,\n0\n,\n'viest'\n);\n\n$file\n->\ninsertText\n(\n$index\n+\n1\n,\n1\n,\n10000\n,\n'#,##0'\n);\n}\n$textFile\n->\noutput\n();"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n\"test.xlsx\"\n)\n        ->\nmergeCells\n(\n'A1:C1'\n,\n'Merge cells'\n)\n        ->\noutput\n();"
  },
  {
    "input": "Example #1 example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$fileObject\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$file\n=\n$fileObject\n->\nfileName\n(\n'tutorial.xlsx'\n,\n'sheet_one'\n)\n    ->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([\n      [\n'viest'\n,\n23\n],\n      [\n'wjx'\n,\n23\n],\n    ]);\n\n$path\n=\n$file\n->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 setColumn example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$boldStyle\n=\n$format\n->\nbold\n()->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetColumn\n(\n'A:A'\n,\n200\n,\n$boldStyle\n)\n    ->\noutput\n();"
  },
  {
    "input": "Example #1 setRow example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$boldStyle\n=\n$format\n->\nbold\n()->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetRow\n(\n'A1'\n,\n20\n,\n$boldStyle\n)\n    ->\noutput\n();"
  },
  {
    "input": "Example #1 Align style example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$alignStyle\n=\n$format\n->\nalign\n(\n\\Vtiful\\Kernel\\Format\n::\nFORMAT_ALIGN_LEFT\n)->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetColumn\n(\n'A:A'\n,\n200\n,\n$alignStyle\n)\n    ->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 Bold style example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$boldStyle\n=\n$format\n->\nbold\n()->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetColumn\n(\n'A:A'\n,\n200\n,\n$boldStyle\n)\n    ->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 Italic style example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$italicStyle\n=\n$format\n->\nitalic\n()->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetColumn\n(\n'A:A'\n,\n200\n,\n$italicStyle\n)\n    ->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 Underline style example",
    "output": "<?php\n$config\n= [\n\n'path'\n=>\n'./tests'\n];\n$excel\n= new\n\\Vtiful\\Kernel\\Excel\n(\n$config\n);\n$excel\n->\nfileName\n(\n'tutorial01.xlsx'\n);\n$format\n= new\n\\Vtiful\\Kernel\\Format\n(\n$excel\n->\ngetHandle\n());\n$underlineStyle\n=\n$format\n->\nunderline\n(\n\\Vtiful\\Kernel\\Format\n::\nUNDERLINE_SINGLE\n)->\ntoResource\n();\n$excel\n->\nheader\n([\n'name'\n,\n'age'\n])\n    ->\ndata\n([[\n'viest'\n,\n21\n]])\n    ->\nsetColumn\n(\n'A:A'\n,\n200\n,\n$underlineStyle\n)\n    ->\noutput\n();\n?>"
  },
  {
    "input": "Example #1 Incorrect requests",
    "output": "<?php\n// Request to create symlink of $filename to $link\neio_symlink\n(\n$filename\n,\n$link\n);\n// Request to move $filename to $new_filename\neio_rename\n(\n$filename\n,\n$new_filename\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #2 Calling request from a request callback",
    "output": "<?php\nfunction\nmy_symlink_done\n(\n$filename\n,\n$result\n) {\n\n// Request to move $filename to $new_filename\n\neio_rename\n(\n$filename\n,\n\"/path/to/new-name\"\n);\n\n// Process requests\n\neio_event_loop\n();\n}\n// Request to create symlink of $filename to $link\neio_symlink\n(\n$filename\n,\n$link\n,\nEIO_PRI_DEFAULT\n,\n\"my_symlink_done\"\n,\n$filename\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #3 Calling request from a request callback",
    "output": "<?php\n/* Is called when the group requests are done */\nfunction\nmy_grp_done\n(\n$data\n,\n$result\n) {\n\n// ...\n}\nfunction\nmy_symlink_done\n(\n$filename\n,\n$result\n) {\n\n// Create eio_rename request and add it to the group\n\n$req\n=\neio_rename\n(\n$filename\n,\n\"/path/to/new-name\"\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n\n// You might want to add more requests...\n}\n// Create a request group\n$grp\n=\neio_grp\n(\n\"my_grp_done\"\n,\n\"my_grp_data\"\n);\n// Create eio_symlink request and add it to the group\n// Pass $filename to the callback\n$req\n=\neio_symlink\n(\n$filename\n,\n$link\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_symlink_done\"\n,\n$filename\n);\neio_grp_add\n(\n$grp\n,\n$req\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #4 Using eio with libevent",
    "output": "<?php\nfunction\nmy_eio_poll\n(\n$fd\n,\n$events\n,\n$arg\n) {\n\n/* Some libevent regulation might go here .. */\n\nif (\neio_nreqs\n()) {\n\neio_poll\n();\n    }\n\n/* .. and here */\n}\nfunction\nmy_res_cb\n(\n$d\n,\n$r\n) {\n\nvar_dump\n(\n$r\n);\nvar_dump\n(\n$d\n);\n}\n$base\n=\nevent_base_new\n();\n$event\n=\nevent_new\n();\n// This stream is used to bind with libevent\n$fd\n=\neio_get_event_stream\n();\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"nop data\"\n);\neio_mkdir\n(\n\"/tmp/abc-eio-temp\"\n,\n0750\n,\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"mkdir data\"\n);\n/* some other eio_* calls here ... */\n// set event flags\nevent_set\n(\n$event\n,\n$fd\n,\nEV_READ\n/*| EV_PERSIST*/\n,\n\"my_eio_poll\"\n, array(\n$event\n,\n$base\n));\n// set event base\nevent_base_set\n(\n$event\n,\n$base\n);\n// enable event\nevent_add\n(\n$event\n);\n// start event loop\nevent_base_loop\n(\n$base\n);\n/* The same will be available via buffered libevent interface */\n?>"
  },
  {
    "input": "Example #1 Cancelling a request",
    "output": "<?php\n\n/* Is called when eio_nop() finished */\n\nfunction\nmy_nop_cb\n(\n$data\n,\n$result\n) {\n  echo\n\"my_nop \"\n,\n$data\n,\n\"\\n\"\n;\n }\n// This eio_nop() call will be cancelled\n$req\n=\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"1\"\n);\nvar_dump\n(\n$req\n);\neio_cancel\n(\n$req\n);\n// This time eio_nop() will be processed\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"2\"\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #2 Calling eio_chmod()",
    "output": "<?php\n$temp_filename\n=\ndirname\n(\n__FILE__\n) .\n\"/eio-temp-file.tmp\"\n;\ntouch\n(\n$temp_filename\n);\n/* Is called when eio_chmod() finished */\nfunction\nmy_chmod_callback\n(\n$data\n,\n$result\n) {\n    global\n$temp_filename\n;\n    if (\n$result\n==\n0\n&& !\nis_readable\n(\n$temp_filename\n) &&\nis_writable\n(\n$temp_filename\n)) {\n        echo\n\"eio_chmod_ok\"\n;\n    }\n    @\nunlink\n(\n$temp_filename\n);\n}\neio_chmod\n(\n$temp_filename\n,\n0200\n,\nEIO_PRI_DEFAULT\n,\n\"my_chmod_callback\"\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #3 Making a custom request",
    "output": "<?php\n/* Callback for the custom callback */\nfunction\nmy_custom_callback\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\ncount\n(\n$result\n));\n\nvar_dump\n(\n$result\n[\n'data_modified'\n]);\n\nvar_dump\n(\n$result\n[\n'result'\n]);\n}\n/* The custom request */\nfunction\nmy_custom\n(\n$data\n) {\n\nvar_dump\n(\n$data\n);\n\n$result\n= array(\n\n'result'\n=>\n1001\n,\n\n'data_modified'\n=>\n\"my custom data\"\n,\n    );\n    return\n$result\n;\n}\n$data\n=\n\"my_custom_data\"\n;\n$req\n=\neio_custom\n(\n\"my_custom\"\n,\nEIO_PRI_DEFAULT\n,\n\"my_custom_callback\"\n,\n$data\n);\nvar_dump\n(\n$req\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #4 Grouping requests",
    "output": "<?php\n/*\n * Create a group request to open, read and close a file\n */\n$temp_filename\n=\ndirname\n(\n__FILE__\n) .\n\"/eio-file.tmp\"\n;\n$fp\n=\nfopen\n(\n$temp_filename\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n\"some data\"\n);\nfclose\n(\n$fp\n);\n/* Is called when the group requests are done */\nfunction\nmy_grp_done\n(\n$data\n,\n$result\n) {\n global\n$temp_filename\n;\n\nvar_dump\n(\n$result\n==\n0\n);\n @\nunlink\n(\n$temp_filename\n);\n}\n/* Is called when eio_open() done */\nfunction\nmy_grp_file_opened_callback\n(\n$data\n,\n$result\n) {\n global\n$my_file_fd\n,\n$grp\n;\n\n$my_file_fd\n=\n$result\n;\n\nvar_dump\n(\n$result\n>\n0\n);\n\n// Create eio_read() request and add it to the group\n\n$req\n=\neio_read\n(\n$my_file_fd\n,\n4\n,\n0\n,\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_read_callback\"\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n/* Is called when eio_read() done */\nfunction\nmy_grp_file_read_callback\n(\n$data\n,\n$result\n) {\n global\n$my_file_fd\n,\n$grp\n;\n\nvar_dump\n(\n$result\n);\n\n// Create eio_close() request and add it to the group\n\n$req\n=\neio_close\n(\n$my_file_fd\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n$grp\n=\neio_grp\n(\n\"my_grp_done\"\n,\n\"my_grp_data\"\n);\n// Create eio_open() request and add it to the group\n$req\n=\neio_open\n(\n$temp_filename\n,\nEIO_O_RDWR\n|\nEIO_O_APPEND\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_opened_callback\"\n,\nNULL\n);\neio_grp_add\n(\n$grp\n,\n$req\n);\nvar_dump\n(\n$grp\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #5 Using eio with libevent extension",
    "output": "<?php\nfunction\nmy_eio_poll\n(\n$fd\n,\n$events\n,\n$arg\n) {\n\n/* Some libevent regulation might go here .. */\n\nif (\neio_nreqs\n()) {\n\neio_poll\n();\n    }\n\n/* .. and here */\n}\nfunction\nmy_nop_cb\n(\n$d\n,\n$r\n) {\n\nvar_dump\n(\n$r\n);\nvar_dump\n(\n$d\n);\n}\n$base\n=\nevent_base_new\n();\n$event\n=\nevent_new\n();\n$fd\n=\neio_get_event_stream\n();\nvar_dump\n(\n$fd\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"nop data\"\n);\neio_mkdir\n(\n\"/tmp/abc-eio-temp\"\n,\n0750\n,\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"nop data\"\n);\n/* some other eio_* calls here ... */\n// set event flags\nevent_set\n(\n$event\n,\n$fd\n,\nEV_READ\n/*| EV_PERSIST*/\n,\n\"my_eio_poll\"\n, array(\n$event\n,\n$base\n));\n// set event base\nevent_base_set\n(\n$event\n,\n$base\n);\n// enable event\nevent_add\n(\n$event\n);\n// start event loop\nevent_base_loop\n(\n$base\n);\n/* The same will be available via buffered libevent interface */\n?>"
  },
  {
    "input": "Example #6 Using eio with event extension",
    "output": "<?php\n$base\n= new\nEventBase\n();\n// Retrieve eio polling stream.\n// Note, this variable should be alive as long as the event loop is running.\n$eio_stream\n=\neio_get_event_stream\n();\n// Bind eio polling stream to the event loop.\n$poll_event\n= new\nEvent\n(\n$base\n,\n$eio_stream\n,\nEvent\n::\nREAD\n, function () {\n  if (\neio_nreqs\n()) {\n\neio_poll\n();\n  }\n});\n$poll_event\n->\nadd\n();\n// Add eio jobs\neio_nop\n(\nEIO_PRI_DEFAULT\n, function () {\n  echo\n\"eio_nop\\n\"\n;\n});\n// Add events\n$timer\n=\nEvent\n::\ntimer\n(\n$base\n, function () {\n  echo\n\"2 seconds elapsed\\n\"\n;\n});\n$timer\n->\nadd\n(\n2\n);\n// Dispatch events.\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 eio_cancel() example",
    "output": "<?php\n\n/* Is called when eio_nop() finished */\n\nfunction\nmy_nop_cb\n(\n$data\n,\n$result\n) {\n  echo\n\"my_nop \"\n,\n$data\n,\n\"\\n\"\n;\n }\n// This eio_nop() call will be cancelled\n$req\n=\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"1\"\n);\nvar_dump\n(\n$req\n);\neio_cancel\n(\n$req\n);\n// This time eio_nop() will be processed\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n,\n\"2\"\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_custom() example",
    "output": "<?php\n/* Callback for the custom callback */\nfunction\nmy_custom_callback\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\ncount\n(\n$result\n));\n\nvar_dump\n(\n$result\n[\n'data_modified'\n]);\n\nvar_dump\n(\n$result\n[\n'result'\n]);\n}\n/* The custom request */\nfunction\nmy_custom\n(\n$data\n) {\n\nvar_dump\n(\n$data\n);\n\n$result\n= array(\n\n'result'\n=>\n1001\n,\n\n'data_modified'\n=>\n\"my custom data\"\n,\n    );\n    return\n$result\n;\n}\n$data\n=\n\"my_custom_data\"\n;\n$req\n=\neio_custom\n(\n\"my_custom\"\n,\nEIO_PRI_DEFAULT\n,\n\"my_custom_callback\"\n,\n$data\n);\nvar_dump\n(\n$req\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_event_loop() example",
    "output": "<?php\n$temp_filename\n=\n\"eio-temp-file.tmp\"\n;\ntouch\n(\n$temp_filename\n);\n/* Is called when eio_chmod() finished */\nfunction\nmy_chmod_callback\n(\n$data\n,\n$result\n) {\n    global\n$temp_filename\n;\n    if (\n$result\n==\n0\n&& !\nis_readable\n(\n$temp_filename\n) &&\nis_writable\n(\n$temp_filename\n)) {\n        echo\n\"eio_chmod_ok\"\n;\n    }\n    @\nunlink\n(\n$temp_filename\n);\n}\neio_chmod\n(\n$temp_filename\n,\n0200\n,\nEIO_PRI_DEFAULT\n,\n\"my_chmod_callback\"\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_lstat() example",
    "output": "<?php\n// Create temporary file\n$tmp_filename\n=\ndirname\n(\n__FILE__\n) .\n\"/eio-file.tmp\"\n;\ntouch\n(\n$tmp_filename\n);\n/* Is called when eio_fstat() done */\nfunction\nmy_res_cb\n(\n$data\n,\n$result\n) {\n\n// Should output array with stat info\n\nvar_dump\n(\n$result\n);\n if (\n$data\n[\n'fd'\n]) {\n\n// Close temporary file\n\neio_close\n(\n$data\n[\n'fd'\n]);\n\neio_event_loop\n();\n }\n\n// Remove temporary file\n\n@\nunlink\n(\n$data\n[\n'file'\n]);\n}\n/* Is called when eio_open() done */\nfunction\nmy_open_cb\n(\n$data\n,\n$result\n) {\n\n// Prepare data for callback\n\n$d\n= array(\n\n'fd'\n=>\n$result\n,\n\n'file'\n=>\n$data\n\n);\n\n// Request stat info\n\neio_fstat\n(\n$result\n,\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n$d\n);\n\n// Process request(s)\n\neio_event_loop\n();\n}\n// Open temporary file\neio_open\n(\n$tmp_filename\n,\nEIO_O_RDONLY\n,\nNULL\n,\nEIO_PRI_DEFAULT\n,\n\n\"my_open_cb\"\n,\n$tmp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 Using eio with libevent",
    "output": "<?php\nfunction\nmy_eio_poll\n(\n$fd\n,\n$events\n,\n$arg\n) {\n\n/* Some libevent regulation might go here .. */\n\nif (\neio_nreqs\n()) {\n\neio_poll\n();\n    }\n\n/* .. and here */\n}\nfunction\nmy_res_cb\n(\n$d\n,\n$r\n) {\n\nvar_dump\n(\n$r\n);\nvar_dump\n(\n$d\n);\n}\n$base\n=\nevent_base_new\n();\n$event\n=\nevent_new\n();\n$fd\n=\neio_get_event_stream\n();\nvar_dump\n(\n$fd\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"nop data\"\n);\neio_mkdir\n(\n\"/tmp/abc-eio-temp\"\n,\n0750\n,\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"mkdir data\"\n);\n/* some other eio_* calls here ... */\n// set event flags\nevent_set\n(\n$event\n,\n$fd\n,\nEV_READ\n/*| EV_PERSIST*/\n,\n\"my_eio_poll\"\n, array(\n$event\n,\n$base\n));\n// set event base\nevent_base_set\n(\n$event\n,\n$base\n);\n// enable event\nevent_add\n(\n$event\n);\n// start event loop\nevent_base_loop\n(\n$base\n);\n/* The same will be available via buffered libevent interface */\n?>"
  },
  {
    "input": "Example #1 eio_grp() example",
    "output": "<?php\n$temp_filename\n=\ndirname\n(\n__FILE__\n) .\n\"/eio-file.tmp\"\n;\n$fp\n=\nfopen\n(\n$temp_filename\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n\"some data\"\n);\nfclose\n(\n$fp\n);\n$my_file_fd\n=\nNULL\n;\n/* Is called when the group requests are done */\nfunction\nmy_grp_done\n(\n$data\n,\n$result\n) {\n\n// Remove the file, if it still exists\n\n@\nunlink\n(\n$data\n);\n}\n/* Is called when the temporary file is opened */\nfunction\nmy_grp_file_opened_callback\n(\n$data\n,\n$result\n) {\n global\n$my_file_fd\n,\n$grp\n;\n\n$my_file_fd\n=\n$result\n;\n\n$req\n=\neio_read\n(\n$my_file_fd\n,\n4\n,\n0\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_read_callback\"\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n/* Is called when the file is read */\nfunction\nmy_grp_file_read_callback\n(\n$data\n,\n$result\n) {\n global\n$my_file_fd\n,\n$grp\n;\n\nvar_dump\n(\n$result\n);\n\n// Create request to close the file\n\n$req\n=\neio_close\n(\n$my_file_fd\n);\n\n// Add request to the group\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n// Create request group\n$grp\n=\neio_grp\n(\n\"my_grp_done\"\n,\n$temp_filename\n);\n// Create request\n$req\n=\neio_open\n(\n$temp_filename\n,\nEIO_O_RDWR\n|\nEIO_O_APPEND\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_opened_callback\"\n,\nNULL\n);\n// Add request to the group\neio_grp_add\n(\n$grp\n,\n$req\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 Grouping requests",
    "output": "<?php\n/*\n * Create a group request to open, read and close a file\n */\n// Create temporary file and write some bytes to it\n$temp_filename\n=\ndirname\n(\n__FILE__\n) .\n\"/eio-file.tmp\"\n;\n$fp\n=\nfopen\n(\n$temp_filename\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n\"some data\"\n);\nfclose\n(\n$fp\n);\n/* Is called when the group requests are done */\nfunction\nmy_grp_done\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$result\n==\n0\n);\n @\nunlink\n(\n$data\n);\n}\n/* Is called when eio_open() done */\nfunction\nmy_grp_file_opened_callback\n(\n$data\n,\n$result\n) {\n global\n$grp\n;\n\n// $result should contain the file descriptor\n\nvar_dump\n(\n$result\n>\n0\n);\n\n// Create eio_read() request and add it to the group\n // Pass file descriptor to the callback\n\n$req\n=\neio_read\n(\n$result\n,\n4\n,\n0\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_read_callback\"\n,\n$result\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n/* Is called when eio_read() done */\nfunction\nmy_grp_file_read_callback\n(\n$data\n,\n$result\n) {\n global\n$grp\n;\n\n// Read bytes\n\nvar_dump\n(\n$result\n);\n\n// Create eio_close() request and add it to the group\n // $data should contain the file descriptor\n\n$req\n=\neio_close\n(\n$data\n);\n\neio_grp_add\n(\n$grp\n,\n$req\n);\n}\n// Create request group\n$grp\n=\neio_grp\n(\n\"my_grp_done\"\n,\n$temp_filename\n);\nvar_dump\n(\n$grp\n);\n// Create eio_open() request and add it to the group\n$req\n=\neio_open\n(\n$temp_filename\n,\nEIO_O_RDWR\n|\nEIO_O_APPEND\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_grp_file_opened_callback\"\n,\nNULL\n);\neio_grp_add\n(\n$grp\n,\n$req\n);\n// Process requests\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_link() example",
    "output": "<?php\n$filename\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.dat\"\n;\ntouch\n(\n$filename\n);\n$link\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.link\"\n;\n$hardlink\n=\ndirname\n(\n__FILE__\n).\n\"/hardlink.link\"\n;\nfunction\nmy_hardlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$link\n,\n$filename\n;\n\nvar_dump\n(\nfile_exists\n(\n$data\n) && !\nis_link\n(\n$data\n));\n    @\nunlink\n(\n$data\n);\n\neio_symlink\n(\n$filename\n,\n$link\n,\nEIO_PRI_DEFAULT\n,\n\"my_symlink_cb\"\n,\n$link\n);\n}\nfunction\nmy_symlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$link\n,\n$filename\n;\n\nvar_dump\n(\nfile_exists\n(\n$data\n) &&\nis_link\n(\n$data\n));\n    if (!\neio_readlink\n(\n$data\n,\nEIO_PRI_DEFAULT\n,\n\"my_readlink_cb\"\n,\nNULL\n)) {\n        @\nunlink\n(\n$link\n);\n        @\nunlink\n(\n$filename\n);\n    }\n}\nfunction\nmy_readlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$filename\n,\n$link\n;\n\nvar_dump\n(\n$result\n);\n    @\nunlink\n(\n$link\n);\n    @\nunlink\n(\n$filename\n);\n}\neio_link\n(\n$filename\n,\n$hardlink\n,\nEIO_PRI_DEFAULT\n,\n\"my_hardlink_cb\"\n,\n$hardlink\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_lstat() example",
    "output": "<?php\n$tmp_filename\n=\ndirname\n(\n__FILE__\n).\n\"/eio-file.tmp\"\n;\ntouch\n(\n$tmp_filename\n);\nfunction\nmy_res_cb\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\n$result\n);\n}\nfunction\nmy_open_cb\n(\n$data\n,\n$result\n) {\n\neio_close\n(\n$result\n);\n\neio_event_loop\n();\n    @\nunlink\n(\n$data\n);\n}\neio_lstat\n(\n$tmp_filename\n,\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"eio_lstat\"\n);\neio_open\n(\n$tmp_filename\n,\nEIO_O_RDONLY\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_open_cb\"\n,\n$tmp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_mkdir() example",
    "output": "<?php\n$temp_dirname\n=\n\"eio-temp-dir\"\n;\n/* Is called when eio_mkdir() finishes */\nfunction\nmy_mkdir_callback\n(\n$data\n,\n$result\n) {\n if (\n$result\n==\n0\n&&\nis_dir\n(\n$temp_dirname\n)\n   && !\nis_readable\n(\n$temp_dirname\n)\n   &&\nis_writable\n(\n$temp_dirname\n)) {\n  echo\n\"eio_mkdir_ok\"\n;\n }\n\n// Remove directory\n\nif (\nfile_exists\n(\n$data\n))\n\nrmdir\n(\n$temp_dirname\n);\n}\n// Create directory with access mode 0300\neio_mkdir\n(\n$temp_dirname\n,\n0300\n,\nEIO_PRI_DEFAULT\n,\n\"my_mkdir_callback\"\n,\n$temp_dirname\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_mknod() example",
    "output": "<?php\n// FIFO name\n$temp_filename\n=\n\"/tmp/eio-temp-fifo\"\n;\n/* Is called when eio_mknod() finishes */\nfunction\nmy_mknod_callback\n(\n$data\n,\n$result\n) {\n\n$s\n=\nstat\n(\n$data\n);\n\nvar_dump\n(\n$s\n);\n    if (\n$result\n==\n0\n) {\n        echo\n\"eio_mknod_ok\"\n;\n    }\n    @\nunlink\n(\n$data\n);\n}\neio_mknod\n(\n$temp_filename\n,\nEIO_S_IFIFO\n,\n0\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_mknod_callback\"\n,\n$temp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_nreqs() example",
    "output": "<?php\nfunction\nres_cb\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\n$result\n);\n}\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"1\"\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"2\"\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"3\"\n);\nwhile (\neio_nreqs\n()) {\n\neio_poll\n();\n}\n?>"
  },
  {
    "input": "Example #1 eio_open() example",
    "output": "<?php\n$temp_filename\n=\n\"eio-temp-file.tmp\"\n;\n/* Is called when eio_close() finishes */\nfunction\nmy_close_cb\n(\n$data\n,\n$result\n) {\n\n// Zero indicates success\n\nvar_dump\n(\n$result\n==\n0\n);\n @\nunlink\n(\n$data\n);\n}\n/* Is called when eio_open() finishes */\nfunction\nmy_file_opened_callback\n(\n$data\n,\n$result\n) {\n\n// $result should contain the file descriptor\n\nvar_dump\n(\n$result\n>\n0\n);\n    if (\n$result\n>\n0\n) {\n\n// Close the file\n\neio_close\n(\n$result\n,\nEIO_PRI_DEFAULT\n,\n\"my_close_cb\"\n,\n$data\n);\n\neio_event_loop\n();\n    }\n}\n// Create new file for reading and writing\n// Deny group and others to do anything with that file\neio_open\n(\n$temp_filename\n,\nEIO_O_CREAT\n|\nEIO_O_RDWR\n,\nEIO_S_IRUSR\n|\nEIO_S_IWUSR\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_file_opened_callback\"\n,\n$temp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_poll() example",
    "output": "<?php\nfunction\nres_cb\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\n$result\n);\n}\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"1\"\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"2\"\n);\neio_nop\n(\nEIO_PRI_DEFAULT\n,\n\"res_cb\"\n,\n\"3\"\n);\nwhile (\neio_nreqs\n()) {\n\n// Some specific IPC or so\n\neio_poll\n();\n}\n?>"
  },
  {
    "input": "Example #1 eio_read() example",
    "output": "<?php\n// Open a temporary file and write some bytes there\n$temp_filename\n=\n\"eio-temp-file.tmp\"\n;\n$fp\n=\nfopen\n(\n$temp_filename\n,\n\"w\"\n);\nfwrite\n(\n$fp\n,\n\"1234567890\"\n);\nfclose\n(\n$fp\n);\n/* Is called when eio_read() is done */\nfunction\nmy_read_cb\n(\n$data\n,\n$result\n) {\n    global\n$temp_filename\n;\n\n// Output read bytes\n\nvar_dump\n(\n$result\n);\n\n// Close file\n\neio_close\n(\n$data\n);\n\neio_event_loop\n();\n\n// Remove temporary file\n\n@\nunlink\n(\n$temp_filename\n);\n}\n/* Is called when eio_open() is done */\nfunction\nmy_file_opened_callback\n(\n$data\n,\n$result\n) {\n\n// $result should contain the file descriptor\n\nif (\n$result\n>\n0\n) {\n\n// Read 5 bytes starting from third\n\neio_read\n(\n$result\n,\n5\n,\n2\n,\nEIO_PRI_DEFAULT\n,\n\"my_read_cb\"\n,\n$result\n);\n\neio_event_loop\n();\n    } else {\n\n// eio_open() failed\n\nunlink\n(\n$data\n);\n    }\n}\n// Open the file for reading and writing\neio_open\n(\n$temp_filename\n,\nEIO_O_RDWR\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_file_opened_callback\"\n,\n$temp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_readdir() example",
    "output": "<?php\n/* Is called when eio_readdir() finishes */\nfunction\nmy_readdir_callback\n(\n$data\n,\n$result\n) {\n    echo\n__FUNCTION__\n,\n\" called\\n\"\n;\n    echo\n\"data: \"\n;\nvar_dump\n(\n$data\n);\n    echo\n\"result: \"\n;\nvar_dump\n(\n$result\n);\n    echo\n\"\\n\"\n;\n}\neio_readdir\n(\n\"/var/spool/news\"\n,\nEIO_READDIR_STAT_ORDER\n|\nEIO_READDIR_DIRS_FIRST\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_readdir_callback\"\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_readlink() example",
    "output": "<?php\n$filename\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.dat\"\n;\ntouch\n(\n$filename\n);\n$link\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.link\"\n;\n$hardlink\n=\ndirname\n(\n__FILE__\n).\n\"/hardlink.link\"\n;\nfunction\nmy_hardlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$link\n,\n$filename\n;\n\nvar_dump\n(\nfile_exists\n(\n$data\n) && !\nis_link\n(\n$data\n));\n    @\nunlink\n(\n$data\n);\n\neio_symlink\n(\n$filename\n,\n$link\n,\nEIO_PRI_DEFAULT\n,\n\"my_symlink_cb\"\n,\n$link\n);\n}\nfunction\nmy_symlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$link\n,\n$filename\n;\n\nvar_dump\n(\nfile_exists\n(\n$data\n) &&\nis_link\n(\n$data\n));\n    if (!\neio_readlink\n(\n$data\n,\nEIO_PRI_DEFAULT\n,\n\"my_readlink_cb\"\n,\nNULL\n)) {\n        @\nunlink\n(\n$link\n);\n        @\nunlink\n(\n$filename\n);\n    }\n}\nfunction\nmy_readlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$filename\n,\n$link\n;\n\nvar_dump\n(\n$result\n);\n    @\nunlink\n(\n$link\n);\n    @\nunlink\n(\n$filename\n);\n}\neio_link\n(\n$filename\n,\n$hardlink\n,\nEIO_PRI_DEFAULT\n,\n\"my_hardlink_cb\"\n,\n$hardlink\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_realpath() example",
    "output": "<?php\nvar_dump\n(\ngetcwd\n());\nfunction\nmy_realpath_allback\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$result\n);\n}\neio_realpath\n(\n\"../\"\n,\nEIO_PRI_DEFAULT\n,\n\"my_realpath_allback\"\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_rename() example",
    "output": "<?php\n$filename\n=\ndirname\n(\n__FILE__\n).\n\"/eio-temp-file.dat\"\n;\ntouch\n(\n$filename\n);\n$new_filename\n=\ndirname\n(\n__FILE__\n).\n\"/eio-temp-file-new.dat\"\n;\nfunction\nmy_rename_cb\n(\n$data\n,\n$result\n) {\n    global\n$filename\n,\n$new_filename\n;\n    if (\n$result\n==\n0\n&& !\nfile_exists\n(\n$filename\n) &&\nfile_exists\n(\n$new_filename\n)) {\n        @\nunlink\n(\n$new_filename\n);\n        echo\n\"eio_rename_ok\"\n;\n    } else {\n        @\nunlink\n(\n$filename\n);\n    }\n}\neio_rename\n(\n$filename\n,\n$new_filename\n,\nEIO_PRI_DEFAULT\n,\n\"my_rename_cb\"\n,\n$filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_rmdir() example",
    "output": "<?php\n$temp_dirname\n=\n\"eio-temp-dir\"\n;\nmkdir\n(\n$temp_dirname\n);\nfunction\nmy_rmdir_callback\n(\n$data\n,\n$result\n) {\n    if (\n$result\n==\n0\n&& !\nfile_exists\n(\n$data\n)) {\n        echo\n\"eio_rmdir_ok\"\n;\n    } else if (\nfile_exists\n(\n$data\n)) {\n\nrmdir\n(\n$data\n);\n    }\n}\neio_rmdir\n(\n$temp_dirname\n,\nEIO_PRI_DEFAULT\n,\n\"my_rmdir_callback\"\n,\n$temp_dirname\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_stat() example",
    "output": "<?php\n$tmp_filename\n=\n\"eio-file.tmp\"\n;\ntouch\n(\n$tmp_filename\n);\nfunction\nmy_res_cb\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\n$result\n);\n}\nfunction\nmy_open_cb\n(\n$data\n,\n$result\n) {\n\neio_close\n(\n$result\n);\n\neio_event_loop\n();\n    @\nunlink\n(\n$data\n);\n}\neio_stat\n(\n$tmp_filename\n,\nEIO_PRI_DEFAULT\n,\n\"my_res_cb\"\n,\n\"eio_stat\"\n);\neio_open\n(\n$tmp_filename\n,\nEIO_O_RDONLY\n,\nNULL\n,\n\nEIO_PRI_DEFAULT\n,\n\"my_open_cb\"\n,\n$tmp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_statvfs() example",
    "output": "<?php\n$tmp_filename\n=\n'/tmp/eio-file.tmp'\n;\ntouch\n(\n$tmp_filename\n);\nfunction\nmy_statvfs_callback\n(\n$data\n,\n$result\n) {\n\nvar_dump\n(\n$data\n);\n\nvar_dump\n(\n$result\n);\n @\nunlink\n(\n$data\n);\n}\neio_statvfs\n(\n$tmp_filename\n,\nEIO_PRI_DEFAULT\n,\n\"my_statvfs_callback\"\n,\n$tmp_filename\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 eio_symlink() example",
    "output": "<?php\n$filename\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.dat\"\n;\ntouch\n(\n$filename\n);\n$link\n=\ndirname\n(\n__FILE__\n).\n\"/symlink.link\"\n;\nfunction\nmy_symlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$link\n,\n$filename\n;\n\nvar_dump\n(\nfile_exists\n(\n$data\n) &&\nis_link\n(\n$data\n));\n    if (!\neio_readlink\n(\n$data\n,\nEIO_PRI_DEFAULT\n,\n\"my_readlink_cb\"\n,\nNULL\n)) {\n        @\nunlink\n(\n$link\n);\n        @\nunlink\n(\n$filename\n);\n    }\n}\nfunction\nmy_readlink_cb\n(\n$data\n,\n$result\n) {\n    global\n$filename\n,\n$link\n;\n\nvar_dump\n(\n$result\n);\n    @\nunlink\n(\n$link\n);\n    @\nunlink\n(\n$filename\n);\n}\neio_symlink\n(\n$filename\n,\n$link\n,\nEIO_PRI_DEFAULT\n,\n\"my_symlink_cb\"\n,\n$link\n);\neio_event_loop\n();\n?>"
  },
  {
    "input": "Example #1 Simple timers",
    "output": "<?php\n// Create and start timer firing after 2 seconds\n$w1\n= new\nEvTimer\n(\n2\n,\n0\n, function () {\n    echo\n\"2 seconds elapsed\\n\"\n;\n});\n// Create and launch timer firing after 2 seconds repeating each second\n// until we manually stop it\n$w2\n= new\nEvTimer\n(\n2\n,\n1\n, function (\n$w\n) {\n    echo\n\"is called every second, is launched after 2 seconds\\n\"\n;\n    echo\n\"iteration = \"\n,\nEv\n::\niteration\n(),\nPHP_EOL\n;\n\n// Stop the watcher after 5 iterations\n\nEv\n::\niteration\n() ==\n5\nand\n$w\n->\nstop\n();\n\n// Stop the watcher if further calls cause more than 10 iterations\n\nEv\n::\niteration\n() >=\n10\nand\n$w\n->\nstop\n();\n});\n// Create stopped timer. It will be inactive until we start it ourselves\n$w_stopped\n=\nEvTimer\n::\ncreateStopped\n(\n10\n,\n5\n, function(\n$w\n) {\n    echo\n\"Callback of a timer created as stopped\\n\"\n;\n\n// Stop the watcher after 2 iterations\n\nEv\n::\niteration\n() >=\n2\nand\n$w\n->\nstop\n();\n});\n// Loop until Ev::stop() is called or all of watchers stop\nEv\n::\nrun\n();\n// Start and look if it works\n$w_stopped\n->\nstart\n();\necho\n\"Run single iteration\\n\"\n;\nEv\n::\nrun\n(\nEv\n::\nRUN_ONCE\n);\necho\n\"Restart the second watcher and try to handle the same events, but don't block\\n\"\n;\n$w2\n->\nagain\n();\nEv\n::\nrun\n(\nEv\n::\nRUN_NOWAIT\n);\n$w\n= new\nEvTimer\n(\n10\n,\n0\n, function() {});\necho\n\"Running a blocking loop\\n\"\n;\nEv\n::\nrun\n();\necho\n\"END\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Periodic timer. Tick each 10.5 seconds",
    "output": "<?php\n$w\n= new\nEvPeriodic\n(\n0.\n,\n10.5\n,\nNULL\n, function (\n$w\n,\n$revents\n) {\n    echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #3 Periodic timer. Use reschedule callback",
    "output": "<?php\n// Tick each 10.5 seconds\nfunction\nreschedule_cb\n(\n$watcher\n,\n$now\n) {\n    return\n$now\n+ (\n10.5\n. -\nfmod\n(\n$now\n,\n10.5\n));\n}\n$w\n= new\nEvPeriodic\n(\n0.\n,\n0.\n,\n\"reschedule_cb\"\n, function (\n$w\n,\n$revents\n) {\n    echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #4 Periodic timer. Tick every 10.5 seconds starting at now",
    "output": "<?php\n// Tick every 10.5 seconds starting at now\n$w\n= new\nEvPeriodic\n(\nfmod\n(\nEv\n::\nnow\n(),\n10.5\n),\n10.5\n,\nNULL\n, function (\n$w\n,\n$revents\n) {\n    echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #5 Wait until STDIN is readable",
    "output": "<?php\n// Wait until STDIN is readable\n$w\n= new\nEvIo\n(\nSTDIN\n,\nEv\n::\nREAD\n, function (\n$watcher\n,\n$revents\n) {\n    echo\n\"STDIN is readable\\n\"\n;\n});\nEv\n::\nrun\n(\nEv\n::\nRUN_ONCE\n);\n?>"
  },
  {
    "input": "Example #6 Use some async I/O to access a socket",
    "output": "<?php\n/* Use some async I/O to access a socket */\n// `sockets' extension still logs warnings\n// for EINPROGRESS, EAGAIN/EWOULDBLOCK etc.\nerror_reporting\n(\nE_ERROR\n);\n$e_nonblocking\n= array (\n/*EAGAIN or EWOULDBLOCK*/\n11\n,\n/*EINPROGRESS*/\n115\n);\n// Get the port for the WWW service\n$service_port\n=\ngetservbyname\n(\n'www'\n,\n'tcp'\n);\n// Get the IP address for the target host\n$address\n=\ngethostbyname\n(\n'google.co.uk'\n);\n// Create a TCP/IP socket\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (\n$socket\n===\nFALSE\n) {\n    echo\n\"socket_create() failed: reason: \"\n\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\n\"\\n\"\n;\n}\n// Set O_NONBLOCK flag\nsocket_set_nonblock\n(\n$socket\n);\n// Abort on timeout\n$timeout_watcher\n= new\nEvTimer\n(\n10.0\n,\n0.\n, function () use (\n$socket\n) {\n\nsocket_close\n(\n$socket\n);\n\nEv\n::\nstop\n(\nEv\n::\nBREAK_ALL\n);\n});\n// Make HEAD request when the socket is writable\n$write_watcher\n= new\nEvIo\n(\n$socket\n,\nEv\n::\nWRITE\n, function (\n$w\n)\n    use (\n$socket\n,\n$timeout_watcher\n,\n$e_nonblocking\n)\n{\n\n// Stop timeout watcher\n\n$timeout_watcher\n->\nstop\n();\n\n// Stop write watcher\n\n$w\n->\nstop\n();\n\n$in\n=\n\"HEAD / HTTP/1.1\\r\\n\"\n;\n\n$in\n.=\n\"Host: google.co.uk\\r\\n\"\n;\n\n$in\n.=\n\"Connection: Close\\r\\n\\r\\n\"\n;\n    if (!\nsocket_write\n(\n$socket\n,\n$in\n,\nstrlen\n(\n$in\n))) {\n\ntrigger_error\n(\n\"Failed writing\n$in\n to socket\"\n,\nE_USER_ERROR\n);\n    }\n\n$read_watcher\n= new\nEvIo\n(\n$socket\n,\nEv\n::\nREAD\n, function (\n$w\n,\n$re\n)\n        use (\n$socket\n,\n$e_nonblocking\n)\n    {\n\n// Socket is readable. recv() 20 bytes using non-blocking mode\n\n$ret\n=\nsocket_recv\n(\n$socket\n,\n$out\n,\n20\n,\nMSG_DONTWAIT\n);\n        if (\n$ret\n) {\n            echo\n$out\n;\n        } elseif (\n$ret\n===\n0\n) {\n\n// All read\n\n$w\n->\nstop\n();\n\nsocket_close\n(\n$socket\n);\n            return;\n        }\n\n// Caught EINPROGRESS, EAGAIN, or EWOULDBLOCK\n\nif (\nin_array\n(\nsocket_last_error\n(),\n$e_nonblocking\n)) {\n            return;\n        }\n\n$w\n->\nstop\n();\n\nsocket_close\n(\n$socket\n);\n    });\n\nEv\n::\nrun\n();\n});\n$result\n=\nsocket_connect\n(\n$socket\n,\n$address\n,\n$service_port\n);\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #7 Embedding one loop into another",
    "output": "<?php\n/*\n* Try to get an embeddable event loop and embed it into the default event loop.\n* If it is impossible, use the default\n* loop. The default loop is stored in $loop_hi, while the embeddable loop is\n* stored in $loop_lo(which is $loop_hi in the case no embeddable loop can be\n* used).\n*\n* Sample translated to PHP\n* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n*/\n$loop_hi\n=\nEvLoop\n::\ndefaultLoop\n();\n$loop_lo\n=\nNULL\n;\n$embed\n=\nNULL\n;\n/*\n* See if there is a chance of getting one that works\n* (flags' value of 0 means autodetection)\n*/\n$loop_lo\n=\nEv\n::\nembeddableBackends\n() &\nEv\n::\nrecommendedBackends\n()\n    ? new\nEvLoop\n(\nEv\n::\nembeddableBackends\n() &\nEv\n::\nrecommendedBackends\n())\n    :\n0\n;\nif (\n$loop_lo\n) {\n\n$embed\n= new\nEvEmbed\n(\n$loop_lo\n, function () {});\n} else {\n\n$loop_lo\n=\n$loop_hi\n;\n}\n?>"
  },
  {
    "input": "Example #8 Embedding loop created with kqueue backend into the default loop",
    "output": "<?php\n/*\n* Check if kqueue is available but not recommended and create a kqueue backend\n* for use with sockets (which usually work with any kqueue implementation).\n* Store the kqueue/socket-only event loop in loop_socket. (One might optionally\n* use EVFLAG_NOENV, too)\n*\n* Example borrowed from\n* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n*/\n$loop\n=\nEvLoop\n::\ndefaultLoop\n();\n$socket_loop\n=\nNULL\n;\n$embed\n=\nNULL\n;\nif (\nEv\n::\nsupportedBackends\n() & ~\nEv\n::\nrecommendedBackends\n() &\nEv\n::\nBACKEND_KQUEUE\n) {\n    if ((\n$socket_loop\n= new\nEvLoop\n(\nEv\n::\nBACKEND_KQUEUE\n))) {\n\n$embed\n= new\nEvEmbed\n(\n$loop\n);\n    }\n}\nif (!\n$socket_loop\n) {\n\n$socket_loop\n=\n$loop\n;\n}\n// Now use $socket_loop for all sockets, and $loop for anything else\n?>"
  },
  {
    "input": "Example #9 Handle SIGTERM signal",
    "output": "<?php\n$w\n= new\nEvSignal\n(\nSIGTERM\n, function (\n$watcher\n) {\n    echo\n\"SIGTERM received\\n\"\n;\n\n$watcher\n->\nstop\n();\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #10 Monitor changes of /var/log/messages",
    "output": "<?php\n// Use 10 second update interval.\n$w\n= new\nEvStat\n(\n\"/var/log/messages\"\n,\n8\n, function (\n$w\n) {\n    echo\n\"/var/log/messages changed\\n\"\n;\n\n$attr\n=\n$w\n->\nattr\n();\n    if (\n$attr\n[\n'nlink'\n]) {\n\nprintf\n(\n\"Current size: %ld\\n\"\n,\n$attr\n[\n'size'\n]);\n\nprintf\n(\n\"Current atime: %ld\\n\"\n,\n$attr\n[\n'atime'\n]);\n\nprintf\n(\n\"Current mtime: %ld\\n\"\n,\n$attr\n[\n'mtime'\n]);\n    } else {\n\nfprintf\n(\nSTDERR\n,\n\"`messages` file is not there!\"\n);\n\n$w\n->\nstop\n();\n    }\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #11 Monotor changes of /var/log/messages. Avoid missing updates by means of one second delay",
    "output": "<?php\n$timer\n=\nEvTimer\n::\ncreateStopped\n(\n0.\n,\n1.02\n, function (\n$w\n) {\n\n$w\n->\nstop\n();\n\n$stat\n=\n$w\n->\ndata\n;\n\n// 1 second after the most recent change of the file\n\nprintf\n(\n\"Current size: %ld\\n\"\n,\n$stat\n->\nattr\n()[\n'size'\n]);\n});\n$stat\n= new\nEvStat\n(\n\"/var/log/messages\"\n,\n0.\n, function () use (\n$timer\n) {\n\n// Reset timer watcher\n\n$timer\n->\nagain\n();\n});\n$timer\n->\ndata\n=\n$stat\n;\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #12 Process status changes",
    "output": "<?php\n$pid\n=\npcntl_fork\n();\nif (\n$pid\n== -\n1\n) {\n\nfprintf\n(\nSTDERR\n,\n\"pcntl_fork failed\\n\"\n);\n} elseif (\n$pid\n) {\n\n$w\n= new\nEvChild\n(\n$pid\n,\nFALSE\n, function (\n$w\n,\n$revents\n) {\n\n$w\n->\nstop\n();\n\nprintf\n(\n\"Process %d exited with status %d\\n\"\n,\n$w\n->\nrpid\n,\n$w\n->\nrstatus\n);\n    });\n\nEv\n::\nrun\n();\n\n// Protect against Zombies\n\npcntl_wait\n(\n$status\n);\n} else {\n\n//Forked child\n\nexit(\n2\n);\n}\n?>"
  },
  {
    "input": "Example #1 Using reschedule callback",
    "output": "<?php\n// Tick each 10.5 seconds\nfunction\nreschedule_cb\n(\n$watcher\n,\n$now\n) {\n   return\n$now\n+ (\n10.5\n. -\nfmod\n(\n$now\n,\n10.5\n));\n}\n$w\n= new\nEvPeriodic\n(\n0.\n,\n0.\n,\n\"reschedule_cb\"\n, function (\n$w\n,\n$revents\n) {\n   echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Embedding loop created with kqueue backend into the default loop",
    "output": "<?php\n/*\n* Check if kqueue is available but not recommended and create a kqueue backend\n* for use with sockets (which usually work with any kqueue implementation).\n* Store the kqueue/socket-only event loop in loop_socket. (One might optionally\n* use EVFLAG_NOENV, too)\n*\n* Example borrowed from\n* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n*/\n$loop\n=\nEvLoop\n::\ndefaultLoop\n();\n$socket_loop\n=\nNULL\n;\n$embed\n=\nNULL\n;\nif (\nEv\n::\nsupportedBackends\n() & ~\nEv\n::\nrecommendedBackends\n() &\nEv\n::\nBACKEND_KQUEUE\n) {\n if ((\n$socket_loop\n= new\nEvLoop\n(\nEv\n::\nBACKEND_KQUEUE\n))) {\n\n$embed\n= new\nEvEmbed\n(\n$loop\n);\n }\n}\nif (!\n$socket_loop\n) {\n\n$socket_loop\n=\n$loop\n;\n}\n// Now use $socket_loop for all sockets, and $loop for anything else\n?>"
  },
  {
    "input": "Example #1 Embedding one loop into another",
    "output": "<?php\n/*\n* Try to get an embeddable event loop and embed it into the default event loop.\n* If it is impossible, use the default\n* loop. The default loop is stored in $loop_hi, while the embeddable loop is\n* stored in $loop_lo(which is $loop_hi in the case no embeddable loop can be\n* used).\n*\n* Sample translated to PHP\n* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n*/\n$loop_hi\n=\nEvLoop\n::\ndefaultLoop\n();\n$loop_lo\n=\nNULL\n;\n$embed\n=\nNULL\n;\n/*\n* See if there is a chance of getting one that works\n* (flags' value of 0 means autodetection)\n*/\n$loop_lo\n=\nEv\n::\nembeddableBackends\n() &\nEv\n::\nrecommendedBackends\n()\n ? new\nEvLoop\n(\nEv\n::\nembeddableBackends\n() &\nEv\n::\nrecommendedBackends\n())\n :\n0\n;\nif (\n$loop_lo\n) {\n\n$embed\n= new\nEvEmbed\n(\n$loop_lo\n, function () {});\n} else {\n\n$loop_lo\n=\n$loop_hi\n;\n}\n?>"
  },
  {
    "input": "Example #1 Embedding loop created with kqueue backend into the default loop",
    "output": "<?php\n/*\n* Check if kqueue is available but not recommended and create a kqueue backend\n* for use with sockets (which usually work with any kqueue implementation).\n* Store the kqueue/socket-only event loop in loop_socket. (One might optionally\n* use EVFLAG_NOENV, too)\n*\n* Example borrowed from\n* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n*/\n$loop\n=\nEvLoop\n::\ndefaultLoop\n();\n$socket_loop\n=\nNULL\n;\n$embed\n=\nNULL\n;\nif (\nEv\n::\nsupportedBackends\n() & ~\nEv\n::\nrecommendedBackends\n() &\nEv\n::\nBACKEND_KQUEUE\n) {\n if ((\n$socket_loop\n= new\nEvLoop\n(\nEv\n::\nBACKEND_KQUEUE\n))) {\n\n$embed\n= new\nEvEmbed\n(\n$loop\n);\n }\n}\nif (!\n$socket_loop\n) {\n\n$socket_loop\n=\n$loop\n;\n}\n// Now use $socket_loop for all sockets, and $loop for anything else\n?>"
  },
  {
    "input": "Example #1 Embedding loop created with kqueue backend into the default loop",
    "output": "<?php\n/*\n * Check if kqueue is available but not recommended and create a kqueue backend\n * for use with sockets (which usually work with any kqueue implementation).\n * Store the kqueue/socket-only event loop in loop_socket. (One might optionally\n * use EVFLAG_NOENV, too)\n *\n * Example borrowed from\n * http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9\n */\n$loop\n=\nEvLoop\n::\ndefaultLoop\n();\n$socket_loop\n=\nNULL\n;\n$embed\n=\nNULL\n;\nif (\nEv\n::\nsupportedBackends\n() & ~\nEv\n::\nrecommendedBackends\n() &\nEv\n::\nBACKEND_KQUEUE\n) {\n    if ((\n$socket_loop\n= new\nEvLoop\n(\nEv\n::\nBACKEND_KQUEUE\n))) {\n\n$embed\n= new\nEvEmbed\n(\n$loop\n);\n    }\n}\nif (!\n$socket_loop\n) {\n\n$socket_loop\n=\n$loop\n;\n}\n// Now use $socket_loop for all sockets, and $loop for anything else\n?>"
  },
  {
    "input": "Example #1 Periodic timer. Use reschedule callback",
    "output": "<?php\n// Tick each 10.5 seconds\nfunction\nreschedule_cb\n(\n$watcher\n,\n$now\n) {\n return\n$now\n+ (\n10.5\n. -\nfmod\n(\n$now\n,\n10.5\n));\n}\n$w\n= new\nEvPeriodic\n(\n0.\n,\n0.\n,\n\"reschedule_cb\"\n, function (\n$w\n,\n$revents\n) {\n echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #2 Periodic timer. Tick every 10.5 seconds starting at now",
    "output": "<?php\n// Tick every 10.5 seconds starting at now\n$w\n= new\nEvPeriodic\n(\nfmod\n(\nEv\n::\nnow\n(),\n10.5\n),\n10.5\n,\nNULL\n, function (\n$w\n,\n$revents\n) {\n echo\ntime\n(),\nPHP_EOL\n;\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #3 Hourly watcher",
    "output": "<?php\n$hourly\n=\nEvPeriodic\n(\n0\n,\n3600\n,\nNULL\n, function () {\n echo\n\"once per hour\\n\"\n;\n});\n?>"
  },
  {
    "input": "Example #1 Handle SIGTERM signal",
    "output": "<?php\n$w\n= new\nEvSignal\n(\nSIGTERM\n, function (\n$watcher\n) {\n    echo\n\"SIGTERM received\\n\"\n;\n\n$watcher\n->\nstop\n();\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Monitor changes of /var/log/messages",
    "output": "<?php\n// Use 10 second update interval.\n$w\n= new\nEvStat\n(\n\"/var/log/messages\"\n,\n8\n, function (\n$w\n) {\n    echo\n\"/var/log/messages changed\\n\"\n;\n\n$attr\n=\n$w\n->\nattr\n();\n    if (\n$attr\n[\n'nlink'\n]) {\n\nprintf\n(\n\"Current size: %ld\\n\"\n,\n$attr\n[\n'size'\n]);\n\nprintf\n(\n\"Current atime: %ld\\n\"\n,\n$attr\n[\n'atime'\n]);\n\nprintf\n(\n\"Current mtime: %ld\\n\"\n,\n$attr\n[\n'mtime'\n]);\n    } else {\n\nfprintf\n(\nSTDERR\n,\n\"`messages` file is not there!\"\n);\n\n$w\n->\nstop\n();\n    }\n});\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Monitor changes of /var/log/messages",
    "output": "<?php\n// Use 10 second update interval.\n$w\n= new\nEvStat\n(\n\"/var/log/messages\"\n,\n10\n, function (\n$w\n) {\n    echo\n\"/var/log/messages changed\\n\"\n;\n\n$attr\n=\n$w\n->\nattr\n();\n    if (\n$attr\n[\n'nlink'\n]) {\n\nprintf\n(\n\"Current size: %ld\\n\"\n,\n$attr\n[\n'size'\n]);\n\nprintf\n(\n\"Current atime: %ld\\n\"\n,\n$attr\n[\n'atime'\n]);\n\nprintf\n(\n\"Current mtime: %ld\\n\"\n,\n$attr\n[\n'mtime'\n]);\n    } else {\n\nfprintf\n(\nSTDERR\n,\n\"`messages` file is not there!\"\n);\n\n$w\n->\nstop\n();\n    }\n});\n?>"
  },
  {
    "input": "Example #1 Simple timers",
    "output": "<?php\n// Create and start timer firing after 2 seconds\n$w1\n= new\nEvTimer\n(\n2\n,\n0\n, function () {\n    echo\n\"2 seconds elapsed\\n\"\n;\n});\n// Create and launch timer firing after 2 seconds repeating each second\n// until we manually stop it\n$w2\n= new\nEvTimer\n(\n2\n,\n1\n, function (\n$w\n) {\n    echo\n\"is called every second, is launched after 2 seconds\\n\"\n;\n    echo\n\"iteration = \"\n,\nEv\n::\niteration\n(),\nPHP_EOL\n;\n\n// Stop the watcher after 5 iterations\n\nEv\n::\niteration\n() ==\n5\nand\n$w\n->\nstop\n();\n\n// Stop the watcher if further calls cause more than 10 iterations\n\nEv\n::\niteration\n() >=\n10\nand\n$w\n->\nstop\n();\n});\n// Create stopped timer. It will be inactive until we start it ourselves\n$w_stopped\n=\nEvTimer\n::\ncreateStopped\n(\n10\n,\n5\n, function(\n$w\n) {\n    echo\n\"Callback of a timer created as stopped\\n\"\n;\n\n// Stop the watcher after 2 iterations\n\nEv\n::\niteration\n() >=\n2\nand\n$w\n->\nstop\n();\n});\n// Loop until Ev::stop() is called or all of watchers stop\nEv\n::\nrun\n();\n// Start and look if it works\n$w_stopped\n->\nstart\n();\necho\n\"Run single iteration\\n\"\n;\nEv\n::\nrun\n(\nEv\n::\nRUN_ONCE\n);\necho\n\"Restart the second watcher and try to handle the same events, but don't block\\n\"\n;\n$w2\n->\nagain\n();\nEv\n::\nrun\n(\nEv\n::\nRUN_NOWAIT\n);\n$w\n= new\nEvTimer\n(\n10\n,\n0\n, function() {});\necho\n\"Running a blocking loop\\n\"\n;\nEv\n::\nrun\n();\necho\n\"END\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Monotor changes of /var/log/messages. Avoid missing updates by means of one second delay",
    "output": "<?php\n$timer\n=\nEvTimer\n::\ncreateStopped\n(\n0.\n,\n1.02\n, function (\n$w\n) {\n\n$w\n->\nstop\n();\n\n$stat\n=\n$w\n->\ndata\n;\n\n// 1 second after the most recent change of the file\n\nprintf\n(\n\"Current size: %ld\\n\"\n,\n$stat\n->\nattr\n()[\n'size'\n]);\n});\n$stat\n= new\nEvStat\n(\n\"/var/log/messages\"\n,\n0.\n, function () use (\n$timer\n) {\n\n// Reset timer watcher\n\n$timer\n->\nagain\n();\n});\n$timer\n->\ndata\n=\n$stat\n;\nEv\n::\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Register an I/O watcher for some UDP socket but do not keep the\n   event loop from running just because of that watcher.",
    "output": "<?php\n$udp_socket\n= ...\n$udp_watcher\n= new\nEvIo\n(\n$udp_socket\n,\nEv\n::\nREAD\n, function () {\n/* ... */\n});\n$udp_watcher\n->\nkeepalive\n(\nFALSE\n);\n?>"
  },
  {
    "input": "Example #2 Another Expect Usage Example",
    "output": "<?php\nini_set\n(\n\"expect.timeout\"\n, -\n1\n);\nini_set\n(\n\"expect.loguser\"\n,\n\"Off\"\n);\n$stream\n=\nexpect_popen\n(\n\"ssh root@remotehost\"\n);\nwhile (\ntrue\n) {\n    switch (\nexpect_expectl\n(\n$stream\n, array (\n            array (\n\"password:\"\n,\nPASSWORD\n),\n// SSH is asking for password\n\narray (\n\"yes/no)?\"\n,\nYESNO\n),\n// SSH is asking whether to store the host entry\n\narray (\n\"~$ \"\n,\nSHELL\n,\nEXP_EXACT\n),\n// We've got the shell!\n\n))) {\n        case\nPASSWORD\n:\n\nfwrite\n(\n$stream\n,\n\"secret\\n\"\n);\n            break;\n        case\nYESNO\n:\n\nfwrite\n(\n$stream\n,\n\"yes\\n\"\n);\n            break;\n        case\nSHELL\n:\n\nfwrite\n(\n$stream\n,\n\"uname -a\\n\"\n);\n            while (\ntrue\n) {\n                    switch (\nexpect_expectl\n(\n$stream\n, array (\n                            array (\n\"~$ \"\n,\nSHELL\n,\nEXP_EXACT\n),\n// We've got the shell!\n\narray (\n\"^Linux.*$\"\n,\nUNAME\n,\nEXP_REGEXP\n),\n// uname -a output\n\n),\n$match\n)) {\n                        case\nUNAME\n:\n\n$uname\n.=\n$match\n[\n0\n];\n                            break;\n                        case\nSHELL\n:\n\n// Run update:\n\nif (\nstrstr\n(\n$uname\n,\n\"x86_64\"\n)) {\n\nfwrite\n(\n$stream\n,\n\"rpm -Uhv http://mirrorsite/somepath/some_64bit.rpm\\n\"\n);\n                            } else {\n\nfwrite\n(\n$stream\n,\n\"rpm -Uhv http://mirrorsite/somepath/some_32bit.rpm\\n\"\n);\n                            }\n\nfwrite\n(\n$stream\n,\n\"exit\\n\"\n);\n                            break\n2\n;\n                        case\nEXP_TIMEOUT\n:\n                        case\nEXP_EOF\n:\n                            break\n2\n;\n                        default:\n                            die (\n\"Error has occurred!\\n\"\n);\n                    }\n            }\n            break\n2\n;\n        case\nEXP_TIMEOUT\n:\n        case\nEXP_EOF\n:\n            break\n2\n;\n        default:\n            die (\n\"Error has occurred!\\n\"\n);\n    }\n}\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 expect_expectl() example",
    "output": "<?php\n// Copies file from remote host:\nini_set\n(\n\"expect.timeout\"\n,\n30\n);\n$stream\n=\nfopen\n(\n\"expect://scp user@remotehost:/var/log/messages /home/user/messages.txt\"\n,\n\"r\"\n);\n$cases\n= array(\n\n// array(pattern, value to return if pattern matched)\n\narray(\n\"password:\"\n,\n\"asked for password\"\n),\n    array(\n\"yes/no)?\"\n,\n\"asked for yes/no\"\n)\n);\nwhile (\ntrue\n) {\n    switch (\nexpect_expectl\n(\n$stream\n,\n$cases\n)) {\n        case\n\"asked for password\"\n:\n\nfwrite\n(\n$stream\n,\n\"my password\\n\"\n);\n            break;\n        case\n\"asked for yes/no\"\n:\n\nfwrite\n(\n$stream\n,\n\"yes\\n\"\n);\n            break;\n        case\nEXP_TIMEOUT\n:\n        case\nEXP_EOF\n:\n            break\n2\n;\n// break both the switch statement and the while loop\n\ndefault:\n            die(\n\"Error has occurred!\"\n);\n    }\n}\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 expect_popen() example",
    "output": "<?php\n// Login to the PHP.net CVS repository:\n$stream\n=\nexpect_popen\n(\n\"cvs -d :pserver:anonymous@cvs.php.net:/repository login\"\n);\nsleep\n(\n3\n);\nfwrite\n(\n$stream\n,\n\"phpfi\\n\"\n);\nfclose\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 Process Control Example",
    "output": "<?php\ndeclare(\nticks\n=\n1\n);\n$pid\n=\npcntl_fork\n();\nif (\n$pid\n== -\n1\n) {\n     die(\n\"could not fork\"\n);\n} else if (\n$pid\n) {\n     exit();\n// we are the parent\n} else {\n\n// we are the child\n}\n// detach from the controlling terminal\nif (\nposix_setsid\n() == -\n1\n) {\n    die(\n\"could not detach from terminal\"\n);\n}\n// setup signal handlers\npcntl_signal\n(\nSIGTERM\n,\n\"sig_handler\"\n);\npcntl_signal\n(\nSIGHUP\n,\n\"sig_handler\"\n);\n// loop forever performing tasks\nwhile (\n1\n) {\n\n// do something interesting here\n}\nfunction\nsig_handler\n(\n$signo\n)\n{\n     switch (\n$signo\n) {\n         case\nSIGTERM\n:\n\n// handle shutdown tasks\n\nexit;\n             break;\n         case\nSIGHUP\n:\n\n// handle restart tasks\n\nbreak;\n         default:\n\n// handle all other signals\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 pcntl_fork() example",
    "output": "<?php\n$pid\n=\npcntl_fork\n();\nif (\n$pid\n== -\n1\n) {\n     die(\n'could not fork'\n);\n} else if (\n$pid\n) {\n\n// we are the parent\n\npcntl_wait\n(\n$status\n);\n//Protect against Zombie children\n} else {\n\n// we are the child\n}\n?>"
  },
  {
    "input": "Example #1 pcntl_rfork() example",
    "output": "<?php\n$pid\n=\npcntl_rfork\n(\nRFNOWAIT\n|\nRFTSIGZMB\n,\nSIGUSR1\n);\nif (\n$pid\n>\n0\n) {\n\n// This is the parent process.\n\nvar_dump\n(\n$pid\n);\n} else {\n\n// This is the child process.\n\nvar_dump\n(\n$pid\n);\n\nsleep\n(\n2\n);\n// as the child does not wait, so we see its \"pid\"\n}\n?>"
  },
  {
    "input": "Example #1 pcntl_signal() example",
    "output": "<?php\n// tick use required\ndeclare(\nticks\n=\n1\n);\n// signal handler function\nfunction\nsig_handler\n(\n$signo\n)\n{\n     switch (\n$signo\n) {\n         case\nSIGTERM\n:\n\n// handle shutdown tasks\n\nexit;\n             break;\n         case\nSIGHUP\n:\n\n// handle restart tasks\n\nbreak;\n         case\nSIGUSR1\n:\n             echo\n\"Caught SIGUSR1...\\n\"\n;\n             break;\n         default:\n\n// handle all other signals\n\n}\n}\necho\n\"Installing signal handler...\\n\"\n;\n// setup signal handlers\npcntl_signal\n(\nSIGTERM\n,\n\"sig_handler\"\n);\npcntl_signal\n(\nSIGHUP\n,\n\"sig_handler\"\n);\npcntl_signal\n(\nSIGUSR1\n,\n\"sig_handler\"\n);\n// or use an object\n// pcntl_signal(SIGUSR1, array($obj, \"do_something\"));\necho\n\"Generating signal SIGUSR1 to self...\\n\"\n;\n// send SIGUSR1 to current process id\n// posix_* functions require the posix extension\nposix_kill\n(\nposix_getpid\n(),\nSIGUSR1\n);\necho\n\"Done\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pcntl_signal_dispatch() example",
    "output": "<?php\necho\n\"Installing signal handler...\\n\"\n;\npcntl_signal\n(\nSIGHUP\n,  function(\n$signo\n) {\n     echo\n\"signal handler called\\n\"\n;\n});\necho\n\"Generating signal SIGHUP to self...\\n\"\n;\nposix_kill\n(\nposix_getpid\n(),\nSIGHUP\n);\necho\n\"Dispatching...\\n\"\n;\npcntl_signal_dispatch\n();\necho\n\"Done\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 pcntl_signal_get_handler() example",
    "output": "<?php\nvar_dump\n(\npcntl_signal_get_handler\n(\nSIGUSR1\n));\n// Outputs: int(0)\nfunction\npcntl_test\n(\n$signo\n) {}\npcntl_signal\n(\nSIGUSR1\n,\n'pcntl_test'\n);\nvar_dump\n(\npcntl_signal_get_handler\n(\nSIGUSR1\n));\n// Outputs: string(10) \"pcntl_test\"\npcntl_signal\n(\nSIGUSR1\n,\nSIG_DFL\n);\nvar_dump\n(\npcntl_signal_get_handler\n(\nSIGUSR1\n));\n// Outputs: int(0)\npcntl_signal\n(\nSIGUSR1\n,\nSIG_IGN\n);\nvar_dump\n(\npcntl_signal_get_handler\n(\nSIGUSR1\n));\n// Outputs: int(1)\n?>"
  },
  {
    "input": "Example #1 pcntl_sigprocmask() example",
    "output": "<?php\npcntl_sigprocmask\n(\nSIG_BLOCK\n, array(\nSIGHUP\n));\n$oldset\n= array();\npcntl_sigprocmask\n(\nSIG_UNBLOCK\n, array(\nSIGHUP\n),\n$oldset\n);\n?>"
  },
  {
    "input": "Example #1 pcntl_sigwaitinfo() example",
    "output": "<?php\necho\n\"Blocking SIGHUP signal\\n\"\n;\npcntl_sigprocmask\n(\nSIG_BLOCK\n, array(\nSIGHUP\n));\necho\n\"Sending SIGHUP to self\\n\"\n;\nposix_kill\n(\nposix_getpid\n(),\nSIGHUP\n);\necho\n\"Waiting for signals\\n\"\n;\n$info\n= array();\npcntl_sigwaitinfo\n(array(\nSIGHUP\n),\n$info\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getgrgid()",
    "output": "<?php\n$groupid\n=\nposix_getegid\n();\n$groupinfo\n=\nposix_getgrgid\n(\n$groupid\n);\nprint_r\n(\n$groupinfo\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getgrnam()",
    "output": "<?php\n$groupinfo\n=\nposix_getgrnam\n(\n\"toons\"\n);\nprint_r\n(\n$groupinfo\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getgroups()",
    "output": "<?php\n$groups\n=\nposix_getgroups\n();\nprint_r\n(\n$groups\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getlogin()",
    "output": "<?php\necho\nposix_getlogin\n();\n//apache\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getpgid()",
    "output": "<?php\n$pid\n=\nposix_getppid\n();\necho\nposix_getpgid\n(\n$pid\n);\n//35\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getpid()",
    "output": "<?php\necho\nposix_getpid\n();\n//8805\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getppid()",
    "output": "<?php\necho\nposix_getppid\n();\n//8259\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getpwnam()",
    "output": "<?php\n$userinfo\n=\nposix_getpwnam\n(\n\"tom\"\n);\nprint_r\n(\n$userinfo\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getpwuid()",
    "output": "<?php\n$userinfo\n=\nposix_getpwuid\n(\n10000\n);\nprint_r\n(\n$userinfo\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getrlimit()",
    "output": "<?php\n$limits\n=\nposix_getrlimit\n();\nprint_r\n(\n$limits\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getsid()",
    "output": "<?php\n$pid\n=\nposix_getpid\n();\necho\nposix_getsid\n(\n$pid\n);\n//8805\n?>"
  },
  {
    "input": "Example #1 Example use of posix_getuid()",
    "output": "<?php\necho\nposix_getuid\n();\n//10000\n?>"
  },
  {
    "input": "Example #1 A posix_mknod() example",
    "output": "<?php\n$file\n=\n'/tmp/tmpfile'\n;\n// file name\n$type\n=\nPOSIX_S_IFBLK\n;\n// file type\n$permissions\n=\n0777\n;\n// octal\n$major\n=\n1\n;\n$minor\n=\n8\n;\n// /dev/random\nif (!\nposix_mknod\n(\n$file\n,\n$type\n|\n$permissions\n,\n$major\n,\n$minor\n)) {\n    die(\n'Error '\n.\nposix_get_last_error\n() .\n': '\n.\nposix_strerror\n(\nposix_get_last_error\n()));\n}\n?>"
  },
  {
    "input": "Example #1 Example use of posix_times()",
    "output": "<?php\n$times\n=\nposix_times\n();\nprint_r\n(\n$times\n);\n?>"
  },
  {
    "input": "Example #1 Example use of posix_uname()",
    "output": "<?php\n$uname\n=\nposix_uname\n();\nprint_r\n(\n$uname\n);\n?>"
  },
  {
    "input": "Example #1 escapeshellarg() example",
    "output": "<?php\nsystem\n(\n'ls '\n.\nescapeshellarg\n(\n$dir\n));\n?>"
  },
  {
    "input": "Example #1 escapeshellcmd() example",
    "output": "<?php\n// We allow arbitrary number of arguments intentionally here.\n$command\n=\n'./configure '\n.\n$_POST\n[\n'configure_options'\n];\n$escaped_command\n=\nescapeshellcmd\n(\n$command\n);\n\nsystem\n(\n$escaped_command\n);\n?>"
  },
  {
    "input": "Example #1 An exec() example",
    "output": "<?php\n// outputs the username that owns the running php/httpd process\n// (on a system with the \"whoami\" executable in the path)\n$output\n=\nnull\n;\n$retval\n=\nnull\n;\nexec\n(\n'whoami'\n,\n$output\n,\n$retval\n);\necho\n\"Returned with status\n$retval\n and output:\\n\"\n;\nprint_r\n(\n$output\n);\n?>"
  },
  {
    "input": "Example #1 Using proc_nice() to set the process priority to high",
    "output": "<?php\n// Highest priority\nproc_nice\n(-\n20\n);\n?>"
  },
  {
    "input": "Example #1 A proc_open() example",
    "output": "<?php\n$descriptorspec\n= array(\n\n0\n=> array(\n\"pipe\"\n,\n\"r\"\n),\n// stdin is a pipe that the child will read from\n\n1\n=> array(\n\"pipe\"\n,\n\"w\"\n),\n// stdout is a pipe that the child will write to\n\n2\n=> array(\n\"file\"\n,\n\"/tmp/error-output.txt\"\n,\n\"a\"\n)\n// stderr is a file to write to\n);\n$cwd\n=\n'/tmp'\n;\n$env\n= array(\n'some_option'\n=>\n'aeiou'\n);\n$process\n=\nproc_open\n(\n'php'\n,\n$descriptorspec\n,\n$pipes\n,\n$cwd\n,\n$env\n);\nif (\nis_resource\n(\n$process\n)) {\n\n// $pipes now looks like this:\n    // 0 => writeable handle connected to child stdin\n    // 1 => readable handle connected to child stdout\n    // Any error output will be appended to /tmp/error-output.txt\n\nfwrite\n(\n$pipes\n[\n0\n],\n'<?php print_r($_ENV); ?>'\n);\n\nfclose\n(\n$pipes\n[\n0\n]);\n    echo\nstream_get_contents\n(\n$pipes\n[\n1\n]);\n\nfclose\n(\n$pipes\n[\n1\n]);\n\n// It is important that you close any pipes before calling\n    // proc_close in order to avoid a deadlock\n\n$return_value\n=\nproc_close\n(\n$process\n);\n    echo\n\"command returned\n$return_value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A shell_exec() example",
    "output": "<?php\n$output\n=\nshell_exec\n(\n'ls -lart'\n);\necho\n\"<pre>\n$output\n</pre>\"\n;\n?>"
  },
  {
    "input": "Example #1 system() example",
    "output": "<?php\necho\n'<pre>'\n;\n// Outputs all the result of shellcommand \"ls\", and returns\n// the last output line into $last_line. Stores the return value\n// of the shell command in $retval.\n$last_line\n=\nsystem\n(\n'ls'\n,\n$retval\n);\n// Printing additional info\necho\n'\n</pre>\n<hr />Last line of the output: '\n.\n$last_line\n.\n'\n<hr />Return value: '\n.\n$retval\n;\n?>"
  },
  {
    "input": "Example #1 Example showing Future as return value",
    "output": "<?php\n$runtime\n= new\n\\parallel\\Runtime\n;\n$future\n=\n$runtime\n->\nrun\n(function(){\n    return\n\"World\"\n;\n});\nprintf\n(\n\"Hello %s\\n\"\n,\n$future\n->\nvalue\n());\n?>"
  },
  {
    "input": "Example #2 Example showing Future as synchronization point",
    "output": "<?php\n$runtime\n= new\n\\parallel\\Runtime\n;\n$future\n=\n$runtime\n->\nrun\n(function(){\n    echo\n\"in child \"\n;\n    for (\n$i\n=\n0\n;\n$i\n<\n500\n;\n$i\n++) {\n        if (\n$i\n%\n10\n==\n0\n) {\n            echo\n\".\"\n;\n        }\n    }\n    echo\n\" leaving child\"\n;\n});\n$future\n->\nvalue\n();\necho\n\"\\nparent continues\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Fetch a chunk of the property table",
    "output": "<?php\n$safe\n= new\nThreaded\n();\nwhile (\ncount\n(\n$safe\n) <\n10\n) {\n\n$safe\n[] =\ncount\n(\n$safe\n);\n}\nvar_dump\n(\n$safe\n->\nchunk\n(\n5\n));\n?>"
  },
  {
    "input": "Example #1 Counting the properties of an object",
    "output": "<?php\n$safe\n= new\nThreaded\n();\nwhile (\ncount\n(\n$safe\n) <\n10\n) {\n\n$safe\n[] =\ncount\n(\n$safe\n);\n}\nvar_dump\n(\ncount\n(\n$safe\n));\n?>"
  },
  {
    "input": "Example #1 Runtime inheritance",
    "output": "<?php\nclass\nMy\n{}\nThreaded\n::\nextend\n(\nMy\n::class);\n$my\n= new\nMy\n();\nvar_dump\n(\n$my\ninstanceof\nThreaded\n);\n?>"
  },
  {
    "input": "Example #1 Detect the state of the referenced object",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\nvar_dump\n(\n$my\n->\nisRunning\n());\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotify\n();\n},\n$my\n);\n?>"
  },
  {
    "input": "Example #1 Detect the state of the referenced object",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\ni_do_not_exist\n();\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n$my\n->\njoin\n();\nvar_dump\n(\n$my\n->\nisTerminated\n());\n?>"
  },
  {
    "input": "Example #1 Merging into the property table of a threaded object",
    "output": "<?php\n$array\n= [];\nwhile (\ncount\n(\n$array\n) <\n10\n)\n\n$array\n[] =\ncount\n(\n$array\n);\n$stdClass\n= new\nstdClass\n();\n$stdClass\n->\nfoo\n=\n\"foo\"\n;\n$stdClass\n->\nbar\n=\n\"bar\"\n;\n$stdClass\n->\nbaz\n=\n\"baz\"\n;\n$safe\n= new\nThreaded\n();\n$safe\n->\nmerge\n(\n$array\n);\n$safe\n->\nfoo\n=\n\"bar\"\n;\n$safe\n->\nmerge\n(\n$stdClass\n,\nfalse\n);\nvar_dump\n(\n$safe\n);\n?>"
  },
  {
    "input": "Example #1 Notifications and Waiting",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n/** cause this thread to wait **/\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n/** send notification to the waiting thread **/\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotify\n();\n},\n$my\n);\nvar_dump\n(\n$my\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Notifications and Waiting",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n/** cause this thread to wait **/\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n/** send notification to the waiting thread **/\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotifyOne\n();\n},\n$my\n);\nvar_dump\n(\n$my\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Popping the last item from the property table of a threaded object",
    "output": "<?php\n$safe\n= new\nThreaded\n();\nwhile (\ncount\n(\n$safe\n) <\n10\n)\n\n$safe\n[] =\ncount\n(\n$safe\n);\nvar_dump\n(\n$safe\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Shifting the first item from the property table of a threaded object",
    "output": "<?php\n$safe\n= new\nThreaded\n();\nwhile (\ncount\n(\n$safe\n) <\n10\n)\n\n$safe\n[] =\ncount\n(\n$safe\n);\nvar_dump\n(\n$safe\n->\nshift\n());\n?>"
  },
  {
    "input": "Example #1 Synchronizing",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotify\n();\n},\n$my\n);\nvar_dump\n(\n$my\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Notifications and Waiting",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n/** cause this thread to wait **/\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n/** send notification to the waiting thread **/\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotify\n();\n},\n$my\n);\nvar_dump\n(\n$my\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Return the identity of the Thread or Process that created the referenced Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\nprintf\n(\n\"%s created by Thread #%lu\\n\"\n,\n__CLASS__\n,\n$this\n->\ngetCreatorId\n());\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n?>"
  },
  {
    "input": "Example #1 Return the currently executing Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\nvar_dump\n(\nThread\n::\ngetCurrentThread\n());\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n?>"
  },
  {
    "input": "Example #1 Return the identity of the currently executing Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\nprintf\n(\n\"%s is Thread #%lu\\n\"\n,\n__CLASS__\n,\nThread\n::\ngetCurrentThreadId\n());\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n?>"
  },
  {
    "input": "Example #1 Return the identity of the referenced Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\nprintf\n(\n\"%s is Thread #%lu\\n\"\n,\n__CLASS__\n,\n$this\n->\ngetThreadId\n());\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n?>"
  },
  {
    "input": "Example #1 Detect the state of the referenced Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n$this\n->\nsynchronized\n(function(\n$thread\n){\n            if (!\n$thread\n->\ndone\n)\n\n$thread\n->\nwait\n();\n        },\n$this\n);\n    }\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\nvar_dump\n(\n$my\n->\nisJoined\n());\n$my\n->\nsynchronized\n(function(\n$thread\n){\n\n$thread\n->\ndone\n=\ntrue\n;\n\n$thread\n->\nnotify\n();\n},\n$my\n);\n?>"
  },
  {
    "input": "Example #1 Tell if the referenced Thread was started",
    "output": "<?php\n$worker\n= new\nWorker\n();\n$worker\n->\nstart\n();\nvar_dump\n(\n$worker\n->\nisStarted\n());\n?>"
  },
  {
    "input": "Example #1 Join with the referenced Thread",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n/* ... */\n\n}\n}\n$my\n= new\nMy\n();\n$my\n->\nstart\n();\n/* ... */\nvar_dump\n(\n$my\n->\njoin\n());\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Starting Threads",
    "output": "<?php\nclass\nMy\nextends\nThread\n{\n    public function\nrun\n() {\n\n/** ... **/\n\n}\n}\n$my\n= new\nMy\n();\nvar_dump\n(\n$my\n->\nstart\n());\n?>"
  },
  {
    "input": "Example #1 A basic example of Worker::collect()",
    "output": "<?php\n$worker\n= new\nWorker\n();\necho\n\"There are currently\n{\n$worker\n->\ncollect\n()}\n tasks on the stack to be collected\\n\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n15\n; ++\n$i\n) {\n\n$worker\n->\nstack\n(new class extends\nThreaded\n{});\n}\necho\n\"There are\n{\n$worker\n->\ncollect\n()}\n tasks remaining on the stack to be collected\\n\"\n;\n$worker\n->\nstart\n();\nwhile (\n$worker\n->\ncollect\n());\n// blocks until all tasks have finished executing\necho\n\"There are now\n{\n$worker\n->\ncollect\n()}\n tasks on the stack to be collected\\n\"\n;\n$worker\n->\nshutdown\n();"
  },
  {
    "input": "Example #1 A basic example of Worker::getStacked",
    "output": "<?php\n$worker\n= new\nWorker\n();\nfor (\n$i\n=\n0\n;\n$i\n<\n5\n; ++\n$i\n) {\n\n$worker\n->\nstack\n(new class extends\nThreaded\n{});\n}\necho\n\"There are\n{\n$worker\n->\ngetStacked\n()}\n stacked tasks\\n\"\n;"
  },
  {
    "input": "Example #1 Detect the state of a worker",
    "output": "<?php\n$worker\n= new\nWorker\n();\n$worker\n->\nstart\n();\nvar_dump\n(\n$worker\n->\nisShutdown\n());\n$worker\n->\nshutdown\n();\nvar_dump\n(\n$worker\n->\nisShutdown\n());"
  },
  {
    "input": "Example #1 Shutdown the referenced worker",
    "output": "<?php\n$my\n= new\nWorker\n();\n$my\n->\nstart\n();\n/* stack/execute tasks */\nvar_dump\n(\n$my\n->\nshutdown\n());"
  },
  {
    "input": "Example #1 Stacking a task for execution onto a worker",
    "output": "<?php\n$worker\n= new\nWorker\n();\n$work\n= new class extends\nThreaded\n{};\nvar_dump\n(\n$worker\n->\nstack\n(\n$work\n));"
  },
  {
    "input": "Example #1 Removing objects from the stack of Workers",
    "output": "<?php\n$my\n= new\nWorker\n();\n$work\n= new class extends\nThreaded\n{};\nvar_dump\n(\n$my\n->\nstack\n(\n$work\n));\nvar_dump\n(\n$my\n->\nunstack\n());"
  },
  {
    "input": "Example #1 A basic example of Pool::collect()",
    "output": "<?php\n$pool\n= new\nPool\n(\n4\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n15\n; ++\n$i\n) {\n\n$pool\n->\nsubmit\n(new class extends\nThreaded\n{});\n}\nwhile (\n$pool\n->\ncollect\n());\n// blocks until all tasks have finished executing\n$pool\n->\nshutdown\n();"
  },
  {
    "input": "Example #1 Creating Pools",
    "output": "<?php\nclass\nMyWorker\nextends\nWorker\n{\n\n    public function\n__construct\n(\nSomething $something\n) {\n\n$this\n->\nsomething\n=\n$something\n;\n    }\n\n    public function\nrun\n() {\n\n/** ... **/\n\n}\n}\n$pool\n= new\nPool\n(\n8\n,\n\\MyWorker\n::class, [new\nSomething\n()]);\nvar_dump\n(\n$pool\n);\n?>"
  },
  {
    "input": "Example #1 Shutting down a pool",
    "output": "<?php\nclass\nTask\nextends\nThreaded\n{\n    public function\nrun\n()\n    {\n\nusleep\n(\n500000\n);\n    }\n}\n$pool\n= new\nPool\n(\n4\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n10\n; ++\n$i\n) {\n\n$pool\n->\nsubmit\n(new\nTask\n());\n}\n$pool\n->\nshutdown\n();\n// blocks until all submitted tasks have finished executing"
  },
  {
    "input": "Example #1 Submitting Tasks",
    "output": "<?php\nclass\nMyWork\nextends\nThreaded\n{\n\n    public function\nrun\n() {\n\n/* ... */\n\n}\n}\nclass\nMyWorker\nextends\nWorker\n{\n\n    public function\n__construct\n(\nSomething $something\n) {\n\n$this\n->\nsomething\n=\n$something\n;\n    }\n\n    public function\nrun\n() {\n\n/** ... **/\n\n}\n}\n$pool\n= new\nPool\n(\n8\n,\n\\MyWorker\n::class, [new\nSomething\n()]);\n$pool\n->\nsubmit\n(new\nMyWork\n());\nvar_dump\n(\n$pool\n);\n?>"
  },
  {
    "input": "Example #1 Submitting tasks to a specific worker",
    "output": "<?php\nclass\nTask\nextends\nThreaded\n{\n    public function\nrun\n() {\n\nvar_dump\n(\nThread\n::\ngetCurrentThreadID\n());\n    }\n}\n$pool\n= new\nPool\n(\n2\n);\n$pool\n->\nsubmit\n(new\nTask\n());\nfor (\n$i\n=\n0\n;\n$i\n<\n5\n; ++\n$i\n) {\n\n$pool\n->\nsubmitTo\n(\n0\n, new\nTask\n());\n// stack all tasks onto the first worker\n}\n$pool\n->\nsubmitTo\n(\n1\n, new\nTask\n());\n// cannot stack the task onto the second worker due to it not existing yet\n$pool\n->\nshutdown\n();"
  },
  {
    "input": "Example #1 New immutability semantics of Threaded",
    "output": "<?php\nclass\nTask\nextends\nThreaded\n{\n    public function\n__construct\n()\n    {\n\n$this\n->\ndata\n= new\nThreaded\n();\n\n// attempt to overwrite a Threaded property of a Threaded class (invalid)\n\n$this\n->\ndata\n= new\nstdClass\n();\n    }\n}\nvar_dump\n((new\nTask\n())->\ndata\n);"
  },
  {
    "input": "Example #2 Volatile use-case",
    "output": "<?php\nclass\nTask\nextends\nVolatile\n{\n    public function\n__construct\n()\n    {\n\n$this\n->\ndata\n= new\nThreaded\n();\n\n// attempt to overwrite a Threaded property of a Volatile class (valid)\n\n$this\n->\ndata\n= new\nstdClass\n();\n    }\n}\nvar_dump\n((new\nTask\n())->\ndata\n);"
  },
  {
    "input": "Example #1 Shared Memory Operations Overview",
    "output": "<?php\n\n// Create 100 byte shared memory block with system id of 0xff3\n$shm_id\n=\nshmop_open\n(\n0xff3\n,\n\"c\"\n,\n0644\n,\n100\n);\nif (!\n$shm_id\n) {\n    echo\n\"Couldn't create shared memory segment\\n\"\n;\n}\n// Get shared memory block's size\n$shm_size\n=\nshmop_size\n(\n$shm_id\n);\necho\n\"SHM Block Size: \"\n.\n$shm_size\n.\n\" has been created.\\n\"\n;\n// Lets write a test string into shared memory\n$shm_bytes_written\n=\nshmop_write\n(\n$shm_id\n,\n\"my shared memory block\"\n,\n0\n);\nif (\n$shm_bytes_written\n!=\nstrlen\n(\n\"my shared memory block\"\n)) {\n    echo\n\"Couldn't write the entire length of data\\n\"\n;\n}\n// Now lets read the string back\n$my_string\n=\nshmop_read\n(\n$shm_id\n,\n0\n,\n$shm_size\n);\nif (!\n$my_string\n) {\n    echo\n\"Couldn't read from shared memory block\\n\"\n;\n}\necho\n\"The data inside shared memory was: \"\n.\n$my_string\n.\n\"\\n\"\n;\n//Now lets delete the block and close the shared memory segment\nif (!\nshmop_delete\n(\n$shm_id\n)) {\n    echo\n\"Couldn't mark shared memory block for deletion.\"\n;\n}\nshmop_close\n(\n$shm_id\n);\n\n?>"
  },
  {
    "input": "Example #1 Closing shared memory block",
    "output": "<?php\nshmop_close\n(\n$shm_id\n);\n?>"
  },
  {
    "input": "Example #1 Deleting shared memory block",
    "output": "<?php\nshmop_delete\n(\n$shm_id\n);\n?>"
  },
  {
    "input": "Example #1 Create a new shared memory block",
    "output": "<?php\n$shm_key\n=\nftok\n(\n__FILE__\n,\n't'\n);\n$shm_id\n=\nshmop_open\n(\n$shm_key\n,\n\"c\"\n,\n0644\n,\n100\n);\n?>"
  },
  {
    "input": "Example #1 Reading shared memory block",
    "output": "<?php\n$shm_data\n=\nshmop_read\n(\n$shm_id\n,\n0\n,\n50\n);\n?>"
  },
  {
    "input": "Example #1 Getting the size of the shared memory block",
    "output": "<?php\n$shm_size\n=\nshmop_size\n(\n$shm_id\n);\n?>"
  },
  {
    "input": "Example #1 Writing to shared memory block",
    "output": "<?php\n$shm_bytes_written\n=\nshmop_write\n(\n$shm_id\n,\n$my_string\n,\n0\n);\n?>"
  },
  {
    "input": "Example #1 SyncMutex::__construct() named mutex with lock timeout example",
    "output": "<?php\n$mutex\n= new\nSyncMutex\n(\n\"UniqueName\"\n);\nif (!\n$mutex\n->\nlock\n(\n3000\n))\n{\n    echo\n\"Unable to lock mutex.\"\n;\n    exit();\n}\n/* ... */\n$mutex\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #2 SyncMutex::__construct() unnamed mutex example",
    "output": "<?php\n$mutex\n= new\nSyncMutex\n();\n$mutex\n->\nlock\n();\n/* ... */\n$mutex\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncMutex::lock() example",
    "output": "<?php\n$mutex\n= new\nSyncMutex\n(\n\"UniqueName\"\n);\nif (!\n$mutex\n->\nlock\n(\n3000\n))\n{\n    echo\n\"Unable to lock mutex.\"\n;\n    exit();\n}\n/* ... */\n$mutex\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncMutex::unlock() example",
    "output": "<?php\n$mutex\n= new\nSyncMutex\n(\n\"UniqueName\"\n);\n$mutex\n->\nlock\n();\n/* ... */\n$mutex\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncSemaphore::__construct() example",
    "output": "<?php\n$semaphore\n= new\nSyncSemaphore\n(\n\"LimitedResource_2clients\"\n,\n2\n);\nif (!\n$semaphore\n->\nlock\n(\n3000\n))\n{\n    echo\n\"Unable to lock semaphore.\"\n;\n    exit();\n}\n/* ... */\n$semaphore\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncSemaphore::lock() example",
    "output": "<?php\n$semaphore\n= new\nSyncSemaphore\n(\n\"LimitedResource_2clients\"\n,\n2\n);\nif (!\n$semaphore\n->\nlock\n(\n3000\n))\n{\n    echo\n\"Unable to lock semaphore.\"\n;\n    exit();\n}\n/* ... */\n$semaphore\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncSemaphore::unlock() example",
    "output": "<?php\n$semaphore\n= new\nSyncSemaphore\n(\n\"LimitedResource_2clients\"\n,\n2\n);\nif (!\n$semaphore\n->\nlock\n(\n3000\n))\n{\n    echo\n\"Unable to lock semaphore.\"\n;\n    exit();\n}\n/* ... */\n$semaphore\n->\nunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncEvent::__construct() example",
    "output": "<?php\n// In a web application:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nfire\n();\n// In a cron job:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nwait\n();\n?>"
  },
  {
    "input": "Example #1 SyncEvent::fire() example",
    "output": "<?php\n// In a web application:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nfire\n();\n// In a cron job:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nwait\n();\n?>"
  },
  {
    "input": "Example #1 SyncEvent::reset() example",
    "output": "<?php\n// In a web application:\n$event\n= new\nSyncEvent\n(\n\"DemoApplication\"\n,\ntrue\n);\n$event\n->\nwait\n();\n// In a cron job:\n$event\n= new\nSyncEvent\n(\n\"DemoApplication\"\n,\ntrue\n);\n$event\n->\nreset\n();\n/* ... Do some maintenance task(s) ... */\n$event\n->\nfire\n();\n?>"
  },
  {
    "input": "Example #1 SyncEvent::wait() example",
    "output": "<?php\n// In a web application:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nfire\n();\n// In a cron job:\n$event\n= new\nSyncEvent\n(\n\"GetAppReport\"\n);\n$event\n->\nwait\n();\n?>"
  },
  {
    "input": "Example #1 SyncReaderWriter::__construct() example",
    "output": "<?php\n$readwrite\n= new\nSyncReaderWriter\n(\n\"FileCacheLock\"\n);\n$readwrite\n->\nreadlock\n();\n/* ... */\n$readwrite\n->\nreadunlock\n();\n$readwrite\n->\nwritelock\n();\n/* ... */\n$readwrite\n->\nwriteunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncReaderWriter::readlock() example",
    "output": "<?php\n$readwrite\n= new\nSyncReaderWriter\n(\n\"FileCacheLock\"\n);\n$readwrite\n->\nreadlock\n();\n/* ... */\n$readwrite\n->\nreadunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncReaderWriter::readunlock() example",
    "output": "<?php\n$readwrite\n= new\nSyncReaderWriter\n(\n\"FileCacheLock\"\n);\n$readwrite\n->\nreadlock\n();\n/* ... */\n$readwrite\n->\nreadunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncReaderWriter::writelock() example",
    "output": "<?php\n$readwrite\n= new\nSyncReaderWriter\n(\n\"FileCacheLock\"\n);\n$readwrite\n->\nwritelock\n();\n/* ... */\n$readwrite\n->\nwriteunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncReaderWriter::writeunlock() example",
    "output": "<?php\n$readwrite\n= new\nSyncReaderWriter\n(\n\"FileCacheLock\"\n);\n$readwrite\n->\nwritelock\n();\n/* ... */\n$readwrite\n->\nwriteunlock\n();\n?>"
  },
  {
    "input": "Example #1 SyncSharedMemory::__construct() example",
    "output": "<?php\n// You will probably need to protect shared memory with other synchronization objects.\n// Shared memory goes away when the last reference to it disappears.\n$mem\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nif (\n$mem\n->\nfirst\n())\n{\n\n// Do first time initialization work here.\n}\n$result\n=\n$mem\n->\nwrite\n(\njson_encode\n(array(\n\"name\"\n=>\n\"my_report.txt\"\n)));\n?>"
  },
  {
    "input": "Example #1 SyncSharedMemory::first() example",
    "output": "<?php\n$mem\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nif (\n$mem\n->\nfirst\n())\n{\n\n// Do first time initialization work here.\n}\nvar_dump\n(\n$mem\n->\nfirst\n());\n$mem2\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nvar_dump\n(\n$mem2\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 SyncSharedMemory::__construct() example",
    "output": "<?php\n// You will probably need to protect shared memory with other synchronization objects.\n// Shared memory goes away when the last reference to it disappears.\n$mem\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nif (\n$mem\n->\nfirst\n())\n{\n\n// Do first time initialization work here.\n}\n$result\n=\n$mem\n->\nwrite\n(\n\"report.txt\"\n);\n$result\n=\n$mem\n->\nread\n(\n3\n, -\n4\n);\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 SyncSharedMemory::size() example",
    "output": "<?php\n$mem\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nvar_dump\n(\n$mem\n->\nsize\n());\n?>"
  },
  {
    "input": "Example #1 SyncSharedMemory::write() example",
    "output": "<?php\n// You will probably need to protect shared memory with other synchronization objects.\n// Shared memory goes away when the last reference to it disappears.\n$mem\n= new\nSyncSharedMemory\n(\n\"AppReportName\"\n,\n1024\n);\nif (\n$mem\n->\nfirst\n())\n{\n\n// Do first time initialization work here.\n}\n$result\n=\n$mem\n->\nwrite\n(\n\"report.txt\"\n);\nvar_dump\n(\n$result\n);\n$result\n=\n$mem\n->\nwrite\n(\n\"report.txt\"\n, -\n3\n);\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #2 Simple train",
    "output": "<?php\n$num_input\n=\n2\n;\n$num_output\n=\n1\n;\n$num_layers\n=\n3\n;\n$num_neurons_hidden\n=\n3\n;\n$desired_error\n=\n0.001\n;\n$max_epochs\n=\n500000\n;\n$epochs_between_reports\n=\n1000\n;\n$ann\n=\nfann_create_standard\n(\n$num_layers\n,\n$num_input\n,\n$num_neurons_hidden\n,\n$num_output\n);\nif (\n$ann\n) {\n\nfann_set_activation_function_hidden\n(\n$ann\n,\nFANN_SIGMOID_SYMMETRIC\n);\n\nfann_set_activation_function_output\n(\n$ann\n,\nFANN_SIGMOID_SYMMETRIC\n);\n\n$filename\n=\ndirname\n(\n__FILE__\n) .\n\"/xor.data\"\n;\n    if (\nfann_train_on_file\n(\n$ann\n,\n$filename\n,\n$max_epochs\n,\n$epochs_between_reports\n,\n$desired_error\n))\n\nfann_save\n(\n$ann\n,\ndirname\n(\n__FILE__\n) .\n\"/xor_float.net\"\n);\n\nfann_destroy\n(\n$ann\n);\n}\n?>"
  },
  {
    "input": "Example #3 Simple test",
    "output": "<?php\n$train_file\n= (\ndirname\n(\n__FILE__\n) .\n\"/xor_float.net\"\n);\nif (!\nis_file\n(\n$train_file\n))\n    die(\n\"The file xor_float.net has not been created! Please run simple_train.php to generate it\"\n);\n$ann\n=\nfann_create_from_file\n(\n$train_file\n);\nif (!\n$ann\n)\n    die(\n\"ANN could not be created\"\n);\n$input\n= array(-\n1\n,\n1\n);\n$calc_out\n=\nfann_run\n(\n$ann\n,\n$input\n);\nprintf\n(\n\"xor test (%f,%f) -> %f\\n\"\n,\n$input\n[\n0\n],\n$input\n[\n1\n],\n$calc_out\n[\n0\n]);\nfann_destroy\n(\n$ann\n);\n?>"
  },
  {
    "input": "Example #1 fann_create_train_from_callback() example",
    "output": "<?php\nfunction\ncreate_train_callback\n(\n$num_data\n,\n$num_input\n,\n$num_output\n) {\n    return array(\n\n\"input\"\n=>\narray_fill\n(\n0\n,\n$num_input\n,\n1\n),\n\n\"output\"\n=>\narray_fill\n(\n0\n,\n$num_output\n,\n1\n),\n    );\n}\n$num_data\n=\n3\n;\n$num_input\n=\n2\n;\n$num_output\n=\n1\n;\n$train_data\n=\nfann_create_train_from_callback\n(\n$num_data\n,\n$num_input\n,\n$num_output\n,\n\"create_train_callback\"\n);\nif (\n$train_data\n) {\n\n// Do something with $train_data\n}\n?>"
  },
  {
    "input": "Example #1 fann_read_train_from_file() example",
    "output": "<?php\n$train_data\n=\nfann_read_train_from_file\n(\n\"xor.data\"\n);\nif (\n$train_data\n) {\n\n// Do something with $train_data for XOR function\n}\n?>"
  },
  {
    "input": "Example #1 igbinary_serialize() example",
    "output": "<?php\n$ser\n=\nigbinary_serialize\n([\n'test'\n,\n'test'\n]);\necho\nurlencode\n(\n$ser\n),\n\"\\n\"\n;\nvar_export\n(\nigbinary_unserialize\n(\n$ser\n));\n?>"
  },
  {
    "input": "Example #1 \n     JsonSerializable::jsonSerialize() example\n     returning an array",
    "output": "<?php\nclass\nArrayValue\nimplements\nJsonSerializable\n{\n    private\n$array\n;\n    public function\n__construct\n(array\n$array\n) {\n\n$this\n->\narray\n=\n$array\n;\n    }\n    public function\njsonSerialize\n():\nmixed\n{\n        return\n$this\n->\narray\n;\n    }\n}\n$array\n= [\n1\n,\n2\n,\n3\n];\necho\njson_encode\n(new\nArrayValue\n(\n$array\n),\nJSON_PRETTY_PRINT\n);\n?>"
  },
  {
    "input": "Example #2 \n     JsonSerializable::jsonSerialize() example\n     returning an associative array",
    "output": "<?php\nclass\nArrayValue\nimplements\nJsonSerializable\n{\n    private\n$array\n;\n    public function\n__construct\n(array\n$array\n) {\n\n$this\n->\narray\n=\n$array\n;\n    }\n    public function\njsonSerialize\n() {\n        return\n$this\n->\narray\n;\n    }\n}\n$array\n= [\n'foo'\n=>\n'bar'\n,\n'quux'\n=>\n'baz'\n];\necho\njson_encode\n(new\nArrayValue\n(\n$array\n),\nJSON_PRETTY_PRINT\n);\n?>"
  },
  {
    "input": "Example #3 \n     JsonSerializable::jsonSerialize() example\n     returning an int",
    "output": "<?php\nclass\nIntegerValue\nimplements\nJsonSerializable\n{\n    private\n$number\n;\n    public function\n__construct\n(\n$number\n) {\n\n$this\n->\nnumber\n= (int)\n$number\n;\n    }\n    public function\njsonSerialize\n() {\n        return\n$this\n->\nnumber\n;\n    }\n}\necho\njson_encode\n(new\nIntegerValue\n(\n1\n),\nJSON_PRETTY_PRINT\n);\n?>"
  },
  {
    "input": "Example #4 \n     JsonSerializable::jsonSerialize() example\n     returning a string",
    "output": "<?php\nclass\nStringValue\nimplements\nJsonSerializable\n{\n    private\n$string\n;\n    public function\n__construct\n(\n$string\n) {\n\n$this\n->\nstring\n= (string)\n$string\n;\n    }\n    public function\njsonSerialize\n() {\n        return\n$this\n->\nstring\n;\n    }\n}\necho\njson_encode\n(new\nStringValue\n(\n'Hello!'\n),\nJSON_PRETTY_PRINT\n);\n?>"
  },
  {
    "input": "Example #1 json_decode() examples",
    "output": "<?php\n$json\n=\n'{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'\n;\nvar_dump\n(\njson_decode\n(\n$json\n));\nvar_dump\n(\njson_decode\n(\n$json\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #3 common mistakes using json_decode()",
    "output": "<?php\n// the following strings are valid JavaScript but not valid JSON\n// the name and value must be enclosed in double quotes\n// single quotes are not valid\n$bad_json\n=\n\"{ 'bar': 'baz' }\"\n;\njson_decode\n(\n$bad_json\n);\n// null\n// the name must be enclosed in double quotes\n$bad_json\n=\n'{ bar: \"baz\" }'\n;\njson_decode\n(\n$bad_json\n);\n// null\n// trailing commas are not allowed\n$bad_json\n=\n'{ bar: \"baz\", }'\n;\njson_decode\n(\n$bad_json\n);\n// null\n?>"
  },
  {
    "input": "Example #4 depth errors",
    "output": "<?php\n// Encode some data with a maximum depth  of 4 (array -> array -> array -> string)\n$json\n=\njson_encode\n(\n    array(\n\n1\n=> array(\n\n'English'\n=> array(\n\n'One'\n,\n\n'January'\n\n),\n\n'French'\n=> array(\n\n'Une'\n,\n\n'Janvier'\n\n)\n        )\n    )\n);\n// Show the errors for different depths.\nvar_dump\n(\njson_decode\n(\n$json\n,\ntrue\n,\n4\n));\necho\n'Last error: '\n,\njson_last_error_msg\n(),\nPHP_EOL\n,\nPHP_EOL\n;\nvar_dump\n(\njson_decode\n(\n$json\n,\ntrue\n,\n3\n));\necho\n'Last error: '\n,\njson_last_error_msg\n(),\nPHP_EOL\n,\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #5 json_decode() of large integers",
    "output": "<?php\n$json\n=\n'{\"number\": 12345678901234567890}'\n;\nvar_dump\n(\njson_decode\n(\n$json\n));\nvar_dump\n(\njson_decode\n(\n$json\n,\nfalse\n,\n512\n,\nJSON_BIGINT_AS_STRING\n));\n?>"
  },
  {
    "input": "Example #1 A json_encode() example",
    "output": "<?php\n$arr\n= array(\n'a'\n=>\n1\n,\n'b'\n=>\n2\n,\n'c'\n=>\n3\n,\n'd'\n=>\n4\n,\n'e'\n=>\n5\n);\necho\njson_encode\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #2 \n     A json_encode() example showing some flags in use",
    "output": "<?php\n$a\n= array(\n'<foo>'\n,\n\"'bar'\"\n,\n'\"baz\"'\n,\n'&blong&'\n,\n\"\\xc3\\xa9\"\n);\necho\n\"Normal: \"\n,\njson_encode\n(\n$a\n),\n\"\\n\"\n;\necho\n\"Tags: \"\n,\njson_encode\n(\n$a\n,\nJSON_HEX_TAG\n),\n\"\\n\"\n;\necho\n\"Apos: \"\n,\njson_encode\n(\n$a\n,\nJSON_HEX_APOS\n),\n\"\\n\"\n;\necho\n\"Quot: \"\n,\njson_encode\n(\n$a\n,\nJSON_HEX_QUOT\n),\n\"\\n\"\n;\necho\n\"Amp: \"\n,\njson_encode\n(\n$a\n,\nJSON_HEX_AMP\n),\n\"\\n\"\n;\necho\n\"Unicode: \"\n,\njson_encode\n(\n$a\n,\nJSON_UNESCAPED_UNICODE\n),\n\"\\n\"\n;\necho\n\"All: \"\n,\njson_encode\n(\n$a\n,\nJSON_HEX_TAG\n|\nJSON_HEX_APOS\n|\nJSON_HEX_QUOT\n|\nJSON_HEX_AMP\n|\nJSON_UNESCAPED_UNICODE\n),\n\"\\n\\n\"\n;\n$b\n= array();\necho\n\"Empty array output as array: \"\n,\njson_encode\n(\n$b\n),\n\"\\n\"\n;\necho\n\"Empty array output as object: \"\n,\njson_encode\n(\n$b\n,\nJSON_FORCE_OBJECT\n),\n\"\\n\\n\"\n;\n$c\n= array(array(\n1\n,\n2\n,\n3\n));\necho\n\"Non-associative array output as array: \"\n,\njson_encode\n(\n$c\n),\n\"\\n\"\n;\necho\n\"Non-associative array output as object: \"\n,\njson_encode\n(\n$c\n,\nJSON_FORCE_OBJECT\n),\n\"\\n\\n\"\n;\n$d\n= array(\n'foo'\n=>\n'bar'\n,\n'baz'\n=>\n'long'\n);\necho\n\"Associative array always output as object: \"\n,\njson_encode\n(\n$d\n),\n\"\\n\"\n;\necho\n\"Associative array always output as object: \"\n,\njson_encode\n(\n$d\n,\nJSON_FORCE_OBJECT\n),\n\"\\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 JSON_NUMERIC_CHECK option example",
    "output": "<?php\necho\n\"Strings representing numbers automatically turned into numbers\"\n.\nPHP_EOL\n;\n$numbers\n= array(\n'+123123'\n,\n'-123123'\n,\n'1.2e3'\n,\n'0.00001'\n);\nvar_dump\n(\n\n$numbers\n,\n\njson_encode\n(\n$numbers\n,\nJSON_NUMERIC_CHECK\n)\n);\necho\n\"Strings containing improperly formatted numbers\"\n.\nPHP_EOL\n;\n$strings\n= array(\n'+a33123456789'\n,\n'a123'\n);\nvar_dump\n(\n\n$strings\n,\n\njson_encode\n(\n$strings\n,\nJSON_NUMERIC_CHECK\n)\n);\n?>"
  },
  {
    "input": "Example #4 Sequential versus non-sequential array example",
    "output": "<?php\necho\n\"Sequential array\"\n.\nPHP_EOL\n;\n$sequential\n= array(\n\"foo\"\n,\n\"bar\"\n,\n\"baz\"\n,\n\"blong\"\n);\nvar_dump\n(\n\n$sequential\n,\n\njson_encode\n(\n$sequential\n)\n);\necho\nPHP_EOL\n.\n\"Non-sequential array\"\n.\nPHP_EOL\n;\n$nonsequential\n= array(\n1\n=>\n\"foo\"\n,\n2\n=>\n\"bar\"\n,\n3\n=>\n\"baz\"\n,\n4\n=>\n\"blong\"\n);\nvar_dump\n(\n\n$nonsequential\n,\n\njson_encode\n(\n$nonsequential\n)\n);\necho\nPHP_EOL\n.\n\"Sequential array with one key unset\"\n.\nPHP_EOL\n;\nunset(\n$sequential\n[\n1\n]);\nvar_dump\n(\n\n$sequential\n,\n\njson_encode\n(\n$sequential\n)\n);\n?>"
  },
  {
    "input": "Example #5 JSON_PRESERVE_ZERO_FRACTION option example",
    "output": "<?php\nvar_dump\n(\njson_encode\n(\n12.0\n,\nJSON_PRESERVE_ZERO_FRACTION\n));\nvar_dump\n(\njson_encode\n(\n12.0\n));\n?>"
  },
  {
    "input": "Example #1 json_last_error() example",
    "output": "<?php\n// A valid json string\n$json\n[] =\n'{\"Organization\": \"PHP Documentation Team\"}'\n;\n// An invalid json string which will cause an syntax\n// error, in this case we used ' instead of \" for quotation\n$json\n[] =\n\"{'Organization': 'PHP Documentation Team'}\"\n;\nforeach (\n$json\nas\n$string\n) {\n    echo\n'Decoding: '\n.\n$string\n;\n\njson_decode\n(\n$string\n);\n    switch (\njson_last_error\n()) {\n        case\nJSON_ERROR_NONE\n:\n            echo\n' - No errors'\n;\n        break;\n        case\nJSON_ERROR_DEPTH\n:\n            echo\n' - Maximum stack depth exceeded'\n;\n        break;\n        case\nJSON_ERROR_STATE_MISMATCH\n:\n            echo\n' - Underflow or the modes mismatch'\n;\n        break;\n        case\nJSON_ERROR_CTRL_CHAR\n:\n            echo\n' - Unexpected control character found'\n;\n        break;\n        case\nJSON_ERROR_SYNTAX\n:\n            echo\n' - Syntax error, malformed JSON'\n;\n        break;\n        case\nJSON_ERROR_UTF8\n:\n            echo\n' - Malformed UTF-8 characters, possibly incorrectly encoded'\n;\n        break;\n        default:\n            echo\n' - Unknown error'\n;\n        break;\n    }\n    echo\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #2 json_last_error() with json_encode()",
    "output": "<?php\n// An invalid UTF8 sequence\n$text\n=\n\"\\xB1\\x31\"\n;\n$json\n=\njson_encode\n(\n$text\n);\n$error\n=\njson_last_error\n();\nvar_dump\n(\n$json\n,\n$error\n===\nJSON_ERROR_UTF8\n);\n?>"
  },
  {
    "input": "Example #3 json_last_error() and JSON_THROW_ON_ERROR",
    "output": "<?php\n// An invalid UTF8 sequence which causes JSON_ERROR_UTF8\njson_encode\n(\n\"\\xB1\\x31\"\n);\n// The following does not cause a JSON error\njson_encode\n(\n'okay'\n,\nJSON_THROW_ON_ERROR\n);\n// The global error state has not been changed by the former json_encode()\nvar_dump\n(\njson_last_error\n() ===\nJSON_ERROR_UTF8\n);\n?>"
  },
  {
    "input": "Example #1 json_validate() examples",
    "output": "<?php\nvar_dump\n(\njson_validate\n(\n'{ \"test\": { \"foo\": \"bar\" } }'\n));\nvar_dump\n(\njson_validate\n(\n'{ \"\": \"\": \"\" } }'\n));\n?>"
  },
  {
    "input": "Example #1 simdjson_decode() examples",
    "output": "<?php\n$json\n=\n'{\"a\":1,\"b\":2,\"c\":3}'\n;\nvar_dump\n(\nsimdjson_decode\n(\n$json\n));\nvar_dump\n(\nsimdjson_decode\n(\n$json\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #3 common mistakes using simdjson_decode()",
    "output": "<?php\n// the following strings are valid JavaScript but not valid JSON\n// the name and value must be enclosed in double quotes\n// single quotes are not valid\n$bad_json\n=\n\"{ 'bar': 'baz' }\"\n;\nsimdjson_decode\n(\n$bad_json\n);\n// Throws SimdJsonException\n// the name must be enclosed in double quotes\n$bad_json\n=\n'{ bar: \"baz\" }'\n;\nsimdjson_decode\n(\n$bad_json\n);\n// Throws SimdJsonException\n// trailing commas are not allowed\n$bad_json\n=\n'{ bar: \"baz\", }'\n;\nsimdjson_decode\n(\n$bad_json\n);\n// Throws SimdJsonException\n?>"
  },
  {
    "input": "Example #4 depth errors",
    "output": "<?php\n// Encode some data with a maximum depth of 4\n// (array -> array -> array -> string)\n$json\n=\njson_encode\n(\n    [\n\n1\n=> [\n\n'English'\n=> [\n\n'One'\n,\n\n'January'\n\n],\n\n'French'\n=> [\n\n'Une'\n,\n\n'Janvier'\n\n]\n        ]\n    ]\n);\n// Show the errors for different depths.\nvar_dump\n(\nsimdjson_decode\n(\n$json\n,\ntrue\n,\n4\n));\ntry {\n\nvar_dump\n(\nsimdjson_decode\n(\n$json\n,\ntrue\n,\n3\n));\n} catch (\nSimdJsonException $e\n) {\n     echo\n\"Caught: \"\n,\n$e\n->\ngetMessage\n(),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #5 simdjson_decode() of large integers",
    "output": "<?php\n$json\n=\n'{\"number\": 12345678901234567890}'\n;\nvar_dump\n(\nsimdjson_decode\n(\n$json\n));\n?>"
  },
  {
    "input": "Example #1 simdjson_decode() examples",
    "output": "<?php\n$json\n=\n'{\"a\":1,\"b\":2,\"c\":3}'\n;\n$invalidJson\n=\n'{\"a\":1,\"b\":2,\"c\":'\n;\nvar_dump\n(\nsimdjson_is_valid\n(\n$json\n));\nvar_dump\n(\nsimdjson_is_valid\n(\n$invalidJson\n));\n?>"
  },
  {
    "input": "Example #2 depth errors",
    "output": "<?php\n// Encode some data with a maximum depth of 4\n// (array -> array -> array -> string)\n$json\n=\njson_encode\n(\n    [\n\n1\n=> [\n\n'English'\n=> [\n\n'One'\n,\n\n'January'\n\n],\n\n'French'\n=> [\n\n'Une'\n,\n\n'Janvier'\n\n]\n        ]\n    ]\n);\n// Show the errors for different depths.\nvar_dump\n(\nsimdjson_is_valid\n(\n$json\n,\n4\n));\nvar_dump\n(\nsimdjson_is_valid\n(\n$json\n,\n3\n));\n?>"
  },
  {
    "input": "Example #1 Lua::assign()example",
    "output": "<?php\n$lua\n= new\nLua\n();\n$lua\n->\nassign\n(\n\"php_var\"\n, array(\n1\n=>\n1\n,\n2\n,\n3\n));\n//lua table index begin with 1\n$lua\n->\neval\n(<<<CODE\n    print(php_var);\nCODE\n);\n?>"
  },
  {
    "input": "Example #1 Lua::call()example",
    "output": "<?php\n$lua\n= new\nLua\n();\n$lua\n->\neval\n(<<<CODE\n    function dummy(foo, bar)\n        print(foo, \",\", bar)\n    end\nCODE\n);\n$lua\n->\ncall\n(\n\"dummy\"\n, array(\n\"Lua\"\n,\n\"geiliable\\n\"\n));\n$lua\n->\ndummy\n(\n\"Lua\"\n,\n\"geiliable\"\n);\n// __call()\nvar_dump\n(\n$lua\n->\ncall\n(array(\n\"table\"\n,\n\"concat\"\n), array(array(\n1\n=>\n1\n,\n2\n=>\n2\n,\n3\n=>\n3\n),\n\"-\"\n)));\n?>"
  },
  {
    "input": "Example #1 Lua::eval()example",
    "output": "<?php\n$lua\n= new\nLua\n();\n$lua\n->\neval\n(<<<CODE\n    print(2);\nCODE\n);\n?>"
  },
  {
    "input": "Example #1 Lua::registerCallback()example",
    "output": "<?php\n$lua\n= new\nLua\n();\n$lua\n->\nregisterCallback\n(\n\"echo\"\n,\n\"var_dump\"\n);\n$lua\n->\neval\n(<<<CODE\n    echo({1, 2, 3});\nCODE\n);\n?>"
  },
  {
    "input": "Example #1 LuaClosure::__invoke()example",
    "output": "<?php\n$lua\n= new\nLua\n();\n$closure\n=\n$lua\n->\neval\n(<<<CODE\n    return (function ()\n        print(\"hello world\")\n    end)\nCODE\n);\n$lua\n->\ncall\n(\n$closure\n);\n$closure\n();\n?>"
  },
  {
    "input": "Example #1 Execute some Lua code",
    "output": "<?php\n$sandbox\n= new\nLuaSandbox\n;\n$sandbox\n->\nsetMemoryLimit\n(\n50\n*\n1024\n*\n1024\n);\n$sandbox\n->\nsetCPULimit\n(\n10\n);\n// Register some functions in the Lua environment\nfunction\nfrobnosticate\n(\n$v\n) {\n    return [\n$v\n+\n42\n];\n}\n$sandbox\n->\nregisterLibrary\n(\n'php'\n, [\n\n'frobnosticate'\n=>\n'frobnosticate'\n,\n\n'output'\n=> function (\n$string\n) {\n        echo\n\"\n$string\n\\n\"\n;\n    },\n\n'error'\n=> function () {\n        throw new\nLuaSandboxRuntimeError\n(\n\"Something is wrong\"\n);\n    }\n] );\n// Execute some Lua code, including callbacks into PHP and into Lua\n$luaCode\n= <<<EOF\nphp.output( \"Hello, world\" );\nreturn \"Hi\", function ( v )\n    return php.frobnosticate( v + 200 )\nend\nEOF;\nlist(\n$hi\n,\n$frob\n) =\n$sandbox\n->\nloadString\n(\n$luaCode\n)->\ncall\n();\nassert\n(\n$frob\n->\ncall\n(\n4000\n) === [\n4242\n] );\n// PHP-thrown LuaSandboxRuntimeError exceptions can be caught inside Lua\nlist(\n$ok\n,\n$message\n) =\n$sandbox\n->\nloadString\n(\n'return pcall( php.error )'\n)->\ncall\n();\nassert\n( !\n$ok\n);\nassert\n(\n$message\n===\n'Something is wrong'\n);\n?>"
  },
  {
    "input": "Example #1 Calling a Lua function",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// Call Lua's string.match\n$captures\n=\n$sandbox\n->\ncallFunction\n(\n'string.match'\n,\n$string\n,\n$pattern\n);\n?>"
  },
  {
    "input": "Example #1 Profiling Lua code",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// Start the profiler\n$sandbox\n->\nenableProfiler\n(\n0.01\n);\n// ... Execute some Lua code here ...\n// Fetch the profiler data\n$data\n=\n$sandbox\n->\ngetProfilerFunctionReport\n();\n?>"
  },
  {
    "input": "Example #1 Loading code into Lua",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// Load the code\n$function\n=\n$sandbox\n->\nloadString\n(\n<<<CODE\n    return \"Hello, world\"\nCODE\n);\n// Execute the loaded code\nvar_dump\n(\n$function\n->\ncall\n() );\n?>"
  },
  {
    "input": "Example #1 Manipulating the usage timer",
    "output": "<?php\n// create a new LuaSandbox and set a CPU limit\n$sandbox\n= new\nLuaSandbox\n();\n$sandbox\n->\nsetCPULimit\n(\n1\n);\nfunction\ndoWait\n(\n$t\n) {\n\n$end\n=\nmicrotime\n(\ntrue\n) +\n$t\n;\n    while (\nmicrotime\n(\ntrue\n) <\n$end\n) {\n\n// waste CPU cycles\n\n}\n}\n// Register a PHP callback\n$sandbox\n->\nregisterLibrary\n(\n'php'\n, [\n\n'test'\n=> function () use (\n$sandbox\n) {\n\n$sandbox\n->\npauseUsageTimer\n();\n\ndoWait\n(\n5\n);\n\n$sandbox\n->\nunpauseUsageTimer\n();\n\ndoWait\n(\n0.1\n);\n    },\n\n'test2'\n=> function () use (\n$sandbox\n) {\n\n$sandbox\n->\npauseUsageTimer\n();\n\n$sandbox\n->\nunpauseUsageTimer\n();\n\ndoWait\n(\n1.1\n);\n    }\n] );\necho\n\"This should not time out...\\n\"\n;\n$sandbox\n->\nloadString\n(\n'php.test()'\n)->\ncall\n();\necho\n\"This should time out.\\n\"\n;\ntry {\n\n$sandbox\n->\nloadString\n(\n'php.test2()'\n)->\ncall\n();\n    echo\n\"It did not?\\n\"\n;\n} catch (\nLuaSandboxTimeoutError $ex\n) {\n    echo\n\"It did! \"\n.\n$ex\n->\ngetMessage\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Registering PHP functions to call from Lua",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// Register some functions in the Lua environment\nfunction\nfrobnosticate\n(\n$v\n) {\n    return [\n$v\n+\n42\n];\n}\n$sandbox\n->\nregisterLibrary\n(\n'php'\n, [\n\n'frobnosticate'\n=>\n'frobnosticate'\n,\n\n'output'\n=> function (\n$string\n) {\n        echo\n\"\n$string\n\\n\"\n;\n    },\n\n'error'\n=> function () {\n        throw new\nLuaSandboxRuntimeError\n(\n\"Something is wrong\"\n);\n    }\n] );\n?>"
  },
  {
    "input": "Example #1 Calling a Lua function",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// set a time limit\n$sandbox\n->\nsetCPULimit\n(\n2\n);\n// Run Lua code\n$sandbox\n->\nloadString\n(\n'while true do end'\n)->\ncall\n();\n?>"
  },
  {
    "input": "Example #1 Calling a Lua function",
    "output": "<?php\n// create a new LuaSandbox\n$sandbox\n= new\nLuaSandbox\n();\n// set a memory limit\n$sandbox\n->\nsetMemoryLimit\n(\n50\n*\n1024\n*\n1024\n);\n// Run Lua code\n$sandbox\n->\nloadString\n(\n'local x = \"x\"; while true do x = x .. x; end'\n)->\ncall\n();\n?>"
  },
  {
    "input": "Example #1 Using constant() with Constants",
    "output": "<?php\ndefine\n(\n\"MAXSIZE\"\n,\n100\n);\necho\nMAXSIZE\n;\necho\nconstant\n(\n\"MAXSIZE\"\n);\n// same thing as the previous line\ninterface\nbar\n{\n    const\ntest\n=\n'foobar!'\n;\n}\nclass\nfoo\n{\n    const\ntest\n=\n'foobar!'\n;\n}\n$const\n=\n'test'\n;\nvar_dump\n(\nconstant\n(\n'bar::'\n.\n$const\n));\n// string(7) \"foobar!\"\nvar_dump\n(\nconstant\n(\n'foo::'\n.\n$const\n));\n// string(7) \"foobar!\"\n?>"
  },
  {
    "input": "Example #2 Using constant() with Enum Cases (as of PHP 8.1.0)",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\n$case\n=\n'Hearts'\n;\nvar_dump\n(\nconstant\n(\n'Suit::'\n.\n$case\n));\n// enum(Suit::Hearts)\n?>"
  },
  {
    "input": "Example #1 Defining Constants",
    "output": "<?php\ndefine\n(\n\"CONSTANT\"\n,\n\"Hello world.\"\n);\necho\nCONSTANT\n;\n// outputs \"Hello world.\"\necho\nConstant\n;\n// outputs \"Constant\" and issues a notice.\ndefine\n(\n\"GREETING\"\n,\n\"Hello you.\"\n,\ntrue\n);\necho\nGREETING\n;\n// outputs \"Hello you.\"\necho\nGreeting\n;\n// outputs \"Hello you.\"\n// Works as of PHP 7\ndefine\n(\n'ANIMALS'\n, array(\n\n'dog'\n,\n\n'cat'\n,\n\n'bird'\n));\necho\nANIMALS\n[\n1\n];\n// outputs \"cat\"\n?>"
  },
  {
    "input": "Example #1 Checking Constants",
    "output": "<?php\n/* Note the use of quotes, this is important. This example is checking\n * if the string 'TEST' is the name of a constant named TEST */\nif (\ndefined\n(\n'TEST'\n)) {\n    echo\nTEST\n;\n}\ninterface\nbar\n{\n    const\ntest\n=\n'foobar!'\n;\n}\nclass\nfoo\n{\n    const\ntest\n=\n'foobar!'\n;\n}\nvar_dump\n(\ndefined\n(\n'bar::test'\n));\n// bool(true)\nvar_dump\n(\ndefined\n(\n'foo::test'\n));\n// bool(true)\n?>"
  },
  {
    "input": "Example #2 Checking Enum Cases (as of PHP 8.1.0)",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\nvar_dump\n(\ndefined\n(\n'Suit::Hearts'\n));\n// bool(true)\n?>"
  },
  {
    "input": "Example #1 eval() example - simple text merge",
    "output": "<?php\n$string\n=\n'cup'\n;\n$name\n=\n'coffee'\n;\n$str\n=\n'This is a $string with my $name in it.'\n;\necho\n$str\n.\n\"\\n\"\n;\neval(\n\"\\$str = \\\"\n$str\n\\\";\"\n);\necho\n$str\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Basic exit() example",
    "output": "<?php\n// exit program normally\nexit();\nexit(\n0\n);\n// exit with an error code\nexit(\n1\n);\n?>"
  },
  {
    "input": "Example #2 exit() example with a string",
    "output": "<?php\n$filename\n=\n'/path/to/data-file'\n;\n$file\n=\nfopen\n(\n$filename\n,\n'r'\n)\n    or exit(\n\"unable to open file (\n$filename\n)\"\n);\n?>"
  },
  {
    "input": "Example #3 Shutdown functions and destructors run regardless",
    "output": "<?php\nclass\nFoo\n{\n    public function\n__destruct\n()\n    {\n        echo\n'Destruct: '\n.\n__METHOD__\n.\n'()'\n.\nPHP_EOL\n;\n    }\n}\nfunction\nshutdown\n()\n{\n    echo\n'Shutdown: '\n.\n__FUNCTION__\n.\n'()'\n.\nPHP_EOL\n;\n}\n$foo\n= new\nFoo\n();\nregister_shutdown_function\n(\n'shutdown'\n);\nexit();\necho\n'This will not be output.'\n;\n?>"
  },
  {
    "input": "Example #4 exit() as a statement",
    "output": "<?php\n// exit program normally with exit code 0\nexit;\n?>"
  },
  {
    "input": "Example #1 Listing all information about the users browser",
    "output": "<?php\necho\n$_SERVER\n[\n'HTTP_USER_AGENT'\n] .\n\"\\n\\n\"\n;\n$browser\n=\nget_browser\n(\nnull\n,\ntrue\n);\nprint_r\n(\n$browser\n);\n?>"
  },
  {
    "input": "Example #1 A __halt_compiler() example",
    "output": "<?php\n// open this file\n$fp\n=\nfopen\n(\n__FILE__\n,\n'r'\n);\n// seek file pointer to data\nfseek\n(\n$fp\n,\n__COMPILER_HALT_OFFSET__\n);\n// and output it\nvar_dump\n(\nstream_get_contents\n(\n$fp\n));\n// the end of the script execution\n__halt_compiler();\nthe installation data\n(\neg\n.\ntar\n,\ngz\n,\nPHP\n,\netc\n.)"
  },
  {
    "input": "Example #1 highlight_string() example",
    "output": "<?php\nhighlight_string\n(\n'<?php phpinfo(); ?>'\n);\n?>"
  },
  {
    "input": "Example #1 hrtime() usage",
    "output": "<?php\necho\nhrtime\n(\ntrue\n),\nPHP_EOL\n;\nprint_r\n(\nhrtime\n());\n?>"
  },
  {
    "input": "Example #1 A ignore_user_abort() example",
    "output": "<?php\n// Ignore user aborts and allow the script\n// to run forever\nignore_user_abort\n(\ntrue\n);\nset_time_limit\n(\n0\n);\necho\n'Testing connection handling in PHP'\n;\n// Run a pointless loop that sometime\n// hopefully will make us click away from\n// page or click the \"Stop\" button.\nwhile(\n1\n)\n{\n\n// Did the connection fail?\n\nif(\nconnection_status\n() !=\nCONNECTION_NORMAL\n)\n    {\n        break;\n    }\n\n// Sleep for 10 seconds\n\nsleep\n(\n10\n);\n}\n// If this is reached, then the 'break'\n// was triggered from inside the while loop\n// So here we can log, or perform any other tasks\n// we need without actually being dependent on the\n// browser.\n?>"
  },
  {
    "input": "Example #1 pack() example",
    "output": "<?php\n$binarydata\n=\npack\n(\n\"nvc*\"\n,\n0x1234\n,\n0x5678\n,\n65\n,\n66\n);\n?>"
  },
  {
    "input": "Example #1 php_strip_whitespace() example",
    "output": "<?php\n// PHP comment here\n/*\n * Another PHP comment\n */\necho\nphp_strip_whitespace\n(\n__FILE__\n);\n// Newlines are considered whitespace, and are removed too:\ndo_nothing\n();\n?>"
  },
  {
    "input": "Example #3 Example usage of VT100 support enabled",
    "output": "<?php\n$out\n=\nfopen\n(\n'php://stdout'\n,\n'w'\n);\nfwrite\n(\n$out\n,\n'Just forgot a lettr.'\n);\n// Moves the cursor two characters backwards\nfwrite\n(\n$out\n,\n\"\\033[2D\"\n);\n// Inserts one blank, shifting existing text to the right -> Just forgot a lett r.\nfwrite\n(\n$out\n,\n\"\\033[1@\"\n);\nfwrite\n(\n$out\n,\n'e'\n);\n?>"
  },
  {
    "input": "Example #1 sleep() example",
    "output": "<?php\n// current time\necho\ndate\n(\n'h:i:s'\n) .\n\"\\n\"\n;\n// sleep for 10 seconds\nsleep\n(\n10\n);\n// wake up !\necho\ndate\n(\n'h:i:s'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 A sys_getloadavg() example",
    "output": "<?php\n$load\n=\nsys_getloadavg\n();\nif (\n$load\n[\n0\n] >\n0.80\n) {\n\nheader\n(\n'HTTP/1.1 503 Too busy, try again later'\n);\n    die(\n'Server too busy. Please try again later.'\n);\n}\n?>"
  },
  {
    "input": "Example #1 time_nanosleep() example",
    "output": "<?php\n// Careful! This won't work as expected if an array is returned\nif (\ntime_nanosleep\n(\n0\n,\n500000000\n)) {\n    echo\n\"Slept for half a second.\\n\"\n;\n}\n// This is better:\nif (\ntime_nanosleep\n(\n0\n,\n500000000\n) ===\ntrue\n) {\n    echo\n\"Slept for half a second.\\n\"\n;\n}\n// And this is the best:\n$nano\n=\ntime_nanosleep\n(\n2\n,\n100000\n);\nif (\n$nano\n===\ntrue\n) {\n    echo\n\"Slept for 2 seconds, 100 microseconds.\\n\"\n;\n} elseif (\n$nano\n===\nfalse\n) {\n    echo\n\"Sleeping failed.\\n\"\n;\n} elseif (\nis_array\n(\n$nano\n)) {\n\n$seconds\n=\n$nano\n[\n'seconds'\n];\n\n$nanoseconds\n=\n$nano\n[\n'nanoseconds'\n];\n    echo\n\"Interrupted by a signal.\\n\"\n;\n    echo\n\"Time remaining:\n$seconds\n seconds,\n$nanoseconds\n nanoseconds.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A time_sleep_until() example",
    "output": "<?php\n//returns false and generates a warning\nvar_dump\n(\ntime_sleep_until\n(\ntime\n()-\n1\n));\n// may only work on faster computers, will sleep up to 0.2 seconds\nvar_dump\n(\ntime_sleep_until\n(\nmicrotime\n(\ntrue\n)+\n0.2\n));\n?>"
  },
  {
    "input": "Example #1 uniqid() Example",
    "output": "<?php\n/* A uniqid, like: 4b3403665fea6 */\nprintf\n(\n\"uniqid(): %s\\r\\n\"\n,\nuniqid\n());\n/* We can also prefix the uniqid, this the same as\n * doing:\n *\n * $uniqid = $prefix . uniqid();\n * $uniqid = uniqid($prefix);\n */\nprintf\n(\n\"uniqid('php_'): %s\\r\\n\"\n,\nuniqid\n(\n'php_'\n));\n/* We can also activate the more_entropy parameter, which is\n * required on some systems, like Cygwin. This makes uniqid()\n * produce a value like: 4b340550242239.64159797\n */\nprintf\n(\n\"uniqid('', true): %s\\r\\n\"\n,\nuniqid\n(\n''\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 unpack() example",
    "output": "<?php\n$binarydata\n=\n\"\\x04\\x00\\xa0\\x00\"\n;\n$array\n=\nunpack\n(\n\"cchars/nint\"\n,\n$binarydata\n);\nprint_r\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #2 unpack() example with a repeater",
    "output": "<?php\n$binarydata\n=\n\"\\x04\\x00\\xa0\\x00\"\n;\n$array\n=\nunpack\n(\n\"c2chars/nint\"\n,\n$binarydata\n);\nprint_r\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #3 unpack() example with unnamed keys",
    "output": "<?php\n$binarydata\n=\n\"\\x32\\x42\\x00\\xa0\"\n;\n$array\n=\nunpack\n(\n\"c2/n\"\n,\n$binarydata\n);\nvar_dump\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #1 usleep() example",
    "output": "<?php\n// Current time\necho (new\nDateTime\n(\n'now'\n))->\nformat\n(\n'H:i:s.v'\n),\n\"\\n\"\n;\n// wait for 2 milliseconds\nusleep\n(\n2000\n);\n// back!\necho (new\nDateTime\n(\n'now'\n))->\nformat\n(\n'H:i:s.v'\n),\n\"\\n\"\n;\n// wait for 30 milliseconds\nusleep\n(\n30000\n);\n// back again!\necho (new\nDateTime\n(\n'now'\n))->\nformat\n(\n'H:i:s.v'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random Example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 mt_rand() example",
    "output": "<?php\necho\nmt_rand\n(),\n\"\\n\"\n;\necho\nmt_rand\n(),\n\"\\n\"\n;\necho\nmt_rand\n(\n5\n,\n15\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 rand() example",
    "output": "<?php\necho\nrand\n(),\n\"\\n\"\n;\necho\nrand\n(),\n\"\\n\"\n;\necho\nrand\n(\n5\n,\n15\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 random_bytes() example",
    "output": "<?php\n$bytes\n=\nrandom_bytes\n(\n5\n);\nvar_dump\n(\nbin2hex\n(\n$bytes\n));\n?>"
  },
  {
    "input": "Example #1 random_int() example",
    "output": "<?php\nvar_dump\n(\nrandom_int\n(\n100\n,\n999\n));\nvar_dump\n(\nrandom_int\n(-\n1000\n,\n0\n));\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::getBytes() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\necho\nbin2hex\n(\n$r\n->\ngetBytes\n(\n8\n)),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::getBytesFromString() example",
    "output": "<?php\n$randomizer\n= new\n\\Random\\Randomizer\n();\nprintf\n(\n\n\"%s.example.com\"\n,\n\n$randomizer\n->\ngetBytesFromString\n(\n'abcdefghijklmnopqrstuvwxyz0123456789'\n,\n16\n)\n);\n?>"
  },
  {
    "input": "Example #2 Generate a random code for multi-factor authentication",
    "output": "<?php\n// The Secure engine is the default, but we make it explicit, because\n// multi-factor codes are security sensitive.\n$randomizer\n= new\n\\Random\\Randomizer\n(new\n\\Random\\Engine\\Secure\n());\necho\nimplode\n(\n'-'\n,\nstr_split\n(\n$randomizer\n->\ngetBytesFromString\n(\n'0123456789'\n,\n20\n),\n5\n));\n?>"
  },
  {
    "input": "Example #3 Select from a string with a non-uniform distribution",
    "output": "<?php\n$randomizer\n= new\n\\Random\\Randomizer\n();\necho\n$randomizer\n->\ngetBytesFromString\n(\n'aaaaabcdef'\n,\n20\n);\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::getFloat() example",
    "output": "<?php\n$randomizer\n= new\n\\Random\\Randomizer\n();\n// Note that the latitude granularity is double the\n// longitude’s granularity.\n//\n// For the latitude the value may be both -90 and 90.\n// For the longitude the value may be 180, but not -180, because\n// -180 and 180 refer to the same longitude.\nprintf\n(\n\n\"Lat: %+.6f Lng: %+.6f\"\n,\n\n$randomizer\n->\ngetFloat\n(-\n90\n,\n90\n,\n\\Random\\IntervalBoundary\n::\nClosedClosed\n),\n\n$randomizer\n->\ngetFloat\n(-\n180\n,\n180\n,\n\\Random\\IntervalBoundary\n::\nOpenClosed\n),\n);\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::getInt() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n// Random integer in range:\necho\n$r\n->\ngetInt\n(\n1\n,\n100\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::nextFloat() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n// The resulting bool will be true with the given chance.\n$chance\n=\n0.5\n;\n$bool\n=\n$r\n->\nnextFloat\n() <\n$chance\n;\necho (\n$bool\n?\n\"You won\"\n:\n\"You lost\"\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Incorrect scaling using an affine transformation",
    "output": "<?php\nfinal class\nMaxEngine\nimplements\nRandom\\Engine\n{\n    public function\ngenerate\n():\nstring\n{\n        return\n\"\\xff\"\n;\n    }\n}\n$randomizer\n= new\n\\Random\\Randomizer\n(new\nMaxEngine\n);\n$min\n=\n3.5\n;\n$max\n=\n4.5\n;\n// DO NOT DO THIS:\n//\n// This will output 4.5, despite nextFloat() sampling from\n// a right-open interval, which will never return 1.\nprintf\n(\n\"Wrong scaling: %.17g\"\n,\n$randomizer\n->\nnextFloat\n() * (\n$max\n-\n$min\n) +\n$min\n);\n// Correct:\n// $randomizer->getFloat($min, $max, \\Random\\IntervalBoundary::ClosedOpen);\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::nextInt() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n// Random \"next\" integer:\necho\n$r\n->\nnextInt\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::pickArrayKeys() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n$fruits\n= [\n'red'\n=>\n'🍎'\n,\n'green'\n=>\n'🥝'\n,\n'yellow'\n=>\n'🍌'\n,\n'pink'\n=>\n'🍑'\n,\n'purple'\n=>\n'🍇'\n];\n// Pick 2 random array keys:\necho\n\"Keys: \"\n,\nimplode\n(\n', '\n,\n$r\n->\npickArrayKeys\n(\n$fruits\n,\n2\n)),\n\"\\n\"\n;\n// Pick another 3:\necho\n\"Keys: \"\n,\nimplode\n(\n', '\n,\n$r\n->\npickArrayKeys\n(\n$fruits\n,\n3\n)),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Picking random values",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n$fruits\n= [\n'red'\n=>\n'🍎'\n,\n'green'\n=>\n'🥝'\n,\n'yellow'\n=>\n'🍌'\n,\n'pink'\n=>\n'🍑'\n,\n'purple'\n=>\n'🍇'\n];\n$keys\n=\n$r\n->\npickArrayKeys\n(\n$fruits\n,\n2\n);\n// Look up the values for the picked keys.\n$selection\n=\narray_map\n(\n    static fn (\n$key\n) =>\n$fruits\n[\n$key\n],\n\n$keys\n);\necho\n\"Values: \"\n,\nimplode\n(\n', '\n,\n$selection\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::__serialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::shuffleArray() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n$fruits\n= [\n'red'\n=>\n'🍎'\n,\n'green'\n=>\n'🥝'\n,\n'yellow'\n=>\n'🍌'\n,\n'pink'\n=>\n'🍑'\n,\n'purple'\n=>\n'🍇'\n];\n// Shuffle array:\necho\n\"Salad: \"\n,\nimplode\n(\n', '\n,\n$r\n->\nshuffleArray\n(\n$fruits\n)),\n\"\\n\"\n;\n// Shuffle again:\necho\n\"Another Salad: \"\n,\nimplode\n(\n', '\n,\n$r\n->\nshuffleArray\n(\n$fruits\n)),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::shuffleBytes() example",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n// Shuffle bytes in a string:\necho\n\"«\"\n,\n$r\n->\nshuffleBytes\n(\n\"PHP is great!\"\n),\n\"»\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Byte-wise shuffling breaks Unicode characters",
    "output": "<?php\n$r\n= new\n\\Random\\Randomizer\n();\n$unicode\n=\n\"🍎, 🥝, 🍌, 🍑, 🍇\"\n;\n$shuffled\n=\n$r\n->\nshuffleBytes\n(\n$unicode\n);\n// Byte-wise shuffling of non-ASCII characters destroys them,\n// resulting in invalid sequences (indicated by the Unicode\n// replacement character) or even entirely different characters\n// appearing in the output.\necho\n\"Original: \"\n,\n$unicode\n,\n\"\\n\"\n;\necho\n\"Shuffled: «\"\n,\n$shuffled\n,\n\"»\\n\"\n;\necho\n\"Shuffled Bytes: \"\n,\nbin2hex\n(\n$shuffled\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Randomizer::__unserialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine::generate() example",
    "output": "<?php\n/**\n * Implements a Linear Congruential Generator with modulus 65536,\n * multiplier 61 and increment 17 returning an 8 Bit integer.\n *\n * Note: This engine is suitable for demonstration purposes only.\n *       Linear Congruential Generators generally generate low\n *       quality randomness and this specific implementation has\n *       a very short 16 Bit period that is unsuitable for\n *       almost any real-world use case.\n */\nfinal class\nLinearCongruentialGenerator\nimplements\n\\Random\\Engine\n{\n    private\nint $state\n;\n    public function\n__construct\n(?\nint $seed\n=\nnull\n)\n    {\n        if (\n$seed\n===\nnull\n) {\n\n$seed\n=\nrandom_int\n(\n0\n,\n0xffff\n);\n        }\n\n$this\n->\nstate\n=\n$seed\n&\n0xffff\n;\n    }\n    public function\ngenerate\n():\nstring\n\n{\n\n$this\n->\nstate\n= (\n61\n*\n$this\n->\nstate\n+\n17\n) &\n0xffff\n;\n        return\npack\n(\n'C'\n,\n$this\n->\nstate\n>>\n8\n);\n    }\n}\n$r\n= new\n\\Random\\Randomizer\n(\n    new\nLinearCongruentialGenerator\n(\nseed\n:\n1\n)\n);\necho\n\"Lucky Number: \"\n,\n$r\n->\ngetInt\n(\n0\n,\n99\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Mt19937::__construct() example",
    "output": "<?php\n// Uses a random 32 Bit seed.\n$e\n= new\n\\Random\\Engine\\Mt19937\n();\n$r\n= new\n\\Random\\Randomizer\n(\n$e\n);\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Mt19937::__debugInfo() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Mt19937::__serialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Mt19937::__unserialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\PcgOneseq128XslRr64::__construct() example",
    "output": "<?php\n// Uses a random 128 Bit seed.\n$e\n= new\n\\Random\\Engine\\PcgOneseq128XslRr64\n();\n$r\n= new\n\\Random\\Randomizer\n(\n$e\n);\n?>"
  },
  {
    "input": "Example #2 Deriving a seed from a string",
    "output": "<?php\n$string\n=\n\"My string seed\"\n;\n// Hash the string with truncated SHA-256 using binary output\n// to turn the $string into a 128 Bit seed. Using the same\n// string will result in the same sequence of randomness.\n$e\n= new\n\\Random\\Engine\\PcgOneseq128XslRr64\n(\n\nsubstr\n(\nhash\n(\n'sha256'\n,\n$string\n,\nbinary\n:\ntrue\n),\n0\n,\n16\n)\n);\necho\nbin2hex\n(\n$e\n->\ngenerate\n()),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\PcgOneseq128XslRr64::__debugInfo() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\PcgOneseq128XslRr64::jump() example",
    "output": "<?php\n$a\n= new\n\\Random\\Engine\\PcgOneseq128XslRr64\n(\n0\n);\n$b\n= clone\n$a\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n1_000\n;\n$i\n++) {\n\n$a\n->\ngenerate\n();\n}\n$b\n->\njump\n(\n1_000\n);\necho\n\"A: \"\n,\nbin2hex\n(\n$a\n->\ngenerate\n()),\n\"\\n\"\n;\necho\n\"B: \"\n,\nbin2hex\n(\n$b\n->\ngenerate\n()),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Randomizer methods may call the engine more than once",
    "output": "<?php\n$a\n= new\n\\Random\\Randomizer\n(new\n\\Random\\Engine\\PcgOneseq128XslRr64\n(\n42659\n));\n$b\n= new\n\\Random\\Randomizer\n(clone\n$a\n->\nengine\n);\n$a\n->\ngetInt\n(\n1\n,\n1572864\n);\n// Performs two calls to generate().\n$a\n->\ngetInt\n(\n1\n,\n1572864\n);\n$b\n->\nengine\n->\njump\n(\n2\n);\n// Because the first call to ->getInt() called ->generate() twice\n// the engines do not match up after performing a ->jump(2).\necho\n\"A: \"\n,\nbin2hex\n(\n$a\n->\nengine\n->\ngenerate\n()),\n\"\\n\"\n;\necho\n\"B: \"\n,\nbin2hex\n(\n$b\n->\nengine\n->\ngenerate\n()),\n\"\\n\"\n;\n// Now the B engine matches the A engine.\necho\n\"B: \"\n,\nbin2hex\n(\n$b\n->\nengine\n->\ngenerate\n()),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\PcgOneseq128XslRr64::__serialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\PcgOneseq128XslRr64::__unserialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::__construct() example",
    "output": "<?php\n// Uses a random 256 Bit seed.\n$e\n= new\n\\Random\\Engine\\Xoshiro256StarStar\n();\n$r\n= new\n\\Random\\Randomizer\n(\n$e\n);\n?>"
  },
  {
    "input": "Example #2 Deriving a seed from a string",
    "output": "<?php\n$string\n=\n\"My string seed\"\n;\n// Hash the string with SHA-256 using binary output to turn the\n// $string into a 256 Bit seed. Using the same string will result\n// in the same sequence of randomness.\n$e\n= new\n\\Random\\Engine\\Xoshiro256StarStar\n(\n\nhash\n(\n'sha256'\n,\n$string\n,\nbinary\n:\ntrue\n)\n);\necho\nbin2hex\n(\n$e\n->\ngenerate\n()),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::__debugInfo() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::jump() example",
    "output": "<?php\nuse\nRandom\\Engine\\Xoshiro256StarStar\n;\nuse\nRandom\\Randomizer\n;\n$blueprintRng\n= new\nXoshiro256StarStar\n(\n0\n);\n$fibers\n= [];\nfor (\n$i\n=\n0\n;\n$i\n<\n8\n;\n$i\n++) {\n\n$fiberRng\n= clone\n$blueprintRng\n;\n\n$blueprintRng\n->\njump\n();\n\n$fiber\n= new\nFiber\n(static function () use (\n$fiberRng\n,\n$i\n):\nvoid\n{\n\n$randomizer\n= new\nRandomizer\n(\n$fiberRng\n);\n        while (\ntrue\n) {\n\nFiber\n::\nsuspend\n();\n            echo\n\"\n{\n$i\n}\n: \"\n,\n$randomizer\n->\ngetInt\n(\n0\n,\n100\n),\n\"\\n\"\n;\n        }\n    });\n\n$fiber\n->\nstart\n();\n\n$fibers\n[] =\n$fiber\n;\n}\n// Even though the fibers execute in a random order, they will print the same value\n// each time, because each has its own unique instance of the RNG.\n$randomizer\n= new\nRandomizer\n();\n$fibers\n=\n$randomizer\n->\nshuffleArray\n(\n$fibers\n);\nforeach (\n$fibers\nas\n$fiber\n) {\n\n$fiber\n->\nresume\n();\n}\n$fibers\n=\n$randomizer\n->\nshuffleArray\n(\n$fibers\n);\nforeach (\n$fibers\nas\n$fiber\n) {\n\n$fiber\n->\nresume\n();\n}\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::jumpLong() example",
    "output": "<?php\n$blueprintRng\n= new\n\\Random\\Engine\\Xoshiro256StarStar\n(\n0\n);\n// Each parent engine will have its own chunk of 2**192 values.\n$parent1\n= clone\n$blueprintRng\n;\n$blueprintRng\n->\njumpLong\n();\n$parent2\n= clone\n$blueprintRng\n;\n$blueprintRng\n->\njumpLong\n();\n// Each of the child engines will have its own chunk of 2**128 values\n// taken from their parent engine’s chunk of 2**192 values.\n$child1a\n= clone\n$parent1\n;\n$parent1\n->\njump\n();\n$child1b\n= clone\n$parent1\n;\n$parent1\n->\njump\n();\n$child2a\n= clone\n$parent2\n;\n$parent2\n->\njump\n();\n$child2b\n= clone\n$parent2\n;\n$parent2\n->\njump\n();\necho\n\"Child 1A: \"\n,\nbin2hex\n(\n$child1a\n->\ngenerate\n()),\n\"\\n\"\n;\necho\n\"Child 1B: \"\n,\nbin2hex\n(\n$child1b\n->\ngenerate\n()),\n\"\\n\"\n;\necho\n\"Child 2A: \"\n,\nbin2hex\n(\n$child2a\n->\ngenerate\n()),\n\"\\n\"\n;\necho\n\"Child 2B: \"\n,\nbin2hex\n(\n$child2b\n->\ngenerate\n()),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::__serialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Random\\Engine\\Xoshiro256StarStar::__unserialize() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 Get and set base path",
    "output": "<?php\n$basePath1\n=\nSeasLog\n::\ngetBasePath\n();\nSeasLog\n::\nsetBasePath\n(\n'/log/base_test'\n);\n$basePath2\n=\nSeasLog\n::\ngetBasePath\n();\nvar_dump\n(\n$basePath1\n,\n$basePath2\n);\n?>"
  },
  {
    "input": "Example #2 Get and set logger",
    "output": "<?php\n$lastLogger1\n=\nSeasLog\n::\ngetLastLogger\n();\nSeasLog\n::\nsetLogger\n(\n'testModule/app1'\n);\n$lastLogger2\n=\nSeasLog\n::\ngetLastLogger\n();\nvar_dump\n(\n$lastLogger1\n,\n$lastLogger2\n);\n?>"
  },
  {
    "input": "Example #3 Fast write log",
    "output": "<?php\nSeasLog\n::\nlog\n(\nSEASLOG_ERROR\n,\n'this is a error test by ::log'\n);\nSeasLog\n::\ndebug\n(\n'this is a {userName} debug'\n,array(\n'{userName}'\n=>\n'neeke'\n));\nSeasLog\n::\ninfo\n(\n'this is a info log'\n);\nSeasLog\n::\nnotice\n(\n'this is a notice log'\n);\nSeasLog\n::\nwarning\n(\n'your {website} was down,please {action} it ASAP!'\n,array(\n'{website}'\n=>\n'github.com'\n,\n'{action}'\n=>\n'rboot'\n));\nSeasLog\n::\nerror\n(\n'a error log'\n);\nSeasLog\n::\ncritical\n(\n'some thing was critical'\n);\nSeasLog\n::\nalert\n(\n'yes this is a {messageName}'\n,array(\n'{messageName}'\n=>\n'alertMSG'\n));\nSeasLog\n::\nemergency\n(\n'Just now, the house next door was completely burnt out! {note}'\n,array(\n'{note}'\n=>\n'it`s a joke'\n));\n?>"
  },
  {
    "input": "Example #1 seaslog_get_author() example",
    "output": "<?php\nvar_dump\n(\nseaslog_get_author\n());\n?>"
  },
  {
    "input": "Example #1 seaslog_get_version() example",
    "output": "<?php\nvar_dump\n(\nseaslog_get_version\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::alert() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nalert\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\nalert\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\nalert\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::analyzerCount() example",
    "output": "<?php\n$countResult1\n=\nSeasLog\n::\nanalyzerCount\n();\n//with `level`\n$countResult2\n=\nSeasLog\n::\nanalyzerCount\n(\nSEASLOG_DEBUG\n);\n//with `level` and `log_path`\n$countResult3\n=\nSeasLog\n::\nanalyzerCount\n(\nSEASLOG_ERROR\n,\ndate\n(\n'Ymd'\n,\ntime\n()));\n//with `level` and `key_word`\n$countResult4\n=\nSeasLog\n::\nanalyzerCount\n(\nSEASLOG_DEBUG\n,\nNULL\n,\n'accessToken'\n);\nvar_dump\n(\n$countResult1\n,\n$countResult2\n,\n$countResult3\n,\n$countResult4\n);\n?>"
  },
  {
    "input": "Example #1 SeasLog::analyzerDetail() example",
    "output": "<?php\n$result1\n=\nSeasLog\n::\nanalyzerDetail\n(\nSEASLOG_ERROR\n);\n//with `logger` and `key_word`\n$result2\n=\nSeasLog\n::\nanalyzerDetail\n(\nSEASLOG_ERROR\n,\n'test/logger/'\n,\n'neeke'\n);\n//with `start` and `limit`\n$result3\n=\nSeasLog\n::\nanalyzerDetail\n(\nSEASLOG_ERROR\n,\n'test/logger/'\n,\n'neeke'\n,\n1\n,\n2\n);\nvar_dump\n(\n$result1\n,\n$result2\n,\n$result3\n);\n?>"
  },
  {
    "input": "Example #1 SeasLog::closeLoggerStream() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ncloseLoggerStream\n());\nvar_dump\n(\nSeasLog\n::\ncloseLoggerStream\n(\nSEASLOG_CLOSE_LOGGER_STREAM_MOD_ALL\n));\nvar_dump\n(\nSeasLog\n::\ncloseLoggerStream\n(\nSEASLOG_CLOSE_LOGGER_STREAM_MOD_ASSIGN\n,\n'logger_name'\n));\n?>"
  },
  {
    "input": "Example #1 SeasLog::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SeasLog::critical() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ncritical\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\ncritical\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\ncritical\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::debug() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ndebug\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\ndebug\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\ndebug\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::__destruct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SeasLog::emergency() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nemergency\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\nemergency\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\nemergency\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::error() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nerror\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\nerror\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\nerror\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::flushBuffer() example",
    "output": "<?php\nSeasLog\n::\ninfo\n(\n'info log'\n);\nSeasLog\n::\ndebug\n(\n'debug log'\n);\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\nvar_dump\n(\nSeasLog\n::\nflushBuffer\n());\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getBasePath() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ngetBasePath\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getBuffer() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ninfo\n(\n'info log'\n));\nvar_dump\n(\nSeasLog\n::\ndebug\n(\n'debug log'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getBufferEnabled() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ngetBufferEnabled\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getDatetimeFormat() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ngetDateTimeFormat\n());\nvar_dump\n(\nSeasLog\n::\nsetDateTimeFormat\n(\n'Ymd His'\n));\nvar_dump\n(\nSeasLog\n::\ngetDateTimeFormat\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getLastLogger() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ngetLastLogger\n());\nSeasLog\n::\nsetLogger\n(\n'theNewLogger'\n);\nvar_dump\n(\nSeasLog\n::\ngetLastLogger\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getRequestID() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ngetRequestID\n());\nvar_dump\n(\nSeasLog\n::\nsetRequestID\n(\n'reqeust_id_test_'\n.\ntime\n()));\nvar_dump\n(\nSeasLog\n::\ngetRequestID\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::getRequestVariable() example",
    "output": "<?php\n$sDomainPort\n=\n'domain:port'\n;\n$sRequestUri\n=\n'uri'\n;\n$sRequestMethod\n=\n'method'\n;\n$sClientIp\n=\n'client_ip'\n;\n$iErrorKey\n=\n1000\n;\n$oSeasLog\n= new\nSeasLog\n();\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_DOMAIN_PORT\n,\n$sDomainPort\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_URI\n,\n$sRequestUri\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_METHOD\n,\n$sRequestMethod\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_CLIENT_IP\n,\n$sClientIp\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\n$iErrorKey\n,\nNULL\n));\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_DOMAIN_PORT\n) ==\n$sDomainPort\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_URI\n) ==\n$sRequestUri\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_METHOD\n) ==\n$sRequestMethod\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_CLIENT_IP\n) ==\n$sClientIp\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\n$iErrorKey\n));\n?>"
  },
  {
    "input": "Example #1 SeasLog::info() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\ninfo\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\ninfo\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\ninfo\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::log() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nlog\n(\nSEASLOG_INFO\n,\n'info log'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n//create a new level self-help.\nvar_dump\n(\nSeasLog\n::\nlog\n(\n'MySelfLevel'\n,\n'info log'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n//with `content`\nvar_dump\n(\nSeasLog\n::\nlog\n(\n'MySelfLevel'\n,\n'info log {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n//with `logger`\nvar_dump\n(\nSeasLog\n::\nlog\n(\n'MySelfLevel'\n,\n'info log {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::notice() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nnotice\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\nnotice\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\nnotice\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SeasLog::setBasePath() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SeasLog::setDatetimeFormat() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nsetDateTimeFormat\n(\n'Ymd His'\n));\n?>"
  },
  {
    "input": "Example #1 SeasLog::setLogger() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nsetLogger\n(\n'testModule/testLogger'\n));\n?>"
  },
  {
    "input": "Example #1 SeasLog::setRequestID() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nsetRequestID\n(\ntime\n() .\nrand\n()));\n?>"
  },
  {
    "input": "Example #1 SeasLog::setRequestVariable() example",
    "output": "<?php\n$sDomainPort\n=\n'domain:port'\n;\n$sRequestUri\n=\n'uri'\n;\n$sRequestMethod\n=\n'method'\n;\n$sClientIp\n=\n'client_ip'\n;\n$iErrorKey\n=\n1000\n;\n$oSeasLog\n= new\nSeasLog\n();\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_DOMAIN_PORT\n,\n$sDomainPort\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_URI\n,\n$sRequestUri\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_METHOD\n,\n$sRequestMethod\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_CLIENT_IP\n,\n$sClientIp\n));\nvar_dump\n(\n$oSeasLog\n->\nsetRequestVariable\n(\n$iErrorKey\n,\nNULL\n));\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_DOMAIN_PORT\n) ==\n$sDomainPort\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_URI\n) ==\n$sRequestUri\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_REQUEST_METHOD\n) ==\n$sRequestMethod\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\nSEASLOG_REQUEST_VARIABLE_CLIENT_IP\n) ==\n$sClientIp\n);\nvar_dump\n(\n$oSeasLog\n->\ngetRequestVariable\n(\n$iErrorKey\n));\n?>"
  },
  {
    "input": "Example #1 SeasLog::warning() example",
    "output": "<?php\nvar_dump\n(\nSeasLog\n::\nwarning\n(\n'log message'\n));\n//with content\nvar_dump\n(\nSeasLog\n::\nwarning\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n)));\n//with tmp logger\nvar_dump\n(\nSeasLog\n::\nwarning\n(\n'log message from {NAME}'\n,array(\n'NAME'\n=>\n'neeke'\n),\n'tmp_logger'\n));\nvar_dump\n(\nSeasLog\n::\ngetBuffer\n());\n?>"
  },
  {
    "input": "Example #1 SplStack example",
    "output": "<?php\n$q\n= new\nSplStack\n();\n$q\n[] =\n1\n;\n$q\n[] =\n2\n;\n$q\n[] =\n3\n;\nforeach (\n$q\nas\n$elem\n)  {\n echo\n$elem\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplQueue example",
    "output": "<?php\n$q\n= new\nSplQueue\n();\n$q\n[] =\n1\n;\n$q\n[] =\n2\n;\n$q\n[] =\n3\n;\nforeach (\n$q\nas\n$elem\n)  {\n echo\n$elem\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Efficiently handling tasks with SplQueue",
    "output": "<?php\n$q\n= new\nSplQueue\n();\n$q\n->\nsetIteratorMode\n(\nSplQueue\n::\nIT_MODE_DELETE\n);\n// ... enqueue some tasks on the queue ...\n// process them\nforeach (\n$q\nas\n$task\n) {\n\n// ... process $task ...\n    // add new tasks on the queue\n\n$q\n[] =\n$newTask\n;\n\n// ...\n}\n?>"
  },
  {
    "input": "Example #1 SplFixedArray usage example",
    "output": "<?php\n// Initialize the array with a fixed length\n$array\n= new\nSplFixedArray\n(\n5\n);\n$array\n[\n1\n] =\n2\n;\n$array\n[\n4\n] =\n\"foo\"\n;\nvar_dump\n(\n$array\n[\n0\n]);\n// NULL\nvar_dump\n(\n$array\n[\n1\n]);\n// int(2)\nvar_dump\n(\n$array\n[\n\"4\"\n]);\n// string(3) \"foo\"\n// Increase the size of the array to 10\n$array\n->\nsetSize\n(\n10\n);\n$array\n[\n9\n] =\n\"asdf\"\n;\n// Shrink the array to a size of 2\n$array\n->\nsetSize\n(\n2\n);\n// The following lines throw a RuntimeException: Index invalid or out of range\ntry {\n\nvar_dump\n(\n$array\n[\n\"non-numeric\"\n]);\n} catch(\nRuntimeException $re\n) {\n    echo\n\"RuntimeException: \"\n.\n$re\n->\ngetMessage\n().\n\"\\n\"\n;\n}\ntry {\n\nvar_dump\n(\n$array\n[-\n1\n]);\n} catch(\nRuntimeException $re\n) {\n    echo\n\"RuntimeException: \"\n.\n$re\n->\ngetMessage\n().\n\"\\n\"\n;\n}\ntry {\n\nvar_dump\n(\n$array\n[\n5\n]);\n} catch(\nRuntimeException $re\n) {\n    echo\n\"RuntimeException: \"\n.\n$re\n->\ngetMessage\n().\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::__construct() example",
    "output": "<?php\n$array\n= new\nSplFixedArray\n(\n5\n);\n$array\n[\n1\n] =\n2\n;\n$array\n[\n4\n] =\n\"foo\"\n;\nforeach(\n$array\nas\n$v\n) {\n\nvar_dump\n(\n$v\n);\n}\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::count() example",
    "output": "<?php\n$array\n= new\nSplFixedArray\n(\n5\n);\necho\n$array\n->\ncount\n() .\n\"\\n\"\n;\necho\ncount\n(\n$array\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::fromArray() example",
    "output": "<?php\n$fa\n=\nSplFixedArray\n::\nfromArray\n(array(\n1\n=>\n1\n,\n0\n=>\n2\n,\n3\n=>\n3\n));\nvar_dump\n(\n$fa\n);\n$fa\n=\nSplFixedArray\n::\nfromArray\n(array(\n1\n=>\n1\n,\n0\n=>\n2\n,\n3\n=>\n3\n),\nfalse\n);\nvar_dump\n(\n$fa\n);\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::getSize() example",
    "output": "<?php\n$array\n= new\nSplFixedArray\n(\n5\n);\necho\n$array\n->\ngetSize\n().\n\"\\n\"\n;\n$array\n->\nsetSize\n(\n10\n);\necho\n$array\n->\ngetSize\n().\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::setSize() example",
    "output": "<?php\n   $array\n= new\nSplFixedArray\n(\n5\n);\n   echo\n$array\n->\ngetSize\n().\n\"\\n\"\n;\n\n$array\n->\nsetSize\n(\n10\n);\n   echo\n$array\n->\ngetSize\n().\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplFixedArray::toArray() example",
    "output": "<?php\n$fa\n= new\nSplFixedArray\n(\n3\n);\n$fa\n[\n0\n] =\n0\n;\n$fa\n[\n2\n] =\n2\n;\nvar_dump\n(\n$fa\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 ArrayObject::append() example",
    "output": "<?php\n$arrayobj\n= new\nArrayObject\n(array(\n'first'\n,\n'second'\n,\n'third'\n));\n$arrayobj\n->\nappend\n(\n'fourth'\n);\n$arrayobj\n->\nappend\n(array(\n'five'\n,\n'six'\n));\nvar_dump\n(\n$arrayobj\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::asort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\n$fruitArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n$fruitArrayObject\n->\nasort\n();\nforeach (\n$fruitArrayObject\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ArrayObject::__construct() example",
    "output": "<?php\n$array\n= [\n\n'1'\n=>\n'one'\n,\n\n'2'\n=>\n'two'\n,\n\n'3'\n=>\n'three'\n];\n$arrayobject\n= new\nArrayObject\n(\n$array\n);\nvar_dump\n(\n$arrayobject\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::count() example",
    "output": "<?php\nclass\nExample\n{\n    public\n$public\n=\n'prop:public'\n;\n    private\n$prv\n=\n'prop:private'\n;\n    protected\n$prt\n=\n'prop:protected'\n;\n}\n$arrayobj\n= new\nArrayObject\n(new\nExample\n());\nvar_dump\n(\n$arrayobj\n->\ncount\n());\n$arrayobj\n= new\nArrayObject\n(array(\n'first'\n,\n'second'\n,\n'third'\n));\nvar_dump\n(\n$arrayobj\n->\ncount\n());\n?>"
  },
  {
    "input": "Example #1 ArrayObject::exchangeArray() example",
    "output": "<?php\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n// Array of locations in Europe\n$locations\n= array(\n'Amsterdam'\n,\n'Paris'\n,\n'London'\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n// Now exchange fruits for locations\n$old\n=\n$fruitsArrayObject\n->\nexchangeArray\n(\n$locations\n);\nvar_dump\n(\n$old\n);\nvar_dump\n(\n$fruitsArrayObject\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::getArrayCopy() example",
    "output": "<?php\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n$fruitsArrayObject\n[\n'pears'\n] =\n4\n;\n// create a copy of the array\n$copy\n=\n$fruitsArrayObject\n->\ngetArrayCopy\n();\nvar_dump\n(\n$copy\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::getFlags() example",
    "output": "<?php\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n// Get the current flags\n$flags\n=\n$fruitsArrayObject\n->\ngetFlags\n();\nvar_dump\n(\n$flags\n);\n// Set new flags\n$fruitsArrayObject\n->\nsetFlags\n(\nArrayObject\n::\nARRAY_AS_PROPS\n);\n// Get the new flags\n$flags\n=\n$fruitsArrayObject\n->\ngetFlags\n();\nvar_dump\n(\n$flags\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::getIterator() example",
    "output": "<?php\n$array\n= [\n\n'1'\n=>\n'one'\n,\n\n'2'\n=>\n'two'\n,\n\n'3'\n=>\n'three'\n,\n];\n$arrayobject\n= new\nArrayObject\n(\n$array\n);\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\nwhile (\n$iterator\n->\nvalid\n()) {\n    echo\n$iterator\n->\nkey\n() .\n' => '\n.\n$iterator\n->\ncurrent\n() .\n\"\\n\"\n;\n\n$iterator\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 ArrayObject::getIteratorClass() example",
    "output": "<?php\n// Custom ArrayIterator (inherits from ArrayIterator)\nclass\nMyArrayIterator\nextends\nArrayIterator\n{\n\n// custom implementation\n}\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n// Get the current class name\n$className\n=\n$fruitsArrayObject\n->\ngetIteratorClass\n();\nvar_dump\n(\n$className\n);\n// Set new classname\n$fruitsArrayObject\n->\nsetIteratorClass\n(\n'MyArrayIterator'\n);\n// Get the new iterator classname\n$className\n=\n$fruitsArrayObject\n->\ngetIteratorClass\n();\nvar_dump\n(\n$className\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::ksort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\n$fruitArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n$fruitArrayObject\n->\nksort\n();\nforeach (\n$fruitArrayObject\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n\n?>"
  },
  {
    "input": "Example #1 ArrayObject::natcasesort() example",
    "output": "<?php\n$array\n= array(\n'IMG0.png'\n,\n'img12.png'\n,\n'img10.png'\n,\n'img2.png'\n,\n'img1.png'\n,\n'IMG3.png'\n);\n$arr1\n= new\nArrayObject\n(\n$array\n);\n$arr2\n= clone\n$arr1\n;\n$arr1\n->\nasort\n();\necho\n\"Standard sorting\\n\"\n;\nvar_dump\n(\n$arr1\n);\n$arr2\n->\nnatcasesort\n();\necho\n\"\\nNatural order sorting (case-insensitive)\\n\"\n;\nvar_dump\n(\n$arr2\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::natsort() example",
    "output": "<?php\n$array\n= array(\n\"img12.png\"\n,\n\"img10.png\"\n,\n\"img2.png\"\n,\n\"img1.png\"\n);\n$arr1\n= new\nArrayObject\n(\n$array\n);\n$arr2\n= clone\n$arr1\n;\n$arr1\n->\nasort\n();\necho\n\"Standard sorting\\n\"\n;\nvar_dump\n(\n$arr1\n);\n$arr2\n->\nnatsort\n();\necho\n\"\\nNatural order sorting\\n\"\n;\nvar_dump\n(\n$arr2\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::offsetExists() example",
    "output": "<?php\n$arrayobj\n= new\nArrayObject\n(array(\n'zero'\n,\n'one'\n,\n'example'\n=>\n'e.g.'\n));\nvar_dump\n(\n$arrayobj\n->\noffsetExists\n(\n1\n));\nvar_dump\n(\n$arrayobj\n->\noffsetExists\n(\n'example'\n));\nvar_dump\n(\n$arrayobj\n->\noffsetExists\n(\n'notfound'\n));\n?>"
  },
  {
    "input": "Example #1 ArrayObject::offsetGet() example",
    "output": "<?php\n$arrayobj\n= new\nArrayObject\n(array(\n'zero'\n,\n7\n,\n'example'\n=>\n'e.g.'\n));\nvar_dump\n(\n$arrayobj\n->\noffsetGet\n(\n1\n));\nvar_dump\n(\n$arrayobj\n->\noffsetGet\n(\n'example'\n));\nvar_dump\n(\n$arrayobj\n->\noffsetExists\n(\n'notfound'\n));\n?>"
  },
  {
    "input": "Example #1 ArrayObject::offsetSet() example",
    "output": "<?php\nclass\nExample\n{\n    public\n$property\n=\n'prop:public'\n;\n}\n$arrayobj\n= new\nArrayObject\n(new\nExample\n());\n$arrayobj\n->\noffsetSet\n(\n4\n,\n'four'\n);\n$arrayobj\n->\noffsetSet\n(\n'group'\n, array(\n'g1'\n,\n'g2'\n));\nvar_dump\n(\n$arrayobj\n);\n$arrayobj\n= new\nArrayObject\n(array(\n'zero'\n,\n'one'\n));\n$arrayobj\n->\noffsetSet\n(\nnull\n,\n'last'\n);\nvar_dump\n(\n$arrayobj\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::offsetUnset() example",
    "output": "<?php\n$arrayobj\n= new\nArrayObject\n(array(\n0\n=>\n'zero'\n,\n2\n=>\n'two'\n));\n$arrayobj\n->\noffsetUnset\n(\n2\n);\nvar_dump\n(\n$arrayobj\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::serialize() example",
    "output": "<?php\n$o\n= new\nArrayObject\n();\n$s1\n=\nserialize\n(\n$o\n);\n$s2\n=\n$o\n->\nserialize\n();\nvar_dump\n(\n$s1\n);\nvar_dump\n(\n$s2\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::setFlags() example",
    "output": "<?php\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n// Try to use array key as property\nvar_dump\n(\n$fruitsArrayObject\n->\nlemons\n);\n// Set the flag so that the array keys can be used as properties of the ArrayObject\n$fruitsArrayObject\n->\nsetFlags\n(\nArrayObject\n::\nARRAY_AS_PROPS\n);\n// Try it again\nvar_dump\n(\n$fruitsArrayObject\n->\nlemons\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::setIteratorClass() example",
    "output": "<?php\n// Custom ArrayIterator (inherits from ArrayIterator)\nclass\nMyArrayIterator\nextends\nArrayIterator\n{\n\n// custom implementation\n}\n// Array of available fruits\n$fruits\n= array(\n\"lemons\"\n=>\n1\n,\n\"oranges\"\n=>\n4\n,\n\"bananas\"\n=>\n5\n,\n\"apples\"\n=>\n10\n);\n$fruitsArrayObject\n= new\nArrayObject\n(\n$fruits\n);\n// Set the iterator classname to the newly\n$fruitsArrayObject\n->\nsetIteratorClass\n(\n'MyArrayIterator'\n);\nvar_dump\n(\n$fruitsArrayObject\n->\ngetIterator\n());\n?>"
  },
  {
    "input": "Example #1 ArrayObject::uasort() example",
    "output": "<?php\n// Comparison function\nfunction\ncmp\n(\n$a\n,\n$b\n) {\n    if (\n$a\n==\n$b\n) {\n        return\n0\n;\n    }\n    return (\n$a\n<\n$b\n) ? -\n1\n:\n1\n;\n}\n// Array to be sorted\n$array\n= array(\n'a'\n=>\n4\n,\n'b'\n=>\n8\n,\n'c'\n=> -\n1\n,\n'd'\n=> -\n9\n,\n'e'\n=>\n2\n,\n'f'\n=>\n5\n,\n'g'\n=>\n3\n,\n'h'\n=> -\n4\n);\n$arrayObject\n= new\nArrayObject\n(\n$array\n);\nvar_dump\n(\n$arrayObject\n);\n// Sort and print the resulting array\n$arrayObject\n->\nuasort\n(\n'cmp'\n);\nvar_dump\n(\n$arrayObject\n);\n?>"
  },
  {
    "input": "Example #1 ArrayObject::uksort() example",
    "output": "<?php\nfunction\ncmp\n(\n$a\n,\n$b\n) {\n\n$a\n=\npreg_replace\n(\n'@^(a|an|the) @'\n,\n''\n,\n$a\n);\n\n$b\n=\npreg_replace\n(\n'@^(a|an|the) @'\n,\n''\n,\n$b\n);\n    return\nstrcasecmp\n(\n$a\n,\n$b\n);\n}\n$array\n= array(\n\"John\"\n=>\n1\n,\n\"the Earth\"\n=>\n2\n,\n\"an apple\"\n=>\n3\n,\n\"a banana\"\n=>\n4\n);\n$arrayObject\n= new\nArrayObject\n(\n$array\n);\n$arrayObject\n->\nuksort\n(\n'cmp'\n);\nforeach (\n$arrayObject\nas\n$key\n=>\n$value\n) {\n    echo\n\"\n$key\n:\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage as a set",
    "output": "<?php\n// As an object set\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$o3\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n);\n$s\n->\nattach\n(\n$o2\n);\nvar_dump\n(\n$s\n->\ncontains\n(\n$o1\n));\nvar_dump\n(\n$s\n->\ncontains\n(\n$o2\n));\nvar_dump\n(\n$s\n->\ncontains\n(\n$o3\n));\n$s\n->\ndetach\n(\n$o2\n);\nvar_dump\n(\n$s\n->\ncontains\n(\n$o1\n));\nvar_dump\n(\n$s\n->\ncontains\n(\n$o2\n));\nvar_dump\n(\n$s\n->\ncontains\n(\n$o3\n));\n?>"
  },
  {
    "input": "Example #2 SplObjectStorage as a map",
    "output": "<?php\n// As a map from objects to data\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$o3\n= new\nstdClass\n;\n$s\n[\n$o1\n] =\n\"data for object 1\"\n;\n$s\n[\n$o2\n] = array(\n1\n,\n2\n,\n3\n);\nif (isset(\n$s\n[\n$o2\n])) {\n\nvar_dump\n(\n$s\n[\n$o2\n]);\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::addAll() example",
    "output": "<?php\n$o\n= new\nstdClass\n;\n$a\n= new\nSplObjectStorage\n();\n$a\n[\n$o\n] =\n\"hello\"\n;\n$b\n= new\nSplObjectStorage\n();\n$b\n->\naddAll\n(\n$a\n);\necho\n$b\n[\n$o\n].\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::attach() example",
    "output": "<?php\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n= new\nSplObjectStorage\n();\n$s\n->\nattach\n(\n$o1\n);\n// similar to $s[$o1] = NULL;\n$s\n->\nattach\n(\n$o2\n,\n\"hello\"\n);\n// similar to $s[$o2] = \"hello\";\nvar_dump\n(\n$s\n[\n$o1\n]);\nvar_dump\n(\n$s\n[\n$o2\n]);\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::contains() example",
    "output": "<?php\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n= new\nSplObjectStorage\n();\n$s\n[\n$o1\n] =\n\"hello\"\n;\nvar_dump\n(\n$s\n->\ncontains\n(\n$o1\n));\nvar_dump\n(\n$s\n->\ncontains\n(\n$o2\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::count() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n);\n$s\n->\nattach\n(\n$o2\n);\n$s\n->\nattach\n(\n$o1\n);\nvar_dump\n(\n$s\n->\ncount\n());\nvar_dump\n(\ncount\n(\n$s\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::current() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$index\n=\n$s\n->\nkey\n();\n\n$object\n=\n$s\n->\ncurrent\n();\n// similar to current($s)\n\n$data\n=\n$s\n->\ngetInfo\n();\n\nvar_dump\n(\n$object\n);\n\nvar_dump\n(\n$data\n);\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::detach() example",
    "output": "<?php\n$o\n= new\nstdClass\n;\n$s\n= new\nSplObjectStorage\n();\n$s\n->\nattach\n(\n$o\n);\nvar_dump\n(\ncount\n(\n$s\n));\n$s\n->\ndetach\n(\n$o\n);\nvar_dump\n(\ncount\n(\n$s\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::getHash() example",
    "output": "<?php\nclass\nOneSpecimenPerClassStorage\nextends\nSplObjectStorage\n{\n    public function\ngetHash\n(\n$o\n) {\n        return\nget_class\n(\n$o\n);\n    }\n}\nclass\nA\n{}\n$s\n= new\nOneSpecimenPerClassStorage\n;\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$o3\n= new\nA\n;\n$s\n[\n$o1\n] =\n1\n;\n//$o2 is considered equal to $o1 so the value is replaced\n$s\n[\n$o2\n] =\n2\n;\n$s\n[\n$o3\n] =\n3\n;\n//these are considered equal to the objects before\n//so they can be used to access the values stored under them\n$p1\n= new\nstdClass\n;\n$p2\n= new\nA\n;\necho\n$s\n[\n$p1\n],\n\"\\n\"\n;\necho\n$s\n[\n$p2\n],\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::getInfo() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$index\n=\n$s\n->\nkey\n();\n\n$object\n=\n$s\n->\ncurrent\n();\n// similar to current($s)\n\n$data\n=\n$s\n->\ngetInfo\n();\n\nvar_dump\n(\n$object\n);\n\nvar_dump\n(\n$data\n);\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::key() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$index\n=\n$s\n->\nkey\n();\n\n$object\n=\n$s\n->\ncurrent\n();\n// similar to current($s)\n\nvar_dump\n(\n$index\n);\n\nvar_dump\n(\n$object\n);\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::next() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$index\n=\n$s\n->\nkey\n();\n\n$object\n=\n$s\n->\ncurrent\n();\n// similar to current($s)\n\nvar_dump\n(\n$index\n);\n\nvar_dump\n(\n$object\n);\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::offsetExists() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n;\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n);\nvar_dump\n(\n$s\n->\noffsetExists\n(\n$o1\n));\n// Similar to isset($s[$o1])\nvar_dump\n(\n$s\n->\noffsetExists\n(\n$o2\n));\n// Similar to isset($s[$o2])\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::offsetGet() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n;\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n[\n$o1\n] =\n\"hello\"\n;\n$s\n->\nattach\n(\n$o2\n);\nvar_dump\n(\n$s\n->\noffsetGet\n(\n$o1\n));\n// Similar to $s[$o1]\nvar_dump\n(\n$s\n->\noffsetGet\n(\n$o2\n));\n// Similar to $s[$o2]\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::offsetSet() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n;\n$o1\n= new\nstdClass\n;\n$s\n->\noffsetSet\n(\n$o1\n,\n\"hello\"\n);\n// Similar to $s[$o1] = \"hello\";\nvar_dump\n(\n$s\n[\n$o1\n]);\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::offsetUnset() example",
    "output": "<?php\n$o\n= new\nstdClass\n;\n$s\n= new\nSplObjectStorage\n();\n$s\n->\nattach\n(\n$o\n);\nvar_dump\n(\ncount\n(\n$s\n));\n$s\n->\noffsetUnset\n(\n$o\n);\n// Similar to unset($s[$o])\nvar_dump\n(\ncount\n(\n$s\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::removeAll() example",
    "output": "<?php\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$a\n= new\nSplObjectStorage\n();\n$a\n[\n$o1\n] =\n\"foo\"\n;\n$b\n= new\nSplObjectStorage\n();\n$b\n[\n$o1\n] =\n\"bar\"\n;\n$b\n[\n$o2\n] =\n\"gee\"\n;\nvar_dump\n(\ncount\n(\n$b\n));\n$b\n->\nremoveAll\n(\n$a\n);\nvar_dump\n(\ncount\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::removeAllExcept() example",
    "output": "<?php\n$a\n= (object)\n'a'\n;\n$b\n= (object)\n'b'\n;\n$c\n= (object)\n'c'\n;\n$foo\n= new\nSplObjectStorage\n;\n$foo\n->\nattach\n(\n$a\n);\n$foo\n->\nattach\n(\n$b\n);\n$bar\n= new\nSplObjectStorage\n;\n$bar\n->\nattach\n(\n$b\n);\n$bar\n->\nattach\n(\n$c\n);\n$foo\n->\nremoveAllExcept\n(\n$bar\n);\nvar_dump\n(\n$foo\n->\ncontains\n(\n$a\n));\nvar_dump\n(\n$foo\n->\ncontains\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::rewind() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$index\n=\n$s\n->\nkey\n();\n\n$object\n=\n$s\n->\ncurrent\n();\n// similar to current($s)\n\n$data\n=\n$s\n->\ngetInfo\n();\n\nvar_dump\n(\n$object\n);\n\nvar_dump\n(\n$data\n);\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::serialize() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n;\n$o\n= new\nstdClass\n;\n$s\n[\n$o\n] =\n\"data\"\n;\necho\n$s\n->\nserialize\n().\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::setInfo() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n\n$s\n->\nsetInfo\n(\n\"new\"\n);\n\n$s\n->\nnext\n();\n}\nvar_dump\n(\n$s\n[\n$o1\n]);\nvar_dump\n(\n$s\n[\n$o2\n]);\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::unserialize() example",
    "output": "<?php\n$s1\n= new\nSplObjectStorage\n;\n$s2\n= new\nSplObjectStorage\n;\n$o\n= new\nstdClass\n;\n$s1\n[\n$o\n] =\n\"data\"\n;\n$s2\n->\nunserialize\n(\n$s1\n->\nserialize\n());\nvar_dump\n(\ncount\n(\n$s2\n));\n?>"
  },
  {
    "input": "Example #1 SplObjectStorage::valid() example",
    "output": "<?php\n$s\n= new\nSplObjectStorage\n();\n$o1\n= new\nstdClass\n;\n$o2\n= new\nstdClass\n;\n$s\n->\nattach\n(\n$o1\n,\n\"d1\"\n);\n$s\n->\nattach\n(\n$o2\n,\n\"d2\"\n);\n$s\n->\nrewind\n();\nwhile(\n$s\n->\nvalid\n()) {\n    echo\n$s\n->\nkey\n().\n\"\\n\"\n;\n\n$s\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 AppendIterator::append() example",
    "output": "<?php\n$array_a\n= new\nArrayIterator\n(array(\n'a'\n,\n'b'\n,\n'c'\n));\n$array_b\n= new\nArrayIterator\n(array(\n'd'\n,\n'e'\n,\n'f'\n));\n$iterator\n= new\nAppendIterator\n;\n$iterator\n->\nappend\n(\n$array_a\n);\n$iterator\n->\nappend\n(\n$array_b\n);\nforeach (\n$iterator\nas\n$current\n) {\n    echo\n$current\n;\n}\n?>"
  },
  {
    "input": "Example #1 Iterating AppendIterator with foreach",
    "output": "<?php\n$pizzas\n= new\nArrayIterator\n(array(\n'Margarita'\n,\n'Siciliana'\n,\n'Hawaii'\n));\n$toppings\n= new\nArrayIterator\n(array(\n'Cheese'\n,\n'Anchovies'\n,\n'Olives'\n,\n'Pineapple'\n,\n'Ham'\n));\n$appendIterator\n= new\nAppendIterator\n;\n$appendIterator\n->\nappend\n(\n$pizzas\n);\n$appendIterator\n->\nappend\n(\n$toppings\n);\nforeach (\n$appendIterator\nas\n$key\n=>\n$item\n) {\n    echo\n$key\n.\n' => '\n.\n$item\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #2 Iterating AppendIterator with the AppendIterator API",
    "output": "<?php\n$pizzas\n= new\nArrayIterator\n(array(\n'Margarita'\n,\n'Siciliana'\n,\n'Hawaii'\n));\n$toppings\n= new\nArrayIterator\n(array(\n'Cheese'\n,\n'Anchovies'\n,\n'Olives'\n,\n'Pineapple'\n,\n'Ham'\n));\n$appendIterator\n= new\nAppendIterator\n;\n$appendIterator\n->\nappend\n(\n$pizzas\n);\n$appendIterator\n->\nappend\n(\n$toppings\n);\nwhile (\n$appendIterator\n->\nvalid\n()) {\n\nprintf\n(\n\n'%s => %s => %s%s'\n,\n\n$appendIterator\n->\ngetIteratorIndex\n(),\n\n$appendIterator\n->\nkey\n(),\n\n$appendIterator\n->\ncurrent\n(),\n\nPHP_EOL\n\n);\n\n$appendIterator\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 AppendIterator.getIteratorIndex() basic example",
    "output": "<?php\n$array_a\n= new\nArrayIterator\n(array(\n'a'\n=>\n'aardwolf'\n,\n'b'\n=>\n'bear'\n,\n'c'\n=>\n'capybara'\n));\n$array_b\n= new\nArrayIterator\n(array(\n'apple'\n,\n'orange'\n,\n'lemon'\n));\n$iterator\n= new\nAppendIterator\n;\n$iterator\n->\nappend\n(\n$array_a\n);\n$iterator\n->\nappend\n(\n$array_b\n);\nforeach (\n$iterator\nas\n$key\n=>\n$current\n) {\n    echo\n$iterator\n->\ngetIteratorIndex\n() .\n'  '\n.\n$key\n.\n' '\n.\n$current\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 AppendIterator::key() basic example",
    "output": "<?php\n$array_a\n= new\nArrayIterator\n(array(\n'a'\n=>\n'aardwolf'\n,\n'b'\n=>\n'bear'\n,\n'c'\n=>\n'capybara'\n));\n$array_b\n= new\nArrayIterator\n(array(\n'apple'\n,\n'orange'\n,\n'lemon'\n));\n$iterator\n= new\nAppendIterator\n;\n$iterator\n->\nappend\n(\n$array_a\n);\n$iterator\n->\nappend\n(\n$array_b\n);\n// Manual iteration\n$iterator\n->\nrewind\n();\nwhile (\n$iterator\n->\nvalid\n()) {\n    echo\n$iterator\n->\nkey\n() .\n' '\n.\n$iterator\n->\ncurrent\n() .\nPHP_EOL\n;\n\n$iterator\n->\nnext\n();\n}\necho\nPHP_EOL\n;\n// With foreach\nforeach (\n$iterator\nas\n$key\n=>\n$current\n) {\n    echo\n$key\n.\n' '\n.\n$current\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 ArrayIterator::current() example",
    "output": "<?php\n$array\n= array(\n'1'\n=>\n'one'\n,\n\n'2'\n=>\n'two'\n,\n\n'3'\n=>\n'three'\n);\n$arrayobject\n= new\nArrayObject\n(\n$array\n);\nfor(\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\n\n$iterator\n->\nvalid\n();\n\n$iterator\n->\nnext\n()) {\n    echo\n$iterator\n->\nkey\n() .\n' => '\n.\n$iterator\n->\ncurrent\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ArrayIterator::key() example",
    "output": "<?php\n$array\n= array(\n'key'\n=>\n'value'\n);\n$arrayobject\n= new\nArrayObject\n(\n$array\n);\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\necho\n$iterator\n->\nkey\n();\n//key\n?>"
  },
  {
    "input": "Example #1 ArrayIterator::next() example",
    "output": "<?php\n$arrayobject\n= new\nArrayObject\n();\n$arrayobject\n[] =\n'zero'\n;\n$arrayobject\n[] =\n'one'\n;\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\nwhile(\n$iterator\n->\nvalid\n()) {\n    echo\n$iterator\n->\nkey\n() .\n' => '\n.\n$iterator\n->\ncurrent\n() .\n\"\\n\"\n;\n\n$iterator\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 ArrayIterator::rewind() example",
    "output": "<?php\n$arrayobject\n= new\nArrayObject\n();\n$arrayobject\n[] =\n'zero'\n;\n$arrayobject\n[] =\n'one'\n;\n$arrayobject\n[] =\n'two'\n;\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\n$iterator\n->\nnext\n();\necho\n$iterator\n->\nkey\n();\n//1\n$iterator\n->\nrewind\n();\n//rewinding to the beginning\necho\n$iterator\n->\nkey\n();\n//0\n?>"
  },
  {
    "input": "Example #1 ArrayIterator::valid() example",
    "output": "<?php\n$array\n= array(\n'1'\n=>\n'one'\n);\n$arrayobject\n= new\nArrayObject\n(\n$array\n);\n$iterator\n=\n$arrayobject\n->\ngetIterator\n();\nvar_dump\n(\n$iterator\n->\nvalid\n());\n//bool(true)\n$iterator\n->\nnext\n();\n// advance to the next item\n//bool(false) because there is only one array element\nvar_dump\n(\n$iterator\n->\nvalid\n());\n?>"
  },
  {
    "input": "Example #1 CachingIterator::getCache() example",
    "output": "<?php\n$iterator\n= new\nArrayIterator\n(array(\n1\n,\n2\n,\n3\n));\n$cache\n= new\nCachingIterator\n(\n$iterator\n,\nCachingIterator\n::\nFULL_CACHE\n);\n$cache\n->\nnext\n();\n$cache\n->\nnext\n();\nvar_dump\n(\n$cache\n->\ngetCache\n());\n$cache\n->\nnext\n();\nvar_dump\n(\n$cache\n->\ngetCache\n());\n?>"
  },
  {
    "input": "Example #1 Available callback arguments",
    "output": "<?php\n/**\n * Callback for CallbackFilterIterator\n *\n * @param $current   Current item's value\n * @param $key       Current item's key\n * @param $iterator  Iterator being filtered\n * @return boolean   TRUE to accept the current item, FALSE otherwise\n */\nfunction\nmy_callback\n(\n$current\n,\n$key\n,\n$iterator\n) {\n\n// Your filtering code here\n}\n?>"
  },
  {
    "input": "Example #2 Callback basic examples",
    "output": "<?php\n$dir\n= new\nFilesystemIterator\n(\n__DIR__\n);\n// Filter large files ( > 100MB)\nfunction\nis_large_file\n(\n$current\n) {\n    return\n$current\n->\nisFile\n() &&\n$current\n->\ngetSize\n() >\n104857600\n;\n}\n$large_files\n= new\nCallbackFilterIterator\n(\n$dir\n,\n'is_large_file'\n);\n// Filter directories\n$files\n= new\nCallbackFilterIterator\n(\n$dir\n, function (\n$current\n,\n$key\n,\n$iterator\n) {\n    return\n$current\n->\nisDir\n() && !\n$iterator\n->\nisDot\n();\n});\n?>"
  },
  {
    "input": "Example #1 DirectoryIterator::getExtension() example",
    "output": "<?php\n$directory\n= new\nDirectoryIterator\n(\n__DIR__\n);\nforeach (\n$directory\nas\n$fileinfo\n) {\n    if (\n$fileinfo\n->\nisFile\n()) {\n        echo\n$fileinfo\n->\ngetExtension\n() .\n\"\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A DirectoryIterator::key() example",
    "output": "<?php\n$dir\n= new\nDirectoryIterator\n(\ndirname\n(\n__FILE__\n));\nforeach (\n$dir\nas\n$fileinfo\n) {\n    if (!\n$fileinfo\n->\nisDot\n()) {\n        echo\n$fileinfo\n->\nkey\n() .\n\" => \"\n.\n$fileinfo\n->\ngetFilename\n() .\n\"\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 DirectoryIterator::rewind() example",
    "output": "<?php\n$iterator\n= new\nDirectoryIterator\n(\ndirname\n(\n__FILE__\n));\n$iterator\n->\nnext\n();\necho\n$iterator\n->\nkey\n();\n//1\n$iterator\n->\nrewind\n();\n//rewinding to the beginning\necho\n$iterator\n->\nkey\n();\n//0\n?>"
  },
  {
    "input": "Example #1 A DirectoryIterator::valid() example",
    "output": "<?php\n$iterator\n= new\nDirectoryIterator\n(\ndirname\n(\n__FILE__\n));\n// Loop to end of iterator\nwhile(\n$iterator\n->\nvalid\n()) {\n\n$iterator\n->\nnext\n();\n}\n$iterator\n->\nvalid\n();\n// FALSE\n$iterator\n->\nrewind\n();\n$iterator\n->\nvalid\n();\n// TRUE\n?>"
  },
  {
    "input": "Example #1 FilesystemIterator::__construct() example",
    "output": "<?php\n$it\n= new\nFilesystemIterator\n(\ndirname\n(\n__FILE__\n),\nFilesystemIterator\n::\nCURRENT_AS_FILEINFO\n);\nforeach (\n$it\nas\n$fileinfo\n) {\n    echo\n$fileinfo\n->\ngetFilename\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 FilesystemIterator::rewind() example",
    "output": "<?php\n$iterator\n= new\nFilesystemIterator\n(\ndirname\n(\n__FILE__\n),\nFilesystemIterator\n::\nKEY_AS_FILENAME\n);\necho\n$iterator\n->\nkey\n() .\n\"\\n\"\n;\n$iterator\n->\nnext\n();\necho\n$iterator\n->\nkey\n() .\n\"\\n\"\n;\n$iterator\n->\nrewind\n();\necho\n$iterator\n->\nkey\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 FilterIterator::accept() example",
    "output": "<?php\n// This iterator filters all values with less than 10 characters\nclass\nLengthFilterIterator\nextends\nFilterIterator\n{\n    public function\naccept\n() {\n\n// Only accept strings with a length of 10 and greater\n\nreturn\nstrlen\n(\nparent\n::\ncurrent\n()) >=\n10\n;\n    }\n}\n$arrayIterator\n= new\nArrayIterator\n(array(\n'test1'\n,\n'more than 10 characters'\n));\n$lengthFilter\n= new\nLengthFilterIterator\n(\n$arrayIterator\n);\nforeach (\n$lengthFilter\nas\n$value\n) {\n    echo\n$value\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 GlobIterator example",
    "output": "<?php\n$iterator\n= new\nGlobIterator\n(\n'*.dll'\n,\nFilesystemIterator\n::\nKEY_AS_FILENAME\n);\nif (!\n$iterator\n->\ncount\n()) {\n    echo\n'No matches'\n;\n} else {\n\n$n\n=\n0\n;\n\nprintf\n(\n\"Matched %d item(s)\\r\\n\"\n,\n$iterator\n->\ncount\n());\n    foreach (\n$iterator\nas\n$item\n) {\n\nprintf\n(\n\"[%d] %s\\r\\n\"\n, ++\n$n\n,\n$iterator\n->\nkey\n());\n    }\n}\n?>"
  },
  {
    "input": "Example #1 GlobIterator::count() example",
    "output": "<?php\n$iterator\n= new\nGlobIterator\n(\n'*.xml'\n);\nprintf\n(\n\"Matched %d item(s)\\r\\n\"\n,\n$iterator\n->\ncount\n());\n?>"
  },
  {
    "input": "Example #1 InfiniteIterator::__construct() example",
    "output": "<?php\n$arrayit\n= new\nArrayIterator\n(array(\n'cat'\n,\n'dog'\n));\n$infinite\n= new\nInfiniteIterator\n(\n$arrayit\n);\n$limit\n= new\nLimitIterator\n(\n$infinite\n,\n0\n,\n7\n);\nforeach(\n$limit\nas\n$value\n)\n{\n    echo\n\"\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 LimitIterator usage example",
    "output": "<?php\n// Create an iterator to be limited\n$fruits\n= new\nArrayIterator\n(array(\n\n'apple'\n,\n\n'banana'\n,\n\n'cherry'\n,\n\n'damson'\n,\n\n'elderberry'\n));\n// Loop over first three fruits only\nforeach (new\nLimitIterator\n(\n$fruits\n,\n0\n,\n3\n) as\n$fruit\n) {\n\nvar_dump\n(\n$fruit\n);\n}\necho\n\"\\n\"\n;\n// Loop from third fruit until the end\n// Note: offset starts from zero for apple\nforeach (new\nLimitIterator\n(\n$fruits\n,\n2\n) as\n$fruit\n) {\n\nvar_dump\n(\n$fruit\n);\n}\n?>"
  },
  {
    "input": "Example #1 LimitIterator::__construct() example",
    "output": "<?php\n$ait\n= new\nArrayIterator\n(array(\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n,\n'e'\n));\n$lit\n= new\nLimitIterator\n(\n$ait\n,\n1\n,\n3\n);\nforeach (\n$lit\nas\n$value\n) {\n    echo\n$value\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 LimitIterator::getPosition() example",
    "output": "<?php\n$fruits\n= array(\n\n'a'\n=>\n'apple'\n,\n\n'b'\n=>\n'banana'\n,\n\n'c'\n=>\n'cherry'\n,\n\n'd'\n=>\n'damson'\n,\n\n'e'\n=>\n'elderberry'\n);\n$array_it\n= new\nArrayIterator\n(\n$fruits\n);\n$limit_it\n= new\nLimitIterator\n(\n$array_it\n,\n2\n,\n3\n);\nforeach (\n$limit_it\nas\n$item\n) {\n    echo\n$limit_it\n->\ngetPosition\n() .\n' '\n.\n$item\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Iterating a MultipleIterator",
    "output": "<?php\n$people\n= new\nArrayIterator\n(array(\n'John'\n,\n'Jane'\n,\n'Jack'\n,\n'Judy'\n));\n$roles\n= new\nArrayIterator\n(array(\n'Developer'\n,\n'Scrum Master'\n,\n'Project Owner'\n));\n$team\n= new\nMultipleIterator\n(\n$flags\n);\n$team\n->\nattachIterator\n(\n$people\n,\n'person'\n);\n$team\n->\nattachIterator\n(\n$roles\n,\n'role'\n);\nforeach (\n$team\nas\n$member\n) {\n\nprint_r\n(\n$member\n);\n}\n?>"
  },
  {
    "input": "Example #1 RecursiveArrayIterator::getChildren() example",
    "output": "<?php\n$fruits\n= array(\n\"a\"\n=>\n\"lemon\"\n,\n\"b\"\n=>\n\"orange\"\n, array(\n\"a\"\n=>\n\"apple\"\n,\n\"p\"\n=>\n\"pear\"\n));\n$iterator\n= new\nRecursiveArrayIterator\n(\n$fruits\n);\nwhile (\n$iterator\n->\nvalid\n()) {\n    if (\n$iterator\n->\nhasChildren\n()) {\n\n// print all children\n\nforeach (\n$iterator\n->\ngetChildren\n() as\n$key\n=>\n$value\n) {\n            echo\n$key\n.\n' : '\n.\n$value\n.\n\"\\n\"\n;\n        }\n    } else {\n        echo\n\"No children.\\n\"\n;\n    }\n\n$iterator\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 RecursiveArrayIterator::hasChildren() example",
    "output": "<?php\n$fruits\n= array(\n\"a\"\n=>\n\"lemon\"\n,\n\"b\"\n=>\n\"orange\"\n, array(\n\"a\"\n=>\n\"apple\"\n,\n\"p\"\n=>\n\"pear\"\n));\n$iterator\n= new\nRecursiveArrayIterator\n(\n$fruits\n);\nwhile (\n$iterator\n->\nvalid\n()) {\n\n// Check if there are children\n\nif (\n$iterator\n->\nhasChildren\n()) {\n\n// print all children\n\nforeach (\n$iterator\n->\ngetChildren\n() as\n$key\n=>\n$value\n) {\n            echo\n$key\n.\n' : '\n.\n$value\n.\n\"\\n\"\n;\n        }\n    } else {\n        echo\n\"No children.\\n\"\n;\n    }\n\n$iterator\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 Available callback arguments",
    "output": "<?php\n/**\n * Callback for RecursiveCallbackFilterIterator\n *\n * @param $current   Current item's value\n * @param $key       Current item's key\n * @param $iterator  Iterator being filtered\n * @return boolean   TRUE to accept the current item, FALSE otherwise\n */\nfunction\nmy_callback\n(\n$current\n,\n$key\n,\n$iterator\n) {\n\n// Your filtering code here\n}\n?>"
  },
  {
    "input": "Example #2 Recursive callback basic example",
    "output": "<?php\n$dir\n= new\nRecursiveDirectoryIterator\n(\n__DIR__\n);\n// Filter large files ( > 100MB)\n$files\n= new\nRecursiveCallbackFilterIterator\n(\n$dir\n, function (\n$current\n,\n$key\n,\n$iterator\n) {\n\n// Allow recursion\n\nif (\n$iterator\n->\nhasChildren\n()) {\n        return\nTRUE\n;\n    }\n\n// Check for large file\n\nif (\n$current\n->\nisFile\n() &&\n$current\n->\ngetSize\n() >\n104857600\n) {\n        return\nTRUE\n;\n    }\n    return\nFALSE\n;\n});\n\nforeach (new\nRecursiveIteratorIterator\n(\n$files\n) as\n$file\n) {\n    echo\n$file\n->\ngetPathname\n() .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 RecursiveCallbackFilterIterator::hasChildren() basic usage",
    "output": "<?php\n$dir\n= new\nRecursiveDirectoryIterator\n(\n__DIR__\n);\n// Recursively iterate over XML files\n$files\n= new\nRecursiveCallbackFilterIterator\n(\n$dir\n, function (\n$current\n,\n$key\n,\n$iterator\n) {\n\n// Allow recursion into directories\n\nif (\n$iterator\n->\nhasChildren\n()) {\n        return\nTRUE\n;\n    }\n\n// Check for XML file\n\nif (!\nstrcasecmp\n(\n$current\n->\ngetExtension\n(),\n'xml'\n)) {\n        return\nTRUE\n;\n    }\n    return\nFALSE\n;\n});\n?>"
  },
  {
    "input": "Example #1 RecursiveDirectoryIterator example",
    "output": "<?php\n$directory\n=\n'/tmp'\n;\n$it\n= new\nRecursiveIteratorIterator\n(new\nRecursiveDirectoryIterator\n(\n$directory\n));\n$it\n->\nrewind\n();\nwhile(\n$it\n->\nvalid\n()) {\n    if (!\n$it\n->\nisDot\n()) {\n        echo\n'SubPathName: '\n.\n$it\n->\ngetSubPathName\n() .\n\"\\n\"\n;\n        echo\n'SubPath:     '\n.\n$it\n->\ngetSubPath\n() .\n\"\\n\"\n;\n        echo\n'Key:         '\n.\n$it\n->\nkey\n() .\n\"\\n\\n\"\n;\n    }\n\n$it\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 Basic RecursiveFilterIterator() example",
    "output": "<?php\nclass\nTestsOnlyFilter\nextends\nRecursiveFilterIterator\n{\n    public function\naccept\n() {\n\n// Accept the current item if we can recurse into it\n        // or it is a value starting with \"test\"\n\nreturn\n$this\n->\nhasChildren\n() || (\nstrpos\n(\n$this\n->\ncurrent\n(),\n\"test\"\n) !==\nFALSE\n);\n    }\n}\n$array\n= array(\n\"test1\"\n, array(\n\"taste2\"\n,\n\"test3\"\n,\n\"test4\"\n),\n\"test5\"\n);\n$iterator\n= new\nRecursiveArrayIterator\n(\n$array\n);\n$filter\n= new\nTestsOnlyFilter\n(\n$iterator\n);\nforeach(new\nRecursiveIteratorIterator\n(\n$filter\n) as\n$key\n=>\n$value\n)\n{\n    echo\n$value\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 RecursiveFilterIterator() example",
    "output": "<?php\nclass\nStartsWithFilter\nextends\nRecursiveFilterIterator\n{\n    protected\n$word\n;\n    public function\n__construct\n(\nRecursiveIterator $rit\n,\n$word\n) {\n\n$this\n->\nword\n=\n$word\n;\n\nparent\n::\n__construct\n(\n$rit\n);\n    }\n    public function\naccept\n() {\n        return\n$this\n->\nhasChildren\n() OR\nstrpos\n(\n$this\n->\ncurrent\n(),\n$this\n->\nword\n) ===\n0\n;\n    }\n\n    public function\ngetChildren\n() {\n        return new\nself\n(\n$this\n->\ngetInnerIterator\n()->\ngetChildren\n(),\n$this\n->\nword\n);\n    }\n}\n$array\n= array(\n\"test1\"\n, array(\n\"taste2\"\n,\n\"test3\"\n,\n\"test4\"\n),\n\"test5\"\n);\n$iterator\n= new\nRecursiveArrayIterator\n(\n$array\n);\n$filter\n= new\nStartsWithFilter\n(\n$iterator\n,\n\"test\"\n);\nforeach(new\nRecursiveIteratorIterator\n(\n$filter\n) as\n$key\n=>\n$value\n)\n{\n    echo\n$value\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Iterating a RecursiveIteratorIterator",
    "output": "<?php\n$array\n= array(\n    array(\n        array(\n            array(\n\n'leaf-0-0-0-0'\n,\n\n'leaf-0-0-0-1'\n\n),\n\n'leaf-0-0-0'\n\n),\n        array(\n            array(\n\n'leaf-0-1-0-0'\n,\n\n'leaf-0-1-0-1'\n\n),\n\n'leaf-0-1-0'\n\n),\n\n'leaf-0-0'\n\n)\n);\n$iterator\n= new\nRecursiveIteratorIterator\n(\n    new\nRecursiveArrayIterator\n(\n$array\n),\n\n$mode\n);\nforeach (\n$iterator\nas\n$key\n=>\n$leaf\n) {\n    echo\n\"\n$key\n =>\n$leaf\n\"\n,\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 RecursiveRegexIterator::getChildren() example",
    "output": "<?php\n$rArrayIterator\n= new\nRecursiveArrayIterator\n(array(\n'test1'\n, array(\n'tet3'\n,\n'test4'\n,\n'test5'\n)));\n$rRegexIterator\n= new\nRecursiveRegexIterator\n(\n$rArrayIterator\n,\n'/^test/'\n,\n\nRecursiveRegexIterator\n::\nALL_MATCHES\n);\nforeach (\n$rRegexIterator\nas\n$key1\n=>\n$value1\n) {\n    if (\n$rRegexIterator\n->\nhasChildren\n()) {\n\n// print all children\n\necho\n\"Children: \"\n;\n        foreach (\n$rRegexIterator\n->\ngetChildren\n() as\n$key\n=>\n$value\n) {\n            echo\n$value\n.\n\" \"\n;\n        }\n        echo\n\"\\n\"\n;\n    } else {\n        echo\n\"No children\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 RecursiveRegexIterator::hasChildren() example",
    "output": "<?php\n$rArrayIterator\n= new\nRecursiveArrayIterator\n(array(\n'test1'\n, array(\n'tet3'\n,\n'test4'\n,\n'test5'\n)));\n$rRegexIterator\n= new\nRecursiveRegexIterator\n(\n$rArrayIterator\n,\n'/^test/'\n,\n\nRecursiveRegexIterator\n::\nALL_MATCHES\n);\nforeach (\n$rRegexIterator\nas\n$value\n) {\n\nvar_dump\n(\n$rRegexIterator\n->\nhasChildren\n());\n}\n?>"
  },
  {
    "input": "Example #1 RegexIterator::getFlags() example",
    "output": "<?php\n$test\n= array (\n'str1'\n=>\n'test 1'\n,\n'teststr2'\n=>\n'another test'\n,\n'str3'\n=>\n'test 123'\n);\n$arrayIterator\n= new\nArrayIterator\n(\n$test\n);\n$regexIterator\n= new\nRegexIterator\n(\n$arrayIterator\n,\n'/^test/'\n);\n$regexIterator\n->\nsetFlags\n(\nRegexIterator\n::\nUSE_KEY\n);\nif (\n$regexIterator\n->\ngetFlags\n() &\nRegexIterator\n::\nUSE_KEY\n) {\n    echo\n'Filtering based on the array keys.'\n;\n} else {\n    echo\n'Filtering based on the array values.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 RegexIterator::getMode() example",
    "output": "<?php\n$test\n= array (\n'str1'\n=>\n'test 1'\n,\n'teststr2'\n=>\n'another test'\n,\n'str3'\n=>\n'test 123'\n);\n$arrayIterator\n= new\nArrayIterator\n(\n$test\n);\n$regexIterator\n= new\nRegexIterator\n(\n$arrayIterator\n,\n'/^[a-z]+/'\n,\nRegexIterator\n::\nGET_MATCH\n);\n$mode\n=\n$regexIterator\n->\ngetMode\n();\nif (\n$mode\n&\nRegexIterator\n::\nGET_MATCH\n) {\n    echo\n'Getting the match for each item.'\n;\n} elseif (\n$mode\n&\nRegexIterator\n::\nALL_MATCHES\n) {\n    echo\n'Getting all matches for each item.'\n;\n} elseif (\n$mode\n&\nRegexIterator\n::MATCH) {\n    echo\n'Getting each item if it matches.'\n;\n} elseif (\n$mode\n&\nRegexIterator\n::\nSPLIT\n) {\n    echo\n'Getting split pieces of each.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 RegexIterator::getPregFlags() example",
    "output": "<?php\n$test\n= array (\n'str1'\n=>\n'test 1'\n,\n'teststr2'\n=>\n'another test'\n,\n'str3'\n=>\n'test 123'\n);\n$arrayIterator\n= new\nArrayIterator\n(\n$test\n);\n$regexIterator\n= new\nRegexIterator\n(\n$arrayIterator\n,\n'/\\s/'\n,\nRegexIterator\n::\nSPLIT\n);\n$regexIterator\n->\nsetPregFlags\n(\nPREG_SPLIT_NO_EMPTY\n|\nPREG_SPLIT_OFFSET_CAPTURE\n);\nif (\n$regexIterator\n->\ngetPregFlags\n() &\nPREG_SPLIT_NO_EMPTY\n) {\n    echo\n'Ignoring empty pieces'\n;\n} else {\n    echo\n'Not ignoring empty pieces'\n;\n}\n?>"
  },
  {
    "input": "Example #1 RegexIterator::setMode() example",
    "output": "<?php\n$test\n= array (\n'str1'\n=>\n'test 1'\n,\n'test str2'\n=>\n'another test'\n,\n'str3'\n=>\n'test 123'\n);\n$arrayIterator\n= new\nArrayIterator\n(\n$test\n);\n// Filter everything that starts with 'test ' followed by one or more numbers.\n$regexIterator\n= new\nRegexIterator\n(\n$arrayIterator\n,\n'/^test (\\d+)/'\n);\n// Operation mode: Replace actual value with the matches\n$regexIterator\n->\nsetMode\n(\nRegexIterator\n::\nGET_MATCH\n);\nforeach (\n$regexIterator\nas\n$key\n=>\n$value\n) {\n\n// print out the matched number(s)\n\necho\n$key\n.\n' => '\n.\n$value\n[\n1\n] .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::__construct() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.php'\n);\nif (\n$info\n->\nisFile\n()) {\n    echo\n$info\n->\ngetRealPath\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getATime() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\n'Last accessed at '\n.\ndate\n(\n'g:i a'\n,\n$info\n->\ngetATime\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getBasename() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'file.txt'\n);\nvar_dump\n(\n$info\n->\ngetBasename\n());\n$info\n= new\nSplFileInfo\n(\n'/path/to/file.txt'\n);\nvar_dump\n(\n$info\n->\ngetBasename\n());\n$info\n= new\nSplFileInfo\n(\n'/path/to/file.txt'\n);\nvar_dump\n(\n$info\n->\ngetBasename\n(\n'.txt'\n));\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getCTime() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\n'Last changed at '\n.\ndate\n(\n'g:i a'\n,\n$info\n->\ngetCTime\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getExtension() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'foo.txt'\n);\nvar_dump\n(\n$info\n->\ngetExtension\n());\n$info\n= new\nSplFileInfo\n(\n'photo.jpg'\n);\nvar_dump\n(\n$info\n->\ngetExtension\n());\n$info\n= new\nSplFileInfo\n(\n'something.tar.gz'\n);\nvar_dump\n(\n$info\n->\ngetExtension\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getFilename() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'foo.txt'\n);\nvar_dump\n(\n$info\n->\ngetFilename\n());\n$info\n= new\nSplFileInfo\n(\n'/path/to/foo.txt'\n);\nvar_dump\n(\n$info\n->\ngetFilename\n());\n$info\n= new\nSplFileInfo\n(\n'http://www.php.net/'\n);\nvar_dump\n(\n$info\n->\ngetFilename\n());\n$info\n= new\nSplFileInfo\n(\n'http://www.php.net/svn.php'\n);\nvar_dump\n(\n$info\n->\ngetFilename\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getGroup() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\ninfo\n->\ngetFilename\n() .\n' belongs to group id '\n.\n$info\n->\ngetGroup\n() .\n\"\\n\"\n;\nprint_r\n(\nposix_getgrgid\n(\n$info\n->\ngetGroup\n()));\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getLinkTarget() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/Users/bbieber/workspace'\n);\nif (\n$info\n->\nisLink\n()) {\n\nvar_dump\n(\n$info\n->\ngetLinkTarget\n());\n\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getMTime() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\n'Last modified at '\n.\ndate\n(\n'g:i a'\n,\n$info\n->\ngetMTime\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getOwner() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\ninfo\n->\ngetFilename\n() .\n' belongs to owner id '\n.\n$info\n->\ngetOwner\n() .\n\"\\n\"\n;\nprint_r\n(\nposix_getpwuid\n(\n$info\n->\ngetOwner\n()));\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getPath() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/usr/bin/php'\n);\nvar_dump\n(\n$info\n->\ngetPath\n());\n$info\n= new\nSplFileInfo\n(\n'/usr/'\n);\nvar_dump\n(\n$info\n->\ngetPath\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getPathInfo() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/usr/bin/php'\n);\n$parent_info\n=\n$info\n->\ngetPathInfo\n();\nvar_dump\n(\n$parent_info\n->\ngetRealPath\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getPathname() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/usr/bin/php'\n);\nvar_dump\n(\n$info\n->\ngetPathname\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getPerms() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/tmp'\n);\necho\nsubstr\n(\nsprintf\n(\n'%o'\n,\n$info\n->\ngetPerms\n()), -\n4\n);\n$info\n= new\nSplFileInfo\n(\n__FILE__\n);\necho\nsubstr\n(\nsprintf\n(\n'%o'\n,\n$info\n->\ngetPerms\n()), -\n4\n);\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getRealPath() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/..//./../../'\n.\n__FILE__\n);\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n$info\n= new\nSplFileInfo\n(\n'/tmp'\n);\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n$info\n= new\nSplFileInfo\n(\n'/I/Do/Not/Exist'\n);\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n$info\n= new\nSplFileInfo\n(\n'php://output'\n);\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n$info\n= new\nSplFileInfo\n(\n\"\"\n);\nvar_dump\n(\n$info\n->\ngetRealPath\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getSize() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'example.jpg'\n);\necho\n$fileinfo\n->\ngetFilename\n() .\n\" \"\n.\n$fileinfo\n->\ngetSize\n();\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::getType() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n__FILE__\n);\necho\n$info\n->\ngetType\n().\nPHP_EOL\n;\n$info\n= new\nSplFileInfo\n(\ndirname\n(\n__FILE__\n));\necho\n$info\n->\ngetType\n();\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isDir() example",
    "output": "<?php\n$d\n= new\nSplFileInfo\n(\ndirname\n(\n__FILE__\n));\nvar_dump\n(\n$d\n->\nisDir\n());\n$d\n= new\nSplFileInfo\n(\n__FILE__\n);\nvar_dump\n(\n$d\n->\nisDir\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isExecutable() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/usr/bin/php'\n);\nvar_dump\n(\n$info\n->\nisExecutable\n());\n$info\n= new\nSplFileInfo\n(\n'/usr/bin'\n);\nvar_dump\n(\n$info\n->\nisExecutable\n());\n$info\n= new\nSplFileInfo\n(\n'foo'\n);\nvar_dump\n(\n$info\n->\nisExecutable\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isFile() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n__FILE__\n);\nvar_dump\n(\n$info\n->\nisFile\n());\n$info\n= new\nSplFileInfo\n(\ndirname\n(\n__FILE__\n));\nvar_dump\n(\n$info\n->\nisFile\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isLink() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'/path/to/symlink'\n);\nif (\n$info\n->\nisLink\n()) {\n    echo\n'The real path is '\n.\n$info\n->\ngetRealPath\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isReadable() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'readable.jpg'\n);\nif (\n$info\n->\nisReadable\n()) {\n    echo\n$info\n->\ngetFilename\n() .\n' is readable'\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::isWriteable() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'locked.jpg'\n);\nif (!\n$info\n->\nisWriteable\n()) {\n    echo\n$info\n->\ngetFilename\n() .\n' is not writeable'\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::openFile() example",
    "output": "<?php\n$fileinfo\n= new\nSplFileInfo\n(\n'/tmp/foo.txt'\n);\nif (\n$fileinfo\n->\nisWritable\n()) {\n\n$fileobj\n=\n$fileinfo\n->\nopenFile\n(\n'a'\n);\n\n$fileobj\n->\nfwrite\n(\n\"appended this sample text\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::setFileClass() example",
    "output": "<?php\n// Create a class extending SplFileObject\nclass\nMyFoo\nextends\nSplFileObject\n{}\n$info\n= new\nSplFileInfo\n(\n__FILE__\n);\n// Set the class to use\n$info\n->\nsetFileClass\n(\n'MyFoo'\n);\nvar_dump\n(\n$info\n->\nopenFile\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::setFileClass() example",
    "output": "<?php\n// Define a class which extends SplFileInfo\nclass\nMyFoo\nextends\nSplFileInfo\n{}\n$info\n= new\nSplFileInfo\n(\n'foo'\n);\n// Set the class name to use\n$info\n->\nsetInfoClass\n(\n'MyFoo'\n);\nvar_dump\n(\n$info\n->\ngetFileInfo\n());\n?>"
  },
  {
    "input": "Example #1 SplFileInfo::__toString() example",
    "output": "<?php\n$info\n= new\nSplFileInfo\n(\n'foo'\n);\nvar_dump\n(\n$info\n->\n__toString\n());\necho\n$info\n.\nPHP_EOL\n;\n$info\n= new\nSplFileInfo\n(\n'/usr/bin/php'\n);\nvar_dump\n(\n$info\n->\n__toString\n());\necho\n$info\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SplFileObject::current() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n__FILE__\n);\nforeach (\n$file\nas\n$k\n=>\n$line\n) {\n   echo (\n$file\n->\nkey\n() +\n1\n) .\n': '\n.\n$file\n->\ncurrent\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::eof() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"fruits.txt\"\n);\nwhile ( !\n$file\n->\neof\n()) {\n    echo\n$file\n->\nfgets\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fflush() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n'misc.txt'\n,\n'r+'\n);\n$file\n->\nrewind\n();\n$file\n->\nfwrite\n(\n\"Foo\"\n);\n$file\n->\nfflush\n();\n$file\n->\nftruncate\n(\n$file\n->\nftell\n());\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fgetc() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n'file.txt'\n);\nwhile (\nfalse\n!== (\n$char\n=\n$file\n->\nfgetc\n())) {\n    echo\n\"\n$char\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fgetcsv() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"data.csv\"\n);\nwhile (!\n$file\n->\neof\n()) {\n\nvar_dump\n(\n$file\n->\nfgetcsv\n());\n}\n?>"
  },
  {
    "input": "Example #2 SplFileObject::READ_CSV example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"animals.csv\"\n);\n$file\n->\nsetFlags\n(\nSplFileObject\n::\nREAD_CSV\n);\nforeach (\n$file\nas\n$row\n) {\n    list(\n$animal\n,\n$class\n,\n$legs\n) =\n$row\n;\n\nprintf\n(\n\"A %s is a %s with %d legs\\n\"\n,\n$animal\n,\n$class\n,\n$legs\n);\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fgetss() example",
    "output": "<?php\n$str\n= <<<EOD\n<html><body>\n <p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.</p>\n</body></html>\nText outside of the HTML block.\nEOD;\nfile_put_contents\n(\n\"sample.php\"\n,\n$str\n);\n$file\n= new\nSplFileObject\n(\n\"sample.php\"\n);\nwhile (!\n$file\n->\neof\n()) {\n    echo\n$file\n->\nfgetss\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::flock() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"/tmp/lock.txt\"\n,\n\"w\"\n);\nif (\n$file\n->\nflock\n(\nLOCK_EX\n)) {\n// do an exclusive lock\n\n$file\n->\nftruncate\n(\n0\n);\n// truncate file\n\n$file\n->\nfwrite\n(\n\"Write something here\\n\"\n);\n\n$file\n->\nflock\n(\nLOCK_UN\n);\n// release the lock\n} else {\n    echo\n\"Couldn't get the lock!\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fpassthru() example",
    "output": "<?php\n// Open the file in binary mode\n$file\n= new\nSplFileObject\n(\n\"./img/ok.png\"\n,\n\"rb\"\n);\n// Send the right headers\nheader\n(\n\"Content-Type: image/png\"\n);\nheader\n(\n\"Content-Length: \"\n.\n$file\n->\ngetSize\n());\n// Dump the picture and end script\n$file\n->\nfpassthru\n();\nexit;\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fputcsv() example",
    "output": "<?php\n$list\n= array (\n    array(\n'aaa'\n,\n'bbb'\n,\n'ccc'\n,\n'dddd'\n),\n    array(\n'123'\n,\n'456'\n,\n'789'\n),\n    array(\n'\"aaa\"'\n,\n'\"bbb\"'\n)\n);\n$file\n= new\nSplFileObject\n(\n'file.csv'\n,\n'w'\n);\nforeach (\n$list\nas\n$fields\n) {\n\n$file\n->\nfputcsv\n(\n$fields\n);\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fread() example",
    "output": "<?php\n// Get contents of a file into a string\n$filename\n=\n\"/usr/local/something.txt\"\n;\n$file\n= new\nSplFileObject\n(\n$filename\n,\n\"r\"\n);\n$contents\n=\n$file\n->\nfread\n(\n$file\n->\ngetSize\n());\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fscanf() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"misc.txt\"\n);\nwhile (\n$userinfo\n=\n$file\n->\nfscanf\n(\n\"%s %s %s\"\n)) {\n    list (\n$name\n,\n$profession\n,\n$countrycode\n) =\n$userinfo\n;\n\n// Do something with $name $profession $countrycode\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fseek() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"somefile.txt\"\n);\n// Read first line\n$data\n=\n$file\n->\nfgets\n();\n// Move back to the beginning of the file\n// Same as $file->rewind();\n$file\n->\nfseek\n(\n0\n);\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fstat() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"/etc/passwd\"\n);\n$stat\n=\n$file\n->\nfstat\n();\n// Print only the associative part\nprint_r\n(\narray_slice\n(\n$stat\n,\n13\n));\n?>"
  },
  {
    "input": "Example #1 SplFileObject::ftell() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"/etc/passwd\"\n);\n// Read first line\n$data\n=\n$file\n->\nfgets\n();\n// Where are we?\necho\n$file\n->\nftell\n();\n?>"
  },
  {
    "input": "Example #1 SplFileObject::ftruncate() example",
    "output": "<?php\n// Create file containing \"Hello World!\"\n$file\n= new\nSplFileObject\n(\n\"/tmp/ftruncate\"\n,\n\"w+\"\n);\n$file\n->\nfwrite\n(\n\"Hello World!\"\n);\n// Truncate to 5 bytes\n$file\n->\nftruncate\n(\n5\n);\n// Rewind and read data\n$file\n->\nrewind\n();\necho\n$file\n->\nfgets\n();\n?>"
  },
  {
    "input": "Example #1 SplFileObject::fwrite() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"fwrite.txt\"\n,\n\"w\"\n);\n$written\n=\n$file\n->\nfwrite\n(\n\"12345\"\n);\necho\n\"Wrote\n$written\n bytes to file\"\n;\n?>"
  },
  {
    "input": "Example #1 SplFileObject::getCsvControl() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"data.txt\"\n);\nprint_r\n(\n$file\n->\ngetCsvControl\n());\n?>"
  },
  {
    "input": "Example #1 SplFileObject::getFlags() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n__FILE__\n,\n\"r\"\n);\nif (\n$file\n->\ngetFlags\n() &\nSplFileObject\n::\nSKIP_EMPTY\n) {\n    echo\n\"Skipping empty lines\\n\"\n;\n} else {\n    echo\n\"Not skipping empty lines\\n\"\n;\n}\n$file\n->\nsetFlags\n(\nSplFileObject\n::\nSKIP_EMPTY\n);\nif (\n$file\n->\ngetFlags\n() &\nSplFileObject\n::\nSKIP_EMPTY\n) {\n    echo\n\"Skipping empty lines\\n\"\n;\n} else {\n    echo\n\"Not skipping empty lines\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::getMaxLineLen() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"file.txt\"\n);\nvar_dump\n(\n$file\n->\ngetMaxLineLen\n());\n$file\n->\nsetMaxLineLen\n(\n20\n);\nvar_dump\n(\n$file\n->\ngetMaxLineLen\n());\n?>"
  },
  {
    "input": "Example #1 SplFileObject::key() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"lipsum.txt\"\n);\nforeach (\n$file\nas\n$line\n) {\n    echo\n$file\n->\nkey\n() .\n\". \"\n.\n$line\n;\n}\n?>"
  },
  {
    "input": "Example #2 SplFileObject::key() example with SplFileObject::setMaxLineLen()",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"lipsum.txt\"\n);\n$file\n->\nsetMaxLineLen\n(\n20\n);\nforeach (\n$file\nas\n$line\n) {\n    echo\n$file\n->\nkey\n() .\n\". \"\n.\n$line\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::next() example",
    "output": "<?php\n// Read through file line by line\n$file\n= new\nSplFileObject\n(\n\"misc.txt\"\n);\nwhile (!\n$file\n->\neof\n()) {\n    echo\n$file\n->\ncurrent\n();\n\n$file\n->\nnext\n();\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::rewind() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"misc.txt\"\n);\n// Loop over whole file\nforeach (\n$file\nas\n$line\n) { }\n// Rewind to first line\n$file\n->\nrewind\n();\n// Output first line\necho\n$file\n->\ncurrent\n();\n?>"
  },
  {
    "input": "Example #1 SplFileObject::setCsvControl() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"data.csv\"\n);\n$file\n->\nsetFlags\n(\nSplFileObject\n::\nREAD_CSV\n);\n$file\n->\nsetCsvControl\n(\n'|'\n);\nforeach (\n$file\nas\n$row\n) {\n    list (\n$fruit\n,\n$quantity\n) =\n$row\n;\n\n// Do something with values\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::setFlags() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"data.csv\"\n);\n$file\n->\nsetFlags\n(\nSplFileObject\n::\nREAD_CSV\n);\nforeach (\n$file\nas\n$fields\n) {\n\nvar_dump\n(\n$fields\n);\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::setMaxLineLen() example",
    "output": "<?php\n$file\n= new\nSplFileObject\n(\n\"lipsum.txt\"\n);\n$file\n->\nsetMaxLineLen\n(\n20\n);\nforeach (\n$file\nas\n$line\n) {\n    echo\n$line\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 SplFileObject::valid() example",
    "output": "<?php\n// Loop over a file, line by line\n$file\n= new\nSplFileObject\n(\n\"file.txt\"\n);\nwhile (\n$file\n->\nvalid\n()) {\n    echo\n$file\n->\nfgets\n();\n}\n?>"
  },
  {
    "input": "Example #1 class_implements() example",
    "output": "<?php\ninterface\nfoo\n{ }\nclass\nbar\nimplements\nfoo\n{}\nprint_r\n(\nclass_implements\n(new\nbar\n));\n// you may also specify the parameter as a string\nprint_r\n(\nclass_implements\n(\n'bar'\n));\nspl_autoload_register\n();\n// use autoloading to load the 'not_loaded' class\nprint_r\n(\nclass_implements\n(\n'not_loaded'\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 class_parents() example",
    "output": "<?php\nclass\nfoo\n{ }\nclass\nbar\nextends\nfoo\n{}\nprint_r\n(\nclass_parents\n(new\nbar\n));\n// you may also specify the parameter as a string\nprint_r\n(\nclass_parents\n(\n'bar'\n));\nspl_autoload_register\n();\n// use autoloading to load the 'not_loaded' class\nprint_r\n(\nclass_parents\n(\n'not_loaded'\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 class_uses() example",
    "output": "<?php\ntrait\nfoo\n{ }\nclass\nbar\n{\n  use\nfoo\n;\n}\nprint_r\n(\nclass_uses\n(new\nbar\n));\nprint_r\n(\nclass_uses\n(\n'bar'\n));\nspl_autoload_register\n();\n// use autoloading to load the 'not_loaded' class\nprint_r\n(\nclass_uses\n(\n'not_loaded'\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 iterator_apply() example",
    "output": "<?php\nfunction\nprint_caps\n(\nIterator $iterator\n) {\n    echo\nstrtoupper\n(\n$iterator\n->\ncurrent\n()) .\n\"\\n\"\n;\n    return\nTRUE\n;\n}\n$it\n= new\nArrayIterator\n(array(\n\"Apples\"\n,\n\"Bananas\"\n,\n\"Cherries\"\n));\niterator_apply\n(\n$it\n,\n\"print_caps\"\n, array(\n$it\n));\n?>"
  },
  {
    "input": "Example #1 iterator_count() example",
    "output": "<?php\n$iterator\n= new\nArrayIterator\n(array(\n'recipe'\n=>\n'pancakes'\n,\n'egg'\n,\n'milk'\n,\n'flour'\n));\nvar_dump\n(\niterator_count\n(\n$iterator\n));\n?>"
  },
  {
    "input": "Example #2 iterator_count() modifies position",
    "output": "<?php\n$iterator\n= new\nArrayIterator\n([\n'one'\n,\n'two'\n,\n'three'\n]);\nvar_dump\n(\n$iterator\n->\ncurrent\n());\nvar_dump\n(\niterator_count\n(\n$iterator\n));\nvar_dump\n(\n$iterator\n->\ncurrent\n());\n?>"
  },
  {
    "input": "Example #3 iterator_count() in foreach loops",
    "output": "<?php\n$iterator\n= new\nArrayIterator\n([\n'one'\n,\n'two'\n,\n'three'\n]);\nforeach (\n$iterator\nas\n$key\n=>\n$value\n) {\n    echo\n\"\n$key\n:\n$value\n (\"\n,\niterator_count\n(\n$iterator\n),\n\")\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 iterator_to_array() example",
    "output": "<?php\n$iterator\n= new\nArrayIterator\n(array(\n'recipe'\n=>\n'pancakes'\n,\n'egg'\n,\n'milk'\n,\n'flour'\n));\nvar_dump\n(\niterator_to_array\n(\n$iterator\n,\ntrue\n));\nvar_dump\n(\niterator_to_array\n(\n$iterator\n,\nfalse\n));\n?>"
  },
  {
    "input": "Example #1 spl_autoload_extensions() example",
    "output": "<?php\nspl_autoload_extensions\n(\n\".php,.inc\"\n);\n?>"
  },
  {
    "input": "Example #1 spl_autoload_register() as a replacement for an __autoload() function",
    "output": "<?php\n// function __autoload($class) {\n//     include 'classes/' . $class . '.class.php';\n// }\nfunction\nmy_autoloader\n(\n$class\n) {\n    include\n'classes/'\n.\n$class\n.\n'.class.php'\n;\n}\nspl_autoload_register\n(\n'my_autoloader'\n);\n// Or, using an anonymous function\nspl_autoload_register\n(function (\n$class\n) {\n    include\n'classes/'\n.\n$class\n.\n'.class.php'\n;\n});\n?>"
  },
  {
    "input": "Example #2 spl_autoload_register() example where the class is not loaded",
    "output": "<?php\nnamespace\nFoobar\n;\nclass\nFoo\n{\n    static public function\ntest\n(\n$class\n) {\n        print\n'[['\n.\n$class\n.\n']]'\n;\n    }\n}\nspl_autoload_register\n(\n__NAMESPACE__\n.\n'\\Foo::test'\n);\nnew\nInexistentClass\n;\n?>"
  },
  {
    "input": "Example #3 The identifier will be provided without the leading backslash",
    "output": "<?php\nspl_autoload_register\n(static function (\n$class\n) {\n\nvar_dump\n(\n$class\n);\n});\nclass_exists\n(\n'RelativeName'\n);\nclass_exists\n(\n'RelativeName\\\\WithNamespace'\n);\nclass_exists\n(\n'\\\\AbsoluteName'\n);\nclass_exists\n(\n'\\\\AbsoluteName\\\\WithNamespace'\n);\n?>"
  },
  {
    "input": "Example #1 spl_classes() example",
    "output": "<?php\nprint_r\n(\nspl_classes\n());\n?>"
  },
  {
    "input": "Example #1 A spl_object_hash() example",
    "output": "<?php\n$id\n=\nspl_object_hash\n(\n$object\n);\n$storage\n[\n$id\n] =\n$object\n;\n?>"
  },
  {
    "input": "Example #1 A spl_object_id() example",
    "output": "<?php\n$id\n=\nspl_object_id\n(\n$object\n);\n$storage\n[\n$id\n] =\n$object\n;\n?>"
  },
  {
    "input": "Example #1 Using file_get_contents()\n    to retrieve data from multiple sources",
    "output": "<?php\n/* Read local file from /home/bar */\n$localfile\n=\nfile_get_contents\n(\n\"/home/bar/foo.txt\"\n);\n/* Identical to above, explicitly naming FILE scheme */\n$localfile\n=\nfile_get_contents\n(\n\"file:///home/bar/foo.txt\"\n);\n/* Read remote file from www.example.com using HTTP */\n$httpfile\n=\nfile_get_contents\n(\n\"http://www.example.com/foo.txt\"\n);\n/* Read remote file from www.example.com using HTTPS */\n$httpsfile\n=\nfile_get_contents\n(\n\"https://www.example.com/foo.txt\"\n);\n/* Read remote file from ftp.example.com using FTP */\n$ftpfile\n=\nfile_get_contents\n(\n\"ftp://user:pass@ftp.example.com/foo.txt\"\n);\n/* Read remote file from ftp.example.com using FTPS */\n$ftpsfile\n=\nfile_get_contents\n(\n\"ftps://user:pass@ftp.example.com/foo.txt\"\n);\n?>"
  },
  {
    "input": "Example #2 Making a POST request to an https server",
    "output": "<?php\n/* Send POST request to https://secure.example.com/form_action.php\n* Include form elements named \"foo\" and \"bar\" with dummy values\n*/\n$sock\n=\nfsockopen\n(\n\"ssl://secure.example.com\"\n,\n443\n,\n$errno\n,\n$errstr\n,\n30\n);\nif (!\n$sock\n) die(\n\"\n$errstr\n (\n$errno\n)\\n\"\n);\n$data\n=\n\"foo=\"\n.\nurlencode\n(\n\"Value for Foo\"\n) .\n\"&bar=\"\n.\nurlencode\n(\n\"Value for Bar\"\n);\nfwrite\n(\n$sock\n,\n\"POST /form_action.php HTTP/1.0\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n\"Host: secure.example.com\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n\"Content-type: application/x-www-form-urlencoded\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n\"Content-length: \"\n.\nstrlen\n(\n$data\n) .\n\"\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n\"Accept: */*\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n\"\\r\\n\"\n);\nfwrite\n(\n$sock\n,\n$data\n);\n$headers\n=\n\"\"\n;\nwhile (\n$str\n=\ntrim\n(\nfgets\n(\n$sock\n,\n4096\n)))\n$headers\n.=\n\"\n$str\n\\n\"\n;\necho\n\"\\n\"\n;\n$body\n=\n\"\"\n;\nwhile (!\nfeof\n(\n$sock\n))\n$body\n.=\nfgets\n(\n$sock\n,\n4096\n);\nfclose\n(\n$sock\n);\n?>"
  },
  {
    "input": "Example #3 Writing data to a compressed file",
    "output": "<?php\n/* Create a compressed file containing an arbitrary string\n* File can be read back using compress.zlib stream or just\n* decompressed from the command line using 'gzip -d foo-bar.txt.gz'\n*/\n$fp\n=\nfopen\n(\n\"compress.zlib://foo-bar.txt.gz\"\n,\n\"wb\"\n);\nif (!\n$fp\n) die(\n\"Unable to create file.\"\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 A Stream for reading/writing global variables",
    "output": "<?php\nclass\nVariableStream\n{\n    var\n$position\n;\n    var\n$varname\n;\n    function\nstream_open\n(\n$path\n,\n$mode\n,\n$options\n, &\n$opened_path\n)\n    {\n\n$url\n=\nparse_url\n(\n$path\n);\n\n$this\n->\nvarname\n=\n$url\n[\n\"host\"\n];\n\n$this\n->\nposition\n=\n0\n;\n        return\ntrue\n;\n    }\n    function\nstream_read\n(\n$count\n)\n    {\n\n$ret\n=\nsubstr\n(\n$GLOBALS\n[\n$this\n->\nvarname\n],\n$this\n->\nposition\n,\n$count\n);\n\n$this\n->\nposition\n+=\nstrlen\n(\n$ret\n);\n        return\n$ret\n;\n    }\n    function\nstream_write\n(\n$data\n)\n    {\n\n$left\n=\nsubstr\n(\n$GLOBALS\n[\n$this\n->\nvarname\n],\n0\n,\n$this\n->\nposition\n);\n\n$right\n=\nsubstr\n(\n$GLOBALS\n[\n$this\n->\nvarname\n],\n$this\n->\nposition\n+\nstrlen\n(\n$data\n));\n\n$GLOBALS\n[\n$this\n->\nvarname\n] =\n$left\n.\n$data\n.\n$right\n;\n\n$this\n->\nposition\n+=\nstrlen\n(\n$data\n);\n        return\nstrlen\n(\n$data\n);\n    }\n    function\nstream_tell\n()\n    {\n        return\n$this\n->\nposition\n;\n    }\n    function\nstream_eof\n()\n    {\n        return\n$this\n->\nposition\n>=\nstrlen\n(\n$GLOBALS\n[\n$this\n->\nvarname\n]);\n    }\n    function\nstream_seek\n(\n$offset\n,\n$whence\n)\n    {\n        switch (\n$whence\n) {\n            case\nSEEK_SET\n:\n                if (\n$offset\n<\nstrlen\n(\n$GLOBALS\n[\n$this\n->\nvarname\n]) &&\n$offset\n>=\n0\n) {\n\n$this\n->\nposition\n=\n$offset\n;\n                     return\ntrue\n;\n                } else {\n                     return\nfalse\n;\n                }\n                break;\n            case\nSEEK_CUR\n:\n                if (\n$offset\n>=\n0\n) {\n\n$this\n->\nposition\n+=\n$offset\n;\n                     return\ntrue\n;\n                } else {\n                     return\nfalse\n;\n                }\n                break;\n            case\nSEEK_END\n:\n                if (\nstrlen\n(\n$GLOBALS\n[\n$this\n->\nvarname\n]) +\n$offset\n>=\n0\n) {\n\n$this\n->\nposition\n=\nstrlen\n(\n$GLOBALS\n[\n$this\n->\nvarname\n]) +\n$offset\n;\n                     return\ntrue\n;\n                } else {\n                     return\nfalse\n;\n                }\n                break;\n            default:\n                return\nfalse\n;\n        }\n    }\n    function\nstream_metadata\n(\n$path\n,\n$option\n,\n$var\n)\n    {\n        if(\n$option\n==\nSTREAM_META_TOUCH\n) {\n\n$url\n=\nparse_url\n(\n$path\n);\n\n$varname\n=\n$url\n[\n\"host\"\n];\n            if(!isset(\n$GLOBALS\n[\n$varname\n])) {\n\n$GLOBALS\n[\n$varname\n] =\n''\n;\n            }\n            return\ntrue\n;\n        }\n        return\nfalse\n;\n    }\n}\nstream_wrapper_register\n(\n\"var\"\n,\n\"VariableStream\"\n)\n    or die(\n\"Failed to register protocol\"\n);\n$myvar\n=\n\"\"\n;\n$fp\n=\nfopen\n(\n\"var://myvar\"\n,\n\"r+\"\n);\nfwrite\n(\n$fp\n,\n\"line1\\n\"\n);\nfwrite\n(\n$fp\n,\n\"line2\\n\"\n);\nfwrite\n(\n$fp\n,\n\"line3\\n\"\n);\nrewind\n(\n$fp\n);\nwhile (!\nfeof\n(\n$fp\n)) {\n    echo\nfgets\n(\n$fp\n);\n}\nfclose\n(\n$fp\n);\nvar_dump\n(\n$myvar\n);\n?>"
  },
  {
    "input": "Example #1 Listing files from tar archives",
    "output": "<?php\nclass\nstreamWrapper\n{\n    protected\n$fp\n;\n    public function\ndir_opendir\n(\n$path\n,\n$options\n) {\n\n$url\n=\nparse_url\n(\n$path\n);\n\n$path\n=\n$url\n[\n\"host\"\n] .\n$url\n[\n\"path\"\n];\n        if (!\nis_readable\n(\n$path\n)) {\n\ntrigger_error\n(\n\"\n$path\n isn't readable for me\"\n,\nE_USER_NOTICE\n);\n            return\nfalse\n;\n        }\n        if (!\nis_file\n(\n$path\n)) {\n\ntrigger_error\n(\n\"\n$path\n isn't a file\"\n,\nE_USER_NOTICE\n);\n            return\nfalse\n;\n        }\n\n$this\n->\nfp\n=\nfopen\n(\n$path\n,\n\"rb\"\n);\n        return\ntrue\n;\n    }\n    public function\ndir_readdir\n() {\n\n// Extract the header for this entry\n\n$header\n=\nfread\n(\n$this\n->\nfp\n,\n512\n);\n\n$data\n=\nunpack\n(\n\"a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/a1filetype/a100link/a100linkedfile\"\n,\n$header\n);\n\n// Trim the filename and filesize\n\n$filename\n=\ntrim\n(\n$data\n[\n\"filename\"\n]);\n\n// No filename? We are the end of the archive\n\nif (!\n$filename\n) {\n            return\nfalse\n;\n        }\n\n$octal_bytes\n=\ntrim\n(\n$data\n[\n\"size\"\n]);\n\n// Filesize is defined in octects\n\n$bytes\n=\noctdec\n(\n$octal_bytes\n);\n\n// tar rounds up filesizes up to multiple of 512 bytes (zero filled)\n\n$rest\n=\n$bytes\n%\n512\n;\n        if (\n$rest\n>\n0\n) {\n\n$bytes\n+=\n512\n-\n$rest\n;\n        }\n\n// Seek over the file\n\nfseek\n(\n$this\n->\nfp\n,\n$bytes\n,\nSEEK_CUR\n);\n        return\n$filename\n;\n    }\n    public function\ndir_closedir\n() {\n        return\nfclose\n(\n$this\n->\nfp\n);\n    }\n    public function\ndir_rewinddir\n() {\n        return\nfseek\n(\n$this\n->\nfp\n,\n0\n,\nSEEK_SET\n);\n    }\n}\nstream_wrapper_register\n(\n\"tar\"\n,\n\"streamWrapper\"\n);\n$handle\n=\nopendir\n(\n\"tar://example.tar\"\n);\nwhile (\nfalse\n!== (\n$file\n=\nreaddir\n(\n$handle\n))) {\n\nvar_dump\n(\n$file\n);\n}\necho\n\"Rewinding..\\n\"\n;\nrewind\n(\n$handle\n);\nvar_dump\n(\nreaddir\n(\n$handle\n));\nclosedir\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 stream_bucket_prepend() examples",
    "output": "<?php\nclass\nfoo\nextends\nphp_user_filter\n{\n  protected\n$calls\n=\n0\n;\n  public function\nfilter\n(\n$in\n,\n$out\n, &\n$consumed\n,\n$closing\n) {\n    while (\n$bucket\n=\nstream_bucket_make_writeable\n(\n$in\n)) {\n\n$consumed\n+=\n$bucket\n->\ndatalen\n;\n      if (\n$this\n->\ncalls\n++ ==\n2\n) {\n\n// This bucket will appear again before any other bucket.\n\nstream_bucket_prepend\n(\n$in\n,\n$bucket\n);\n      }\n    }\n    return\nPSFS_FEED_ME\n;\n  }\n}\nstream_filter_register\n(\n'test'\n,\n'foo'\n);\nprint\nfile_get_contents\n(\n'php://filter/read=test/resource=foo'\n);\n?>"
  },
  {
    "input": "Example #1 Using stream_context_create()",
    "output": "<?php\n$opts\n= [\n\n'http'\n=> [\n\n'method'\n=>\n\"GET\"\n,\n\n// Use newline \\n to separate multiple headers\n\n'header'\n=>\n\"Accept-language: en\\nCookie: foo=bar\"\n,\n  ]\n];\n$context\n=\nstream_context_create\n(\n$opts\n);\n/* Sends an http request to www.example.com\n   with additional headers shown above */\n$fp\n=\nfopen\n(\n'http://www.example.com'\n,\n'r'\n,\nfalse\n,\n$context\n);\nfpassthru\n(\n$fp\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 Using stream_context_get_default()",
    "output": "<?php\n$default_opts\n= array(\n\n'http'\n=>array(\n\n'method'\n=>\n\"GET\"\n,\n\n'header'\n=>\n\"Accept-language: en\\r\\n\"\n.\n\n\"Cookie: foo=bar\"\n,\n\n'proxy'\n=>\n\"tcp://10.54.1.39:8000\"\n\n)\n);\n$alternate_opts\n= array(\n\n'http'\n=>array(\n\n'method'\n=>\n\"POST\"\n,\n\n'header'\n=>\n\"Content-type: application/x-www-form-urlencoded\\r\\n\"\n.\n\n\"Content-length: \"\n.\nstrlen\n(\n\"baz=bomb\"\n),\n\n'content'\n=>\n\"baz=bomb\"\n\n)\n);\n$default\n=\nstream_context_get_default\n(\n$default_opts\n);\n$alternate\n=\nstream_context_create\n(\n$alternate_opts\n);\n/* Sends a regular GET request to proxy server at 10.54.1.39\n * For www.example.com using context options specified in $default_opts\n */\nreadfile\n(\n'http://www.example.com'\n);\n/* Sends a POST request directly to www.example.com\n * Using context options specified in $alternate_opts\n */\nreadfile\n(\n'http://www.example.com'\n,\nfalse\n,\n$alternate\n);\n?>"
  },
  {
    "input": "Example #1 stream_context_get_options() example",
    "output": "<?php\n$params\n= array(\n\"method\"\n=>\n\"POST\"\n);\nstream_context_set_default\n(array(\n\"http\"\n=>\n$params\n));\nvar_dump\n(\nstream_context_get_options\n(\nstream_context_get_default\n()));\n?>"
  },
  {
    "input": "Example #1 stream_context_set_default() example",
    "output": "<?php\n$default_opts\n= array(\n\n'http'\n=>array(\n\n'method'\n=>\n\"GET\"\n,\n\n'header'\n=>\n\"Accept-language: en\\r\\n\"\n.\n\n\"Cookie: foo=bar\"\n,\n\n'proxy'\n=>\n\"tcp://10.54.1.39:8000\"\n\n)\n);\n$default\n=\nstream_context_set_default\n(\n$default_opts\n);\n/* Sends a regular GET request to proxy server at 10.54.1.39\n * For www.example.com using context options specified in $default_opts\n */\nreadfile\n(\n'http://www.example.com'\n);\n?>"
  },
  {
    "input": "Example #1 stream_context_set_options() example",
    "output": "<?php\n$context\n=\nstream_context_create\n();\n$options\n= [\n\n'http'\n=> [\n\n'protocol_version'\n=>\n1.1\n,\n\n'user_agent'\n=>\n'PHPT Agent'\n,\n    ],\n];\nstream_context_set_options\n(\n$context\n,\n$options\n);\nvar_dump\n(\nstream_context_get_options\n(\n$context\n));\n?>"
  },
  {
    "input": "Example #1 A stream_copy_to_stream() example",
    "output": "<?php\n$src\n=\nfopen\n(\n'http://www.example.com'\n,\n'r'\n);\n$dest1\n=\nfopen\n(\n'first1k.txt'\n,\n'w'\n);\n$dest2\n=\nfopen\n(\n'remainder.txt'\n,\n'w'\n);\necho\nstream_copy_to_stream\n(\n$src\n,\n$dest1\n,\n1024\n) .\n\" bytes copied to first1k.txt\\n\"\n;\necho\nstream_copy_to_stream\n(\n$src\n,\n$dest2\n) .\n\" bytes copied to remainder.txt\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Controlling where filters are applied",
    "output": "<?php\n/* Open a test file for reading and writing */\n$fp\n=\nfopen\n(\n'test.txt'\n,\n'w+'\n);\n/* Apply the ROT13 filter to the\n * write filter chain, but not the\n * read filter chain */\nstream_filter_append\n(\n$fp\n,\n\"string.rot13\"\n,\nSTREAM_FILTER_WRITE\n);\n/* Write a simple string to the file\n * it will be ROT13 transformed on the\n * way out */\nfwrite\n(\n$fp\n,\n\"This is a test\\n\"\n);\n/* Back up to the beginning of the file */\nrewind\n(\n$fp\n);\n/* Read the contents of the file back out.\n * Had the filter been applied to the\n * read filter chain as well, we would see\n * the text ROT13ed back to its original state */\nfpassthru\n(\n$fp\n);\nfclose\n(\n$fp\n);\n/* Expected Output\n   ---------------\nGuvf vf n grfg\n */\n?>"
  },
  {
    "input": "Example #2 Registering a generic filter class to match multiple filter names.",
    "output": "<?php\n/* Define our filter class */\nclass\nstring_filter\nextends\nphp_user_filter\n{\n  var\n$mode\n;\n  function\nfilter\n(\n$in\n,\n$out\n, &\n$consumed\n,\n$closing\n)\n  {\n    while (\n$bucket\n=\nstream_bucket_make_writeable\n(\n$in\n)) {\n      if (\n$this\n->\nmode\n==\n1\n) {\n\n$bucket\n->\ndata\n=\nstrtoupper\n(\n$bucket\n->\ndata\n);\n      } elseif (\n$this\n->\nmode\n==\n0\n) {\n\n$bucket\n->\ndata\n=\nstrtolower\n(\n$bucket\n->\ndata\n);\n      }\n\n$consumed\n+=\n$bucket\n->\ndatalen\n;\n\nstream_bucket_append\n(\n$out\n,\n$bucket\n);\n    }\n    return\nPSFS_PASS_ON\n;\n  }\n  function\nonCreate\n()\n  {\n    if (\n$this\n->\nfiltername\n==\n'str.toupper'\n) {\n\n$this\n->\nmode\n=\n1\n;\n    } elseif (\n$this\n->\nfiltername\n==\n'str.tolower'\n) {\n\n$this\n->\nmode\n=\n0\n;\n    } else {\n\n/* Some other str.* filter was asked for,\n         report failure so that PHP will keep looking */\n\nreturn\nfalse\n;\n    }\n    return\ntrue\n;\n  }\n}\n/* Register our filter with PHP */\nstream_filter_register\n(\n\"str.*\"\n,\n\"string_filter\"\n)\n    or die(\n\"Failed to register filter\"\n);\n$fp\n=\nfopen\n(\n\"foo-bar.txt\"\n,\n\"w\"\n);\n/* Attach the registered filter to the stream just opened\n   We could alternately bind to str.tolower here */\nstream_filter_append\n(\n$fp\n,\n\"str.toupper\"\n);\nfwrite\n(\n$fp\n,\n\"Line1\\n\"\n);\nfwrite\n(\n$fp\n,\n\"Word - 2\\n\"\n);\nfwrite\n(\n$fp\n,\n\"Easy As 123\\n\"\n);\nfclose\n(\n$fp\n);\n/* Read the contents back out\n */\nreadfile\n(\n\"foo-bar.txt\"\n);\n?>"
  },
  {
    "input": "Example #1 Dynamically refiltering a stream",
    "output": "<?php\n/* Open a test file for reading and writing */\n$fp\n=\nfopen\n(\n\"test.txt\"\n,\n\"rw\"\n);\n$rot13_filter\n=\nstream_filter_append\n(\n$fp\n,\n\"string.rot13\"\n,\nSTREAM_FILTER_WRITE\n);\nfwrite\n(\n$fp\n,\n\"This is \"\n);\nstream_filter_remove\n(\n$rot13_filter\n);\nfwrite\n(\n$fp\n,\n\"a test\\n\"\n);\nrewind\n(\n$fp\n);\nfpassthru\n(\n$fp\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 stream_get_contents() example",
    "output": "<?php\nif (\n$stream\n=\nfopen\n(\n'http://www.example.com'\n,\n'r'\n)) {\n\n// print all the page starting at the offset 10\n\necho\nstream_get_contents\n(\n$stream\n, -\n1\n,\n10\n);\n\nfclose\n(\n$stream\n);\n}\nif (\n$stream\n=\nfopen\n(\n'http://www.example.net'\n,\n'r'\n)) {\n\n// print the first 5 bytes\n\necho\nstream_get_contents\n(\n$stream\n,\n5\n);\n\nfclose\n(\n$stream\n);\n}\n?>"
  },
  {
    "input": "Example #1 Using stream_get_filters()",
    "output": "<?php\n$streamlist\n=\nstream_get_filters\n();\nprint_r\n(\n$streamlist\n);\n?>"
  },
  {
    "input": "Example #1 stream_get_meta_data() example using fopen() with http",
    "output": "<?php\n$url\n=\n'http://www.example.com/'\n;\nif (!\n$fp\n=\nfopen\n(\n$url\n,\n'r'\n)) {\n\ntrigger_error\n(\n\"Unable to open URL (\n$url\n)\"\n,\nE_USER_ERROR\n);\n}\n$meta\n=\nstream_get_meta_data\n(\n$fp\n);\nvar_dump\n(\n$meta\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #2 stream_get_meta_data() example using stream_socket_client() with https",
    "output": "<?php\n$streamContext\n=\nstream_context_create\n(\n    [\n\n'ssl'\n=> [\n\n'capture_peer_cert'\n=>\ntrue\n,\n\n'capture_peer_cert_chain'\n=>\ntrue\n,\n\n'disable_compression'\n=>\ntrue\n,\n        ],\n    ]\n);\n$client\n=\nstream_socket_client\n(\n\n'ssl://www.example.com:443'\n,\n\n$errorNumber\n,\n\n$errorDescription\n,\n\n40\n,\n\nSTREAM_CLIENT_CONNECT\n,\n\n$streamContext\n);\n$meta\n=\nstream_get_meta_data\n(\n$client\n);\nvar_dump\n(\n$meta\n);\n?>"
  },
  {
    "input": "Example #1 Using stream_get_transports()",
    "output": "<?php\n$xportlist\n=\nstream_get_transports\n();\nprint_r\n(\n$xportlist\n);\n?>"
  },
  {
    "input": "Example #1 stream_get_wrappers() example",
    "output": "<?php\nprint_r\n(\nstream_get_wrappers\n());\n?>"
  },
  {
    "input": "Example #2 Checking for the existence of a stream wrapper",
    "output": "<?php\n// check for the existence of the bzip2 stream wrapper\nif (\nin_array\n(\n'compress.bzip2'\n,\nstream_get_wrappers\n())) {\n    echo\n'compress.bzip2:// support enabled.'\n;\n} else {\n    echo\n'compress.bzip2:// support not enabled.'\n;\n}\n?>"
  },
  {
    "input": "Example #1 stream_notification_callback() example",
    "output": "<?php\nfunction\nstream_notification_callback\n(\n$notification_code\n,\n$severity\n,\n$message\n,\n$message_code\n,\n$bytes_transferred\n,\n$bytes_max\n) {\n    switch(\n$notification_code\n) {\n        case\nSTREAM_NOTIFY_RESOLVE\n:\n        case\nSTREAM_NOTIFY_AUTH_REQUIRED\n:\n        case\nSTREAM_NOTIFY_COMPLETED\n:\n        case\nSTREAM_NOTIFY_FAILURE\n:\n        case\nSTREAM_NOTIFY_AUTH_RESULT\n:\n\nvar_dump\n(\n$notification_code\n,\n$severity\n,\n$message\n,\n$message_code\n,\n$bytes_transferred\n,\n$bytes_max\n);\n\n/* Ignore */\n\nbreak;\n        case\nSTREAM_NOTIFY_REDIRECTED\n:\n            echo\n\"Being redirected to: \"\n,\n$message\n;\n            break;\n        case\nSTREAM_NOTIFY_CONNECT\n:\n            echo\n\"Connected...\"\n;\n            break;\n        case\nSTREAM_NOTIFY_FILE_SIZE_IS\n:\n            echo\n\"Got the filesize: \"\n,\n$bytes_max\n;\n            break;\n        case\nSTREAM_NOTIFY_MIME_TYPE_IS\n:\n            echo\n\"Found the mime-type: \"\n,\n$message\n;\n            break;\n        case\nSTREAM_NOTIFY_PROGRESS\n:\n            echo\n\"Made some progress, downloaded \"\n,\n$bytes_transferred\n,\n\" so far\"\n;\n            break;\n    }\n    echo\n\"\\n\"\n;\n}\n$ctx\n=\nstream_context_create\n();\nstream_context_set_params\n(\n$ctx\n, array(\n\"notification\"\n=>\n\"stream_notification_callback\"\n));\nfile_get_contents\n(\n\"http://php.net/contact\"\n,\nfalse\n,\n$ctx\n);\n?>"
  },
  {
    "input": "Example #2 Simple progressbar for commandline download client",
    "output": "<?php\nfunction\nusage\n(\n$argv\n) {\n    echo\n\"Usage:\\n\"\n;\n\nprintf\n(\n\"\\tphp %s <http://example.com/file> <localfile>\\n\"\n,\n$argv\n[\n0\n]);\n    exit(\n1\n);\n}\nfunction\nstream_notification_callback\n(\n$notification_code\n,\n$severity\n,\n$message\n,\n$message_code\n,\n$bytes_transferred\n,\n$bytes_max\n) {\n    static\n$filesize\n=\nnull\n;\n    switch(\n$notification_code\n) {\n    case\nSTREAM_NOTIFY_RESOLVE\n:\n    case\nSTREAM_NOTIFY_AUTH_REQUIRED\n:\n    case\nSTREAM_NOTIFY_COMPLETED\n:\n    case\nSTREAM_NOTIFY_FAILURE\n:\n    case\nSTREAM_NOTIFY_AUTH_RESULT\n:\n\n/* Ignore */\n\nbreak;\n    case\nSTREAM_NOTIFY_REDIRECTED\n:\n        echo\n\"Being redirected to: \"\n,\n$message\n,\n\"\\n\"\n;\n        break;\n    case\nSTREAM_NOTIFY_CONNECT\n:\n        echo\n\"Connected...\\n\"\n;\n        break;\n    case\nSTREAM_NOTIFY_FILE_SIZE_IS\n:\n\n$filesize\n=\n$bytes_max\n;\n        echo\n\"Filesize: \"\n,\n$filesize\n,\n\"\\n\"\n;\n        break;\n    case\nSTREAM_NOTIFY_MIME_TYPE_IS\n:\n        echo\n\"Mime-type: \"\n,\n$message\n,\n\"\\n\"\n;\n        break;\n    case\nSTREAM_NOTIFY_PROGRESS\n:\n        if (\n$bytes_transferred\n>\n0\n) {\n            if (!isset(\n$filesize\n)) {\n\nprintf\n(\n\"\\rUnknown filesize.. %2d kb done..\"\n,\n$bytes_transferred\n/\n1024\n);\n            } else {\n\n$length\n= (int) ((\n$bytes_transferred\n/\n$filesize\n)*\n100\n);\n\nprintf\n(\n\"\\r[%-100s] %d%% (%2d/%2d kb)\"\n,\nstr_repeat\n(\n\"=\"\n,\n$length\n).\n\">\"\n,\n$length\n, (\n$bytes_transferred\n/\n1024\n),\n$filesize\n/\n1024\n);\n            }\n        }\n        break;\n    }\n}\nisset(\n$argv\n[\n1\n],\n$argv\n[\n2\n]) or\nusage\n(\n$argv\n);\n$ctx\n=\nstream_context_create\n();\nstream_context_set_params\n(\n$ctx\n, array(\n\"notification\"\n=>\n\"stream_notification_callback\"\n));\n$fp\n=\nfopen\n(\n$argv\n[\n1\n],\n\"r\"\n,\nfalse\n,\n$ctx\n);\nif (\nis_resource\n(\n$fp\n) &&\nfile_put_contents\n(\n$argv\n[\n2\n],\n$fp\n)) {\n    echo\n\"\\nDone!\\n\"\n;\n    exit(\n0\n);\n}\n$err\n=\nerror_get_last\n();\necho\n\"\\nErrrrrorr..\\n\"\n,\n$err\n[\n\"message\"\n],\n\"\\n\"\n;\nexit(\n1\n);\n?>"
  },
  {
    "input": "Example #1 stream_set_timeout() example",
    "output": "<?php\n$fp\n=\nfsockopen\n(\n\"www.example.com\"\n,\n80\n);\nif (!\n$fp\n) {\n    echo\n\"Unable to open\\n\"\n;\n} else {\n\nfwrite\n(\n$fp\n,\n\"GET / HTTP/1.0\\r\\n\\r\\n\"\n);\n\nstream_set_timeout\n(\n$fp\n,\n2\n);\n\n$res\n=\nfread\n(\n$fp\n,\n2000\n);\n\n$info\n=\nstream_get_meta_data\n(\n$fp\n);\n\nfclose\n(\n$fp\n);\n    if (\n$info\n[\n'timed_out'\n]) {\n        echo\n'Connection timed out!'\n;\n    } else {\n        echo\n$res\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 stream_socket_client() example",
    "output": "<?php\n$fp\n=\nstream_socket_client\n(\n\"tcp://www.example.com:80\"\n,\n$errno\n,\n$errstr\n,\n30\n);\nif (!\n$fp\n) {\n    echo\n\"\n$errstr\n (\n$errno\n)<br />\\n\"\n;\n} else {\n\nfwrite\n(\n$fp\n,\n\"GET / HTTP/1.0\\r\\nHost: www.example.com\\r\\nAccept: */*\\r\\n\\r\\n\"\n);\n    while (!\nfeof\n(\n$fp\n)) {\n        echo\nfgets\n(\n$fp\n,\n1024\n);\n    }\n\nfclose\n(\n$fp\n);\n}\n?>"
  },
  {
    "input": "Example #1 stream_socket_enable_crypto() example",
    "output": "<?php\n$fp\n=\nstream_socket_client\n(\n\"tcp://myproto.example.com:31337\"\n,\n$errno\n,\n$errstr\n,\n30\n);\nif (!\n$fp\n) {\n    die(\n\"Unable to connect:\n$errstr\n (\n$errno\n)\"\n);\n}\n/* Turn on encryption for login phase */\nstream_socket_enable_crypto\n(\n$fp\n,\ntrue\n,\nSTREAM_CRYPTO_METHOD_SSLv23_CLIENT\n);\nfwrite\n(\n$fp\n,\n\"USER god\\r\\n\"\n);\nfwrite\n(\n$fp\n,\n\"PASS secret\\r\\n\"\n);\n/* Turn off encryption for the rest */\nstream_socket_enable_crypto\n(\n$fp\n,\nfalse\n);\nwhile (\n$motd\n=\nfgets\n(\n$fp\n)) {\n    echo\n$motd\n;\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 stream_socket_recvfrom() example",
    "output": "<?php\n/* Open a server socket to port 1234 on localhost */\n$server\n=\nstream_socket_server\n(\n'tcp://127.0.0.1:1234'\n);\n/* Accept a connection */\n$socket\n=\nstream_socket_accept\n(\n$server\n);\n/* Grab a packet (1500 is a typical MTU size) of OOB data */\necho\n\"Received Out-Of-Band: '\"\n.\nstream_socket_recvfrom\n(\n$socket\n,\n1500\n,\nSTREAM_OOB\n) .\n\"'\\n\"\n;\n/* Take a peek at the normal in-band data, but don't consume it. */\necho\n\"Data: '\"\n.\nstream_socket_recvfrom\n(\n$socket\n,\n1500\n,\nSTREAM_PEEK\n) .\n\"'\\n\"\n;\n/* Get the exact same packet again, but remove it from the buffer this time. */\necho\n\"Data: '\"\n.\nstream_socket_recvfrom\n(\n$socket\n,\n1500\n) .\n\"'\\n\"\n;\n/* Close it up */\nfclose\n(\n$socket\n);\nfclose\n(\n$server\n);\n?>"
  },
  {
    "input": "Example #1 stream_socket_sendto() Example",
    "output": "<?php\n/* Open a socket to port 1234 on localhost */\n$socket\n=\nstream_socket_client\n(\n'tcp://127.0.0.1:1234'\n);\n/* Send ordinary data via ordinary channels. */\nfwrite\n(\n$socket\n,\n\"Normal data transmit.\"\n);\n/* Send more data out of band. */\nstream_socket_sendto\n(\n$socket\n,\n\"Out of Band data.\"\n,\nSTREAM_OOB\n);\n/* Close it up */\nfclose\n(\n$socket\n);\n?>"
  },
  {
    "input": "Example #1 Using TCP server sockets",
    "output": "<?php\n$socket\n=\nstream_socket_server\n(\n\"tcp://0.0.0.0:8000\"\n,\n$errno\n,\n$errstr\n);\nif (!\n$socket\n) {\n  echo\n\"\n$errstr\n (\n$errno\n)<br />\\n\"\n;\n} else {\n  while (\n$conn\n=\nstream_socket_accept\n(\n$socket\n)) {\n\nfwrite\n(\n$conn\n,\n'The local time is '\n.\ndate\n(\n'n/j/Y g:i a'\n) .\n\"\\n\"\n);\n\nfclose\n(\n$conn\n);\n  }\n\nfclose\n(\n$socket\n);\n}\n?>"
  },
  {
    "input": "Example #2 Using UDP server sockets",
    "output": "<?php\n$socket\n=\nstream_socket_server\n(\n\"udp://127.0.0.1:1113\"\n,\n$errno\n,\n$errstr\n,\nSTREAM_SERVER_BIND\n);\nif (!\n$socket\n) {\n    die(\n\"\n$errstr\n (\n$errno\n)\"\n);\n}\ndo {\n\n$pkt\n=\nstream_socket_recvfrom\n(\n$socket\n,\n1\n,\n0\n,\n$peer\n);\n    echo\n\"\n$peer\n\\n\"\n;\n\nstream_socket_sendto\n(\n$socket\n,\ndate\n(\n\"D M j H:i:s Y\\r\\n\"\n),\n0\n,\n$peer\n);\n} while (\n$pkt\n!==\nfalse\n);\n?>"
  },
  {
    "input": "Example #1 A stream_socket_shutdown() example",
    "output": "<?php\n$server\n=\nstream_socket_server\n(\n'tcp://127.0.0.1:1337'\n);\n$client\n=\nstream_socket_client\n(\n'tcp://127.0.0.1:1337'\n);\nvar_dump\n(\nfputs\n(\n$client\n,\n\"hello\"\n));\nstream_socket_shutdown\n(\n$client\n,\nSTREAM_SHUT_WR\n);\nvar_dump\n(\nfputs\n(\n$client\n,\n\"hello\"\n));\n// doesn't work now\n?>"
  },
  {
    "input": "Example #1 How to register a stream wrapper",
    "output": "<?php\n$existed\n=\nin_array\n(\n\"var\"\n,\nstream_get_wrappers\n());\nif (\n$existed\n) {\n\nstream_wrapper_unregister\n(\n\"var\"\n);\n}\nstream_wrapper_register\n(\n\"var\"\n,\n\"VariableStream\"\n);\n$myvar\n=\n\"\"\n;\n$fp\n=\nfopen\n(\n\"var://myvar\"\n,\n\"r+\"\n);\nfwrite\n(\n$fp\n,\n\"line1\\n\"\n);\nfwrite\n(\n$fp\n,\n\"line2\\n\"\n);\nfwrite\n(\n$fp\n,\n\"line3\\n\"\n);\nrewind\n(\n$fp\n);\nwhile (!\nfeof\n(\n$fp\n)) {\n    echo\nfgets\n(\n$fp\n);\n}\nfclose\n(\n$fp\n);\nvar_dump\n(\n$myvar\n);\nif (\n$existed\n) {\n\nstream_wrapper_restore\n(\n\"var\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 Basic Tidy usage",
    "output": "<?php\nob_start\n();\n?>\n<html>a html document</html>\n<?php\n$html\n=\nob_get_clean\n();\n// Specify configuration\n$config\n= array(\n\n'indent'\n=>\ntrue\n,\n\n'output-xhtml'\n=>\ntrue\n,\n\n'wrap'\n=>\n200\n);\n// Tidy\n$tidy\n= new\ntidy\n;\n$tidy\n->\nparseString\n(\n$html\n,\n$config\n,\n'utf8'\n);\n$tidy\n->\ncleanRepair\n();\n// Output\necho\n$tidy\n;\n?>"
  },
  {
    "input": "Example #1 tidy::getBody() example",
    "output": "<?php\n$html\n=\n'\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <p>paragraph</p>\n  </body>\n</html>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$body\n=\n$tidy\n->\nBody\n();\necho\n$body\n->\nvalue\n;\n?>"
  },
  {
    "input": "Example #1 tidy::cleanrepair() example",
    "output": "<?php\n$html\n=\n'<p>test</I>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$tidy\n->\ncleanRepair\n();\necho\n$tidy\n;\n?>"
  },
  {
    "input": "Example #1 tidy::__construct() example",
    "output": "<?php\n$html\n= <<< HTML\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head><title>title</title></head>\n<body>\n<p>paragraph <bt />\ntext</p>\n</body></html>\nHTML;\n$tidy\n= new\ntidy\n();\n$tidy\n->\nParseString\n(\n$html\n);\n$tidy\n->\ncleanRepair\n();\nif (\n$tidy\n->\nerrorBuffer\n) {\n    echo\n\"The following errors were detected:\\n\"\n;\n    echo\n$tidy\n->\nerrorBuffer\n;\n}\n?>"
  },
  {
    "input": "Example #1 tidy::diagnose() example",
    "output": "<?php\n$html\n= <<< HTML\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<p>paragraph</p>\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$tidy\n->\ncleanRepair\n();\n// note the difference between the two outputs\necho\n$tidy\n->\nerrorBuffer\n.\n\"\\n\"\n;\n$tidy\n->\ndiagnose\n();\necho\n$tidy\n->\nerrorBuffer\n;\n?>"
  },
  {
    "input": "Example #1 tidy_get_error_buffer() example",
    "output": "<?php\n$html\n=\n'<p>paragraph</p>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\necho\ntidy_get_error_buffer\n(\n$tidy\n);\n/* or in OO: */\necho\n$tidy\n->\nerrorBuffer\n;\n?>"
  },
  {
    "input": "Example #1 tidy::getConfig() example",
    "output": "<?php\n$html\n=\n'<p>test</p>'\n;\n$config\n= array(\n'indent'\n=>\nTRUE\n,\n\n'output-xhtml'\n=>\nTRUE\n,\n\n'wrap'\n=>\n200\n);\n$tidy\n=\ntidy_parse_string\n(\n$html\n,\n$config\n);\nprint_r\n(\n$tidy\n->\ngetConfig\n());\n?>"
  },
  {
    "input": "Example #1 tidy_getopt() example",
    "output": "<?php\n$html\n=\n'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head><title>Title</title></head>\n<body>\n<p><img src=\"img.png\"></p>\n</body></html>'\n;\n$config\n= array(\n'accessibility-check'\n=>\n3\n,\n\n'alt-text'\n=>\n'some text'\n);\n$tidy\n= new\ntidy\n();\n$tidy\n->\nparseString\n(\n$html\n,\n$config\n);\nvar_dump\n(\n$tidy\n->\ngetOpt\n(\n'accessibility-check'\n));\n//integer\nvar_dump\n(\n$tidy\n->\ngetOpt\n(\n'lower-literals'\n));\n//boolean\nvar_dump\n(\n$tidy\n->\ngetOpt\n(\n'alt-text'\n));\n//string\n?>"
  },
  {
    "input": "Example #1 Print all options along with their documentation and default value",
    "output": "<?php\n$tidy\n= new\ntidy\n;\n$config\n=\n$tidy\n->\ngetConfig\n();\nksort\n(\n$config\n);\nforeach (\n$config\nas\n$opt\n=>\n$val\n) {\n    if (!\n$doc\n=\n$tidy\n->\ngetOptDoc\n(\n$opt\n))\n\n$doc\n=\n'no documentation available!'\n;\n\n$val\n= (\n$tidy\n->\ngetOpt\n(\n$opt\n) ===\ntrue\n)  ?\n'true'\n:\n$val\n;\n\n$val\n= (\n$tidy\n->\ngetOpt\n(\n$opt\n) ===\nfalse\n) ?\n'false'\n:\n$val\n;\n    echo\n\"<p><b>\n$opt\n</b> (default: '\n$val\n')<br />\"\n.\n\n\"\n$doc\n</p><hr />\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 tidy::getStatus() example",
    "output": "<?php\n$html\n=\n'<p>paragraph</i>'\n;\n$tidy\n= new\ntidy\n();\n$tidy\n->\nparseString\n(\n$html\n);\n$tidy2\n= new\ntidy\n();\n$html2\n=\n'<bogus>test</bogus>'\n;\n$tidy2\n->\nparseString\n(\n$html2\n);\necho\n$tidy\n->\ngetStatus\n();\n//1\necho\n$tidy2\n->\ngetStatus\n();\n//2\n?>"
  },
  {
    "input": "Example #1 tidy::head() example",
    "output": "<?php\n$html\n=\n'\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <p>paragraph</p>\n  </body>\n</html>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$head\n=\n$tidy\n->\nhead\n();\necho\n$head\n->\nvalue\n;\n?>"
  },
  {
    "input": "Example #1 tidy::html() example",
    "output": "<?php\n$html\n=\n'\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <p>paragraph</p>\n  </body>\n</html>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$html\n=\n$tidy\n->\nhtml\n();\necho\n$html\n->\nvalue\n;\n?>"
  },
  {
    "input": "Example #1 tidy::parseFile() example",
    "output": "<?php\n$tidy\n= new\ntidy\n();\n$tidy\n->\nparseFile\n(\n'file.html'\n);\n$tidy\n->\ncleanRepair\n();\nif(!empty(\n$tidy\n->\nerrorBuffer\n)) {\n    echo\n\"The following errors or warnings occurred:\\n\"\n;\n    echo\n$tidy\n->\nerrorBuffer\n;\n}\n?>"
  },
  {
    "input": "Example #1 tidy::parseString() example",
    "output": "<?php\nob_start\n();\n?>\n<html>\n  <head>\n   <title>test</title>\n  </head>\n  <body>\n   <p>error<br>another line</i>\n  </body>\n</html>\n<?php\n$buffer\n=\nob_get_clean\n();\n$config\n= array(\n'indent'\n=>\nTRUE\n,\n\n'output-xhtml'\n=>\nTRUE\n,\n\n'wrap'\n=>\n200\n);\n$tidy\n=\ntidy_parse_string\n(\n$buffer\n,\n$config\n,\n'UTF8'\n);\n$tidy\n->\ncleanRepair\n();\necho\n$tidy\n;\n?>"
  },
  {
    "input": "Example #1 tidy::repairFile() example",
    "output": "<?php\n$file\n=\n'file.html'\n;\n$tidy\n= new\ntidy\n();\n$repaired\n=\n$tidy\n->\nrepairfile\n(\n$file\n);\nrename\n(\n$file\n,\n$file\n.\n'.bak'\n);\nfile_put_contents\n(\n$file\n,\n$repaired\n);\n?>"
  },
  {
    "input": "Example #1 tidy::repairString() example",
    "output": "<?php\nob_start\n();\n?>\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <p>error</i>\n  </body>\n</html>\n<?php\n$buffer\n=\nob_get_clean\n();\n$tidy\n= new\ntidy\n();\n$clean\n=\n$tidy\n->\nrepairString\n(\n$buffer\n);\necho\n$clean\n;\n?>"
  },
  {
    "input": "Example #1 tidy::root() example",
    "output": "<?php\n$html\n= <<< HTML\n<html><body>\n<p>paragraph</p>\n<br/>\n</body></html>\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\ndump_nodes\n(\n$tidy\n->\nroot\n(),\n1\n);\nfunction\ndump_nodes\n(\n$node\n,\n$indent\n) {\n    if(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n            echo\nstr_repeat\n(\n'.'\n,\n$indent\n*\n2\n) . (\n$child\n->\nname\n?\n$child\n->\nname\n:\n'\"'\n.\n$child\n->\nvalue\n.\n'\"'\n).\n\"\\n\"\n;\n\ndump_nodes\n(\n$child\n,\n$indent\n+\n1\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 tidyNode::getNextSibling() example",
    "output": "<?php\n$html\n= <<< HTML\n<html>\n <head>\n </head>\n <body>\n  <p>Hello</p><p>World</p>\n </body>\n</html>\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$node\n=\n$tidy\n->\nbody\n();\nvar_dump\n(\n$node\n->\nchild\n[\n0\n]->\ngetNextSibling\n()->\nvalue\n);\n?>"
  },
  {
    "input": "Example #1 tidyNode::getParent() example",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n </head>\n <body>\n Hello World\n </body>\n</html>\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\n$node\n=\n$tidy\n->\nhtml\n()->\nchild\n[\n0\n]->\nchild\n[\n0\n];\nvar_dump\n(\n$node\n->\ngetParent\n()->\nname\n);\n?>"
  },
  {
    "input": "Example #1 tidyNode::getPreviousSibling() example",
    "output": "<?php\n$html\n= <<< HTML\n<html>\n <head>\n </head>\n <body>\n  <p>Hello</p><p>World</p>\n </body>\n</html>\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$node\n=\n$tidy\n->\nbody\n();\nvar_dump\n(\n$node\n->\nchild\n[\n1\n]->\ngetPreviousSibling\n()->\nvalue\n);\n?>"
  },
  {
    "input": "Example #1 tidyNode::hasChildren() example",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\n// the head tag\nvar_dump\n(\n$tidy\n->\nhtml\n()->\nchild\n[\n0\n]->\nhasChildren\n());\n// the php inside the head tag\nvar_dump\n(\n$tidy\n->\nhtml\n()->\nchild\n[\n0\n]->\nchild\n[\n0\n]->\nhasChildren\n());\n?>"
  },
  {
    "input": "Example #1 tidyNode::hasSiblings() example",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\n// the html tag\nvar_dump\n(\n$tidy\n->\nhtml\n()->\nhasSiblings\n());\n// the head tag\nvar_dump\n(\n$tidy\n->\nhtml\n()->\nchild\n[\n0\n]->\nhasSiblings\n());\n?>"
  },
  {
    "input": "Example #1 Extract ASP code from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisAsp\n()) {\n        echo\n\"\\n\\n# asp node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Extract comments from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisComment\n()) {\n        echo\n\"\\n\\n# comment node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Extract HTML code from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisHtml\n()) {\n        echo\n\"\\n\\n# html node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Extract JSTE code from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisJste\n()) {\n        echo\n\"\\n\\n# jste node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Extract PHP code from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisPhp\n()) {\n        echo\n\"\\n\\n# php node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Extract text from a mixed HTML document",
    "output": "<?php\n$html\n= <<< HTML\n<html><head>\n<?php echo '<title>title</title>'; ?>\n<#\n  /* JSTE code */\n  alert('Hello World');\n#>\n</head>\n<body>\n<?php\n  // PHP code\n  echo 'hello world!';\n?>\n<%\n  /* ASP code */\n  response.write(\"Hello World!\")\n%>\n<!-- Comments -->\nHello World\n</body></html>\nOutside HTML\nHTML;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$num\n=\n0\n;\nget_nodes\n(\n$tidy\n->\nhtml\n());\nfunction\nget_nodes\n(\n$node\n) {\n\n// check if the current node is of requested type\n\nif(\n$node\n->\nisText\n()) {\n        echo\n\"\\n\\n# text node #\"\n. ++\n$GLOBALS\n[\n'num'\n] .\n\"\\n\"\n;\n        echo\n$node\n->\nvalue\n;\n    }\n\n// check if the current node has childrens\n\nif(\n$node\n->\nhasChildren\n()) {\n        foreach(\n$node\n->\nchild\nas\n$child\n) {\n\nget_nodes\n(\n$child\n);\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #1 ob_tidyhandler() example",
    "output": "<?php\nob_start\n(\n'ob_tidyhandler'\n);\necho\n'<p>test</i>'\n;\n?>"
  },
  {
    "input": "Example #1 tidy_access_count() example",
    "output": "<?php\n$html\n=\n'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head><title>Title</title></head>\n<body>\n<p><img src=\"img.png\"></p>\n</body></html>'\n;\n// select the accessibility check level: 1, 2 or 3\n$config\n= array(\n'accessibility-check'\n=>\n3\n);\n$tidy\n= new\ntidy\n();\n$tidy\n->\nparseString\n(\n$html\n,\n$config\n);\n$tidy\n->\ncleanRepair\n();\n/* Never forget to call this! */\n$tidy\n->\ndiagnose\n();\necho\ntidy_access_count\n(\n$tidy\n);\n//5\n?>"
  },
  {
    "input": "Example #1 tidy_config_count() example",
    "output": "<?php\n$html\n=\n'<p>test</I>'\n;\n$config\n= array(\n'doctype'\n=>\n'bogus'\n);\n$tidy\n=\ntidy_parse_string\n(\n$html\n,\n$config\n);\n/* This outputs 1, because 'bogus' isn't a valid doctype */\necho\ntidy_config_count\n(\n$tidy\n);\n?>"
  },
  {
    "input": "Example #1 tidy_error_count() example",
    "output": "<?php\n$html\n=\n'<p>test</i>\n<bogustag>bogus</bogustag>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\necho\ntidy_error_count\n(\n$tidy\n) .\n\"\\n\"\n;\n//1\necho\n$tidy\n->\nerrorBuffer\n;\n?>"
  },
  {
    "input": "Example #1 tidy_get_output() example",
    "output": "<?php\n$html\n=\n'<p>paragraph</i>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\n$tidy\n->\ncleanRepair\n();\necho\ntidy_get_output\n(\n$tidy\n);\n?>"
  },
  {
    "input": "Example #1 tidy_warning_count() example",
    "output": "<?php\n$html\n=\n'<p>test</i>\n<bogustag>bogus</bogustag>'\n;\n$tidy\n=\ntidy_parse_string\n(\n$html\n);\necho\ntidy_error_count\n(\n$tidy\n) .\n\"\\n\"\n;\n//1\necho\ntidy_warning_count\n(\n$tidy\n) .\n\"\\n\"\n;\n//5\n?>"
  },
  {
    "input": "Example #1 Strip comments with the tokenizer",
    "output": "<?php\n$source\n=\nfile_get_contents\n(\n'example.php'\n);\n$tokens\n=\ntoken_get_all\n(\n$source\n);\nforeach (\n$tokens\nas\n$token\n) {\n   if (\nis_string\n(\n$token\n)) {\n\n// simple 1-character token\n\necho\n$token\n;\n   } else {\n\n// token array\n\nlist(\n$id\n,\n$text\n) =\n$token\n;\n       switch (\n$id\n) {\n           case\nT_COMMENT\n:\n           case\nT_DOC_COMMENT\n:\n\n// no action on comments\n\nbreak;\n           default:\n\n// anything else -> output \"as is\"\n\necho\n$text\n;\n               break;\n       }\n   }\n}\n?>"
  },
  {
    "input": "Example #1 PhpToken::getTokenName() example",
    "output": "<?php\n// known token\n$token\n= new\nPhpToken\n(\nT_ECHO\n,\n'echo'\n);\nvar_dump\n(\n$token\n->\ngetTokenName\n());\n// -> string(6) \"T_ECHO\"\n// single-char token\n$token\n= new\nPhpToken\n(\nord\n(\n';'\n),\n';'\n);\nvar_dump\n(\n$token\n->\ngetTokenName\n());\n// -> string(1) \";\"\n// unknown token\n$token\n= new\nPhpToken\n(\n10000\n,\n\"\\0\"\n);\nvar_dump\n(\n$token\n->\ngetTokenName\n());\n// -> NULL"
  },
  {
    "input": "Example #1 PhpToken::is() example",
    "output": "<?php\n$token\n= new\nPhpToken\n(\nT_ECHO\n,\n'echo'\n);\nvar_dump\n(\n$token\n->\nis\n(\nT_ECHO\n));\n// -> bool(true)\nvar_dump\n(\n$token\n->\nis\n(\n'echo'\n));\n// -> bool(true)\nvar_dump\n(\n$token\n->\nis\n(\nT_FOREACH\n));\n// -> bool(false)\nvar_dump\n(\n$token\n->\nis\n(\n'foreach'\n));\n// -> bool(false)"
  },
  {
    "input": "Example #2 Usage with array",
    "output": "<?php\nfunction\nisClassType\n(\nPhpToken $token\n):\nbool\n{\n    return\n$token\n->\nis\n([\nT_CLASS\n,\nT_INTERFACE\n,\nT_TRAIT\n]);\n}\n$interface\n= new\nPhpToken\n(\nT_INTERFACE\n,\n'interface'\n);\nvar_dump\n(\nisClassType\n(\n$interface\n));\n// -> bool(true)\n$function\n= new\nPhpToken\n(\nT_FUNCTION\n,\n'function'\n);\nvar_dump\n(\nisClassType\n(\n$function\n));\n// -> bool(false)"
  },
  {
    "input": "Example #1 PhpToken::isIgnorable() example",
    "output": "<?php\n$echo\n= new\nPhpToken\n(\nT_ECHO\n,\n'echo'\n);\nvar_dump\n(\n$echo\n->\nisIgnorable\n());\n// -> bool(false)\n$space\n= new\nPhpToken\n(\nT_WHITESPACE\n,\n' '\n);\nvar_dump\n(\n$space\n->\nisIgnorable\n());\n// -> bool(true)"
  },
  {
    "input": "Example #1 PhpToken::__toString() example",
    "output": "<?php\n$token\n= new\nPhpToken\n(\nT_ECHO\n,\n'echo'\n);\necho\n$token\n;"
  },
  {
    "input": "Example #1 PhpToken::tokenize() example",
    "output": "<?php\n$tokens\n=\nPhpToken\n::\ntokenize\n(\n'<?php echo; ?>'\n);\nforeach (\n$tokens\nas\n$token\n) {\n    echo\n\"Line\n{\n$token\n->\nline\n}\n:\n{\n$token\n->\ngetTokenName\n()}\n ('\n{\n$token\n->\ntext\n}\n')\"\n,\nPHP_EOL\n;\n}"
  },
  {
    "input": "Example #2 Extending PhpToken",
    "output": "<?php\nclass\nMyPhpToken\nextends\nPhpToken\n{\n    public function\ngetUpperText\n() {\n        return\nstrtoupper\n(\n$this\n->\ntext\n);\n    }\n}\n$tokens\n=\nMyPhpToken\n::\ntokenize\n(\n'<?php echo; ?>'\n);\necho\n\"'\n{\n$tokens\n[\n0\n]->\ngetUpperText\n()}\n'\"\n;"
  },
  {
    "input": "Example #1 token_get_all() example",
    "output": "<?php\n$tokens\n=\ntoken_get_all\n(\n'<?php echo; ?>'\n);\nforeach (\n$tokens\nas\n$token\n) {\n    if (\nis_array\n(\n$token\n)) {\n        echo\n\"Line\n{\n$token\n[\n2\n]}\n: \"\n,\ntoken_name\n(\n$token\n[\n0\n]),\n\" ('\n{\n$token\n[\n1\n]}\n')\"\n,\nPHP_EOL\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 token_get_all() incorrect usage example",
    "output": "<?php\n$tokens\n=\ntoken_get_all\n(\n'/* comment */'\n);\nforeach (\n$tokens\nas\n$token\n) {\n    if (\nis_array\n(\n$token\n)) {\n        echo\n\"Line\n{\n$token\n[\n2\n]}\n: \"\n,\ntoken_name\n(\n$token\n[\n0\n]),\n\" ('\n{\n$token\n[\n1\n]}\n')\"\n,\nPHP_EOL\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #3 \n     token_get_all() on a class using a reserved word example",
    "output": "<?php\n$source\n= <<<'code'\n<?php\nclass A\n{\n    const PUBLIC = 1;\n}\ncode;\n$tokens\n=\ntoken_get_all\n(\n$source\n,\nTOKEN_PARSE\n);\nforeach (\n$tokens\nas\n$token\n) {\n    if (\nis_array\n(\n$token\n)) {\n        echo\ntoken_name\n(\n$token\n[\n0\n]) ,\nPHP_EOL\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 token_name() example",
    "output": "<?php\n// 260 is the token value for the T_EVAL token\necho\ntoken_name\n(\n260\n);\n// -> \"T_EVAL\"\n// a token constant maps to its own name\necho\ntoken_name\n(\nT_FUNCTION\n);\n// -> \"T_FUNCTION\"\n?>"
  },
  {
    "input": "Example #1 base64_decode() example",
    "output": "<?php\n$str\n=\n'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw=='\n;\necho\nbase64_decode\n(\n$str\n);\n?>"
  },
  {
    "input": "Example #1 base64_encode() example",
    "output": "<?php\n$str\n=\n'This is an encoded string'\n;\necho\nbase64_encode\n(\n$str\n);\n?>"
  },
  {
    "input": "Example #1 get_headers() example",
    "output": "<?php\n$url\n=\n'http://www.example.com'\n;\nprint_r\n(\nget_headers\n(\n$url\n));\nprint_r\n(\nget_headers\n(\n$url\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #2 get_headers() using HEAD example",
    "output": "<?php\n// By default get_headers uses a GET request to fetch the headers. If you\n// want to send a HEAD request instead, you can do so using a stream context:\n$context\n=\nstream_context_create\n(\n    [\n\n'http'\n=> array(\n\n'method'\n=>\n'HEAD'\n\n)\n    ]\n);\n$headers\n=\nget_headers\n(\n'http://example.com'\n,\nfalse\n,\n$context\n);\n?>"
  },
  {
    "input": "Example #2 What get_meta_tags() returns",
    "output": "<?php\n// Assuming the above tags are at www.example.com\n$tags\n=\nget_meta_tags\n(\n'http://www.example.com/'\n);\n// Notice how the keys are all lowercase now, and\n// how . was replaced by _ in the key.\necho\n$tags\n[\n'author'\n];\n// name\necho\n$tags\n[\n'keywords'\n];\n// php documentation\necho\n$tags\n[\n'description'\n];\n// a php manual\necho\n$tags\n[\n'geo_position'\n];\n// 49.33;-86.59\n?>"
  },
  {
    "input": "Example #1 Simple usage of http_build_query()",
    "output": "<?php\n$data\n= array(\n\n'foo'\n=>\n'bar'\n,\n\n'baz'\n=>\n'boom'\n,\n\n'cow'\n=>\n'milk'\n,\n\n'null'\n=>\nnull\n,\n\n'php'\n=>\n'hypertext processor'\n);\necho\nhttp_build_query\n(\n$data\n) .\n\"\\n\"\n;\necho\nhttp_build_query\n(\n$data\n,\n''\n,\n'&amp;'\n);\n?>"
  },
  {
    "input": "Example #2 http_build_query() with numerically index elements.",
    "output": "<?php\n$data\n= array(\n'foo'\n,\n'bar'\n,\n'baz'\n,\nnull\n,\n'boom'\n,\n'cow'\n=>\n'milk'\n,\n'php'\n=>\n'hypertext processor'\n);\necho\nhttp_build_query\n(\n$data\n) .\n\"\\n\"\n;\necho\nhttp_build_query\n(\n$data\n,\n'myvar_'\n);\n?>"
  },
  {
    "input": "Example #3 http_build_query() with complex arrays",
    "output": "<?php\n$data\n= array(\n\n'user'\n=> array(\n\n'name'\n=>\n'Bob Smith'\n,\n\n'age'\n=>\n47\n,\n\n'sex'\n=>\n'M'\n,\n\n'dob'\n=>\n'5/12/1956'\n\n),\n\n'pastimes'\n=> array(\n'golf'\n,\n'opera'\n,\n'poker'\n,\n'rap'\n),\n\n'children'\n=> array(\n\n'bobby'\n=> array(\n'age'\n=>\n12\n,\n'sex'\n=>\n'M'\n),\n\n'sally'\n=> array(\n'age'\n=>\n8\n,\n'sex'\n=>\n'F'\n)\n    ),\n\n'CEO'\n);\necho\nhttp_build_query\n(\n$data\n,\n'flags_'\n);\n?>"
  },
  {
    "input": "Example #4 Using http_build_query() with an object",
    "output": "<?php\nclass\nparentClass\n{\n    public\n$pub\n=\n'publicParent'\n;\n    protected\n$prot\n=\n'protectedParent'\n;\n    private\n$priv\n=\n'privateParent'\n;\n    public\n$pub_bar\n=\nnull\n;\n    protected\n$prot_bar\n=\nnull\n;\n    private\n$priv_bar\n=\nnull\n;\n    public function\n__construct\n(){\n\n$this\n->\npub_bar\n= new\nchildClass\n();\n\n$this\n->\nprot_bar\n= new\nchildClass\n();\n\n$this\n->\npriv_bar\n= new\nchildClass\n();\n    }\n}\nclass\nchildClass\n{\n    public\n$pub\n=\n'publicChild'\n;\n    protected\n$prot\n=\n'protectedChild'\n;\n    private\n$priv\n=\n'privateChild'\n;\n}\n$parent\n= new\nparentClass\n();\necho\nhttp_build_query\n(\n$parent\n);\n?>"
  },
  {
    "input": "Example #1 A parse_url() example",
    "output": "<?php\n$url\n=\n'http://username:password@hostname:9090/path?arg=value#anchor'\n;\nvar_dump\n(\nparse_url\n(\n$url\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_SCHEME\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_USER\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_PASS\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_HOST\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_PORT\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_PATH\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_QUERY\n));\nvar_dump\n(\nparse_url\n(\n$url\n,\nPHP_URL_FRAGMENT\n));\n?>"
  },
  {
    "input": "Example #2 A parse_url() example with missing scheme",
    "output": "<?php\n$url\n=\n'//www.example.com/path?googleguy=googley'\n;\n// Prior to 5.4.7 this would show the path as \"//www.example.com/path\"\nvar_dump\n(\nparse_url\n(\n$url\n));\n?>"
  },
  {
    "input": "Example #1 rawurldecode() example",
    "output": "<?php\necho\nrawurldecode\n(\n'foo%20bar%40baz'\n);\n// foo bar@baz\n?>"
  },
  {
    "input": "Example #1 including a password in an FTP URL",
    "output": "<?php\necho\n'<a href=\"ftp://user:'\n,\nrawurlencode\n(\n'foo @+%/'\n),\n\n'@ftp.example.com/x.txt\">'\n;\n?>"
  },
  {
    "input": "Example #2 rawurlencode() example 2",
    "output": "<?php\necho\n'<a href=\"http://example.com/department_list_script/'\n,\n\nrawurlencode\n(\n'sales and marketing/Miami'\n),\n'\">'\n;\n?>"
  },
  {
    "input": "Example #1 urldecode() example",
    "output": "<?php\n$query\n=\n\"my=apples&are=green+and+red\"\n;\nforeach (\nexplode\n(\n'&'\n,\n$query\n) as\n$chunk\n) {\n\n$param\n=\nexplode\n(\n\"=\"\n,\n$chunk\n);\n    if (\n$param\n) {\n\nprintf\n(\n\"Value for parameter \\\"%s\\\" is \\\"%s\\\"<br/>\\n\"\n,\nurldecode\n(\n$param\n[\n0\n]),\nurldecode\n(\n$param\n[\n1\n]));\n    }\n}\n?>"
  },
  {
    "input": "Example #1 urlencode() example",
    "output": "<?php\n$userinput\n=\n'Data123!@-_ +'\n;\necho\n\"UserInput:\n$userinput\n\\n\"\n;\necho\n'<a href=\"mycgi?foo='\n,\nurlencode\n(\n$userinput\n),\n'\">'\n;\n?>"
  },
  {
    "input": "Example #2 urlencode() and htmlentities() example",
    "output": "<?php\n$foo\n=\n'Data123!@-_ +'\n;\n$bar\n=\n\"Not the same content as\n$foo\n\"\n;\necho\n\"foo:\n$foo\n\\n\"\n;\necho\n\"bar:\n$bar\n\\n\"\n;\n$query_string\n=\n'foo='\n.\nurlencode\n(\n$foo\n) .\n'&bar='\n.\nurlencode\n(\n$bar\n);\necho\n'<a href=\"mycgi?'\n.\nhtmlentities\n(\n$query_string\n) .\n'\">'\n;\n?>"
  },
  {
    "input": "Example #1 Basic Javascript execution",
    "output": "<?php\n$v8\n= new\nV8Js\n();\n/* basic.js */\n$JS\n= <<< EOT\nlen = print('Hello' + ' ' + 'World!' + \"\\\\n\");\nlen;\nEOT;\ntry {\n\nvar_dump\n(\n$v8\n->\nexecuteString\n(\n$JS\n,\n'basic.js'\n));\n} catch (\nV8JsException $e\n) {\n\nvar_dump\n(\n$e\n);\n}\n?>"
  },
  {
    "input": "Example #1 Yaml Example",
    "output": "<?php\n$addr\n= array(\n\n\"given\"\n=>\n\"Chris\"\n,\n\n\"family\"\n=>\n\"Dumars\"\n,\n\n\"address\"\n=> array(\n\n\"lines\"\n=>\n\"458 Walkman Dr.\n        Suite #292\"\n,\n\n\"city\"\n=>\n\"Royal Oak\"\n,\n\n\"state\"\n=>\n\"MI\"\n,\n\n\"postal\"\n=>\n48046\n,\n      ),\n  );\n$invoice\n= array (\n\n\"invoice\"\n=>\n34843\n,\n\n\"date\"\n=>\n\"2001-01-23\"\n,\n\n\"bill-to\"\n=>\n$addr\n,\n\n\"ship-to\"\n=>\n$addr\n,\n\n\"product\"\n=> array(\n        array(\n\n\"sku\"\n=>\n\"BL394D\"\n,\n\n\"quantity\"\n=>\n4\n,\n\n\"description\"\n=>\n\"Basketball\"\n,\n\n\"price\"\n=>\n450\n,\n          ),\n        array(\n\n\"sku\"\n=>\n\"BL4438H\"\n,\n\n\"quantity\"\n=>\n1\n,\n\n\"description\"\n=>\n\"Super Hoop\"\n,\n\n\"price\"\n=>\n2392\n,\n          ),\n      ),\n\n\"tax\"\n=>\n251.42\n,\n\n\"total\"\n=>\n4443.52\n,\n\n\"comments\"\n=>\n\"Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\"\n,\n    );\n// generate a YAML representation of the invoice\n$yaml\n=\nyaml_emit\n(\n$invoice\n);\nvar_dump\n(\n$yaml\n);\n// convert the YAML back into a PHP variable\n$parsed\n=\nyaml_parse\n(\n$yaml\n);\n// check that roundtrip conversion produced an equivalent structure\nvar_dump\n(\n$parsed\n==\n$invoice\n);\n?>"
  },
  {
    "input": "Example #1 Parse callback example",
    "output": "<?php\n/**\n * Parsing callback for yaml tag.\n * @param mixed $value Data from yaml file\n * @param string $tag Tag that triggered callback\n * @param int $flags Scalar entity style (see YAML_*_SCALAR_STYLE)\n * @return mixed Value that YAML parser should emit for the given value\n */\nfunction\ntag_callback\n(\n$value\n,\n$tag\n,\n$flags\n) {\n\nvar_dump\n(\nfunc_get_args\n());\n// debugging\n\nreturn\n\"Hello\n{\n$value\n}\n\"\n;\n}\n$yaml\n= <<<YAML\ngreeting: !example/hello World\nYAML;\n$result\n=\nyaml_parse\n(\n$yaml\n,\n0\n,\n$ndocs\n, array(\n\n'!example/hello'\n=>\n'tag_callback'\n,\n  ));\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 Emit callback example",
    "output": "<?php\nclass\nEmitExample\n{\n  public\n$data\n;\n// data may be in any pecl/yaml suitable type\n\npublic function\n__construct\n(\n$d\n) {\n\n$this\n->\ndata\n=\n$d\n;\n  }\n\n/**\n   * Yaml emit callback function, referred on yaml_emit call by class name.\n   *\n   * Expected to return an array with 2 values:\n   *   - 'tag': custom tag for this serialization\n   *   - 'data': value to convert to yaml (array, string, bool, number)\n   *\n   * @param object $obj Object to be emitted\n   * @return array Tag and surrogate data to emit\n   */\n\npublic static function\nyamlEmit\n(\nEmitExample $obj\n) {\n    return array(\n\n'tag'\n=>\n'!example/emit'\n,\n\n'data'\n=>\n$obj\n->\ndata\n,\n    );\n  }\n}\n$emit_callbacks\n= array(\n\n'EmitExample'\n=> array(\n'EmitExample'\n,\n'yamlEmit'\n)\n);\n$t\n= new\nEmitExample\n(array(\n'a'\n,\n'b'\n,\n'c'\n));\n$yaml\n=\nyaml_emit\n(\n  array(\n\n'example'\n=>\n$t\n,\n  ),\n\nYAML_ANY_ENCODING\n,\n\nYAML_ANY_BREAK\n,\n\n$emit_callbacks\n);\nvar_dump\n(\n$yaml\n);\n?>"
  },
  {
    "input": "Example #1 yaml_emit() example",
    "output": "<?php\n$addr\n= array(\n\n\"given\"\n=>\n\"Chris\"\n,\n\n\"family\"\n=>\n\"Dumars\"\n,\n\n\"address\"\n=> array(\n\n\"lines\"\n=>\n\"458 Walkman Dr.\n        Suite #292\"\n,\n\n\"city\"\n=>\n\"Royal Oak\"\n,\n\n\"state\"\n=>\n\"MI\"\n,\n\n\"postal\"\n=>\n48046\n,\n      ),\n  );\n$invoice\n= array (\n\n\"invoice\"\n=>\n34843\n,\n\n\"date\"\n=>\n980208000\n,\n\n\"bill-to\"\n=>\n$addr\n,\n\n\"ship-to\"\n=>\n$addr\n,\n\n\"product\"\n=> array(\n        array(\n\n\"sku\"\n=>\n\"BL394D\"\n,\n\n\"quantity\"\n=>\n4\n,\n\n\"description\"\n=>\n\"Basketball\"\n,\n\n\"price\"\n=>\n450\n,\n          ),\n        array(\n\n\"sku\"\n=>\n\"BL4438H\"\n,\n\n\"quantity\"\n=>\n1\n,\n\n\"description\"\n=>\n\"Super Hoop\"\n,\n\n\"price\"\n=>\n2392\n,\n          ),\n      ),\n\n\"tax\"\n=>\n251.42\n,\n\n\"total\"\n=>\n4443.52\n,\n\n\"comments\"\n=>\n\"Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\"\n,\n  );\nvar_dump\n(\nyaml_emit\n(\n$invoice\n));\n?>"
  },
  {
    "input": "Example #1 yaml_parse() example",
    "output": "<?php\n$yaml\n= <<<EOD\n---\ninvoice: 34843\ndate: \"2001-01-23\"\nbill-to: &id001\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nship-to: *id001\nproduct:\n- sku: BL394D\n  quantity: 4\n  description: Basketball\n  price: 450\n- sku: BL4438H\n  quantity: 1\n  description: Super Hoop\n  price: 2392\ntax: 251.420000\ntotal: 4443.520000\ncomments: Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\n...\nEOD;\n$parsed\n=\nyaml_parse\n(\n$yaml\n);\nvar_dump\n(\n$parsed\n);\n?>"
  },
  {
    "input": "Example #5 Default controller",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n\n/* default action */\n\npublic function\nindexAction\n() {\n\n$this\n->\n_view\n->\nword\n=\n\"hello world\"\n;\n\n//or\n       // $this->getView()->word = \"hello world\";\n\n}\n}\n?>"
  },
  {
    "input": "Example #6 Default view template",
    "output": "<html>\n <head>\n   <title>Hello World</title>\n </head>\n <body>\n\n<?php\necho\n$word\n;\n?>\n </body>\n</html>"
  },
  {
    "input": "Example #1 An PHP array example",
    "output": "<?php\n    $configs\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\ndirname\n(\n__FILE__\n),\n\n\"dispatcher\"\n=> array(\n\n\"catchException\"\n=>\n0\n,\n                    ),\n\n\"view\"\n=> array(\n\n\"ext\"\n=>\n\"phtml\"\n,\n                    ),\n                ),\n           );\n\n$app\n= new\nYaf_Application\n(\n$configs\n);\n?>"
  },
  {
    "input": "Example #1 A Bootstrap example",
    "output": "<?php\n/**\n * This file should be under the APPLICATION_PATH . \"/application/\"(which was defined in the config passed to Yaf_Application).\n * and named Bootstrap.php,  so the Yaf_Application can find it\n */\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n    function\n_initConfig\n(\nYaf_Dispatcher $dispatcher\n) {\n        echo\n\"1st called\\n\"\n;\n    }\n    function\n_initPlugin\n(\n$dispatcher\n) {\n        echo\n\"2nd called\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Yaf_Application::bootstrap()example",
    "output": "<?php\ndefined\n(\n'APPLICATION_PATH'\n)\n// APPLICATION_PATH will be used in the ini config file\n\n||\ndefine\n(\n'APPLICATION_PATH'\n,\n__DIR__\n);\n$application\n= new\nYaf_Application\n(\nAPPLICATION_PATH\n.\n'/conf/application.ini'\n);\n$application\n->\nbootstrap\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::clearLastError()example",
    "output": "<?php\nfunction\nerror_handler\n(\n$errno\n,\n$errstr\n,\n$errfile\n,\n$errline\n) {\n\nYaf_Application\n::\napp\n()->\nclearLastError\n();\n\nvar_dump\n(\nYaf_Application\n::\napp\n()->\ngetLastErrorNo\n());\n}\n\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\n\"/tmp/notexists\"\n,\n\n\"dispatcher\"\n=> array(\n\n\"throwException\"\n=>\n0\n,\n//trigger error instead of throw exception when error occure\n\n),\n  ),\n);\n\n$app\n= new\nYaf_Application\n(\n$config\n);\n$app\n->\ngetDispatcher\n()->\nsetErrorHandler\n(\n\"error_handler\"\n,\nE_RECOVERABLE_ERROR\n);\n$app\n->\nrun\n();\n?>"
  },
  {
    "input": "Example #2 Yaf_Application::__construct()example",
    "output": "<?php\ndefined\n(\n'APPLICATION_PATH'\n)\n// APPLICATION_PATH will be used in the ini config file\n\n||\ndefine\n(\n'APPLICATION_PATH'\n,\n__DIR__\n));\n$application\n= new\nYaf_Application\n(\nAPPLICATION_PATH\n.\n'/conf/application.ini'\n);\n$application\n->\nbootstrap\n()->\nrun\n();\n?>"
  },
  {
    "input": "Example #3 Yaf_Application::__construct()example",
    "output": "<?php\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\n$application\n->\nbootstrap\n()->\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::environ()example",
    "output": "<?php\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\nprint_r\n(\n$application\n->\nenviron\n());\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::execute()example",
    "output": "<?php\nfunction\nmain\n(\n$argc\n,\n$argv\n) {\n}\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\n$application\n->\nexecute\n(\n\"main\"\n,\n$argc\n,\n$argv\n);\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::getConfig()example",
    "output": "<?php\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\nprint_r\n(\n$application\n->\ngetConfig\n());\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::getDispatcher()example",
    "output": "<?php\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\nprint_r\n(\n$application\n->\ngetDispatcher\n());\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::getLastErrorMsg()example",
    "output": "<?php\nfunction\nerror_handler\n(\n$errno\n,\n$errstr\n,\n$errfile\n,\n$errline\n) {\n\nvar_dump\n(\nYaf_Application\n::\napp\n()->\ngetLastErrorMsg\n());\n}\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\n\"/tmp/notexists\"\n,\n\n\"dispatcher\"\n=> array(\n\n\"throwException\"\n=>\n0\n,\n//trigger error instead of throw exception when error occure\n\n),\n  ),\n);\n$app\n= new\nYaf_Application\n(\n$config\n);\n$app\n->\ngetDispatcher\n()->\nsetErrorHandler\n(\n\"error_handler\"\n,\nE_RECOVERABLE_ERROR\n);\n$app\n->\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::getLastErrorNo()example",
    "output": "<?php\nfunction\nerror_handler\n(\n$errno\n,\n$errstr\n,\n$errfile\n,\n$errline\n) {\n\nvar_dump\n(\nYaf_Application\n::\napp\n()->\ngetLastErrorNo\n());\n\nvar_dump\n(\nYaf_Application\n::\napp\n()->\ngetLastErrorNo\n() ==\nYAF_ERR_NOTFOUND_CONTROLLER\n);\n}\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\n\"/tmp/notexists\"\n,\n\n\"dispatcher\"\n=> array(\n\n\"throwException\"\n=>\n0\n,\n//trigger error instead of throw exception when error occure\n\n),\n  ),\n);\n$app\n= new\nYaf_Application\n(\n$config\n);\n$app\n->\ngetDispatcher\n()->\nsetErrorHandler\n(\n\"error_handler\"\n,\nE_RECOVERABLE_ERROR\n);\n$app\n->\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Application::getModules()example",
    "output": "<?php\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\nrealpath\n(\ndirname\n(\n__FILE__\n)) .\n\"/application\"\n,\n    ),\n);\n/** Yaf_Application */\n$application\n= new\nYaf_Application\n(\n$config\n);\nprint_r\n(\n$application\n->\ngetModules\n());\n?>"
  },
  {
    "input": "Example #1 Bootstrap example",
    "output": "<?php\n\n/* bootstrap class should be defined under ./application/Bootstrap.php */\n\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n        public function\n_initConfig\n(\nYaf_Dispatcher $dispatcher\n) {\n\nvar_dump\n(\n__METHOD__\n);\n        }\n        public function\n_initPlugin\n(\nYaf_Dispatcher $dispatcher\n) {\n\nvar_dump\n(\n__METHOD__\n);\n        }\n   }\n\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\ndirname\n(\n__FILE__\n) .\n\"/application/\"\n,\n       ),\n   );\n\n\n$app\n= new\nYaf_Application\n(\n$config\n);\n\n$app\n->\nbootstrap\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Dispatcher::autoRender() example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n\n/* init method will be called as soon as a controller is initialized */\n\npublic function\ninit\n() {\n         if (\n$this\n->\ngetRequest\n()->\nisXmlHttpRequest\n()) {\n\n//do not call render for ajax request\n             //we will outpu a json string\n\nYaf_Dispatcher\n::\ngetInstance\n()->\nautoRender\n(\nFALSE\n);\n         }\n     }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Dispatcher::catchException() example",
    "output": "/* if you defined a ErrorController like following */\n<?php\nclass\nErrorController\nextends\nYaf_Controller_Abstract\n{\n\n/**\n      * you can also call to Yaf_Request_Abstract::getException to get the\n      * un-caught exception.\n      */\n\npublic function\nerrorAction\n(\n$exception\n) {\n\n/* error occurs */\n\nswitch (\n$exception\n->\ngetCode\n()) {\n            case\nYAF_ERR_NOTFOUND_MODULE\n:\n            case\nYAF_ERR_NOTFOUND_CONTROLLER\n:\n            case\nYAF_ERR_NOTFOUND_ACTION\n:\n            case\nYAF_ERR_NOTFOUND_VIEW\n:\n                echo\n404\n,\n\":\"\n,\n$exception\n->\ngetMessage\n();\n                break;\n            default :\n\n$message\n=\n$exception\n->\ngetMessage\n();\n                echo\n0\n,\n\":\"\n,\n$exception\n->\ngetMessage\n();\n                break;\n        }\n     }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Dispatcher::registerPlugin() example",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n  public function\n_initPlugin\n(\nYaf_Dispatcher $dispatcher\n) {\n\n/**\n    * Yaf assumes plugin scripts under [application.directory] .  \"/plugins\"\n    * for this case, it will be:\n    * [application.directory] . \"/plugins/\" . \"User\" . [application.ext]\n    */\n\n$user\n= new\nUserPlugin\n();\n\n$dispatcher\n->\nregisterPlugin\n(\n$user\n);\n  }\n}\n?>"
  },
  {
    "input": "Example #1 A custom View engine example",
    "output": "<?php\nrequire\n\"/path/to/smarty/Smarty.class.php\"\n;\nclass\nSmarty_Adapter\nimplements\nYaf_View_Interface\n{\n\n/**\n     * Smarty object\n     * @var Smarty\n     */\n\npublic\n$_smarty\n;\n\n\n/**\n     * Constructor\n     *\n     * @param string $tmplPath\n     * @param array $extraParams\n     * @return void\n     */\n\npublic function\n__construct\n(\n$tmplPath\n=\nnull\n,\n$extraParams\n= array()) {\n\n$this\n->\n_smarty\n= new\nSmarty\n;\n\n        if (\nnull\n!==\n$tmplPath\n) {\n\n$this\n->\nsetScriptPath\n(\n$tmplPath\n);\n        }\n\n        foreach (\n$extraParams\nas\n$key\n=>\n$value\n) {\n\n$this\n->\n_smarty\n->\n$key\n=\n$value\n;\n        }\n    }\n\n\n/**\n     * Set the path to the templates\n     *\n     * @param string $path The directory to set as the path.\n     * @return void\n     */\n\npublic function\nsetScriptPath\n(\n$path\n)\n    {\n        if (\nis_readable\n(\n$path\n)) {\n\n$this\n->\n_smarty\n->\ntemplate_dir\n=\n$path\n;\n            return;\n        }\n\n        throw new\nException\n(\n'Invalid path provided'\n);\n    }\n\n\n/**\n     * Assign a variable to the template\n     *\n     * @param string $key The variable name.\n     * @param mixed $val The variable value.\n     * @return void\n     */\n\npublic function\n__set\n(\n$key\n,\n$val\n)\n    {\n\n$this\n->\n_smarty\n->\nassign\n(\n$key\n,\n$val\n);\n    }\n\n\n/**\n     * Allows testing with empty() and isset() to work\n     *\n     * @param string $key\n     * @return boolean\n     */\n\npublic function\n__isset\n(\n$key\n)\n    {\n        return (\nnull\n!==\n$this\n->\n_smarty\n->\nget_template_vars\n(\n$key\n));\n    }\n\n\n/**\n     * Allows unset() on object properties to work\n     *\n     * @param string $key\n     * @return void\n     */\n\npublic function\n__unset\n(\n$key\n)\n    {\n\n$this\n->\n_smarty\n->\nclear_assign\n(\n$key\n);\n    }\n\n\n/**\n     * Assign variables to the template\n     *\n     * Allows setting a specific key to the specified value, OR passing\n     * an array of key => value pairs to set en masse.\n     *\n     * @see __set()\n     * @param string|array $spec The assignment strategy to use (key or\n     * array of key => value pairs)\n     * @param mixed $value (Optional) If assigning a named variable,\n     * use this as the value.\n     * @return void\n     */\n\npublic function\nassign\n(\n$spec\n,\n$value\n=\nnull\n) {\n        if (\nis_array\n(\n$spec\n)) {\n\n$this\n->\n_smarty\n->\nassign\n(\n$spec\n);\n            return;\n        }\n\n\n$this\n->\n_smarty\n->\nassign\n(\n$spec\n,\n$value\n);\n    }\n\n\n/**\n     * Clear all assigned variables\n     *\n     * Clears all variables assigned to Yaf_View either via\n     * {@link assign()} or property overloading\n     * ({@link __get()}/{@link __set()}).\n     *\n     * @return void\n     */\n\npublic function\nclearVars\n() {\n\n$this\n->\n_smarty\n->\nclear_all_assign\n();\n    }\n\n\n/**\n     * Processes a template and returns the output.\n     *\n     * @param string $name The template to process.\n     * @return string The output.\n     */\n\npublic function\nrender\n(\n$name\n,\n$value\n=\nNULL\n) {\n        return\n$this\n->\n_smarty\n->\nfetch\n(\n$name\n);\n    }\n    public function\ndisplay\n(\n$name\n,\n$value\n=\nNULL\n) {\n        echo\n$this\n->\n_smarty\n->\nfetch\n(\n$name\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Yaf_Dispatcher::setView() example",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n\n/**\n     * there are some config for smarty in the config:\n     *\n     * smarty.left_delimiter   = \"{{\"\n     * smarty.right_delimiter  = \"}}\"\n     * smarty.template_dir     = APPLICATION_PATH \"/views/scripts/\"\n     * smarty.compile_dir      = APPLICATION_PATH \"/views/templates_c/\"\n     * smarty.cache_dir        = APPLICATION_PATH \"/views/templates_d/\"\n     *\n     */\n\npublic function\n_initConfig\n() {\n\n$config\n=\nYaf_Application\n::\napp\n()->\ngetConfig\n();\n\nYaf_Registry\n::\nset\n(\n\"config\"\n,\n$config\n);\n    }\n    public function\n_initLocalName\n() {\n\n/** we put class Smarty_Adapter under the local library directory */\n\nYaf_Loader\n::\ngetInstance\n()->\nregisterLocalNamespace\n(\n'Smarty'\n);\n    }\n    public function\n_initSmarty\n(\nYaf_Dispatcher $dispatcher\n) {\n\n$smarty\n= new\nSmarty_Adapter\n(\nnull\n,\nYaf_Registry\n::\nget\n(\n\"config\"\n)->\nget\n(\n\"smarty\"\n));\n\n$dispatcher\n->\nsetView\n(\n$smarty\n);\n\n/* now the Smarty view engine become the default view engine of Yaf */\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Dispatcher::throwexception() example",
    "output": "<?php\n$config\n= array(\n\n'application'\n=> array(\n\n'directory'\n=>\ndirname\n(\n__FILE__\n),\n    ),\n);\n$app\n= new\nYaf_Application\n(\n$config\n);\n$app\n->\ngetDispatcher\n()->\nthrowException\n(\ntrue\n);\ntry {\n\n$app\n->\nrun\n();\n} catch (\nYaf_Exception $e\n) {\n\nvar_dump\n(\n$e\n->\ngetMessage\n());\n}\n?>"
  },
  {
    "input": "Example #2 Yaf_Dispatcher::throwexception()example",
    "output": "<?php\n$config\n= array(\n\n'application'\n=> array(\n\n'directory'\n=>\ndirname\n(\n__FILE__\n),\n    ),\n);\n$app\n= new\nYaf_Application\n(\n$config\n);\n$app\n->\ngetDispatcher\n()->\nthrowException\n(\nfalse\n);\n$app\n->\nrun\n();\n?>"
  },
  {
    "input": "Example #1 define action in a separate file",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    protected\n$actions\n= array(\n\n/** now dummyAction is defined in a separate file */\n\n\"dummy\"\n=>\n\"actions/Dummy_action.php\"\n,\n    );\n\n/* action method may have arguments */\n\npublic function\nindexAction\n(\n$name\n,\n$id\n) {\n\n/* $name and $id are unsafe raw data */\n\nassert\n(\n$name\n==\n$this\n->\ngetRequest\n()->\ngetParam\n(\n\"name\"\n));\n\nassert\n(\n$id\n==\n$this\n->\n_request\n->\ngetParam\n(\n\"id\"\n));\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Dummy_action.php",
    "output": "<?php\nclass\nDummyAction\nextends\nYaf_Action_Abstract\n{\n\n/* an action class shall define this method as the entry point */\n\npublic function\nexecute\n() {\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Controller_Abstract::forward()example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    public function\nindexAction\n(){\n\n$logined\n=\n$_SESSION\n[\n\"login\"\n];\n         if (!\n$logined\n) {\n\n$this\n->\nforward\n(\n\"login\"\n, array(\n\"from\"\n=>\n\"Index\"\n));\n// forward to login action\n\nreturn\nFALSE\n;\n// this is important, this finish current working flow\n                            // and tell the Yaf do not doing auto-render\n\n}\n\n// other processes\n\n}\n    public function\nloginAction\n() {\n         echo\n\"login, redirected from \"\n,\n$this\n->\n_request\n->\ngetParam\n(\n\"from\"\n) ,\n\" action\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Action_Abstract::execute()example",
    "output": "<?php\n/**\n * A controller example\n */\nclass\nProductController\nextends\nYaf_Controller_Abstract\n{\n      protected\n$actions\n= array(\n\n\"index\"\n=>\n\"actions/Index.php\"\n,\n      );\n}\n?>"
  },
  {
    "input": "Example #2 Yaf_Action_Abstract::execute()example",
    "output": "<?php\n/**\n * ListAction\n */\nclass\nListAction\nextends\nYaf_Action_Abstract\n{\n     public function\nexecute\n(\n$name\n,\n$id\n) {\n\nassert\n(\n$name\n==\n$this\n->\ngetRequest\n()->\ngetParam\n(\n\"name\"\n));\n\nassert\n(\n$id\n==\n$this\n->\ngetRequest\n()->\ngetParam\n(\n\"id\"\n));\n     }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_View_Simple::assign()example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    public function\nindexAction\n() {\n\n$this\n->\ngetView\n()->\nassign\n(\n\"foo\"\n,\n\"bar\"\n);\n\n$this\n->\n_view\n->\nassign\n( array(\n\"key\"\n=>\n\"value\"\n,\n\"name\"\n=>\n\"value\"\n));\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Template example",
    "output": "<html>\n <head>\n  <title>\n<?php\necho\n$foo\n;\n?>\n</title>\n </head>\n<body>\n\n<?php\n\nforeach (\n$this\n->\n_tpl_vars\nas\n$name\n=>\n$value\n) {\n         echo $\n$name\n;\n// or echo $this->_tpl_vars[$name];\n\n}\n\n?>\n</body>\n</html>"
  },
  {
    "input": "Example #1 Yaf_View_Simple::assignRef()example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    public function\nindexAction\n() {\n\n$value\n=\n\"bar\"\n;\n\n$this\n->\ngetView\n()->\nassign\n(\n\"foo\"\n,\n$value\n);\n\n/* plz note that there was a bug before Yaf 2.1.4,\n         * which make following output \"bar\";\n         */\n\n$dummy\n=\n$this\n->\ngetView\n()->\nrender\n(\n\"index/index.phtml\"\n);\n        echo\n$value\n;\n\n//prevent the auto-render\n\nYaf_Dispatcher\n::\ngetInstance\n()->\nautoRender\n(\nFALSE\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Template example",
    "output": "<html>\n <head>\n  <title>\n<?php\necho\n$foo\n;\n$foo\n=\n\"changed\"\n;\n?>\n</title>\n </head>\n<body>\n</body>\n</html>"
  },
  {
    "input": "Example #1 Yaf_View_Simple::clear()example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    public function\nindexAction\n() {\n\n$this\n->\ngetView\n()->\nclear\n(\n\"foo\"\n)->\nclear\n(\n\"bar\"\n);\n// clear \"foo\" and \"bar\"\n\n$this\n->\n_view\n->\nclear\n();\n//clear all assigned variables\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_View_Simple::__construct() example",
    "output": "<?php\n   define\n(\n\"TEMPLATE_DIRECTORY\"\n,\nAPPLICATOIN_PATH\n.\n'/views'\n);\n\n$view\n= new\nYaf_View_Simple\n(\nTEMPLATE_DIRECTORY\n, array(\n\n'short_tag'\n=>\nfalse\n//doesn't allow use short tag in template\n\n));\n?>"
  },
  {
    "input": "Example #1 Yaf_View_Simple::__set()example",
    "output": "<?php\nclass\nIndexController\nextends\nYaf_Controller_Abstract\n{\n    public function\nindexAction\n() {\n\n$this\n->\ngetView\n()->\nfoo\n=\n\"bar\"\n;\n// same as assign(\"foo\", \"bar\");\n\n}\n}\n?>"
  },
  {
    "input": "Example #2 Register localnamespace",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n     public function\n_initLoader\n(\n$dispatcher\n) {\n\nYaf_Loader\n::\ngetInstance\n()->\nregisterLocalNameSpace\n(array(\n\"Foo\"\n,\n\"Bar\"\n));\n     }\n?>"
  },
  {
    "input": "Example #1 Yaf_Loader::registerNamespace()example",
    "output": "<?php\n$loader\n=\nYaf_Loader\n::\ngetInstance\n(\n\"/var/application/lib\"\n);\n$loader\n->\nregisterNamespace\n(\n\"\\Vendor\\PHP\"\n,\n\"/var/lib/php\"\n);\n$loader\n->\ngetNamespacePath\n(\n\"\\Vendor\\PHP\"\n);\n// '/var/lib/php'\n$loader\n->\ngetNamespacePath\n(\n\"\\Vendor\\JSP\"\n);\n// '/var/application/lib'\n?>"
  },
  {
    "input": "Example #1 Yaf_Loader::registerLocalNamespace()example",
    "output": "<?php\n$loader\n=\nYaf_Loader\n::\ngetInstance\n(\n'/local/library/'\n,\n'/global/library'\n);\n$loader\n->\nregisterLocalNamespace\n(\n\"Baidu\"\n);\n$loader\n->\nregisterLocalNamespace\n(array(\n\"Sina\"\n,\n\"Weibo\"\n));\n$loader\n->\nautoload\n(\n\"Baidu_Name\"\n);\n// search in '/local/library/'\n$loader\n->\nautoload\n(\n\"Sina\"\n);\n// search '/local/library/'\n$loader\n->\nautoload\n(\n\"Global_Name\"\n);\n// search in '/global/library/'\n$loader\n->\nautoload\n(\n\"Foo_Bar\"\n);\n// search in '/global/library/'\n?>"
  },
  {
    "input": "Example #1 Yaf_Loader::registerNamespace()example",
    "output": "<?php\n$loader\n=\nYaf_Loader\n::\ngetInstance\n();\n$loader\n->\nregisterNamespace\n(\n\"\\Vendor\\PHP\"\n,\n\"/var/lib/php\"\n);\n$loader\n->\nregisterNamespace\n(array(\n\n\"\\Vendor\\ASP\"\n=>\n\"/var/lib/asp\"\n,\n\n\"\\Vendor\\JSP\"\n=>\n\"/usr/lib/vendor/\"\n,\n));\n$loader\n->\nautoload\n(\n\"\\Vendor\\PHP\\Dummy\"\n);\n//load '/var/lib/php/Dummy.php'\n$loader\n->\nautoload\n(\n\"\\Vendor\\PHP\\Foo_Bar\"\n);\n//load '/var/lib/php/Foo/Bar.php'\n$loader\n->\nautoload\n(\n\"\\Vendor\\JSP\\Dummy\"\n);\n//load '/usr/lib/vendor/Dummy.php'\n?>"
  },
  {
    "input": "Example #1 Plugin example",
    "output": "<?php\n\n/* bootstrap class should be defined under ./application/Bootstrap.php */\n\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n        public function\n_initPlugin\n(\nYaf_Dispatcher $dispatcher\n) {\n\n/* register a plugin */\n\n$dispatcher\n->\nregisterPlugin\n(new\nTestPlugin\n());\n        }\n   }\n\n/* plugin class should be placed under ./application/plugins/ */\n\nclass\nTestPlugin\nextends\nYaf_Plugin_Abstract\n{\n        public function\nrouterStartup\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\n/* before router\n               in this hook,  user can do some url rewrite */\n\nvar_dump\n(\n\"routerStartup\"\n);\n        }\n        public function\nrouterShutdown\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\n/* router complete\n               in this hook, user can do login check */\n\nvar_dump\n(\n\"routerShutdown\"\n);\n        }\n        public function\ndispatchLoopStartup\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\nvar_dump\n(\n\"dispatchLoopStartup\"\n);\n        }\n        public function\npreDispatch\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\nvar_dump\n(\n\"preDispatch\"\n);\n        }\n        public function\npostDispatch\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\nvar_dump\n(\n\"postDispatch\"\n);\n        }\n        public function\ndispatchLoopShutdown\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\n/* final hook\n               in this hook user can do logging or implement layout */\n\nvar_dump\n(\n\"dispatchLoopShutdown\"\n);\n        }\n   }\n   Class\nIndexController\nextends\nYaf_Controller_Abstract\n{\n        public function\nindexAction\n() {\n            return\nFALSE\n;\n//prevent rendering\n\n}\n   }\n\n$config\n= array(\n\n\"application\"\n=> array(\n\n\"directory\"\n=>\ndirname\n(\n__FILE__\n) .\n\"/application/\"\n,\n       ),\n   );\n\n\n$app\n= new\nYaf_Application\n(\n$config\n);\n\n$app\n->\nbootstrap\n()->\nrun\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Plugin_Abstract::routerShutdown()example",
    "output": "<?php\nclass\nUserInitPlugin\nextends\nYaf_Plugin_Abstract\n{\n    public function\nrouterShutdown\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\n$controller\n=\n$request\n->\ngetControllerName\n();\n\n/**\n         * Use access controller is unecessary for APIs\n         */\n\nif (\nin_array\n(\nstrtolower\n(\n$controller\n), array(\n\n'api'\n,\n        ))) {\n            return\nTRUE\n;\n        }\n\n        if (\nYaf_Session\n::\ngetInstance\n()->\nhas\n(\n\"login\"\n)) {\n            return\nTRUE\n;\n        }\n\n\n/* Use access check failed, need to login */\n\n$response\n->\nsetRedirect\n(\n\"http://yourdomain.com/login/\"\n);\n        return\nFALSE\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Response_Abstract::appendBody()example",
    "output": "<?php\n$response\n= new\nYaf_Response_Http\n();\n$response\n->\nsetBody\n(\n\"Hello\"\n)->\nappendBody\n(\n\" World\"\n);\necho\n$response\n;\n?>"
  },
  {
    "input": "Example #1 Yaf_Response_Abstract::getBody()example",
    "output": "<?php\n$response\n= new\nYaf_Response_Http\n();\n$response\n->\nsetBody\n(\n\"Hello\"\n)->\nsetBody\n(\n\" World\"\n,\n\"footer\"\n);\nvar_dump\n(\n$response\n->\ngetBody\n());\n//default\nvar_dump\n(\n$response\n->\ngetBody\n(\nYaf_Response_Abstract\n::\nDEFAULT_BODY\n));\n//same as above\nvar_dump\n(\n$response\n->\ngetBody\n(\n\"footer\"\n));\nvar_dump\n(\n$response\n->\ngetBody\n(\nNULL\n));\n//get all\n?>"
  },
  {
    "input": "Example #1 Yaf_Response_Abstract::prependBody()example",
    "output": "<?php\n$response\n= new\nYaf_Response_Http\n();\n$response\n->\nsetBody\n(\n\"World\"\n)->\nprependBody\n(\n\"Hello \"\n);\necho\n$response\n;\n?>"
  },
  {
    "input": "Example #1 Yaf_Response_Abstract::response()example",
    "output": "<?php\n$response\n= new\nYaf_Response_Http\n();\n$response\n->\nsetBody\n(\n\"Hello\"\n)->\nsetBody\n(\n\" World\"\n,\n\"footer\"\n);\n$response\n->\nresponse\n();\n?>"
  },
  {
    "input": "Example #1 Yaf_Response_Abstract::setBody()example",
    "output": "<?php\n$response\n= new\nYaf_Response_Http\n();\n$response\n->\nsetBody\n(\n\"Hello\"\n)->\nsetBody\n(\n\" World\"\n,\n\"footer\"\n);\nprint_r\n(\n$response\n);\necho\n$response\n;\n?>"
  },
  {
    "input": "Example #1 Yaf_Route_Map::assemble()example",
    "output": "<?php\n$router\n= new\nYaf_Router\n();\n$route\n= new\nYaf_Route_Map\n();\n$router\n->\naddRoute\n(\n\"map\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'map'\n)->\nassemble\n(\n                        array(\n\n':c'\n=>\n'foo_bar'\n\n),\n                        array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n\n)\n                   )\n);\n$route\n= new\nYaf_Route_Map\n(\ntrue\n,\n'_'\n);\n$router\n->\naddRoute\n(\n\"map\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'map'\n)->\nassemble\n(\n                        array(\n\n':a'\n=>\n'foo_bar'\n\n),\n                        array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n\n)\n                   )\n);"
  },
  {
    "input": "Example #1 Yaf_Route_Map example",
    "output": "<?php\n\n/**\n    * Add a map route to Yaf_Router route stack\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_Map\n());\n?>"
  },
  {
    "input": "Example #2 Yaf_Route_Map example",
    "output": "<?php\n\n/**\n    * Add a map route to Yaf_Router route stack\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_Map\n(\ntrue\n,\n\"_\"\n));\n?>"
  },
  {
    "input": "Example #3 Yaf_Route_Map example",
    "output": "<?php\n\n/**\n    * Add a map route to Yaf_Router route stack by calling addconfig\n    */\n\n$config\n= array(\n\n\"name\"\n=> array(\n\n\"type\"\n=>\n\"map\"\n,\n//Yaf_Route_Map route\n\n\"controllerPrefer\"\n=>\nFALSE\n,\n\n\"delimiter\"\n=>\n\"#!\"\n,\n           ),\n    );\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddConfig\n(\n        new\nYaf_Config_Simple\n(\n$config\n));\n?>"
  },
  {
    "input": "Example #1 Yaf_Route_Regex::assemble()example",
    "output": "<?php\n$router\n= new\nYaf_Router\n();\n$route\n= new\nYaf_Route_Regex\n(\n\n\"#^/product/([^/]+)/([^/])+#\"\n,\n            array(\n\n'controller'\n=>\n\"product\"\n,\n//route to product controller,\n\n),\n            array(),\n            array(),\n\n'/:m/:c/:a'\n\n);\n$router\n->\naddRoute\n(\n\"regex\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'regex'\n)->\nassemble\n(\n            array(\n\n':m'\n=>\n'module'\n,\n\n':c'\n=>\n'controller'\n,\n\n':a'\n=>\n'action'\n\n),\n            array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n\n'tval2'\n\n)\n            )\n        );"
  },
  {
    "input": "Example #1 Yaf_Route_Regex example",
    "output": "<?php\n\n/**\n    * Add a regex route to Yaf_Router route stack\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_Regex\n(\n\n\"#^/product/([^/]+)/([^/])+#\"\n,\n//match request uri leading \"/product\"\n\narray(\n\n'controller'\n=>\n\"product\"\n,\n//route to product controller,\n\n),\n           array(\n\n1\n=>\n\"name\"\n,\n// now you can call $request->getParam(\"name\")\n\n2\n=>\n\"id\"\n,\n// to get the first captrue in the match pattern.\n\n)\n        )\n    );\n?>"
  },
  {
    "input": "Example #2 Yaf_Route_Regex (as of 2.3.0) example",
    "output": "<?php\n\n/**\n    * Use match result as MVC name\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_Regex\n(\n\n\"#^/product/([^/]+)/([^/])+#i\"\n,\n//match request uri leading \"/product\"\n\narray(\n\n'controller'\n=>\n\":name\"\n,\n// route to :name, which is $1 in the match result as controller name\n\n),\n           array(\n\n1\n=>\n\"name\"\n,\n// now you can call $request->getParam(\"name\")\n\n2\n=>\n\"id\"\n,\n// to get the first captrue in the match pattern.\n\n)\n        )\n    );\n?>"
  },
  {
    "input": "Example #3 Yaf_Route_Regex and named capture group (as of 2.3.0) example",
    "output": "<?php\n\n/**\n    * Use match result as MVC name\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_Regex\n(\n\n\"#^/product/(?<name>[^/]+)/([^/])+#i\"\n,\n//match request uri leading \"/product\"\n\narray(\n\n'controller'\n=>\n\":name\"\n,\n// route to :name,\n                                    // which is named capture group 'name' in the match result as controller name\n\n),\n           array(\n\n2\n=>\n\"id\"\n,\n// to get the first captrue in the match pattern.\n\n)\n        )\n    );\n?>"
  },
  {
    "input": "Example #4 Yaf_Route_Regex example",
    "output": "<?php\n\n/**\n    * Add a regex route to Yaf_Router route stack by calling addconfig\n    */\n\n$config\n= array(\n\n\"name\"\n=> array(\n\n\"type\"\n=>\n\"regex\"\n,\n//Yaf_Route_Regex route\n\n\"match\"\n=>\n\"#(.*)#\"\n,\n//match arbitrary request uri\n\n\"route\"\n=> array(\n\n'controller'\n=>\n\"product\"\n,\n//route to product controller,\n\n'action'\n=>\n\"dummy\"\n,\n//route to dummy action\n\n),\n\n\"map\"\n=> array(\n\n1\n=>\n\"uri\"\n,\n// now you can call $request->getParam(\"uri\")\n\n),\n        ),\n    );\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddConfig\n(\n        new\nYaf_Config_Simple\n(\n$config\n));\n?>"
  },
  {
    "input": "Example #1 Yaf_Route_Rewrite::assemble()example",
    "output": "router = new Yaf_Router();\n$route  = new Yaf_Route_Rewrite(\n                \"/product/:name/:id/*\",\n                array(\n                        'controller' => \"product\",\n                ),\n                array()\n);\n$router->addRoute(\"rewrite\", $route);\nvar_dump($router->getRoute('rewrite')->assemble(\n                        array(\n                                ':name' => 'foo',\n                                ':id' => 'bar',\n                                ':tmpkey1' => 'tmpval1'\n                        ),\n                        array(\n                                'tkey1' => 'tval1',\n                                'tkey2' => 'tval2'\n                             )\n                        )\n);"
  },
  {
    "input": "Example #1 Yaf_Route_Rewrite example",
    "output": "<?php\n\n/**\n    * Add a rewrite route to Yaf_Router route stack\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\"name\"\n,\n        new\nYaf_Route_rewrite\n(\n\n\"/product/:name/:id/*\"\n,\n//match request uri leading \"/product\"\n\narray(\n\n'controller'\n=>\n\"product\"\n,\n//route to product controller,\n\n),\n        )\n    );\n?>"
  },
  {
    "input": "Example #2 Yaf_Route_Rewrite example",
    "output": "<?php\n\n/**\n    * Add a rewrite route to Yaf_Router route stack by calling addconfig\n    */\n\n$config\n= array(\n\n\"name\"\n=> array(\n\n\"type\"\n=>\n\"rewrite\"\n,\n//Yaf_Route_Rewrite route\n\n\"match\"\n=>\n\"/user-list/:id\"\n,\n//match only /user/list/?/\n\n\"route\"\n=> array(\n\n'controller'\n=>\n\"user\"\n,\n//route to user controller,\n\n'action'\n=>\n\"list\"\n,\n//route to list action\n\n),\n        ),\n    );\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddConfig\n(\n        new\nYaf_Config_Simple\n(\n$config\n));\n?>"
  },
  {
    "input": "Example #3 Yaf_Route_Rewrite (as of 2.3.0) example",
    "output": "<?php\n\n/**\n    * Add a rewrite route use match result as m/c/a name\n    */\n\n$config\n= array(\n\n\"name\"\n=> array(\n\n\"type\"\n=>\n\"rewrite\"\n,\n\n\"match\"\n=>\n\"/user-list/:a/:id\"\n,\n//match only /user-list/*\n\n\"route\"\n=> array(\n\n'controller'\n=>\n\"user\"\n,\n//route to user controller,\n\n'action'\n=>\n\":a\"\n,\n//route to :a action\n\n),\n        ),\n    );\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddConfig\n(\n        new\nYaf_Config_Simple\n(\n$config\n));\n?>"
  },
  {
    "input": "Example #2 Yaf_Dispatcher::autoConfig()example",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n    public function\n_initConfig\n() {\n\n$config\n=\nYaf_Application\n::\napp\n()->\ngetConfig\n();\n\nYaf_Registry\n::\nset\n(\n\"config\"\n,\n$config\n);\n    }\n    public function\n_initRoute\n(\nYaf_Dispatcher $dispatcher\n) {\n\n$router\n=\n$dispatcher\n->\ngetRouter\n();\n\n/**\n         * we can add some pre-defined routes in application.ini\n         */\n\n$router\n->\naddConfig\n(\nYaf_Registry\n::\nget\n(\n\"config\"\n)->\nroutes\n);\n    }\n?>"
  },
  {
    "input": "Example #1 Yaf_Dispatcher::autoRender()example",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n    public function\n_initConfig\n() {\n\n$config\n=\nYaf_Application\n::\napp\n()->\ngetConfig\n();\n\nYaf_Registry\n::\nset\n(\n\"config\"\n,\n$config\n);\n    }\n    public function\n_initRoute\n(\nYaf_Dispatcher $dispatcher\n) {\n\n$router\n=\n$dispatcher\n->\ngetRouter\n();\n\n/**\n         * we can add some pre-defined routes in application.ini\n         */\n\n$router\n->\naddConfig\n(\nYaf_Registry\n::\nget\n(\n\"config\"\n)->\nroutes\n);\n\n/**\n         * add a Rewrite route, then for a request uri:\n         * http://example.com/product/list/22/foo\n         * will be matched by this route, and result:\n         *\n         *  [module] =>\n         *  [controller] => product\n         *  [action] => info\n         *  [method] => GET\n         *  [params:protected] => Array\n         *      (\n         *          [id] => 22\n         *          [name] => foo\n         *      )\n         *\n         */\n\n$route\n= new\nYaf_Route_Rewrite\n(\n\n\"/product/list/:id/:name\"\n,\n            array(\n\n\"controller\"\n=>\n\"product\"\n,\n\n\"action\"\n=>\n\"info\"\n,\n            )\n        );\n\n\n$router\n->\naddRoute\n(\n'dummy'\n,\n$route\n);\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Register some routes in Bootstrap",
    "output": "<?php\nclass\nBootstrap\nextends\nYaf_Bootstrap_Abstract\n{\n    public function\n_initConfig\n() {\n\n$config\n=\nYaf_Application\n::\napp\n()->\ngetConfig\n();\n\nYaf_Registry\n::\nset\n(\n\"config\"\n,\n$config\n);\n    }\n    public function\n_initRoute\n(\nYaf_Dispatcher $dispatcher\n) {\n\n$router\n=\n$dispatcher\n->\ngetRouter\n();\n\n$rewrite_route\n= new\nYaf_Route_Rewrite\n(\n\n\"/product/list/:page\"\n,\n            array(\n\n\"controller\"\n=>\n\"product\"\n,\n\n\"action\"\n=>\n\"list\"\n,\n            )\n        );\n\n$regex_route\n= new\nYaf_Route_Rewrite\n(\n\n\"#^/product/info/(\\d+)\"\n,\n            array(\n\n\"controller\"\n=>\n\"product\"\n,\n\n\"action\"\n=>\n\"info\"\n,\n            )\n        );\n\n\n$router\n->\naddRoute\n(\n'rewrite'\n,\n$rewrite_route\n)->\naddRoute\n(\n'regex'\n,\n$regex_route\n);\n    }\n\n/**\n     * register plugin\n     */\n\npublic function\n__initPlugins\n(\nYaf_Dispatcher $dispatcher\n) {\n\n$dispatcher\n->\nregisterPlugin\n(new\nDummyPlugin\n());\n    }\n}\n?>"
  },
  {
    "input": "Example #2 plugin Dummy.php (under application.directory/plugins)",
    "output": "<?php\nclass\nDummyPlugin\nextends\nYaf_Plugin_Abstract\n{\n    public function\nrouterShutdown\n(\nYaf_Request_Abstract $request\n,\nYaf_Response_Abstract $response\n) {\n\nvar_dump\n(\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\ngetCurrentRoute\n());\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Yaf_Route_Simple::assemble()example",
    "output": "<?php\n$router\n= new\nYaf_Router\n();\n$route\n= new\nYaf_Route_Simple\n(\n'm'\n,\n'c'\n,\n'a'\n);\n$router\n->\naddRoute\n(\n\"simple\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'simple'\n)->\nassemble\n(\n            array(\n\n':a'\n=>\n'yafaction'\n,\n\n'tkey'\n=>\n'tval'\n,\n\n':c'\n=>\n'yafcontroller'\n,\n\n':m'\n=>\n'yafmodule'\n\n),\n            array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n\n)\n            ));"
  },
  {
    "input": "Example #1 Yaf_Route_Simple::route()example",
    "output": "<?php\n   $route\n= new\nYaf_Route_Simple\n(\n\"m\"\n,\n\"controller\"\n,\n\"act\"\n);\n\nYaf_Router\n::\ngetInstance\n()->\naddRoute\n(\n\"simple\"\n,\n$route\n);\n?>"
  },
  {
    "input": "Example #1 Yaf_Route_Static::assemble()example",
    "output": "<?php\n$router\n= new\nYaf_Router\n();\n$route\n= new\nYaf_Route_Static\n();\n$router\n->\naddRoute\n(\n\"static\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'static'\n)->\nassemble\n(\n            array(\n\n':a'\n=>\n'yafaction'\n,\n\n'tkey'\n=>\n'tval'\n,\n\n':c'\n=>\n'yafcontroller'\n,\n\n':m'\n=>\n'yafmodule'\n\n),\n        )\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'static'\n)->\nassemble\n(\n            array(\n\n':a'\n=>\n'yafaction'\n,\n\n'tkey'\n=>\n'tval'\n,\n\n':c'\n=>\n'yafcontroller'\n,\n\n':m'\n=>\n'yafmodule'\n\n),\n            array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n\n)\n        )\n);"
  },
  {
    "input": "Example #1 Yaf_Route_Supervar::assemble() example",
    "output": "<?php\n$router\n= new\nYaf_Router\n();\n$route\n= new\nYaf_Route_Supervar\n(\n'r'\n);\n$router\n->\naddRoute\n(\n\"supervar\"\n,\n$route\n);\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'supervar'\n)->\nassemble\n(\n        array(\n\n':a'\n=>\n'yafaction'\n,\n\n'tkey'\n=>\n'tval'\n,\n\n':c'\n=>\n'yafcontroller'\n,\n\n':m'\n=>\n'yafmodule'\n\n),\n        array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n\n)\n));\ntry {\nvar_dump\n(\n$router\n->\ngetRoute\n(\n'supervar'\n)->\nassemble\n(\n        array(\n\n':a'\n=>\n'yafaction'\n,\n\n'tkey'\n=>\n'tval'\n,\n\n':m'\n=>\n'yafmodule'\n\n),\n        array(\n\n'tkey1'\n=>\n'tval1'\n,\n\n'tkey2'\n=>\n'tval2'\n,\n\n1\n=> array(),\n        )\n));\n} catch (\nException $e\n) {\n\nvar_dump\n(\n$e\n->\ngetMessage\n());\n}"
  },
  {
    "input": "Example #1 Yaf_Route_Supervar example",
    "output": "<?php\n\n/**\n    * Add a supervar route to Yaf_Router route stack\n    */\n\nYaf_Dispatcher\n::\ngetInstance\n()->\ngetRouter\n()->\naddRoute\n(\n\n\"name\"\n,\n        new\nYaf_Route_Supervar\n(\n\"r\"\n)\n    );\n?>"
  },
  {
    "input": "Example #1 Taint()example",
    "output": "<?php\n$a\n=\ntrim\n(\n$_GET\n[\n'a'\n]);\n$file_name\n=\n'/tmp'\n.\n$a\n;\n$output\n=\n\"Welcome,\n{\n$a\n}\n !!!\"\n;\n$var\n=\n\"output\"\n;\n$sql\n=\n\"Select *  from \"\n.\n$a\n;\n$sql\n.=\n\"ooxx\"\n;\necho\n$output\n;\nprint $\n$var\n;\ninclude\n$file_name\n;\nmysql_query\n(\n$sql\n);\n?>"
  },
  {
    "input": "Example #1 Vector",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\n$vector\n->\npush\n(\n'a'\n);\n$vector\n->\npush\n(\n'b'\n,\n'c'\n);\n$vector\n[] =\n'd'\n;\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #2 Map",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\n$map\n->\nput\n(\n'a'\n,\n1\n);\n$map\n->\nput\n(\n'b'\n,\n2\n);\n$map\n[\n'c'\n] =\n3\n;\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Collection::clear() example",
    "output": "<?php\n$collection\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$collection\n);\n$collection\n->\nclear\n();\nprint_r\n(\n$collection\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Collection::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n$b\n->\npush\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Collection::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Collection::toArray() example",
    "output": "<?php\n$collection\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$collection\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Hashable::hash() example",
    "output": "<?php\nclass\nHashableObject\nimplements\n\\Ds\\Hashable\n{\n    private\n$name\n;\n    private\n$email\n;\n    public function\n__construct\n(\n$name\n,\n$email\n)\n    {\n\n$this\n->\nname\n=\n$name\n;\n\n$this\n->\nemail\n=\n$email\n;\n    }\n\n/**\n     * Should return the same value for all equal objects, but doesn't have to\n     * be unique. This value will not be used to determine equality.\n     */\n\npublic function\nhash\n()\n    {\n        return\n$this\n->\nemail\n;\n    }\n\n/**\n     * This determines equality, usually during a hash table lookup to determine\n     * if the bucket's key matches the lookup key. The hash has to be equal if\n     * the objects are equal, otherwise this determination wouldn't be reached.\n     */\n\npublic function\nequals\n(\n$obj\n):\nbool\n\n{\n        return\n$this\n->\nname\n===\n$obj\n->\nname\n\n&&\n$this\n->\nemail\n===\n$obj\n->\nemail\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::allocate() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$sequence\n->\ncapacity\n());\n$vector\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$sequence\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::apply() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$sequence\n->\napply\n(function(\n$value\n) { return\n$value\n*\n2\n; });\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::capacity() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$sequence\n->\ncapacity\n());\n$sequence\n->\npush\n(...\nrange\n(\n1\n,\n50\n));\nvar_dump\n(\n$sequence\n->\ncapacity\n());\n$sequence\n[] =\n\"a\"\n;\nvar_dump\n(\n$sequence\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::contains() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n'a'\n,\n'b'\n,\n'c'\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\ncontains\n(\n'a'\n));\n// true\nvar_dump\n(\n$sequence\n->\ncontains\n(\n'a'\n,\n'b'\n));\n// true\nvar_dump\n(\n$sequence\n->\ncontains\n(\n'c'\n,\n'd'\n));\n// false\nvar_dump\n(\n$sequence\n->\ncontains\n(...[\n'c'\n,\n'b'\n,\n'a'\n]));\n// true\n// Always strict\nvar_dump\n(\n$sequence\n->\ncontains\n(\n1\n));\n// true\nvar_dump\n(\n$sequence\n->\ncontains\n(\n'1'\n));\n// false\nvar_dump\n(\n$sequece\n->\ncontains\n(...[]));\n// true\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::filter() example using callback function",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$sequence\n->\nfilter\n(function(\n$value\n) {\n    return\n$value\n%\n2\n==\n0\n;\n}));\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::filter() example without a callback function",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n0\n,\n1\n,\n'a'\n,\ntrue\n,\nfalse\n]);\nvar_dump\n(\n$sequence\n->\nfilter\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::find() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n1\n,\ntrue\n]);\nvar_dump\n(\n$sequence\n->\nfind\n(\n\"a\"\n));\n// 0\nvar_dump\n(\n$sequence\n->\nfind\n(\n\"b\"\n));\n// false\nvar_dump\n(\n$sequence\n->\nfind\n(\n\"1\"\n));\n// false\nvar_dump\n(\n$sequence\n->\nfind\n(\n1\n));\n// 1\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::first() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::get() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$sequence\n->\nget\n(\n0\n));\nvar_dump\n(\n$sequence\n->\nget\n(\n1\n));\nvar_dump\n(\n$sequence\n->\nget\n(\n2\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::get() example using array syntax",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$sequence\n[\n0\n]);\nvar_dump\n(\n$sequence\n[\n1\n]);\nvar_dump\n(\n$sequence\n[\n2\n]);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::insert() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n();\n$sequence\n->\ninsert\n(\n0\n,\n\"e\"\n);\n// [e]\n$sequence\n->\ninsert\n(\n1\n,\n\"f\"\n);\n// [e, f]\n$sequence\n->\ninsert\n(\n2\n,\n\"g\"\n);\n// [e, f, g]\n$sequence\n->\ninsert\n(\n0\n,\n\"a\"\n,\n\"b\"\n);\n// [a, b, e, f, g]\n$sequence\n->\ninsert\n(\n2\n, ...[\n\"c\"\n,\n\"d\"\n]);\n// [a, b, c, d, e, f, g]\nvar_dump\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::join() example using a separator string",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\njoin\n(\n\"|\"\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::join() example without a separator string",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::last() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nlast\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::map() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$sequence\n->\nmap\n(function(\n$value\n) { return\n$value\n*\n2\n; }));\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::merge() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nmerge\n([\n4\n,\n5\n,\n6\n]));\nvar_dump\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::pop() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\npop\n());\nvar_dump\n(\n$sequence\n->\npop\n());\nvar_dump\n(\n$sequence\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::push() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n();\n$sequence\n->\npush\n(\n\"a\"\n);\n$sequence\n->\npush\n(\n\"b\"\n);\n$sequence\n->\npush\n(\n\"c\"\n,\n\"d\"\n);\n$sequence\n->\npush\n(...[\n\"e\"\n,\n\"f\"\n]);\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::reduce() with initial value example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$callback\n= function(\n$carry\n,\n$value\n) {\n    return\n$carry\n*\n$value\n;\n};\nvar_dump\n(\n$sequence\n->\nreduce\n(\n$callback\n,\n5\n));\n// Iterations:\n//\n// $carry = $initial = 5\n//\n// $carry = $carry * 1 =  5\n// $carry = $carry * 2 = 10\n// $carry = $carry * 3 = 30\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::reduce() without an initial value example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nreduce\n(function(\n$carry\n,\n$value\n) {\n    return\n$carry\n+\n$value\n+\n5\n;\n}));\n// Iterations:\n//\n// $carry = $initial = null\n//\n// $carry = $carry + 1 + 5 =  6\n// $carry = $carry + 2 + 5 = 13\n// $carry = $carry + 3 + 5 = 21\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::remove() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$sequence\n->\nremove\n(\n1\n));\nvar_dump\n(\n$sequence\n->\nremove\n(\n0\n));\nvar_dump\n(\n$sequence\n->\nremove\n(\n0\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::reverse() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$sequence\n->\nreverse\n();\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::reversed() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nprint_r\n(\n$sequence\n->\nreversed\n());\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::rotate() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n]);\n$sequence\n->\nrotate\n(\n1\n);\n// \"a\" is shifted, then pushed.\nprint_r\n(\n$sequence\n);\n$sequence\n->\nrotate\n(\n2\n);\n// \"b\" and \"c\" are both shifted, the pushed.\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::set() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$sequence\n->\nset\n(\n1\n,\n\"_\"\n);\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::set() example using array syntax",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$sequence\n[\n1\n] =\n\"_\"\n;\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::shift() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$sequence\n->\nshift\n());\nvar_dump\n(\n$sequence\n->\nshift\n());\nvar_dump\n(\n$sequence\n->\nshift\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::slice() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n]);\n// Slice from 2 onwards\nprint_r\n(\n$sequence\n->\nslice\n(\n2\n));\n// Slice from 1, for a length of 3\nprint_r\n(\n$sequence\n->\nslice\n(\n1\n,\n3\n));\n// Slice from 1 onwards\nprint_r\n(\n$sequence\n->\nslice\n(\n1\n));\n// Slice from 2 from the end onwards\nprint_r\n(\n$sequence\n->\nslice\n(-\n2\n));\n// Slice from 1 to 1 from the end\nprint_r\n(\n$sequence\n->\nslice\n(\n1\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::sort() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sequence\n->\nsort\n();\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::sort() example using a comparator",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sequence\n->\nsort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::sorted() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\nprint_r\n(\n$sequence\n->\nsorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::sorted() example using a comparator",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sorted\n=\n$sequence\n->\nsorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::sum() integer example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Sequence::sum() float example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2.5\n,\n3\n]);\nvar_dump\n(\n$sequence\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Sequence::unshift() example",
    "output": "<?php\n$sequence\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$sequence\n->\nunshift\n(\n\"a\"\n);\n$sequence\n->\nunshift\n(\n\"b\"\n,\n\"c\"\n);\nprint_r\n(\n$sequence\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::allocate() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$vector\n->\ncapacity\n());\n$vector\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$vector\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::apply() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$vector\n->\napply\n(function(\n$value\n) { return\n$value\n*\n2\n; });\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::capacity() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$vector\n->\ncapacity\n());\n$vector\n->\npush\n(...\nrange\n(\n1\n,\n50\n));\nvar_dump\n(\n$vector\n->\ncapacity\n());\n$vector\n[] =\n\"a\"\n;\nvar_dump\n(\n$vector\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::clear() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$vector\n);\n$vector\n->\nclear\n();\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::__construct() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$vector\n);\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::contains() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n'a'\n,\n'b'\n,\n'c'\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\ncontains\n(\n'a'\n));\n// true\nvar_dump\n(\n$vector\n->\ncontains\n(\n'a'\n,\n'b'\n));\n// true\nvar_dump\n(\n$vector\n->\ncontains\n(\n'c'\n,\n'd'\n));\n// false\nvar_dump\n(\n$vector\n->\ncontains\n(...[\n'c'\n,\n'b'\n,\n'a'\n]));\n// true\n// Always strict\nvar_dump\n(\n$vector\n->\ncontains\n(\n1\n));\n// true\nvar_dump\n(\n$vector\n->\ncontains\n(\n'1'\n));\n// false\nvar_dump\n(\n$sequece\n->\ncontains\n(...[]));\n// true\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n// Updating the copy doesn't affect the original\n$b\n->\npush\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::filter() example using callback function",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$vector\n->\nfilter\n(function(\n$value\n) {\n    return\n$value\n%\n2\n==\n0\n;\n}));\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::filter() example without a callback function",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n0\n,\n1\n,\n'a'\n,\ntrue\n,\nfalse\n]);\nvar_dump\n(\n$vector\n->\nfilter\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::find() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n1\n,\ntrue\n]);\nvar_dump\n(\n$vector\n->\nfind\n(\n\"a\"\n));\n// 0\nvar_dump\n(\n$vector\n->\nfind\n(\n\"b\"\n));\n// false\nvar_dump\n(\n$vector\n->\nfind\n(\n\"1\"\n));\n// false\nvar_dump\n(\n$vector\n->\nfind\n(\n1\n));\n// 1\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::first() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::get() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$vector\n->\nget\n(\n0\n));\nvar_dump\n(\n$vector\n->\nget\n(\n1\n));\nvar_dump\n(\n$vector\n->\nget\n(\n2\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::get() example using array syntax",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$vector\n[\n0\n]);\nvar_dump\n(\n$vector\n[\n1\n]);\nvar_dump\n(\n$vector\n[\n2\n]);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::insert() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\n$vector\n->\ninsert\n(\n0\n,\n\"e\"\n);\n// [e]\n$vector\n->\ninsert\n(\n1\n,\n\"f\"\n);\n// [e, f]\n$vector\n->\ninsert\n(\n2\n,\n\"g\"\n);\n// [e, f, g]\n$vector\n->\ninsert\n(\n0\n,\n\"a\"\n,\n\"b\"\n);\n// [a, b, e, f, g]\n$vector\n->\ninsert\n(\n2\n, ...[\n\"c\"\n,\n\"d\"\n]);\n// [a, b, c, d, e, f, g]\nvar_dump\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Vector\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::join() example using a separator string",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\njoin\n(\n\"|\"\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::join() example without a separator string",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::last() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nlast\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::map() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$vector\n->\nmap\n(function(\n$value\n) { return\n$value\n*\n2\n; }));\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::merge() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nmerge\n([\n4\n,\n5\n,\n6\n]));\nvar_dump\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::pop() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\npop\n());\nvar_dump\n(\n$vector\n->\npop\n());\nvar_dump\n(\n$vector\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::push() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n();\n$vector\n->\npush\n(\n\"a\"\n);\n$vector\n->\npush\n(\n\"b\"\n);\n$vector\n->\npush\n(\n\"c\"\n,\n\"d\"\n);\n$vector\n->\npush\n(...[\n\"e\"\n,\n\"f\"\n]);\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::reduce() with initial value example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$callback\n= function(\n$carry\n,\n$value\n) {\n    return\n$carry\n*\n$value\n;\n};\nvar_dump\n(\n$vector\n->\nreduce\n(\n$callback\n,\n5\n));\n// Iterations:\n//\n// $carry = $initial = 5\n//\n// $carry = $carry * 1 =  5\n// $carry = $carry * 2 = 10\n// $carry = $carry * 3 = 30\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::reduce() without an initial value example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nreduce\n(function(\n$carry\n,\n$value\n) {\n    return\n$carry\n+\n$value\n+\n5\n;\n}));\n// Iterations:\n//\n// $carry = $initial = null\n//\n// $carry = $carry + 1 + 5 =  6\n// $carry = $carry + 2 + 5 = 13\n// $carry = $carry + 3 + 5 = 21\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::remove() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$vector\n->\nremove\n(\n1\n));\nvar_dump\n(\n$vector\n->\nremove\n(\n0\n));\nvar_dump\n(\n$vector\n->\nremove\n(\n0\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::reverse() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$vector\n->\nreverse\n();\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::reversed() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nprint_r\n(\n$vector\n->\nreversed\n());\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::rotate() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n]);\n$vector\n->\nrotate\n(\n1\n);\n// \"a\" is shifted, then pushed.\nprint_r\n(\n$vector\n);\n$vector\n->\nrotate\n(\n2\n);\n// \"b\" and \"c\" are both shifted, the pushed.\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::set() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$vector\n->\nset\n(\n1\n,\n\"_\"\n);\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::set() example using array syntax",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$vector\n[\n1\n] =\n\"_\"\n;\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::shift() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$vector\n->\nshift\n());\nvar_dump\n(\n$vector\n->\nshift\n());\nvar_dump\n(\n$vector\n->\nshift\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::slice() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n]);\n// Slice from 2 onwards\nprint_r\n(\n$vector\n->\nslice\n(\n2\n));\n// Slice from 1, for a length of 3\nprint_r\n(\n$vector\n->\nslice\n(\n1\n,\n3\n));\n// Slice from 1 onwards\nprint_r\n(\n$vector\n->\nslice\n(\n1\n));\n// Slice from 2 from the end onwards\nprint_r\n(\n$vector\n->\nslice\n(-\n2\n));\n// Slice from 1 to 1 from the end\nprint_r\n(\n$vector\n->\nslice\n(\n1\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::sort() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$vector\n->\nsort\n();\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::sort() example using a comparator",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$vector\n->\nsort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::sorted() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\nprint_r\n(\n$vector\n->\nsorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::sorted() example using a comparator",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sorted\n=\n$vector\n->\nsorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::sum() integer example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Vector::sum() float example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2.5\n,\n3\n]);\nvar_dump\n(\n$vector\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::toArray() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$vector\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Vector::unshift() example",
    "output": "<?php\n$vector\n= new\n\\Ds\\Vector\n([\n1\n,\n2\n,\n3\n]);\n$vector\n->\nunshift\n(\n\"a\"\n);\n$vector\n->\nunshift\n(\n\"b\"\n,\n\"c\"\n);\nprint_r\n(\n$vector\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::allocate() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n();\nvar_dump\n(\n$deque\n->\ncapacity\n());\n$deque\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$deque\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::apply() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\n$deque\n->\napply\n(function(\n$value\n) { return\n$value\n*\n2\n; });\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::capacity() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n();\nvar_dump\n(\n$deque\n->\ncapacity\n());\n$deque\n->\npush\n(...\nrange\n(\n1\n,\n50\n));\nvar_dump\n(\n$deque\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::clear() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$deque\n);\n$deque\n->\nclear\n();\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::__construct() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n();\nvar_dump\n(\n$deque\n);\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::contains() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n'a'\n,\n'b'\n,\n'c'\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\ncontains\n(\n'a'\n));\n// true\nvar_dump\n(\n$deque\n->\ncontains\n(\n'a'\n,\n'b'\n));\n// true\nvar_dump\n(\n$deque\n->\ncontains\n(\n'c'\n,\n'd'\n));\n// false\nvar_dump\n(\n$deque\n->\ncontains\n(...[\n'c'\n,\n'b'\n,\n'a'\n]));\n// true\n// Always strict\nvar_dump\n(\n$deque\n->\ncontains\n(\n1\n));\n// true\nvar_dump\n(\n$deque\n->\ncontains\n(\n'1'\n));\n// false\nvar_dump\n(\n$sequece\n->\ncontains\n(...[]));\n// true\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n$b\n->\npush\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::filter() example using callback function",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$deque\n->\nfilter\n(function(\n$value\n) {\n    return\n$value\n%\n2\n==\n0\n;\n}));\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::filter() example without a callback function",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n0\n,\n1\n,\n'a'\n,\ntrue\n,\nfalse\n]);\nvar_dump\n(\n$deque\n->\nfilter\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::find() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n1\n,\ntrue\n]);\nvar_dump\n(\n$deque\n->\nfind\n(\n\"a\"\n));\n// 0\nvar_dump\n(\n$deque\n->\nfind\n(\n\"b\"\n));\n// false\nvar_dump\n(\n$deque\n->\nfind\n(\n\"1\"\n));\n// false\nvar_dump\n(\n$deque\n->\nfind\n(\n1\n));\n// 1\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::first() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::get() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$deque\n->\nget\n(\n0\n));\nvar_dump\n(\n$deque\n->\nget\n(\n1\n));\nvar_dump\n(\n$deque\n->\nget\n(\n2\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::get() example using array syntax",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$deque\n[\n0\n]);\nvar_dump\n(\n$deque\n[\n1\n]);\nvar_dump\n(\n$deque\n[\n2\n]);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::insert() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n();\n$deque\n->\ninsert\n(\n0\n,\n\"e\"\n);\n// [e]\n$deque\n->\ninsert\n(\n1\n,\n\"f\"\n);\n// [e, f]\n$deque\n->\ninsert\n(\n2\n,\n\"g\"\n);\n// [e, f, g]\n$deque\n->\ninsert\n(\n0\n,\n\"a\"\n,\n\"b\"\n);\n// [a, b, e, f, g]\n$deque\n->\ninsert\n(\n2\n, ...[\n\"c\"\n,\n\"d\"\n]);\n// [a, b, c, d, e, f, g]\nvar_dump\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Deque\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::join() example using a separator string",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\njoin\n(\n\"|\"\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::join() example without a separator string",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::last() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nlast\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::map() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$deque\n->\nmap\n(function(\n$value\n) { return\n$value\n*\n2\n; }));\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::merge() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nmerge\n([\n4\n,\n5\n,\n6\n]));\nvar_dump\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::pop() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\npop\n());\nvar_dump\n(\n$deque\n->\npop\n());\nvar_dump\n(\n$deque\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::push() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n();\n$deque\n->\npush\n(\n\"a\"\n);\n$deque\n->\npush\n(\n\"b\"\n);\n$deque\n->\npush\n(\n\"c\"\n,\n\"d\"\n);\n$deque\n->\npush\n(...[\n\"e\"\n,\n\"f\"\n]);\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::reduce() with initial value example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\n$callback\n= function(\n$carry\n,\n$value\n) {\n    return\n$carry\n*\n$value\n;\n};\nvar_dump\n(\n$deque\n->\nreduce\n(\n$callback\n,\n5\n));\n// Iterations:\n//\n// $carry = $initial = 5\n//\n// $carry = $carry * 1 =  5\n// $carry = $carry * 2 = 10\n// $carry = $carry * 3 = 30\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::reduce() without an initial value example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nreduce\n(function(\n$carry\n,\n$value\n) {\n    return\n$carry\n+\n$value\n+\n5\n;\n}));\n// Iterations:\n//\n// $carry = $initial = null\n//\n// $carry = $carry + 1 + 5 =  6\n// $carry = $carry + 2 + 5 = 13\n// $carry = $carry + 3 + 5 = 21\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::remove() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$deque\n->\nremove\n(\n1\n));\nvar_dump\n(\n$deque\n->\nremove\n(\n0\n));\nvar_dump\n(\n$deque\n->\nremove\n(\n0\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::reverse() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$deque\n->\nreverse\n();\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::reversed() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nprint_r\n(\n$deque\n->\nreversed\n());\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::rotate() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n]);\n$deque\n->\nrotate\n(\n1\n);\n// \"a\" is shifted, then pushed.\nprint_r\n(\n$deque\n);\n$deque\n->\nrotate\n(\n2\n);\n// \"b\" and \"c\" are both shifted, the pushed.\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::set() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$deque\n->\nset\n(\n1\n,\n\"_\"\n);\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::set() example using array syntax",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$deque\n[\n1\n] =\n\"_\"\n;\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::shift() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$deque\n->\nshift\n());\nvar_dump\n(\n$deque\n->\nshift\n());\nvar_dump\n(\n$deque\n->\nshift\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::slice() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n]);\n// Slice from 2 onwards\nprint_r\n(\n$deque\n->\nslice\n(\n2\n));\n// Slice from 1, for a length of 3\nprint_r\n(\n$deque\n->\nslice\n(\n1\n,\n3\n));\n// Slice from 1 onwards\nprint_r\n(\n$deque\n->\nslice\n(\n1\n));\n// Slice from 2 from the end onwards\nprint_r\n(\n$deque\n->\nslice\n(-\n2\n));\n// Slice from 1 to 1 from the end\nprint_r\n(\n$deque\n->\nslice\n(\n1\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::sort() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$deque\n->\nsort\n();\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::sort() example using a comparator",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$deque\n->\nsort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::sorted() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\nprint_r\n(\n$deque\n->\nsorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::sorted() example using a comparator",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sorted\n=\n$deque\n->\nsorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::sum() integer example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Deque::sum() float example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2.5\n,\n3\n]);\nvar_dump\n(\n$deque\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::toArray() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$deque\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Deque::unshift() example",
    "output": "<?php\n$deque\n= new\n\\Ds\\Deque\n([\n1\n,\n2\n,\n3\n]);\n$deque\n->\nunshift\n(\n\"a\"\n);\n$deque\n->\nunshift\n(\n\"b\"\n,\n\"c\"\n);\nprint_r\n(\n$deque\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::allocate() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\nvar_dump\n(\n$map\n->\ncapacity\n());\n$map\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$map\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::apply() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$map\n->\napply\n(function(\n$key\n,\n$value\n) { return\n$value\n*\n2\n; });\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::capacity() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\nvar_dump\n(\n$map\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::clear() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\n\"a\"\n=>\n1\n,\n\n\"b\"\n=>\n2\n,\n\n\"c\"\n=>\n3\n,\n]);\nprint_r\n(\n$map\n);\n$map\n->\nclear\n();\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::__construct() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\nvar_dump\n(\n$map\n);\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::copy() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\n\"a\"\n=>\n1\n,\n\n\"b\"\n=>\n2\n,\n\n\"c\"\n=>\n3\n,\n]);\nprint_r\n(\n$map\n->\ncopy\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::diff() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$b\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n4\n,\n\"c\"\n=>\n5\n,\n\"d\"\n=>\n6\n]);\nvar_dump\n(\n$a\n->\ndiff\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::filter() example using callback function",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n]);\nvar_dump\n(\n$map\n->\nfilter\n(function(\n$key\n,\n$value\n) {\n    return\n$key\n%\n2\n==\n0\n;\n}));\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::filter() example without a callback function",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n0\n,\n\"b\"\n=>\n1\n,\n\"c\"\n=>\ntrue\n,\n\"d\"\n=>\nfalse\n]);\nvar_dump\n(\n$map\n->\nfilter\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::first() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::get() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nget\n(\n\"a\"\n));\n// 1\nvar_dump\n(\n$map\n->\nget\n(\n\"d\"\n,\n10\n));\n// 10 (default used)\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::get() example using array syntax",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n[\n\"a\"\n]);\n// 1\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::hasKey() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nhasKey\n(\n\"a\"\n));\n// true\nvar_dump\n(\n$map\n->\nhasKey\n(\n\"e\"\n));\n// false\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::hasValue() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nhasValue\n(\n1\n));\n// true\nvar_dump\n(\n$map\n->\nhasValue\n(\n4\n));\n// false\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::intersect() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$b\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n4\n,\n\"c\"\n=>\n5\n,\n\"d\"\n=>\n6\n]);\nvar_dump\n(\n$a\n->\nintersect\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$b\n= new\n\\Ds\\Map\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::keys() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nkeys\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::ksort() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n,\n\"a\"\n=>\n1\n]);\n$map\n->\nksort\n();\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::ksort() example using a comparator",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n1\n=>\n\"x\"\n,\n2\n=>\n\"y\"\n,\n0\n=>\n\"z\"\n]);\n// Reverse\n$map\n->\nksort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::ksorted() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n,\n\"a\"\n=>\n1\n]);\nprint_r\n(\n$map\n->\nksorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::ksorted() example using a comparator",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n1\n=>\n\"x\"\n,\n2\n=>\n\"y\"\n,\n0\n=>\n\"z\"\n]);\n// Reverse\n$sorted\n=\n$map\n->\nksorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::last() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nlast\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::map() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nprint_r\n(\n$map\n->\nmap\n(function(\n$key\n,\n$value\n) { return\n$value\n*\n2\n; }));\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::merge() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nprint_r\n(\n$map\n->\nmerge\n([\n\"a\"\n=>\n10\n,\n\"e\"\n=>\n50\n]));\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::pairs() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\npairs\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::put() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\n$map\n->\nput\n(\n\"a\"\n,\n1\n);\n$map\n->\nput\n(\n\"b\"\n,\n2\n);\n$map\n->\nput\n(\n\"c\"\n,\n3\n);\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::put() example using objects as keys",
    "output": "<?php\nclass\nHashableObject\nimplements\n\\Ds\\Hashable\n{\n\n/**\n     * An arbitrary value to use as the hash value. Does not define equality.\n     */\n\nprivate\n$value\n;\n    public function\n__construct\n(\n$value\n)\n    {\n\n$this\n->\nvalue\n=\n$value\n;\n    }\n    public function\nhash\n()\n    {\n        return\n$this\n->\nvalue\n;\n    }\n    public function\nequals\n(\n$obj\n):\nbool\n\n{\n        return\n$this\n->\nvalue\n===\n$obj\n->\nvalue\n;\n    }\n}\n$map\n= new\n\\Ds\\Map\n();\n$obj\n= new\n\\ArrayIterator\n([]);\n// Using the same instance multiple times will overwrite the previous value.\n$map\n->\nput\n(\n$obj\n,\n1\n);\n$map\n->\nput\n(\n$obj\n,\n2\n);\n// Using multiple instances of the same object will create new associations.\n$map\n->\nput\n(new\n\\stdClass\n(),\n3\n);\n$map\n->\nput\n(new\n\\stdClass\n(),\n4\n);\n// Using multiple instances of equal hashable objects will overwrite previous values.\n$map\n->\nput\n(new\n\\HashableObject\n(\n1\n),\n5\n);\n$map\n->\nput\n(new\n\\HashableObject\n(\n1\n),\n6\n);\n$map\n->\nput\n(new\n\\HashableObject\n(\n2\n),\n7\n);\n$map\n->\nput\n(new\n\\HashableObject\n(\n2\n),\n8\n);\nvar_dump\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::putAll() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n();\n$map\n->\nputAll\n([\n\n\"a\"\n=>\n1\n,\n\n\"b\"\n=>\n2\n,\n\n\"c\"\n=>\n3\n,\n]);\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::reduce() with initial value example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$callback\n= function(\n$carry\n,\n$key\n,\n$value\n) {\n    return\n$carry\n*\n$value\n;\n};\nvar_dump\n(\n$map\n->\nreduce\n(\n$callback\n,\n5\n));\n// Iterations:\n//\n// $carry = $initial = 5\n//\n// $carry = $carry * 1 =  5\n// $carry = $carry * 2 = 10\n// $carry = $carry * 3 = 30\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::reduce() without an initial value example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nreduce\n(function(\n$carry\n,\n$key\n,\n$value\n) {\n    return\n$carry\n+\n$value\n+\n5\n;\n}));\n// Iterations:\n//\n// $carry = $initial = null\n//\n// $carry = $carry + 1 + 5 =  6\n// $carry = $carry + 2 + 5 = 13\n// $carry = $carry + 3 + 5 = 21\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::remove() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nremove\n(\n\"a\"\n));\n//  1\nvar_dump\n(\n$map\n->\nremove\n(\n\"e\"\n,\n10\n));\n// 10 (default used)\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::reverse() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$map\n->\nreverse\n();\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::reversed() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nprint_r\n(\n$map\n->\nreversed\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::skip() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nskip\n(\n1\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::slice() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n,\n\"d\"\n=>\n4\n,\n\"e\"\n=>\n5\n]);\n// Slice from 2 onwards\nprint_r\n(\n$map\n->\nslice\n(\n2\n)->\ntoArray\n());\n// Slice from 1, for a length of 3\nprint_r\n(\n$map\n->\nslice\n(\n1\n,\n3\n)->\ntoArray\n());\n// Slice from 1 onwards\nprint_r\n(\n$map\n->\nslice\n(\n1\n)->\ntoArray\n());\n// Slice from 2 from the end onwards\nprint_r\n(\n$map\n->\nslice\n(-\n2\n)->\ntoArray\n());\n// Slice from 1 to 1 from the end\nprint_r\n(\n$map\n->\nslice\n(\n1\n, -\n1\n)->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::sort() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n2\n,\n\"b\"\n=>\n3\n,\n\"c\"\n=>\n1\n]);\n$map\n->\nsort\n();\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::sort() example using a comparator",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n2\n,\n\"b\"\n=>\n3\n,\n\"c\"\n=>\n1\n]);\n$map\n->\nsort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$map\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::sort() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n2\n,\n\"b\"\n=>\n3\n,\n\"c\"\n=>\n1\n]);\nprint_r\n(\n$map\n->\nsorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::sort() example using a comparator",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n2\n,\n\"b\"\n=>\n3\n,\n\"c\"\n=>\n1\n]);\n// Reverse\n$sorted\n=\n$map\n->\nsorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::sum() integer example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Map::sum() float example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2.5\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::toArray() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\n\"a\"\n=>\n1\n,\n\n\"b\"\n=>\n2\n,\n\n\"c\"\n=>\n3\n,\n]);\nvar_dump\n(\n$map\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::union() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$b\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n3\n,\n\"c\"\n=>\n4\n,\n\"d\"\n=>\n5\n]);\nprint_r\n(\n$a\n->\nunion\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::values() example",
    "output": "<?php\n$map\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\nvar_dump\n(\n$map\n->\nvalues\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Map::xor() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Map\n([\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n2\n,\n\"c\"\n=>\n3\n]);\n$b\n= new\n\\Ds\\Map\n([\n\"b\"\n=>\n4\n,\n\"c\"\n=>\n5\n,\n\"d\"\n=>\n6\n]);\nprint_r\n(\n$a\n->\nxor\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Pair::clear() example",
    "output": "<?php\n$pair\n= new\n\\Ds\\Pair\n(\n\"a\"\n,\n1\n);\nprint_r\n(\n$pair\n);\n$pair\n->\nclear\n();\nprint_r\n(\n$pair\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Pair::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Pair\n(\n\"a\"\n,\n1\n);\n$b\n=\n$a\n->\ncopy\n();\n$a\n->\nkey\n=\n\"x\"\n;\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Pair::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Pair\n(\n\"a\"\n,\n1\n);\n$b\n= new\n\\Ds\\Pair\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Pair::toArray() example",
    "output": "<?php\n$pair\n= new\n\\Ds\\Pair\n(\n\"a\"\n,\n1\n);\nvar_dump\n(\n$pair\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::add() example using integers",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n();\n$set\n->\nadd\n(\n1\n);\n$set\n->\nadd\n(\n1\n);\n$set\n->\nadd\n(\n2\n);\n$set\n->\nadd\n(\n3\n);\n// Strict comparison would not treat these the same as int(1)\n$set\n->\nadd\n(\n\"1\"\n);\n$set\n->\nadd\n(\ntrue\n);\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::add() example using objects",
    "output": "<?php\nclass\nHashableObject\nimplements\n\\Ds\\Hashable\n{\n\n/**\n     * An arbitrary value to use as the hash value. Does not define equality.\n     */\n\nprivate\n$value\n;\n    public function\n__construct\n(\n$value\n)\n    {\n\n$this\n->\nvalue\n=\n$value\n;\n    }\n    public function\nhash\n()\n    {\n        return\n$this\n->\nvalue\n;\n    }\n    public function\nequals\n(\n$obj\n):\nbool\n\n{\n        return\n$this\n->\nvalue\n===\n$obj\n->\nvalue\n;\n    }\n}\n$set\n= new\n\\Ds\\Set\n();\n$obj\n= new\n\\ArrayIterator\n([]);\n// Adding the same instance multiple times will only add the first.\n$set\n->\nadd\n(\n$obj\n);\n$set\n->\nadd\n(\n$obj\n);\n// Adding multiple instances of the same object will add them all.\n$set\n->\nadd\n(new\n\\stdClass\n());\n$set\n->\nadd\n(new\n\\stdClass\n());\n// Adding multiple instances of equal hashable objects will only add the first.\n$set\n->\nadd\n(new\n\\HashableObject\n(\n1\n));\n$set\n->\nadd\n(new\n\\HashableObject\n(\n1\n));\n$set\n->\nadd\n(new\n\\HashableObject\n(\n2\n));\n$set\n->\nadd\n(new\n\\HashableObject\n(\n2\n));\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::allocate() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n();\nvar_dump\n(\n$set\n->\ncapacity\n());\n$set\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$set\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::capacity() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n();\nvar_dump\n(\n$set\n->\ncapacity\n());\n$set\n->\nadd\n(...\nrange\n(\n1\n,\n50\n));\nvar_dump\n(\n$set\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::clear() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$set\n);\n$set\n->\nclear\n();\nprint_r\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::__construct() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n();\nvar_dump\n(\n$set\n);\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::contains() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\ncontains\n(\n1\n));\n// true\nvar_dump\n(\n$set\n->\ncontains\n(\n1\n,\n2\n));\n// true\nvar_dump\n(\n$set\n->\ncontains\n(...[\n1\n,\n2\n]));\n// true\nvar_dump\n(\n$set\n->\ncontains\n(\n\"1\"\n));\n// false\nvar_dump\n(\n$set\n->\ncontains\n(...[\n1\n,\n2\n,\n3\n,\n4\n]));\n// false\nvar_dump\n(\n$set\n->\ncontains\n(...[]));\n// true\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n// Updating the copy doesn't affect the original\n$b\n->\nadd\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::diff() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Set\n([\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$a\n->\ndiff\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::filter() example using callback function",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$set\n->\nfilter\n(function(\n$value\n) {\n    return\n$value\n%\n2\n==\n0\n;\n}));\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::filter() example without a callback function",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n0\n,\n1\n,\n'a'\n,\ntrue\n,\nfalse\n]);\nvar_dump\n(\n$set\n->\nfilter\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::first() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nfirst\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::get() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$set\n->\nget\n(\n0\n));\nvar_dump\n(\n$set\n->\nget\n(\n1\n));\nvar_dump\n(\n$set\n->\nget\n(\n2\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::get() example using array syntax",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nvar_dump\n(\n$set\n[\n0\n]);\nvar_dump\n(\n$set\n[\n1\n]);\nvar_dump\n(\n$set\n[\n2\n]);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::intersect() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Set\n([\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$a\n->\nintersect\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Set\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::join() example using a separator string",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\njoin\n(\n\"|\"\n));\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::join() example without a separator string",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\njoin\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::last() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nlast\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::map() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nmap\n(function(\n$value\n) { return\n$value\n*\n2\n; }));\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::merge() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nmerge\n([\n3\n,\n4\n,\n5\n]));\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::reduce() with initial value example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$callback\n= function(\n$carry\n,\n$value\n) {\n    return\n$carry\n*\n$value\n;\n};\nvar_dump\n(\n$set\n->\nreduce\n(\n$callback\n,\n5\n));\n// Iterations:\n//\n// $carry = $initial = 5\n//\n// $carry = $carry * 1 =  5\n// $carry = $carry * 2 = 10\n// $carry = $carry * 3 = 30\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::reduce() without an initial value example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nreduce\n(function(\n$carry\n,\n$value\n) {\n    return\n$carry\n+\n$value\n+\n5\n;\n}));\n// Iterations:\n//\n// $carry = $initial = null\n//\n// $carry = $carry + 1 + 5 =  6\n// $carry = $carry + 2 + 5 = 13\n// $carry = $carry + 3 + 5 = 21\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::remove() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]);\n$set\n->\nremove\n(\n1\n);\n// Remove 1\n$set\n->\nremove\n(\n1\n,\n2\n);\n// Can't find 1, but remove 2\n$set\n->\nremove\n(...[\n3\n,\n4\n]);\n// Remove 3 and 4\nvar_dump\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::reverse() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\n$set\n->\nreverse\n();\nprint_r\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::reversed() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]);\nprint_r\n(\n$set\n->\nreversed\n());\nprint_r\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::slice() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n]);\n// Slice from 2 onwards\nprint_r\n(\n$set\n->\nslice\n(\n2\n));\n// Slice from 1, for a length of 3\nprint_r\n(\n$set\n->\nslice\n(\n1\n,\n3\n));\n// Slice from 1 onwards\nprint_r\n(\n$set\n->\nslice\n(\n1\n));\n// Slice from 2 from the end onwards\nprint_r\n(\n$set\n->\nslice\n(-\n2\n));\n// Slice from 1 to 1 from the end\nprint_r\n(\n$set\n->\nslice\n(\n1\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::sort() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$set\n->\nsort\n();\nprint_r\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::sort() example using a comparator",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$set\n->\nsort\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$set\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::sorted() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\nprint_r\n(\n$set\n->\nsorted\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::sorted() example using a comparator",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n4\n,\n5\n,\n1\n,\n3\n,\n2\n]);\n$sorted\n=\n$set\n->\nsorted\n(function(\n$a\n,\n$b\n) {\n    return\n$b\n<=>\n$a\n;\n});\nprint_r\n(\n$sorted\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::sum() integer example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #2 Ds\\Set::sum() float example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2.5\n,\n3\n]);\nvar_dump\n(\n$set\n->\nsum\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::toArray() example",
    "output": "<?php\n$set\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$set\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::union() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Set\n([\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$a\n->\nunion\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Set::xor() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Set\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Set\n([\n3\n,\n4\n,\n5\n]);\nvar_dump\n(\n$a\n->\nxor\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::clear() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$stack\n);\n$stack\n->\nclear\n();\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::__construct() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n();\nprint_r\n(\n$stack\n);\n$stack\n= new\n\\Ds\\Stack\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Stack\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n// Updating the copy doesn't affect the original\n$b\n->\npush\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Stack\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Stack\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::peek() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n();\n$stack\n->\npush\n(\n\"a\"\n);\n$stack\n->\npush\n(\n\"b\"\n);\n$stack\n->\npush\n(\n\"c\"\n);\nvar_dump\n(\n$stack\n->\npeek\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::pop() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n();\n$stack\n->\npush\n(\n\"a\"\n);\n$stack\n->\npush\n(\n\"b\"\n);\n$stack\n->\npush\n(\n\"c\"\n);\nvar_dump\n(\n$stack\n->\npop\n());\nvar_dump\n(\n$stack\n->\npop\n());\nvar_dump\n(\n$stack\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::push() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n();\n$stack\n->\npush\n(\n\"a\"\n);\n$stack\n->\npush\n(\n\"b\"\n);\n$stack\n->\npush\n(\n\"c\"\n,\n\"d\"\n);\n$stack\n->\npush\n(...[\n\"e\"\n,\n\"f\"\n]);\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Stack::toArray() example",
    "output": "<?php\n$stack\n= new\n\\Ds\\Stack\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$stack\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::allocate() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\nvar_dump\n(\n$queue\n->\ncapacity\n());\n$queue\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$queue\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::capacity() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\nvar_dump\n(\n$queue\n->\ncapacity\n());\n$queue\n->\npush\n(...\nrange\n(\n1\n,\n50\n));\nvar_dump\n(\n$queue\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::clear() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n([\n1\n,\n2\n,\n3\n]);\nprint_r\n(\n$queue\n);\n$queue\n->\nclear\n();\nprint_r\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::__construct() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\nvar_dump\n(\n$queue\n);\n$queue\n= new\n\\Ds\\Queue\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::copy() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Queue\n([\n1\n,\n2\n,\n3\n]);\n$b\n=\n$a\n->\ncopy\n();\n// Updating the copy doesn't affect the original\n$b\n->\npush\n(\n4\n);\nprint_r\n(\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\Queue\n([\n1\n,\n2\n,\n3\n]);\n$b\n= new\n\\Ds\\Queue\n();\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::peek() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\n$queue\n->\npush\n(\n\"a\"\n);\n$queue\n->\npush\n(\n\"b\"\n);\n$queue\n->\npush\n(\n\"c\"\n);\nvar_dump\n(\n$queue\n->\npeek\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::pop() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\n$queue\n->\npush\n(\n\"a\"\n);\n$queue\n->\npush\n(\n\"b\"\n);\n$queue\n->\npush\n(\n\"c\"\n);\nvar_dump\n(\n$queue\n->\npop\n());\nvar_dump\n(\n$queue\n->\npop\n());\nvar_dump\n(\n$queue\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::push() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n();\n$queue\n->\npush\n(\n\"a\"\n);\n$queue\n->\npush\n(\n\"b\"\n);\n$queue\n->\npush\n(\n\"c\"\n,\n\"d\"\n);\n$queue\n->\npush\n(...[\n\"e\"\n,\n\"f\"\n]);\nprint_r\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\Queue::toArray() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\Queue\n([\n1\n,\n2\n,\n3\n]);\nvar_dump\n(\n$queue\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::allocate() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\nvar_dump\n(\n$queue\n->\ncapacity\n());\n$queue\n->\nallocate\n(\n100\n);\nvar_dump\n(\n$queue\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::capacity() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\nvar_dump\n(\n$queue\n->\ncapacity\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::clear() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\n$queue\n->\nclear\n();\nprint_r\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::__construct() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\nvar_dump\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::copy() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\nprint_r\n(\n$queue\n->\ncopy\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::isEmpty() example",
    "output": "<?php\n$a\n= new\n\\Ds\\PriorityQueue\n();\n$b\n= new\n\\Ds\\PriorityQueue\n();\n$a\n->\npush\n(\n\"a\"\n,\n5\n);\n$a\n->\npush\n(\n\"b\"\n,\n15\n);\n$a\n->\npush\n(\n\"c\"\n,\n10\n);\nvar_dump\n(\n$a\n->\nisEmpty\n());\nvar_dump\n(\n$b\n->\nisEmpty\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::peek() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\nvar_dump\n(\n$queue\n->\npeek\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::pop() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\nprint_r\n(\n$queue\n->\npop\n());\nprint_r\n(\n$queue\n->\npop\n());\nprint_r\n(\n$queue\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::push() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\nprint_r\n(\n$queue\n->\npop\n());\nprint_r\n(\n$queue\n->\npop\n());\nprint_r\n(\n$queue\n->\npop\n());\n?>"
  },
  {
    "input": "Example #1 Ds\\PriorityQueue::toArray() example",
    "output": "<?php\n$queue\n= new\n\\Ds\\PriorityQueue\n();\n$queue\n->\npush\n(\n\"a\"\n,\n5\n);\n$queue\n->\npush\n(\n\"b\"\n,\n15\n);\n$queue\n->\npush\n(\n\"c\"\n,\n10\n);\nvar_dump\n(\n$queue\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 var_representation() Examples",
    "output": "<?php\n$a\n= [\n1\n,\n2\n, [\n'key'\n=>\n'value'\n]];\necho\nvar_representation\n(\n$a\n),\n\"\\n\"\n;\necho\nvar_representation\n(\n$a\n,\nVAR_REPRESENTATION_SINGLE_LINE\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Escaping control characters",
    "output": "<?php\necho\nvar_representation\n(\n\"Content-Length: 123\\r\\n\"\n);"
  },
  {
    "input": "Example #3 Exporting stdClass",
    "output": "<?php\n$person\n= new\nstdClass\n;\n$person\n->\nname\n=\n'ElePHPant ElePHPantsdotter'\n;\n$person\n->\nwebsite\n=\n'https://php.net/elephpant.php'\n;\necho\nvar_representation\n(\n$person\n);"
  },
  {
    "input": "Example #4 Exporting classes",
    "output": "<?php\nclass\nA\n{ public\n$var\n; }\n$a\n= new\nA\n;\n$a\n->\nvar\n=\n5\n;\necho\nvar_representation\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #5 Using __set_state()",
    "output": "<?php\nclass\nA\n{\n    public\n$var1\n;\n    public\n$var2\n;\n    public static function\n__set_state\n(\n$an_array\n)\n    {\n\n$obj\n= new\nA\n;\n\n$obj\n->\nvar1\n=\n$an_array\n[\n'var1'\n];\n\n$obj\n->\nvar2\n=\n$an_array\n[\n'var2'\n];\n        return\n$obj\n;\n    }\n}\n$a\n= new\nA\n;\n$a\n->\nvar1\n=\n5\n;\n$a\n->\nvar2\n=\n'foo'\n;\neval(\n'$b = '\n.\nvar_representation\n(\n$a\n) .\n';'\n);\n// $b = \\A::__set_state([\n                                              //   'var1' => 5,\n                                              //   'var2' => 'foo',\n                                              // ]);\nvar_dump\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 Using PHP's cURL module to fetch the example.com homepage",
    "output": "<?php\n$ch\n=\ncurl_init\n(\n\"http://www.example.com/\"\n);\n$fp\n=\nfopen\n(\n\"example_homepage.txt\"\n,\n\"w\"\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_FILE\n,\n$fp\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\n0\n);\ncurl_exec\n(\n$ch\n);\nif(\ncurl_error\n(\n$ch\n)) {\n\nfwrite\n(\n$fp\n,\ncurl_error\n(\n$ch\n));\n}\ncurl_close\n(\n$ch\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 Initializing a new cURL session and fetching a web page",
    "output": "<?php\n// create a new cURL resource\n$ch\n=\ncurl_init\n();\n// set URL and other appropriate options\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n\"http://www.example.com/\"\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\n0\n);\n// grab URL and pass it to the browser\ncurl_exec\n(\n$ch\n);\n// close cURL resource, and free up system resources\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 Copying a cURL handle",
    "output": "<?php\n// create a new cURL resource\n$ch\n=\ncurl_init\n();\n// set URL and other appropriate options\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n'http://www.example.com/'\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\n0\n);\n// copy the handle\n$ch2\n=\ncurl_copy_handle\n(\n$ch\n);\n// grab URL (http://www.example.com/) and pass it to the browser\ncurl_exec\n(\n$ch2\n);\n// close cURL resources, and free up system resources\ncurl_close\n(\n$ch2\n);\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_errno() example",
    "output": "<?php\n// Create a curl handle to a non-existing location\n$ch\n=\ncurl_init\n(\n'http://404.php.net/'\n);\n// Execute\ncurl_setopt\n(\n$ch\n,\nCURLOPT_RETURNTRANSFER\n,\ntrue\n);\ncurl_exec\n(\n$ch\n);\n// Check if any error occurred\nif(\ncurl_errno\n(\n$ch\n))\n{\n    echo\n'Curl error: '\n.\ncurl_error\n(\n$ch\n);\n}\n// Close handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_error() example",
    "output": "<?php\n// Create a curl handle to a non-existing location\n$ch\n=\ncurl_init\n(\n'http://404.php.net/'\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_RETURNTRANSFER\n,\ntrue\n);\nif(\ncurl_exec\n(\n$ch\n) ===\nfalse\n)\n{\n    echo\n'Curl error: '\n.\ncurl_error\n(\n$ch\n);\n}\nelse\n{\n    echo\n'Operation completed without any errors'\n;\n}\n// Close handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_escape() example",
    "output": "<?php\n// Create a curl handle\n$ch\n=\ncurl_init\n();\n// Escape a string used as a GET parameter\n$location\n=\ncurl_escape\n(\n$ch\n,\n'Hofbräuhaus / München'\n);\n// Result: Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n// Compose an URL with the escaped string\n$url\n=\n\"http://example.com/add_location.php?location=\n{\n$location\n}\n\"\n;\n// Result: http://example.com/add_location.php?location=Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n// Send HTTP request and close the handle\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n$url\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_RETURNTRANSFER\n,\ntrue\n);\ncurl_exec\n(\n$ch\n);\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 Fetching a web page",
    "output": "<?php\n// create a new cURL resource\n$ch\n=\ncurl_init\n();\n// set URL and other appropriate options\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n\"http://www.example.com/\"\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\n0\n);\n// grab URL and pass it to the browser\ncurl_exec\n(\n$ch\n);\n// close cURL resource, and free up system resources\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_getinfo() example",
    "output": "<?php\n// Create a cURL handle\n$ch\n=\ncurl_init\n(\n'http://www.example.com/'\n);\n// Execute\ncurl_exec\n(\n$ch\n);\n// Check if any error occurred\nif (!\ncurl_errno\n(\n$ch\n)) {\n\n$info\n=\ncurl_getinfo\n(\n$ch\n);\n  echo\n'Took '\n,\n$info\n[\n'total_time'\n],\n' seconds to send a request to '\n,\n$info\n[\n'url'\n],\n\"\\n\"\n;\n}\n// Close handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #2 curl_getinfo() example with option parameter",
    "output": "<?php\n// Create a cURL handle\n$ch\n=\ncurl_init\n(\n'http://www.example.com/'\n);\n// Execute\ncurl_exec\n(\n$ch\n);\n// Check HTTP status code\nif (!\ncurl_errno\n(\n$ch\n)) {\n  switch (\n$http_code\n=\ncurl_getinfo\n(\n$ch\n,\nCURLINFO_HTTP_CODE\n)) {\n    case\n200\n:\n# OK\n\nbreak;\n    default:\n      echo\n'Unexpected HTTP code: '\n,\n$http_code\n,\n\"\\n\"\n;\n  }\n}\n// Close handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 \n     Initializing a new cURL session and fetching a web page",
    "output": "<?php\n// Initializes a new cURL session\n$ch\n=\ncurl_init\n();\n// Set URL and other appropriate options\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n\"http://www.example.com/\"\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\n0\n);\n// Grab URL and pass it to the browser\ncurl_exec\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_reset() example",
    "output": "<?php\n// Create a curl handle\n$ch\n=\ncurl_init\n();\n// Set CURLOPT_USERAGENT option\ncurl_setopt\n(\n$ch\n,\nCURLOPT_USERAGENT\n,\n\"My test user-agent\"\n);\n// Reset all previously set options\ncurl_reset\n(\n$ch\n);\n// Send HTTP request\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n'http://example.com/'\n);\ncurl_exec\n(\n$ch\n);\n// the previously set user-agent will be not sent, it has been reset by curl_reset\n// Close the handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 Initializing a new cURL session and fetching a web page",
    "output": "<?php\n// create a new cURL resource\n$ch\n=\ncurl_init\n();\n// set URL and other appropriate options\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n\"http://www.example.com/\"\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HEADER\n,\nfalse\n);\n// grab URL and pass it to the browser\ncurl_exec\n(\n$ch\n);\n// close cURL resource, and free up system resources\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 \n     Initializing a new cURL session and fetching a web page",
    "output": "<?php\n// create a new cURL resource\n$ch\n=\ncurl_init\n();\n// set URL and other appropriate options\n$options\n= array(\nCURLOPT_URL\n=>\n'http://www.example.com/'\n,\n\nCURLOPT_HEADER\n=>\nfalse\n\n);\ncurl_setopt_array\n(\n$ch\n,\n$options\n);\n// grab URL and pass it to the browser\ncurl_exec\n(\n$ch\n);\n// close cURL resource, and free up system resources\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_errno() example",
    "output": "<?php\n// Create a curl handle with a misspelled protocol in URL\n$ch\n=\ncurl_init\n(\n\"htp://example.com/\"\n);\n// Send request\ncurl_exec\n(\n$ch\n);\n// Check for errors and display the error message\nif(\n$errno\n=\ncurl_errno\n(\n$ch\n)) {\n\n$error_message\n=\ncurl_strerror\n(\n$errno\n);\n    echo\n\"cURL error (\n{\n$errno\n}\n):\\n\n{\n$error_message\n}\n\"\n;\n}\n// Close the handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_escape() example",
    "output": "<?php\n// Create a curl handle\n$ch\n=\ncurl_init\n(\n'http://example.com/redirect.php'\n);\n// Send HTTP request and follow redirections\ncurl_setopt\n(\n$ch\n,\nCURLOPT_FOLLOWLOCATION\n,\n1\n);\ncurl_exec\n(\n$ch\n);\n// Get the last effective URL\n$effective_url\n=\ncurl_getinfo\n(\n$ch\n,\nCURLINFO_EFFECTIVE_URL\n);\n// ie. \"http://example.com/show_location.php?loc=M%C3%BCnchen\"\n// Decode the URL\n$effective_url_decoded\n=\ncurl_unescape\n(\n$ch\n,\n$effective_url\n);\n// \"http://example.com/show_location.php?loc=München\"\n// Close the handle\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 curl_upkeep() example",
    "output": "<?php\n$url\n=\n\"https://example.com\"\n;\n$ch\n=\ncurl_init\n();\ncurl_setopt\n(\n$ch\n,\nCURLOPT_URL\n,\n$url\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_RETURNTRANSFER\n,\ntrue\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_HTTP_VERSION\n,\nCURL_HTTP_VERSION_2_0\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_SSL_VERIFYPEER\n,\nfalse\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_UPKEEP_INTERVAL_MS\n,\n200\n);\nif (\ncurl_exec\n(\n$ch\n)) {\n\nusleep\n(\n300\n);\n\nvar_dump\n(\ncurl_upkeep\n(\n$ch\n));\n}\ncurl_close\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 CURLStringFile::__construct() example",
    "output": "<?php\n/* http://example.com/upload.php:\n<?php\nvar_dump($_FILES);\nvar_dump(file_get_contents($_FILES['test_string']['tmp_name']));\n?>\n*/\n// Create a cURL handle\n$ch\n=\ncurl_init\n(\n'http://example.com/upload.php'\n);\n// Create a CURLStringFile object\n$cstringfile\n= new\nCURLStringFile\n(\n'test upload contents'\n,\n'test.txt'\n,\n'text/plain'\n);\n// Assign POST data\n$data\n= array(\n'test_string'\n=>\n$cstringfile\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_POST\n,\n1\n);\ncurl_setopt\n(\n$ch\n,\nCURLOPT_POSTFIELDS\n,\n$data\n);\n// Execute the handle\ncurl_exec\n(\n$ch\n);\n?>"
  },
  {
    "input": "Example #1 Simple HTTP client",
    "output": "<?php\n// Read callback\nfunction\nreadcb\n(\n$bev\n,\n$base\n) {\n\n//$input = $bev->input; //$bev->getInput();\n    //$pos = $input->search(\"TTP\");\n\n$pos\n=\n$bev\n->\ninput\n->\nsearch\n(\n\"TTP\"\n);\n    while ((\n$n\n=\n$bev\n->\ninput\n->\nremove\n(\n$buf\n,\n1024\n)) >\n0\n) {\n        echo\n$buf\n;\n    }\n}\n// Event callback\nfunction\neventcb\n(\n$bev\n,\n$events\n,\n$base\n) {\n    if (\n$events\n&\nEventBufferEvent\n::\nCONNECTED\n) {\n        echo\n\"Connected.\\n\"\n;\n    } elseif (\n$events\n& (\nEventBufferEvent\n::\nERROR\n|\nEventBufferEvent\n::\nEOF\n)) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"DNS error: \"\n,\n$bev\n->\ngetDnsErrorString\n(),\nPHP_EOL\n;\n        }\n        echo\n\"Closing\\n\"\n;\n\n$base\n->\nexit\n();\n        exit(\n\"Done\\n\"\n);\n    }\n}\nif (\n$argc\n!=\n3\n) {\n    echo <<<EOS\nTrivial HTTP 0.x client\nSyntax: php\n{\n$argv\n[\n0\n]}\n [hostname] [resource]\nExample: php\n{\n$argv\n[\n0\n]}\n www.google.com /\nEOS;\n    exit();\n}\n$base\n= new\nEventBase\n();\n$dns_base\n= new\nEventDnsBase\n(\n$base\n,\nTRUE\n);\n// We'll use async DNS resolving\nif (!\n$dns_base\n) {\n    exit(\n\"Failed to init DNS Base\\n\"\n);\n}\n$bev\n= new\nEventBufferEvent\n(\n$base\n,\n/* use internal socket */\nNULL\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n|\nEventBufferEvent\n::\nOPT_DEFER_CALLBACKS\n,\n\n\"readcb\"\n,\n/* writecb */\nNULL\n,\n\"eventcb\"\n);\nif (!\n$bev\n) {\n    exit(\n\"Failed creating bufferevent socket\\n\"\n);\n}\n//$bev->setCallbacks(\"readcb\", /* writecb */ NULL, \"eventcb\", $base);\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n$output\n=\n$bev\n->\noutput\n;\n//$bev->getOutput();\nif (!\n$output\n->\nadd\n(\n\n\"GET\n{\n$argv\n[\n2\n]}\n HTTP/1.0\\r\\n\"\n.\n\n\"Host:\n{\n$argv\n[\n1\n]}\n\\r\\n\"\n.\n\n\"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\n\"Failed adding request to output buffer\\n\"\n);\n}\nif (!\n$bev\n->\nconnectHost\n(\n$dns_base\n,\n$argv\n[\n1\n],\n80\n,\nEventUtil\n::\nAF_UNSPEC\n)) {\n    exit(\n\"Can't connect to host\n{\n$argv\n[\n1\n]}\n\\n\"\n);\n}\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #2 HTTP client using asynchronous DNS resolver",
    "output": "<?php\n/*\n * 1. Connect to 127.0.0.1 at port 80\n * by means of EventBufferEvent::connect().\n *\n * 2. Request /index.cphp via HTTP/1.0\n * using the output buffer.\n *\n * 3. Asyncronously read the response and print it to stdout.\n */\n// Read callback\nfunction\nreadcb\n(\n$bev\n,\n$base\n) {\n\n$input\n=\n$bev\n->\ngetInput\n();\n    while ((\n$n\n=\n$input\n->\nremove\n(\n$buf\n,\n1024\n)) >\n0\n) {\n        echo\n$buf\n;\n    }\n}\n// Event callback\nfunction\neventcb\n(\n$bev\n,\n$events\n,\n$base\n) {\n    if (\n$events\n&\nEventBufferEvent\n::\nCONNECTED\n) {\n        echo\n\"Connected.\\n\"\n;\n    } elseif (\n$events\n& (\nEventBufferEvent\n::\nERROR\n|\nEventBufferEvent\n::\nEOF\n)) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"DNS error: \"\n,\n$bev\n->\ngetDnsErrorString\n(),\nPHP_EOL\n;\n        }\n        echo\n\"Closing\\n\"\n;\n\n$base\n->\nexit\n();\n        exit(\n\"Done\\n\"\n);\n    }\n}\n$base\n= new\nEventBase\n();\necho\n\"step 1\\n\"\n;\n$bev\n= new\nEventBufferEvent\n(\n$base\n,\n/* use internal socket */\nNULL\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n|\nEventBufferEvent\n::\nOPT_DEFER_CALLBACKS\n);\nif (!\n$bev\n) {\n    exit(\n\"Failed creating bufferevent socket\\n\"\n);\n}\necho\n\"step 2\\n\"\n;\n$bev\n->\nsetCallbacks\n(\n\"readcb\"\n,\n/* writecb */\nNULL\n,\n\"eventcb\"\n,\n$base\n);\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\necho\n\"step 3\\n\"\n;\n// Send request\n$output\n=\n$bev\n->\ngetOutput\n();\nif (!\n$output\n->\nadd\n(\n\n\"GET /index.cphp HTTP/1.0\\r\\n\"\n.\n\n\"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\n\"Failed adding request to output buffer\\n\"\n);\n}\n/* Connect to the host syncronously.\nWe know the IP, and don't need to resolve DNS. */\nif (!\n$bev\n->\nconnect\n(\n\"127.0.0.1:80\"\n)) {\n    exit(\n\"Can't connect to host\\n\"\n);\n}\n// Dispatch pending events\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #3 Echo server",
    "output": "<?php\n/*\n * Simple echo server based on libevent's connection listener.\n *\n * Usage:\n * 1) In one terminal window run:\n *\n * $ php listener.php 9881\n *\n * 2) In another terminal window open up connection, e.g.:\n *\n * $ nc 127.0.0.1 9881\n *\n * 3) start typing. The server should repeat the input.\n */\nclass\nMyListenerConnection\n{\n    private\n$bev\n,\n$base\n;\n    public function\n__destruct\n() {\n\n$this\n->\nbev\n->\nfree\n();\n    }\n    public function\n__construct\n(\n$base\n,\n$fd\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nbev\n= new\nEventBufferEvent\n(\n$base\n,\n$fd\n,\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n\n$this\n->\nbev\n->\nsetCallbacks\n(array(\n$this\n,\n\"echoReadCallback\"\n),\nNULL\n,\n            array(\n$this\n,\n\"echoEventCallback\"\n),\nNULL\n);\n        if (!\n$this\n->\nbev\n->\nenable\n(\nEvent\n::\nREAD\n)) {\n            echo\n\"Failed to enable READ\\n\"\n;\n            return;\n        }\n    }\n    public function\nechoReadCallback\n(\n$bev\n,\n$ctx\n) {\n\n// Copy all the data from the input buffer to the output buffer\n        // Variant #1\n\n$bev\n->\noutput\n->\naddBuffer\n(\n$bev\n->\ninput\n);\n\n/* Variant #2 */\n        /*\n        $input    = $bev->getInput();\n        $output = $bev->getOutput();\n        $output->addBuffer($input);\n        */\n\n}\n    public function\nechoEventCallback\n(\n$bev\n,\n$events\n,\n$ctx\n) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"Error from bufferevent\\n\"\n;\n        }\n        if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n//$bev->free();\n\n$this\n->\n__destruct\n();\n        }\n    }\n}\nclass\nMyListener\n{\n    public\n$base\n,\n\n$listener\n,\n\n$socket\n;\n    private\n$conn\n= array();\n    public function\n__destruct\n() {\n        foreach (\n$this\n->\nconn\nas &\n$c\n)\n$c\n=\nNULL\n;\n    }\n    public function\n__construct\n(\n$port\n) {\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            echo\n\"Couldn't open event base\"\n;\n            exit(\n1\n);\n        }\n\n// Variant #1\n        /*\n        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!socket_bind($this->socket, '0.0.0.0', $port)) {\n            echo \"Unable to bind socket\\n\";\n            exit(1);\n        }\n        $this->listener = new EventListener($this->base,\n            array($this, \"acceptConnCallback\"), $this->base,\n            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,\n            -1, $this->socket);\n         */\n        // Variant #2\n\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n             array(\n$this\n,\n\"acceptConnCallback\"\n),\n$this\n->\nbase\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n, -\n1\n,\n\n\"0.0.0.0:\n$port\n\"\n);\n        if (!\n$this\n->\nlistener\n) {\n            echo\n\"Couldn't create listener\"\n;\n            exit(\n1\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n(array(\n$this\n,\n\"accept_error_cb\"\n));\n    }\n    public function\ndispatch\n() {\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n\n// This callback is invoked when there is data to read on $bev\n\npublic function\nacceptConnCallback\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n\n// We got a new connection! Set up a bufferevent for it. */\n\n$base\n=\n$this\n->\nbase\n;\n\n$this\n->\nconn\n[] = new\nMyListenerConnection\n(\n$base\n,\n$fd\n);\n    }\n    public function\naccept_error_cb\n(\n$listener\n,\n$ctx\n) {\n\n$base\n=\n$this\n->\nbase\n;\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. \"\n\n.\n\"Shutting down.\\n\"\n,\n\nEventUtil\n::\ngetLastSocketErrno\n(),\n\nEventUtil\n::\ngetLastSocketError\n());\n\n$base\n->\nexit\n(\nNULL\n);\n    }\n}\n$port\n=\n9808\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$l\n= new\nMyListener\n(\n$port\n);\n$l\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #4 SSL echo server",
    "output": "<?php\n/*\n * SSL echo server\n *\n * To test:\n * 1) Run:\n * $ php examples/ssl-echo-server/server.php 9998\n *\n * 2) in another terminal window run:\n * $ socat - SSL:127.0.0.1:9998,verify=1,cafile=examples/ssl-echo-server/cert.pem\n */\nclass\nMySslEchoServer\n{\n    public\n$port\n,\n\n$base\n,\n\n$bev\n,\n\n$listener\n,\n\n$ctx\n;\n    function\n__construct\n(\n$port\n,\n$host\n=\n\"127.0.0.1\"\n) {\n\n$this\n->\nport\n=\n$port\n;\n\n$this\n->\nctx\n=\n$this\n->\ninit_ssl\n();\n        if (!\n$this\n->\nctx\n) {\n            exit(\n\"Failed creating SSL context\\n\"\n);\n        }\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            exit(\n\"Couldn't open event base\\n\"\n);\n        }\n\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n            array(\n$this\n,\n\"ssl_accept_cb\"\n),\n$this\n->\nctx\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n,\n            -\n1\n,\n\"\n$host\n:\n$port\n\"\n);\n        if (!\n$this\n->\nlistener\n) {\n            exit(\n\"Couldn't create listener\\n\"\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n(array(\n$this\n,\n\"accept_error_cb\"\n));\n    }\n    function\ndispatch\n() {\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n\n// This callback is invoked when there is data to read on $bev.\n\nfunction\nssl_read_cb\n(\n$bev\n,\n$ctx\n) {\n\n$in\n=\n$bev\n->\ninput\n;\n//$bev->getInput();\n\nprintf\n(\n\"Received %zu bytes\\n\"\n,\n$in\n->\nlength\n);\n\nprintf\n(\n\"----- data ----\\n\"\n);\n\nprintf\n(\n\"%ld:\\t%s\\n\"\n, (int)\n$in\n->\nlength\n,\n$in\n->\npullup\n(-\n1\n));\n\n$bev\n->\nwriteBuffer\n(\n$in\n);\n    }\n\n// This callback is invoked when some even occurs on the event listener,\n    // e.g. connection closed, or an error occurred\n\nfunction\nssl_event_cb\n(\n$bev\n,\n$events\n,\n$ctx\n) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n\n// Fetch errors from the SSL error stack\n\nwhile (\n$err\n=\n$bev\n->\nsslError\n()) {\n\nfprintf\n(\nSTDERR\n,\n\"Bufferevent error %s.\\n\"\n,\n$err\n);\n            }\n        }\n        if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n$bev\n->\nfree\n();\n        }\n    }\n\n// This callback is invoked when a client accepts new connection\n\nfunction\nssl_accept_cb\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n\n// We got a new connection! Set up a bufferevent for it.\n\n$this\n->\nbev\n=\nEventBufferEvent\n::\nsslSocket\n(\n$this\n->\nbase\n,\n$fd\n,\n$this\n->\nctx\n,\n\nEventBufferEvent\n::\nSSL_ACCEPTING\n,\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n        if (!\n$this\n->\nbev\n) {\n            echo\n\"Failed creating ssl buffer\\n\"\n;\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n            exit(\n1\n);\n        }\n\n$this\n->\nbev\n->\nenable\n(\nEvent\n::\nREAD\n);\n\n$this\n->\nbev\n->\nsetCallbacks\n(array(\n$this\n,\n\"ssl_read_cb\"\n),\nNULL\n,\n            array(\n$this\n,\n\"ssl_event_cb\"\n),\nNULL\n);\n    }\n\n// This callback is invoked when we failed to setup new connection for a client\n\nfunction\naccept_error_cb\n(\n$listener\n,\n$ctx\n) {\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. \"\n\n.\n\"Shutting down.\\n\"\n,\n\nEventUtil\n::\ngetLastSocketErrno\n(),\n\nEventUtil\n::\ngetLastSocketError\n());\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n    }\n\n// Initialize SSL structures, create an EventSslContext\n    // Optionally create self-signed certificates\n\nfunction\ninit_ssl\n() {\n\n// We *must* have entropy. Otherwise there's no point to crypto.\n\nif (!\nEventUtil\n::\nsslRandPoll\n()) {\n            exit(\n\"EventUtil::sslRandPoll failed\\n\"\n);\n        }\n\n$local_cert\n=\n__DIR__\n.\n\"/cert.pem\"\n;\n\n$local_pk\n=\n__DIR__\n.\n\"/privkey.pem\"\n;\n        if (!\nfile_exists\n(\n$local_cert\n) || !\nfile_exists\n(\n$local_pk\n)) {\n            echo\n\"Couldn't read\n$local_cert\n or\n$local_pk\n file.  To generate a key\\n\"\n,\n\n\"and self-signed certificate, run:\\n\"\n,\n\n\"  openssl genrsa -out\n$local_pk\n 2048\\n\"\n,\n\n\"  openssl req -new -key\n$local_pk\n -out cert.req\\n\"\n,\n\n\"  openssl x509 -req -days 365 -in cert.req -signkey\n$local_pk\n -out\n$local_cert\n\\n\"\n;\n            return\nFALSE\n;\n        }\n\n$ctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_SERVER_METHOD\n, array (\n\nEventSslContext\n::\nOPT_LOCAL_CERT\n=>\n$local_cert\n,\n\nEventSslContext\n::\nOPT_LOCAL_PK\n=>\n$local_pk\n,\n\n//EventSslContext::OPT_PASSPHRASE  => \"echo server\",\n\nEventSslContext\n::\nOPT_VERIFY_PEER\n=>\ntrue\n,\n\nEventSslContext\n::\nOPT_ALLOW_SELF_SIGNED\n=>\nfalse\n,\n        ));\n        return\n$ctx\n;\n    }\n}\n// Allow to override the port\n$port\n=\n9999\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\\n\"\n);\n}\n$l\n= new\nMySslEchoServer\n(\n$port\n);\n$l\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #5 Signal handler",
    "output": "<?php\n/*\nLaunch it in a terminal window:\n$ php examples/signal.php\nIn another terminal window find out the pid and send SIGTERM, e.g.:\n$ ps aux | grep examp\nruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php\nruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp\n$ kill -TERM 3976\nAt the first terminal window you should catch the following:\nCaught signal 15\n*/\nclass\nMyEventSignal\n{\n    private\n$base\n;\n    function\n__construct\n(\n$base\n) {\n\n$this\n->\nbase\n=\n$base\n;\n    }\n    function\neventSighandler\n(\n$no\n,\n$c\n) {\n        echo\n\"Caught signal\n$no\n\\n\"\n;\n\nevent_base_loopexit\n(\n$c\n->\nbase\n);\n    }\n}\n$base\n=\nevent_base_new\n();\n$c\n= new\nMyEventSignal\n(\n$base\n);\n$no\n=\nSIGTERM\n;\n$ev\n=\nevsignal_new\n(\n$base\n,\n$no\n, array(\n$c\n,\n'eventSighandler'\n),\n$c\n);\nevsignal_add\n(\n$ev\n);\nevent_base_loop\n(\n$base\n);\n?>"
  },
  {
    "input": "Example #6 Use libevent's loop to process requests of `eio' extension",
    "output": "<?php\n// Callback for eio_nop()\nfunction\nmy_nop_cb\n(\n$d\n,\n$r\n) {\n    echo\n\"step 6\\n\"\n;\n}\n$dir\n=\n\"/tmp/abc-eio-temp\"\n;\nif (\nfile_exists\n(\n$dir\n)) {\n\nrmdir\n(\n$dir\n);\n}\necho\n\"step 1\\n\"\n;\n$base\n= new\nEventBase\n();\necho\n\"step 2\\n\"\n;\neio_init\n();\neio_mkdir\n(\n$dir\n,\n0750\n,\nEIO_PRI_DEFAULT\n,\n\"my_nop_cb\"\n);\n$event\n= new\nEvent\n(\n$base\n,\neio_get_event_stream\n(),\n\nEvent\n::\nREAD\n|\nEvent\n::\nPERSIST\n, function (\n$fd\n,\n$events\n,\n$base\n) {\n    echo\n\"step 5\\n\"\n;\n    while (\neio_nreqs\n()) {\n\neio_poll\n();\n    }\n\n$base\n->\nstop\n();\n},\n$base\n);\necho\n\"step 3\\n\"\n;\n$event\n->\nadd\n();\necho\n\"step 4\\n\"\n;\n$base\n->\ndispatch\n();\necho\n\"Done\\n\"\n;\n?>"
  },
  {
    "input": "Example #7 Miscellaneous",
    "output": "<?php\n/* {{{ Config & supported stuff */\necho\n\"Supported methods:\\n\"\n;\nforeach (\nEvent\n::\ngetSupportedMethods\n() as\n$m\n) {\n    echo\n$m\n,\nPHP_EOL\n;\n}\n// Avoiding \"select\" method\n$cfg\n= new\nEventConfig\n();\nif (\n$cfg\n->\navoidMethod\n(\n\"select\"\n)) {\n    echo\n\"'select' method avoided\\n\"\n;\n}\n// Create event_base associated with the config\n$base\n= new\nEventBase\n(\n$cfg\n);\necho\n\"Event method used: \"\n,\n$base\n->\ngetMethod\n(),\nPHP_EOL\n;\necho\n\"Features:\\n\"\n;\n$features\n=\n$base\n->\ngetFeatures\n();\n(\n$features\n&\nEventConfig\n::\nFEATURE_ET\n) and print\n\"ET - edge-triggered IO\\n\"\n;\n(\n$features\n&\nEventConfig\n::\nFEATURE_O1\n) and print\n\"O1 - O(1) operation for adding/deleting events\\n\"\n;\n(\n$features\n&\nEventConfig\n::\nFEATURE_FDS\n) and print\n\"FDS - arbitrary file descriptor types, and not just sockets\\n\"\n;\n// Require FDS feature\nif (\n$cfg\n->\nrequireFeatures\n(\nEventConfig\n::\nFEATURE_FDS\n)) {\n    echo\n\"FDS feature is now required\\n\"\n;\n\n$base\n= new\nEventBase\n(\n$cfg\n);\n    (\n$base\n->\ngetFeatures\n() &\nEventConfig\n::\nFEATURE_FDS\n)\n        and print\n\"FDS - arbitrary file descriptor types, and not just sockets\\n\"\n;\n}\n/* }}} */\n/* {{{ Base */\n$base\n= new\nEventBase\n();\n$event\n= new\nEvent\n(\n$base\n,\nSTDIN\n,\nEvent\n::\nREAD\n|\nEvent\n::\nPERSIST\n, function (\n$fd\n,\n$events\n,\n$arg\n) {\n    static\n$max_iterations\n=\n0\n;\n    if (++\n$max_iterations\n>=\n5\n) {\n\n/* exit after 5 iterations with timeout of 2.33 seconds */\n\necho\n\"Stopping...\\n\"\n;\n\n$arg\n[\n0\n]->\nexit\n(\n2.33\n);\n    }\n    echo\nfgets\n(\n$fd\n);\n}, array (&\n$base\n));\n$event\n->\nadd\n();\n$base\n->\nloop\n();\n/* Base }}} */\n?>"
  },
  {
    "input": "Example #8 Simple HTTP server",
    "output": "<?php\n/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST /about HTTP/1.0\n * Content-Type: text/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * $ nc -t 127.0.0.1 8010\n * GET /dump HTTP/1.0\n * Content-Type: text/plain\n * Content-Encoding: UTF-8\n * Connection: close\n * (press Enter)\n *\n * It will output:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n * (press Enter)\n *\n * $ nc -t 127.0.0.1 8010\n * GET /unknown HTTP/1.0\n * Connection: close\n *\n * It will output:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n */\nfunction\n_http_dump\n(\n$req\n,\n$data\n) {\n    static\n$counter\n=\n0\n;\n    static\n$max_requests\n=\n2\n;\n    if (++\n$counter\n>=\n$max_requests\n)  {\n        echo\n\"Counter reached max requests\n$max_requests\n. Exiting\\n\"\n;\n        exit();\n    }\n    echo\n__METHOD__\n,\n\" called\\n\"\n;\n    echo\n\"request:\"\n;\nvar_dump\n(\n$req\n);\n    echo\n\"data:\"\n;\nvar_dump\n(\n$data\n);\n    echo\n\"\\n===== DUMP =====\\n\"\n;\n    echo\n\"Command:\"\n,\n$req\n->\ngetCommand\n(),\nPHP_EOL\n;\n    echo\n\"URI:\"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"Input headers:\"\n;\nvar_dump\n(\n$req\n->\ngetInputHeaders\n());\n    echo\n\"Output headers:\"\n;\nvar_dump\n(\n$req\n->\ngetOutputHeaders\n());\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n    echo\n\"\\n >> Reading input buffer ...\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n    while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n        echo\n$s\n,\nPHP_EOL\n;\n    }\n    echo\n\"No more data in the buffer\\n\"\n;\n}\nfunction\n_http_about\n(\n$req\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\nfunction\n_http_default\n(\n$req\n,\n$data\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\n$port\n=\n8010\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$http\n->\nsetAllowedMethods\n(\nEventHttpRequest\n::\nCMD_GET\n|\nEventHttpRequest\n::\nCMD_POST\n);\n$http\n->\nsetCallback\n(\n\"/dump\"\n,\n\"_http_dump\"\n, array(\n4\n,\n8\n));\n$http\n->\nsetCallback\n(\n\"/about\"\n,\n\"_http_about\"\n);\n$http\n->\nsetDefaultCallback\n(\n\"_http_default\"\n,\n\"custom data value\"\n);\n$http\n->\nbind\n(\n\"0.0.0.0\"\n,\n8010\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #9 Simple HTTPS server",
    "output": "<?php\n/*\n * Simple HTTPS server.\n *\n * 1) Run the server: `php examples/https.php 9999`\n * 2) Test it: `php examples/ssl-connection.php 9999`\n */\nfunction\n_http_dump\n(\n$req\n,\n$data\n) {\n    static\n$counter\n=\n0\n;\n    static\n$max_requests\n=\n200\n;\n    if (++\n$counter\n>=\n$max_requests\n)  {\n        echo\n\"Counter reached max requests\n$max_requests\n. Exiting\\n\"\n;\n        exit();\n    }\n    echo\n__METHOD__\n,\n\" called\\n\"\n;\n    echo\n\"request:\"\n;\nvar_dump\n(\n$req\n);\n    echo\n\"data:\"\n;\nvar_dump\n(\n$data\n);\n    echo\n\"\\n===== DUMP =====\\n\"\n;\n    echo\n\"Command:\"\n,\n$req\n->\ngetCommand\n(),\nPHP_EOL\n;\n    echo\n\"URI:\"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"Input headers:\"\n;\nvar_dump\n(\n$req\n->\ngetInputHeaders\n());\n    echo\n\"Output headers:\"\n;\nvar_dump\n(\n$req\n->\ngetOutputHeaders\n());\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n    echo\n\"\\n >> Reading input buffer (\"\n,\n$buf\n->\nlength\n,\n\") ...\\n\"\n;\n    while (\n$s\n=\n$buf\n->\nread\n(\n1024\n)) {\n        echo\n$s\n;\n    }\n    echo\n\"\\nNo more data in the buffer\\n\"\n;\n}\nfunction\n_http_about\n(\n$req\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\nfunction\n_http_default\n(\n$req\n,\n$data\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\nfunction\n_http_400\n(\n$req\n) {\n\n$req\n->\nsendError\n(\n400\n);\n}\nfunction\n_init_ssl\n() {\n\n$local_cert\n=\n__DIR__\n.\n\"/ssl-echo-server/cert.pem\"\n;\n\n$local_pk\n=\n__DIR__\n.\n\"/ssl-echo-server/privkey.pem\"\n;\n\n$ctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_SERVER_METHOD\n, array (\n\nEventSslContext\n::\nOPT_LOCAL_CERT\n=>\n$local_cert\n,\n\nEventSslContext\n::\nOPT_LOCAL_PK\n=>\n$local_pk\n,\n\n//EventSslContext::OPT_PASSPHRASE  => \"test\",\n\nEventSslContext\n::\nOPT_ALLOW_SELF_SIGNED\n=>\ntrue\n,\n    ));\n    return\n$ctx\n;\n}\n$port\n=\n9999\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$ip\n=\n'0.0.0.0'\n;\n$base\n= new\nEventBase\n();\n$ctx\n=\n_init_ssl\n();\n$http\n= new\nEventHttp\n(\n$base\n,\n$ctx\n);\n$http\n->\nsetAllowedMethods\n(\nEventHttpRequest\n::\nCMD_GET\n|\nEventHttpRequest\n::\nCMD_POST\n);\n$http\n->\nsetCallback\n(\n\"/dump\"\n,\n\"_http_dump\"\n, array(\n4\n,\n8\n));\n$http\n->\nsetCallback\n(\n\"/about\"\n,\n\"_http_about\"\n);\n$http\n->\nsetCallback\n(\n\"/err400\"\n,\n\"_http_400\"\n);\n$http\n->\nsetDefaultCallback\n(\n\"_http_default\"\n,\n\"custom data value\"\n);\n$http\n->\nbind\n(\n$ip\n,\n$port\n);\n$base\n->\ndispatch\n();"
  },
  {
    "input": "Example #10 OpenSSL connection",
    "output": "<?php\n/*\n * Sample OpenSSL client.\n *\n * Usage:\n * 1) Launch a server, e.g.:\n * $ php examples/https.php 9999\n *\n * 2) Launch the client in another terminal:\n * $ php examples/ssl-connection.php 9999\n */\nfunction\n_request_handler\n(\n$req\n,\n$base\n) {\n    echo\n__FUNCTION__\n,\nPHP_EOL\n;\n    if (\nis_null\n(\n$req\n)) {\n        echo\n\"Timed out\\n\"\n;\n    } else {\n\n$response_code\n=\n$req\n->\ngetResponseCode\n();\n        if (\n$response_code\n==\n0\n) {\n            echo\n\"Connection refused\\n\"\n;\n        } elseif (\n$response_code\n!=\n200\n) {\n            echo\n\"Unexpected response:\n$response_code\n\\n\"\n;\n        } else {\n            echo\n\"Success:\n$response_code\n\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n            echo\n\"Body:\\n\"\n;\n            while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n                echo\n$s\n,\nPHP_EOL\n;\n            }\n        }\n    }\n\n$base\n->\nexit\n(\nNULL\n);\n}\nfunction\n_init_ssl\n() {\n\n$ctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_CLIENT_METHOD\n, array ());\n    return\n$ctx\n;\n}\n// Allow to override the port\n$port\n=\n9999\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\\n\"\n);\n}\n$host\n=\n'127.0.0.1'\n;\n$ctx\n=\n_init_ssl\n();\nif (!\n$ctx\n) {\n\ntrigger_error\n(\n\"Failed creating SSL context\"\n,\nE_USER_ERROR\n);\n}\n$base\n= new\nEventBase\n();\nif (!\n$base\n) {\n\ntrigger_error\n(\n\"Failed to initialize event base\"\n,\nE_USER_ERROR\n);\n}\n$conn\n= new\nEventHttpConnection\n(\n$base\n,\nNULL\n,\n$host\n,\n$port\n,\n$ctx\n);\n$conn\n->\nsetTimeout\n(\n50\n);\n$req\n= new\nEventHttpRequest\n(\n\"_request_handler\"\n,\n$base\n);\n$req\n->\naddHeader\n(\n\"Host\"\n,\n$host\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$buf\n=\n$req\n->\ngetOutputBuffer\n();\n$buf\n->\nadd\n(\n\"<html>HTML TEST</html>\"\n);\n//$req->addHeader(\"Content-Length\", $buf->length, EventHttpRequest::OUTPUT_HEADER);\n//$req->addHeader(\"Connection\", \"close\", EventHttpRequest::OUTPUT_HEADER);\n$conn\n->\nmakeRequest\n(\n$req\n,\nEventHttpRequest\n::\nCMD_POST\n,\n\"/dump\"\n);\n$base\n->\ndispatch\n();\necho\n\"END\\n\"\n;\n?>"
  },
  {
    "input": "Example #11 \n   EventHttpConnection::makeRequest() example",
    "output": "<?php\nfunction\n_request_handler\n(\n$req\n,\n$base\n) {\n    echo\n__FUNCTION__\n,\nPHP_EOL\n;\n    if (\nis_null\n(\n$req\n)) {\n        echo\n\"Timed out\\n\"\n;\n    } else {\n\n$response_code\n=\n$req\n->\ngetResponseCode\n();\n        if (\n$response_code\n==\n0\n) {\n            echo\n\"Connection refused\\n\"\n;\n        } elseif (\n$response_code\n!=\n200\n) {\n            echo\n\"Unexpected response:\n$response_code\n\\n\"\n;\n        } else {\n            echo\n\"Success:\n$response_code\n\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n            echo\n\"Body:\\n\"\n;\n            while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n                echo\n$s\n,\nPHP_EOL\n;\n            }\n        }\n    }\n\n$base\n->\nexit\n(\nNULL\n);\n}\n$address\n=\n\"127.0.0.1\"\n;\n$port\n=\n80\n;\n$base\n= new\nEventBase\n();\n$conn\n= new\nEventHttpConnection\n(\n$base\n,\nNULL\n,\n$address\n,\n$port\n);\n$conn\n->\nsetTimeout\n(\n5\n);\n$req\n= new\nEventHttpRequest\n(\n\"_request_handler\"\n,\n$base\n);\n$req\n->\naddHeader\n(\n\"Host\"\n,\n$address\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$req\n->\naddHeader\n(\n\"Content-Length\"\n,\n\"0\"\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$conn\n->\nmakeRequest\n(\n$req\n,\nEventHttpRequest\n::\nCMD_GET\n,\n\"/index.cphp\"\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #12 \n   Connection listener based on a UNIX domain socket",
    "output": "<?php\n/*\n * Simple echo server based on libevent's connection listener.\n *\n * Usage:\n * 1) In one terminal window run:\n *\n * $ php unix-domain-listener.php [path-to-socket]\n *\n * 2) In another terminal window open up connection\n * to the socket, e.g.:\n *\n * $ socat - GOPEN:/tmp/1.sock\n *\n * 3) Start typing. The server should repeat the input.\n */\nclass\nMyListenerConnection\n{\n    private\n$bev\n,\n$base\n;\n    public function\n__destruct\n() {\n        if (\n$this\n->\nbev\n) {\n\n$this\n->\nbev\n->\nfree\n();\n        }\n    }\n    public function\n__construct\n(\n$base\n,\n$fd\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nbev\n= new\nEventBufferEvent\n(\n$base\n,\n$fd\n,\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n\n$this\n->\nbev\n->\nsetCallbacks\n(array(\n$this\n,\n\"echoReadCallback\"\n),\nNULL\n,\n            array(\n$this\n,\n\"echoEventCallback\"\n),\nNULL\n);\n        if (!\n$this\n->\nbev\n->\nenable\n(\nEvent\n::\nREAD\n)) {\n            echo\n\"Failed to enable READ\\n\"\n;\n            return;\n        }\n    }\n    public function\nechoReadCallback\n(\n$bev\n,\n$ctx\n) {\n\n// Copy all the data from the input buffer to the output buffer\n\n$bev\n->\noutput\n->\naddBuffer\n(\n$bev\n->\ninput\n);\n    }\n    public function\nechoEventCallback\n(\n$bev\n,\n$events\n,\n$ctx\n) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"Error from bufferevent\\n\"\n;\n        }\n        if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n$bev\n->\nfree\n();\n\n$bev\n=\nNULL\n;\n        }\n    }\n}\nclass\nMyListener\n{\n    public\n$base\n,\n\n$listener\n,\n\n$socket\n;\n    private\n$conn\n= array();\n    public function\n__destruct\n() {\n        foreach (\n$this\n->\nconn\nas &\n$c\n)\n$c\n=\nNULL\n;\n    }\n    public function\n__construct\n(\n$sock_path\n) {\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            echo\n\"Couldn't open event base\"\n;\n            exit(\n1\n);\n        }\n        if (\nfile_exists\n(\n$sock_path\n)) {\n\nunlink\n(\n$sock_path\n);\n        }\n\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n             array(\n$this\n,\n\"acceptConnCallback\"\n),\n$this\n->\nbase\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n, -\n1\n,\n\n\"unix:\n$sock_path\n\"\n);\n        if (!\n$this\n->\nlistener\n) {\n\ntrigger_error\n(\n\"Couldn't create listener\"\n,\nE_USER_ERROR\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n(array(\n$this\n,\n\"accept_error_cb\"\n));\n    }\n    public function\ndispatch\n() {\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n\n// This callback is invoked when there is data to read on $bev\n\npublic function\nacceptConnCallback\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n\n// We got a new connection! Set up a bufferevent for it. */\n\n$base\n=\n$this\n->\nbase\n;\n\n$this\n->\nconn\n[] = new\nMyListenerConnection\n(\n$base\n,\n$fd\n);\n    }\n    public function\naccept_error_cb\n(\n$listener\n,\n$ctx\n) {\n\n$base\n=\n$this\n->\nbase\n;\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. \"\n\n.\n\"Shutting down.\\n\"\n,\n\nEventUtil\n::\ngetLastSocketErrno\n(),\n\nEventUtil\n::\ngetLastSocketError\n());\n\n$base\n->\nexit\n(\nNULL\n);\n    }\n}\nif (\n$argc\n<=\n1\n) {\n    exit(\n\"Socket path is not provided\\n\"\n);\n}\n$sock_path\n=\n$argv\n[\n1\n];\n$l\n= new\nMyListener\n(\n$sock_path\n);\n$l\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #13 Simple SMTP server",
    "output": "<?php\n\n/*\n * Author: Andrew Rose <hello at andrewrose dot co dot uk>\n *\n * Usage:\n * 1) Prepare cert.pem certificate and privkey.pem private key files.\n * 2) Launch the server script\n * 3) Open TLS connection, e.g.:\n *      $ openssl s_client -connect localhost:25 -starttls smtp -crlf\n * 4) Start testing the commands listed in `cmd` method below.\n */\nclass\nHandler\n{\n    public\n$domainName\n=\nFALSE\n;\n    public\n$connections\n= [];\n    public\n$buffers\n= [];\n    public\n$maxRead\n=\n256000\n;\n    public function\n__construct\n() {\n\n$this\n->\nctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_SERVER_METHOD\n, [\n\nEventSslContext\n::\nOPT_LOCAL_CERT\n=>\n'cert.pem'\n,\n\nEventSslContext\n::\nOPT_LOCAL_PK\n=>\n'privkey.pem'\n,\n\n//EventSslContext::OPT_PASSPHRASE  => '',\n\nEventSslContext\n::\nOPT_VERIFY_PEER\n=>\nfalse\n,\n// change to true with authentic cert\n\nEventSslContext\n::\nOPT_ALLOW_SELF_SIGNED\n=>\ntrue\n// change to false with authentic cert\n\n]);\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            exit(\n\"Couldn't open event base\\n\"\n);\n        }\n        if (!\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n            [\n$this\n,\n'ev_accept'\n],\n\n$this\n->\nctx\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n,\n            -\n1\n,\n\n'0.0.0.0:25'\n))\n        {\n            exit(\n\"Couldn't create listener\\n\"\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n([\n$this\n,\n'ev_error'\n]);\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n    public function\nev_accept\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n        static\n$id\n=\n0\n;\n\n$id\n+=\n1\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] =\n''\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n] = new\nEventBufferEvent\n(\n$this\n->\nbase\n,\n$fd\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n        if (!\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]) {\n            echo\n\"Failed creating buffer\\n\"\n;\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n            exit(\n1\n);\n        }\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nsetCallbacks\n([\n$this\n,\n\"ev_read\"\n],\nNULL\n,\n            [\n$this\n,\n'ev_error'\n],\n$id\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n\n$this\n->\nev_write\n(\n$id\n,\n'220 '\n.\n$this\n->\ndomainName\n.\n\" wazzzap?\\r\\n\"\n);\n    }\n    function\nev_error\n(\n$listener\n,\n$ctx\n) {\n\n$errno\n=\nEventUtil\n::\ngetLastSocketErrno\n();\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. Shutting down.\\n\"\n,\n\n$errno\n,\nEventUtil\n::\ngetLastSocketError\n());\n        if (\n$errno\n!=\n0\n) {\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n            exit();\n        }\n    }\n    public function\nev_close\n(\n$id\n) {\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\ndisable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n        unset(\n$this\n->\nconnections\n[\n$id\n]);\n    }\n    protected function\nev_write\n(\n$id\n,\n$string\n) {\n        echo\n'S('\n.\n$id\n.\n'): '\n.\n$string\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nwrite\n(\n$string\n);\n    }\n    public function\nev_read\n(\n$buffer\n,\n$id\n) {\n        while(\n$buffer\n->\ninput\n->\nlength\n>\n0\n) {\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] .=\n$buffer\n->\ninput\n->\nread\n(\n$this\n->\nmaxRead\n);\n\n$clientDataLen\n=\nstrlen\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n]);\n            if(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n][\n$clientDataLen\n-\n1\n] ==\n\"\\n\"\n\n&&\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n][\n$clientDataLen\n-\n2\n] ==\n\"\\r\"\n)\n            {\n\n// remove the trailing \\r\\n\n\n$line\n=\nsubstr\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n],\n0\n,\n\nstrlen\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n]) -\n2\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] =\n''\n;\n\n$this\n->\ncmd\n(\n$buffer\n,\n$id\n,\n$line\n);\n            }\n        }\n    }\n    protected function\ncmd\n(\n$buffer\n,\n$id\n,\n$line\n) {\n        switch (\n$line\n) {\n            case\nstrncmp\n(\n'EHLO '\n,\n$line\n,\n4\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250-STARTTLS\\r\\n\"\n);\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK ehlo\\r\\n\"\n);\n                break;\n            case\nstrncmp\n(\n'HELO '\n,\n$line\n,\n4\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250-STARTTLS\\r\\n\"\n);\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK helo\\r\\n\"\n);\n                break;\n            case\nstrncmp\n(\n'QUIT'\n,\n$line\n,\n3\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK quit\\r\\n\"\n);\n\n$this\n->\nev_close\n(\n$id\n);\n                break;\n            case\nstrncmp\n(\n'STARTTLS'\n,\n$line\n,\n3\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"220 Ready to start TLS\\r\\n\"\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n] =\nEventBufferEvent\n::\nsslFilter\n(\n$this\n->\nbase\n,\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n],\n$this\n->\nctx\n,\n\nEventBufferEvent\n::\nSSL_ACCEPTING\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nsetCallbacks\n([\n$this\n,\n\"ev_read\"\n],\nNULL\n, [\n$this\n,\n'ev_error'\n],\n$id\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n                break;\n            default:\n                echo\n'unknown command: '\n.\n$line\n.\n\"\\n\"\n;\n                break;\n        }\n    }\n}\nnew\nHandler\n();"
  },
  {
    "input": "Example #1 Handling SIGTERM signal",
    "output": "<?php\n/*\nLaunch it in a terminal window:\n$ php examples/signal.php\nIn another terminal window find out the pid and send SIGTERM, e.g.:\n$ ps aux | grep examp\nruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php\nruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp\n$ kill -TERM 3976\nAt the first terminal window you should catch the following:\nCaught signal 15\n*/\nclass\nMyEventSignal\n{\n    private\n$base\n,\n$ev\n;\n    public function\n__construct\n(\n$base\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nev\n=\nEvent\n::\nsignal\n(\n$base\n,\nSIGTERM\n, array(\n$this\n,\n'eventSighandler'\n));\n\n$this\n->\nev\n->\nadd\n();\n    }\n    public function\neventSighandler\n(\n$no\n,\n$c\n) {\n        echo\n\"Caught signal\n$no\n\\n\"\n;\n\n$this\n->\nbase\n->\nexit\n();\n    }\n}\n$base\n= new\nEventBase\n();\n$c\n= new\nMyEventSignal\n(\n$base\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 Adding a custom signal",
    "output": "<?php\n/*\nLaunch it in a terminal window:\n$ php examples/signal.php\nIn another terminal window find out the pid and send SIGTERM, e.g.:\n$ ps aux | grep examp\nruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php\nruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp\n$ kill -TERM 3976\nAt the first terminal window you should catch the following:\nCaught signal 15\n*/\nclass\nMyEventSignal\n{\n    private\n$base\n,\n$ev\n;\n    public function\n__construct\n(\n$base\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nev\n=\nEvent\n::\nsignal\n(\n$base\n,\nSIGTERM\n, array(\n$this\n,\n'eventSighandler'\n));\n\n$this\n->\nev\n->\nadd\n();\n    }\n    public function\neventSighandler\n(\n$no\n,\n$c\n) {\n        echo\n\"Caught signal\n$no\n\\n\"\n;\n\n$this\n->\nbase\n->\nexit\n();\n    }\n}\n$base\n= new\nEventBase\n();\n$c\n= new\nMyEventSignal\n(\n$base\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #2 Adding a timer",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$n\n=\n2\n;\n$e\n=\nEvent\n::\ntimer\n(\n$base\n, function(\n$n\n) use (&\n$e\n) {\n    echo\n\"\n$n\n seconds elapsed\\n\"\n;\n\n$e\n->\ndelTimer\n();\n},\n$n\n);\n$e\n->\nadd\n(\n$n\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventBase::getFeatures() example",
    "output": "<?php\n// Avoiding \"select\" method\n$cfg\n= new\nEventConfig\n();\nif (\n$cfg\n->\navoidMethod\n(\n\"select\"\n)) {\n    echo\n\"'select' method avoided\\n\"\n;\n}\n$base\n= new\nEventBase\n(\n$cfg\n);\necho\n\"Features:\\n\"\n;\n$features\n=\n$base\n->\ngetFeatures\n();\n(\n$features\n&\nEventConfig\n::\nFEATURE_ET\n) and print\n\"ET - edge-triggered IO\\n\"\n;\n(\n$features\n&\nEventConfig\n::\nFEATURE_O1\n) and print\n\"O1 - O(1) operation for adding/deleting events\\n\"\n;\n(\n$features\n&\nEventConfig\n::\nFEATURE_FDS\n) and print\n\"FDS - arbitrary file descriptor types, and not just sockets\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 \n    EventBase::getMethod() example",
    "output": "<?php\n$cfg\n= new\nEventConfig\n();\nif (\n$cfg\n->\navoidMethod\n(\n\"select\"\n)) {\n    echo\n\"'select' method avoided\\n\"\n;\n}\n// Create event_base associated with the config\n$base\n= new\nEventBase\n(\n$cfg\n);\necho\n\"Event method used: \"\n,\n$base\n->\ngetMethod\n(),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 \n    EventBuffer::search() example",
    "output": "<?php\n// Count total occurrences of 'str' in 'buf'\nfunction\ncount_instances\n(\n$buf\n,\n$str\n) {\n\n$total\n=\n0\n;\n\n$p\n=\n0\n;\n\n$i\n=\n0\n;\n    while (\n1\n) {\n\n$p\n=\n$buf\n->\nsearch\n(\n$str\n,\n$p\n);\n        if (\n$p\n===\nFALSE\n) {\n            break;\n        }\n        ++\n$total\n;\n        ++\n$p\n;\n    }\n    return\n$total\n;\n}\n$buf\n= new\nEventBuffer\n();\n$buf\n->\nadd\n(\n\"Some string within a string inside another string\"\n);\nvar_dump\n(\ncount_instances\n(\n$buf\n,\n\"str\"\n));\n?>"
  },
  {
    "input": "Example #1 \n    EventBufferEvent::connect() example",
    "output": "<?php\n/*\n * 1. Connect to 127.0.0.1 at port 80\n * by means of EventBufferEvent::connect().\n *\n * 2. Request /index.cphp via HTTP/1.0\n * using the output buffer.\n *\n * 3. Asyncronously read the response and print it to stdout.\n */\n/* Read callback */\nfunction\nreadcb\n(\n$bev\n,\n$base\n) {\n\n$input\n=\n$bev\n->\ngetInput\n();\n    while ((\n$n\n=\n$input\n->\nremove\n(\n$buf\n,\n1024\n)) >\n0\n) {\n        echo\n$buf\n;\n    }\n}\n/* Event callback */\nfunction\neventcb\n(\n$bev\n,\n$events\n,\n$base\n) {\n    if (\n$events\n&\nEventBufferEvent\n::\nCONNECTED\n) {\n        echo\n\"Connected.\\n\"\n;\n    } elseif (\n$events\n& (\nEventBufferEvent\n::\nERROR\n|\nEventBufferEvent\n::\nEOF\n)) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"DNS error: \"\n,\n$bev\n->\ngetDnsErrorString\n(),\nPHP_EOL\n;\n        }\n        echo\n\"Closing\\n\"\n;\n\n$base\n->\nexit\n();\n        exit(\n\"Done\\n\"\n);\n    }\n}\n$base\n= new\nEventBase\n();\necho\n\"step 1\\n\"\n;\n$bev\n= new\nEventBufferEvent\n(\n$base\n,\n/* use internal socket */\nNULL\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n|\nEventBufferEvent\n::\nOPT_DEFER_CALLBACKS\n);\nif (!\n$bev\n) {\n    exit(\n\"Failed creating bufferevent socket\\n\"\n);\n}\necho\n\"step 2\\n\"\n;\n$bev\n->\nsetCallbacks\n(\n\"readcb\"\n,\n/* writecb */\nNULL\n,\n\"eventcb\"\n,\n$base\n);\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\necho\n\"step 3\\n\"\n;\n/* Send request */\n$output\n=\n$bev\n->\ngetOutput\n();\nif (!\n$output\n->\nadd\n(\n\n\"GET /index.cphp HTTP/1.0\\r\\n\"\n.\n\n\"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\n\"Failed adding request to output buffer\\n\"\n);\n}\n/* Connect to the host syncronously.\n * We know the IP, and don't need to resolve DNS. */\nif (!\n$bev\n->\nconnect\n(\n\"127.0.0.1:80\"\n)) {\n    exit(\n\"Can't connect to host\\n\"\n);\n}\n/* Dispatch pending events */\n$base\n->\ndispatch\n();"
  },
  {
    "input": "Example #2 Connect to UNIX domain socket which presumably is served by a server, read response from\n   the server and output it to the console",
    "output": "<?php\nclass\nMyUnixSocketClient\n{\n    private\n$base\n,\n$bev\n;\n    function\n__construct\n(\n$base\n,\n$sock_path\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nbev\n= new\nEventBufferEvent\n(\n$base\n,\nNULL\n,\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n,\n            array (\n$this\n,\n\"read_cb\"\n),\nNULL\n, array (\n$this\n,\n\"event_cb\"\n));\n        if (!\n$this\n->\nbev\n->\nconnect\n(\n\"unix:\n$sock_path\n\"\n)) {\n\ntrigger_error\n(\n\"Failed to connect to socket `\n$sock_path\n'\"\n,\nE_USER_ERROR\n);\n        }\n\n$this\n->\nbev\n->\nenable\n(\nEvent\n::\nREAD\n);\n    }\n    function\n__destruct\n() {\n        if (\n$this\n->\nbev\n) {\n\n$this\n->\nbev\n->\nfree\n();\n\n$this\n->\nbev\n=\nNULL\n;\n        }\n    }\n    function\ndispatch\n() {\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n    function\nread_cb\n(\n$bev\n,\n$unused\n) {\n\n$in\n=\n$bev\n->\ninput\n;\n\nprintf\n(\n\"Received %ld bytes\\n\"\n,\n$in\n->\nlength\n);\n\nprintf\n(\n\"----- data ----\\n\"\n);\n\nprintf\n(\n\"%ld:\\t%s\\n\"\n, (int)\n$in\n->\nlength\n,\n$in\n->\npullup\n(-\n1\n));\n\n$this\n->\nbev\n->\nfree\n();\n\n$this\n->\nbev\n=\nNULL\n;\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n    }\n    function\nevent_cb\n(\n$bev\n,\n$events\n,\n$unused\n) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"Error from bufferevent\\n\"\n;\n        }\n        if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n$bev\n->\nfree\n();\n\n$bev\n=\nNULL\n;\n        } elseif (\n$events\n&\nEventBufferEvent\n::\nCONNECTED\n) {\n\n$bev\n->\noutput\n->\nadd\n(\n\"test\\n\"\n);\n        }\n    }\n}\nif (\n$argc\n<=\n1\n) {\n    exit(\n\"Socket path is not provided\\n\"\n);\n}\n$sock_path\n=\n$argv\n[\n1\n];\n$base\n= new\nEventBase\n();\n$cl\n= new\nMyUnixSocketClient\n(\n$base\n,\n$sock_path\n);\n$cl\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventBufferEvent::connectHost() example",
    "output": "<?php\n/* Read callback */\nfunction\nreadcb\n(\n$bev\n,\n$base\n) {\n\n//$input = $bev->input; //$bev->getInput();\n    //$pos = $input->search(\"TTP\");\n\n$pos\n=\n$bev\n->\ninput\n->\nsearch\n(\n\"TTP\"\n);\n    while ((\n$n\n=\n$bev\n->\ninput\n->\nremove\n(\n$buf\n,\n1024\n)) >\n0\n) {\n        echo\n$buf\n;\n    }\n}\n/* Event callback */\nfunction\neventcb\n(\n$bev\n,\n$events\n,\n$base\n) {\n    if (\n$events\n&\nEventBufferEvent\n::\nCONNECTED\n) {\n        echo\n\"Connected.\\n\"\n;\n    } elseif (\n$events\n& (\nEventBufferEvent\n::\nERROR\n|\nEventBufferEvent\n::\nEOF\n)) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"DNS error: \"\n,\n$bev\n->\ngetDnsErrorString\n(),\nPHP_EOL\n;\n        }\n        echo\n\"Closing\\n\"\n;\n\n$base\n->\nexit\n();\n        exit(\n\"Done\\n\"\n);\n    }\n}\n$base\n= new\nEventBase\n();\n$dns_base\n= new\nEventDnsBase\n(\n$base\n,\nTRUE\n);\n// We'll use async DNS resolving\nif (!\n$dns_base\n) {\n    exit(\n\"Failed to init DNS Base\\n\"\n);\n}\n$bev\n= new\nEventBufferEvent\n(\n$base\n,\n/* use internal socket */\nNULL\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n|\nEventBufferEvent\n::\nOPT_DEFER_CALLBACKS\n,\n\n\"readcb\"\n,\n/* writecb */\nNULL\n,\n\"eventcb\"\n,\n$base\n);\nif (!\n$bev\n) {\n    exit(\n\"Failed creating bufferevent socket\\n\"\n);\n}\n//$bev->setCallbacks(\"readcb\", /* writecb */ NULL, \"eventcb\", $base);\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n$output\n=\n$bev\n->\noutput\n;\n//$bev->getOutput();\nif (!\n$output\n->\nadd\n(\n\n\"GET\n{\n$argv\n[\n2\n]}\n HTTP/1.0\\r\\n\"\n.\n\n\"Host:\n{\n$argv\n[\n1\n]}\n\\r\\n\"\n.\n\n\"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\n\"Failed adding request to output buffer\\n\"\n);\n}\nif (!\n$bev\n->\nconnectHost\n(\n$dns_base\n,\n$argv\n[\n1\n],\n80\n,\nEventUtil\n::\nAF_UNSPEC\n)) {\n    exit(\n\"Can't connect to host\n{\n$argv\n[\n1\n]}\n\\n\"\n);\n}\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 Buffer event's read callback",
    "output": "<?php\nfunction\nreadcb\n(\n$bev\n,\n$base\n) {\n\n$input\n=\n$bev\n->\ninput\n;\n//$bev->getInput();\n\nwhile ((\n$n\n=\n$input\n->\nremove\n(\n$buf\n,\n1024\n)) >\n0\n) {\n        echo\n$buf\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 \n    EventBufferEvent::getOutput() example",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$dns_base\n= new\nEventDnsBase\n(\n$base\n,\nTRUE\n);\n// Use async DNS resolving\nif (!\n$dns_base\n) {\n    exit(\n\"Failed to init DNS Base\\n\"\n);\n}\n$bev\n= new\nEventBufferEvent\n(\n$base\n,\n/* use internal socket */\nNULL\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n|\nEventBufferEvent\n::\nOPT_DEFER_CALLBACKS\n,\n\n\"readcb\"\n,\n/* writecb */\nNULL\n,\n\"eventcb\"\n,\n$base\n);\nif (!\n$bev\n) {\n    exit(\n\"Failed creating bufferevent socket\\n\"\n);\n}\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n$output\n=\n$bev\n->\ngetOutput\n();\nif (!\n$output\n->\nadd\n(\n\n\"GET\n{\n$argv\n[\n2\n]}\n HTTP/1.0\\r\\n\"\n.\n\n\"Host:\n{\n$argv\n[\n1\n]}\n\\r\\n\"\n.\n\n\"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\n\"Failed adding request to output buffer\\n\"\n);\n}\n/* ... */\n?>"
  },
  {
    "input": "Example #1 \n    EventBufferEvent::sslError() example",
    "output": "<?php\n// This callback is invoked when some even occurs on the event listener,\n// e.g. connection closed, or an error occurred\nfunction\nssl_event_cb\n(\n$bev\n,\n$events\n,\n$ctx\n) {\n    if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n\n// Fetch errors from the SSL error stack\n\nwhile (\n$err\n=\n$bev\n->\nsslError\n()) {\n\nfprintf\n(\nSTDERR\n,\n\"Bufferevent error %s.\\n\"\n,\n$err\n);\n        }\n    }\n    if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n$bev\n->\nfree\n();\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Simple SMTP server",
    "output": "<?php\n\n/*\n * Author: Andrew Rose <hello at andrewrose dot co dot uk>\n *\n * Usage:\n * 1) Prepare cert.pem certificate and privkey.pem private key files.\n * 2) Launch the server script\n * 3) Open TLS connection, e.g.:\n *      $ openssl s_client -connect localhost:25 -starttls smtp -crlf\n * 4) Start testing the commands listed in `cmd` method below.\n */\nclass\nHandler\n{\n    public\n$domainName\n=\nFALSE\n;\n    public\n$connections\n= [];\n    public\n$buffers\n= [];\n    public\n$maxRead\n=\n256000\n;\n    public function\n__construct\n() {\n\n$this\n->\nctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_SERVER_METHOD\n, [\n\nEventSslContext\n::\nOPT_LOCAL_CERT\n=>\n'cert.pem'\n,\n\nEventSslContext\n::\nOPT_LOCAL_PK\n=>\n'privkey.pem'\n,\n\n//EventSslContext::OPT_PASSPHRASE  => '',\n\nEventSslContext\n::\nOPT_VERIFY_PEER\n=>\nfalse\n,\n// change to true with authentic cert\n\nEventSslContext\n::\nOPT_ALLOW_SELF_SIGNED\n=>\ntrue\n// change to false with authentic cert\n\n]);\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            exit(\n\"Couldn't open event base\\n\"\n);\n        }\n        if (!\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n            [\n$this\n,\n'ev_accept'\n],\n\n$this\n->\nctx\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n,\n            -\n1\n,\n\n'0.0.0.0:25'\n))\n        {\n            exit(\n\"Couldn't create listener\\n\"\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n([\n$this\n,\n'ev_error'\n]);\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n    public function\nev_accept\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n        static\n$id\n=\n0\n;\n\n$id\n+=\n1\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] =\n''\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n] = new\nEventBufferEvent\n(\n$this\n->\nbase\n,\n$fd\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n        if (!\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]) {\n            echo\n\"Failed creating buffer\\n\"\n;\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n            exit(\n1\n);\n        }\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nsetCallbacks\n([\n$this\n,\n\"ev_read\"\n],\nNULL\n,\n            [\n$this\n,\n'ev_error'\n],\n$id\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n\n$this\n->\nev_write\n(\n$id\n,\n'220 '\n.\n$this\n->\ndomainName\n.\n\" wazzzap?\\r\\n\"\n);\n    }\n    function\nev_error\n(\n$listener\n,\n$ctx\n) {\n\n$errno\n=\nEventUtil\n::\ngetLastSocketErrno\n();\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. Shutting down.\\n\"\n,\n\n$errno\n,\nEventUtil\n::\ngetLastSocketError\n());\n        if (\n$errno\n!=\n0\n) {\n\n$this\n->\nbase\n->\nexit\n(\nNULL\n);\n            exit();\n        }\n    }\n    public function\nev_close\n(\n$id\n) {\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\ndisable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n        unset(\n$this\n->\nconnections\n[\n$id\n]);\n    }\n    protected function\nev_write\n(\n$id\n,\n$string\n) {\n        echo\n'S('\n.\n$id\n.\n'): '\n.\n$string\n;\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nwrite\n(\n$string\n);\n    }\n    public function\nev_read\n(\n$buffer\n,\n$id\n) {\n        while(\n$buffer\n->\ninput\n->\nlength\n>\n0\n) {\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] .=\n$buffer\n->\ninput\n->\nread\n(\n$this\n->\nmaxRead\n);\n\n$clientDataLen\n=\nstrlen\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n]);\n            if(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n][\n$clientDataLen\n-\n1\n] ==\n\"\\n\"\n\n&&\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n][\n$clientDataLen\n-\n2\n] ==\n\"\\r\"\n)\n            {\n\n// remove the trailing \\r\\n\n\n$line\n=\nsubstr\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n],\n0\n,\n\nstrlen\n(\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n]) -\n2\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'clientData'\n] =\n''\n;\n\n$this\n->\ncmd\n(\n$buffer\n,\n$id\n,\n$line\n);\n            }\n        }\n    }\n    protected function\ncmd\n(\n$buffer\n,\n$id\n,\n$line\n) {\n        switch (\n$line\n) {\n            case\nstrncmp\n(\n'EHLO '\n,\n$line\n,\n4\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250-STARTTLS\\r\\n\"\n);\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK ehlo\\r\\n\"\n);\n                break;\n            case\nstrncmp\n(\n'HELO '\n,\n$line\n,\n4\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250-STARTTLS\\r\\n\"\n);\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK helo\\r\\n\"\n);\n                break;\n            case\nstrncmp\n(\n'QUIT'\n,\n$line\n,\n3\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"250 OK quit\\r\\n\"\n);\n\n$this\n->\nev_close\n(\n$id\n);\n                break;\n            case\nstrncmp\n(\n'STARTTLS'\n,\n$line\n,\n3\n):\n\n$this\n->\nev_write\n(\n$id\n,\n\"220 Ready to start TLS\\r\\n\"\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n] =\nEventBufferEvent\n::\nsslFilter\n(\n$this\n->\nbase\n,\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n],\n$this\n->\nctx\n,\n\nEventBufferEvent\n::\nSSL_ACCEPTING\n,\n\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nsetCallbacks\n([\n$this\n,\n\"ev_read\"\n],\nNULL\n, [\n$this\n,\n'ev_error'\n],\n$id\n);\n\n$this\n->\nconnections\n[\n$id\n][\n'cnx'\n]->\nenable\n(\nEvent\n::\nREAD\n|\nEvent\n::\nWRITE\n);\n                break;\n            default:\n                echo\n'unknown command: '\n.\n$line\n.\n\"\\n\"\n;\n                break;\n        }\n    }\n}\nnew\nHandler\n();"
  },
  {
    "input": "Example #1 \n    EventConfig::avoidMethod() example",
    "output": "<?php\n$cfg\n= new\nEventConfig\n();\nif (\n$cfg\n->\navoidMethod\n(\n\"select\"\n)) {\n    echo\n\"'select' method avoided\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 \n    EventConfig::__construct() example",
    "output": "<?php\n// Avoiding \"select\" method\n$cfg\n= new\nEventConfig\n();\nif (\n$cfg\n->\navoidMethod\n(\n\"select\"\n)) {\n    echo\n\"'select' method avoided\\n\"\n;\n}\n// Create event_base associated with the config\n$base\n= new\nEventBase\n(\n$cfg\n);\n/* Now $base is configured to avoid select backend(method) */\n?>"
  },
  {
    "input": "Example #1 \n    EventConfig::requireFeatures() example",
    "output": "<?php\n$cfg\n= new\nEventConfig\n();\n// Create event_base associated with the config\n$base\n= new\nEventBase\n(\n$cfg\n);\n// Require FDS feature\nif (\n$cfg\n->\nrequireFeatures\n(\nEventConfig\n::\nFEATURE_FDS\n)) {\n    echo\n\"FDS feature is now required\\n\"\n;\n\n$base\n= new\nEventBase\n(\n$cfg\n);\n    (\n$base\n->\ngetFeatures\n() &\nEventConfig\n::\nFEATURE_FDS\n)\n        and print\n\"FDS - arbitrary file descriptor types, and not just sockets\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 \n    EventHttp::accept() example",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$addresses\n= array (\n\n8091\n=>\n\"127.0.0.1\"\n,\n\n8092\n=>\n\"127.0.0.2\"\n,\n);\n$i\n=\n0\n;\n$socket\n= array();\nforeach (\n$addresses\nas\n$port\n=>\n$ip\n) {\n    echo\n$ip\n,\n\" \"\n,\n$port\n,\nPHP_EOL\n;\n\n$socket\n[\n$i\n] =\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\n    if (!\nsocket_bind\n(\n$socket\n[\n$i\n],\n$ip\n,\n$port\n)) {\n        exit(\n\"socket_bind failed\\n\"\n);\n    }\n\nsocket_listen\n(\n$socket\n[\n$i\n],\n0\n);\n\nsocket_set_nonblock\n(\n$socket\n[\n$i\n]);\n    if (!\n$http\n->\naccept\n(\n$socket\n[\n$i\n])) {\n        echo\n\"Accept failed\\n\"\n;\n        exit(\n1\n);\n    }\n    ++\n$i\n;\n}\n$http\n->\nsetCallback\n(\n\"/some-page\"\n, function() {\n echo\n\"(some-page)\\n\"\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n});\n$http\n->\nsetDefaultCallback\n(function(\n$req\n) {\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n});\n$signal\n=\nEvent\n::\nsignal\n(\n$base\n,\nSIGINT\n, function () use (\n$base\n) {\n    echo\n\"Caught SIGINT. Stopping...\\n\"\n;\n\n$base\n->\nstop\n();\n});\n$signal\n->\nadd\n();\n$base\n->\ndispatch\n();\necho\n\"END\\n\"\n;\n// We didn't close sockets, since Libevent already sets\n// CLOSE_ON_FREE and CLOSE_ON_EXEC flags on the file\n// descriptor associated with the sockets.\n?>"
  },
  {
    "input": "Example #1 \n    EventHttp::addServerAlias() example",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (!\n$http\n->\nbind\n(\n\"127.0.0.1\"\n,\n8088\n)) {\n    exit(\n\"bind(1) failed\\n\"\n);\n};\nif (!\n$http\n->\naddServerAlias\n(\n\"local.net\"\n)) {\n    exit(\n\"Failed to add server alias\\n\"\n);\n}\n$http\n->\nsetCallback\n(\n\"/about\"\n, function(\n$req\n) {\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n});\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttp::bind() example",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (!\n$http\n->\nbind\n(\n\"127.0.0.1\"\n,\n8088\n)) {\n    exit(\n\"bind(1) failed\\n\"\n);\n};\nif (!\n$http\n->\nbind\n(\n\"127.0.0.1\"\n,\n8089\n)) {\n    exit(\n\"bind(2) failed\\n\"\n);\n};\n$http\n->\nsetCallback\n(\n\"/about\"\n, function(\n$req\n) {\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n});\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 Simple HTTP server",
    "output": "<?php\n/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST /about HTTP/1.0\n * Content-Type: text/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * $ nc -t 127.0.0.1 8010\n * GET /dump HTTP/1.0\n * Content-Type: text/plain\n * Content-Encoding: UTF-8\n * Connection: close\n * (press Enter)\n *\n * It will output:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n * (press Enter)\n *\n * $ nc -t 127.0.0.1 8010\n * GET /unknown HTTP/1.0\n * Connection: close\n *\n * It will output:\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n */\nfunction\n_http_dump\n(\n$req\n,\n$data\n) {\n    static\n$counter\n=\n0\n;\n    static\n$max_requests\n=\n2\n;\n    if (++\n$counter\n>=\n$max_requests\n)  {\n        echo\n\"Counter reached max requests\n$max_requests\n. Exiting\\n\"\n;\n        exit();\n    }\n    echo\n__METHOD__\n,\n\" called\\n\"\n;\n    echo\n\"request:\"\n;\nvar_dump\n(\n$req\n);\n    echo\n\"data:\"\n;\nvar_dump\n(\n$data\n);\n    echo\n\"\\n===== DUMP =====\\n\"\n;\n    echo\n\"Command:\"\n,\n$req\n->\ngetCommand\n(),\nPHP_EOL\n;\n    echo\n\"URI:\"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"Input headers:\"\n;\nvar_dump\n(\n$req\n->\ngetInputHeaders\n());\n    echo\n\"Output headers:\"\n;\nvar_dump\n(\n$req\n->\ngetOutputHeaders\n());\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n    echo\n\"\\n >> Reading input buffer ...\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n    while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n        echo\n$s\n,\nPHP_EOL\n;\n    }\n    echo\n\"No more data in the buffer\\n\"\n;\n}\nfunction\n_http_about\n(\n$req\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\nfunction\n_http_default\n(\n$req\n,\n$data\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\n$port\n=\n8010\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$http\n->\nsetAllowedMethods\n(\nEventHttpRequest\n::\nCMD_GET\n|\nEventHttpRequest\n::\nCMD_POST\n);\n$http\n->\nsetCallback\n(\n\"/dump\"\n,\n\"_http_dump\"\n, array(\n4\n,\n8\n));\n$http\n->\nsetCallback\n(\n\"/about\"\n,\n\"_http_about\"\n);\n$http\n->\nsetDefaultCallback\n(\n\"_http_default\"\n,\n\"custom data value\"\n);\n$http\n->\nbind\n(\n\"0.0.0.0\"\n,\n8010\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttp::setCallback() example",
    "output": "<?php\n/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST /about HTTP/1.0\n * Content-Type: text/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP/1.0 200 OK\n * Content-Type: text/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n */\nfunction\n_http_dump\n(\n$req\n,\n$data\n) {\n    static\n$counter\n=\n0\n;\n    static\n$max_requests\n=\n2\n;\n    if (++\n$counter\n>=\n$max_requests\n)  {\n        echo\n\"Counter reached max requests\n$max_requests\n. Exiting\\n\"\n;\n        exit();\n    }\n    echo\n__METHOD__\n,\n\" called\\n\"\n;\n    echo\n\"request:\"\n;\nvar_dump\n(\n$req\n);\n    echo\n\"data:\"\n;\nvar_dump\n(\n$data\n);\n    echo\n\"\\n===== DUMP =====\\n\"\n;\n    echo\n\"Command:\"\n,\n$req\n->\ngetCommand\n(),\nPHP_EOL\n;\n    echo\n\"URI:\"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"Input headers:\"\n;\nvar_dump\n(\n$req\n->\ngetInputHeaders\n());\n    echo\n\"Output headers:\"\n;\nvar_dump\n(\n$req\n->\ngetOutputHeaders\n());\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n    echo\n\"\\n >> Reading input buffer ...\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n    while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n        echo\n$s\n,\nPHP_EOL\n;\n    }\n    echo\n\"No more data in the buffer\\n\"\n;\n}\nfunction\n_http_about\n(\n$req\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\nfunction\n_http_default\n(\n$req\n,\n$data\n) {\n    echo\n__METHOD__\n,\nPHP_EOL\n;\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n    echo\n\"\\n >> Sending reply ...\"\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n    echo\n\"OK\\n\"\n;\n}\n$port\n=\n8010\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$http\n->\nsetAllowedMethods\n(\nEventHttpRequest\n::\nCMD_GET\n|\nEventHttpRequest\n::\nCMD_POST\n);\n$http\n->\nsetCallback\n(\n\"/dump\"\n,\n\"_http_dump\"\n, array(\n4\n,\n8\n));\n$http\n->\nsetCallback\n(\n\"/about\"\n,\n\"_http_about\"\n);\n$http\n->\nsetDefaultCallback\n(\n\"_http_default\"\n,\n\"custom data value\"\n);\n$http\n->\nbind\n(\n\"0.0.0.0\"\n,\n8010\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttp::setDefaultCallback() example",
    "output": "<?php\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (!\n$http\n->\nbind\n(\n\"127.0.0.1\"\n,\n8088\n)) {\n    exit(\n\"bind(1) failed\\n\"\n);\n};\n$http\n->\nsetDefaultCallback\n(function(\n$req\n) {\n    echo\n\"URI: \"\n,\n$req\n->\ngetUri\n(),\nPHP_EOL\n;\n\n$req\n->\nsendReply\n(\n200\n,\n\"OK\"\n);\n});\n$base\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttpConnection::makeRequest() example",
    "output": "<?php\nfunction\n_request_handler\n(\n$req\n,\n$base\n) {\n    echo\n__FUNCTION__\n,\nPHP_EOL\n;\n    if (\nis_null\n(\n$req\n)) {\n        echo\n\"Timed out\\n\"\n;\n    } else {\n\n$response_code\n=\n$req\n->\ngetResponseCode\n();\n        if (\n$response_code\n==\n0\n) {\n            echo\n\"Connection refused\\n\"\n;\n        } elseif (\n$response_code\n!=\n200\n) {\n            echo\n\"Unexpected response:\n$response_code\n\\n\"\n;\n        } else {\n            echo\n\"Success:\n$response_code\n\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n            echo\n\"Body:\\n\"\n;\n            while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n                echo\n$s\n,\nPHP_EOL\n;\n            }\n        }\n    }\n\n$base\n->\nexit\n(\nNULL\n);\n}\n$address\n=\n\"127.0.0.1\"\n;\n$port\n=\n80\n;\n$base\n= new\nEventBase\n();\n$conn\n= new\nEventHttpConnection\n(\n$base\n,\nNULL\n,\n$address\n,\n$port\n);\n$conn\n->\nsetTimeout\n(\n5\n);\n$req\n= new\nEventHttpRequest\n(\n\"_request_handler\"\n,\n$base\n);\n$req\n->\naddHeader\n(\n\"Host\"\n,\n$address\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$req\n->\naddHeader\n(\n\"Content-Length\"\n,\n\"0\"\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$conn\n->\nmakeRequest\n(\n$req\n,\nEventHttpRequest\n::\nCMD_GET\n,\n\"/index.cphp\"\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttpConnection::setCloseCallback() example",
    "output": "<?php\n/*\n * Setting up close-connection callback\n *\n * The script handles closed connections using HTTP API.\n *\n * Usage:\n * 1) Launch the server:\n * $ php examples/http_closecb.php 4242\n *\n * 2) Launch a client in another terminal. Telnet-like\n * session should look like the following:\n *\n * $ nc -t 127.0.0.1 4242\n * GET / HTTP/1.0\n * Connection: close\n *\n * The server will output something similar to the following:\n *\n * HTTP/1.0 200 OK\n * Content-Type: multipart/x-mixed-replace;boundary=boundarydonotcross\n * Connection: close\n *\n * <html>\n *\n * 3) Terminate the client connection abruptly,\n * i.e. kill the process, or just press Ctrl-C.\n *\n * 4) Check if the server called _close_callback.\n * The script should output \"_close_callback\" string to standard output.\n *\n * 5) Check if the server's process has no orphaned connections,\n * e.g. with `lsof` utility.\n */\nfunction\n_close_callback\n(\n$conn\n)\n{\n    echo\n__FUNCTION__\n,\nPHP_EOL\n;\n}\nfunction\n_http_default\n(\n$req\n,\n$dummy\n)\n{\n\n$conn\n=\n$req\n->\ngetConnection\n();\n\n$conn\n->\nsetCloseCallback\n(\n'_close_callback'\n,\nNULL\n);\n\n/*\n    By enabling Event::READ we protect the server against unclosed conections.\n    This is a peculiarity of Libevent. The library disables Event::READ events\n     on this connection, and the server is not notified about terminated\n    connections.\n    So each time client terminates connection abruptly, we get an orphaned\n    connection. For instance, the following is a part of `lsof -p $PID | grep TCP`\n    command after client has terminated connection:\n    57-php     15057 ruslan  6u  unix 0xffff8802fb59c780   0t0  125187 socket\n    58:php     15057 ruslan  7u  IPv4             125189   0t0     TCP *:4242 (LISTEN)\n    59:php     15057 ruslan  8u  IPv4             124342   0t0     TCP localhost:4242->localhost:37375 (CLOSE_WAIT)\n    where $PID is our process ID.\n    The following block of code fixes such kind of orphaned connections.\n     */\n\n$bev\n=\n$req\n->\ngetBufferEvent\n();\n\n$bev\n->\nenable\n(\nEvent\n::\nREAD\n);\n\n// We have to free it explicitly. See"
  },
  {
    "input": "Example #1 \n    EventHttpRequest::__construct() example",
    "output": "<?php\nfunction\n_request_handler\n(\n$req\n,\n$base\n) {\n    echo\n__FUNCTION__\n,\nPHP_EOL\n;\n    if (\nis_null\n(\n$req\n)) {\n        echo\n\"Timed out\\n\"\n;\n    } else {\n\n$response_code\n=\n$req\n->\ngetResponseCode\n();\n        if (\n$response_code\n==\n0\n) {\n            echo\n\"Connection refused\\n\"\n;\n        } elseif (\n$response_code\n!=\n200\n) {\n            echo\n\"Unexpected response:\n$response_code\n\\n\"\n;\n        } else {\n            echo\n\"Success:\n$response_code\n\\n\"\n;\n\n$buf\n=\n$req\n->\ngetInputBuffer\n();\n            echo\n\"Body:\\n\"\n;\n            while (\n$s\n=\n$buf\n->\nreadLine\n(\nEventBuffer\n::\nEOL_ANY\n)) {\n                echo\n$s\n,\nPHP_EOL\n;\n            }\n        }\n    }\n\n$base\n->\nexit\n(\nNULL\n);\n}\n$address\n=\n\"127.0.0.1\"\n;\n$port\n=\n80\n;\n$base\n= new\nEventBase\n();\n$conn\n= new\nEventHttpConnection\n(\n$base\n,\nNULL\n,\n$address\n,\n$port\n);\n$conn\n->\nsetTimeout\n(\n5\n);\n$req\n= new\nEventHttpRequest\n(\n\"_request_handler\"\n,\n$base\n);\n$req\n->\naddHeader\n(\n\"Host\"\n,\n$address\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$req\n->\naddHeader\n(\n\"Content-Length\"\n,\n\"0\"\n,\nEventHttpRequest\n::\nOUTPUT_HEADER\n);\n$conn\n->\nmakeRequest\n(\n$req\n,\nEventHttpRequest\n::\nCMD_GET\n,\n\"/index.cphp\"\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventHttpRequest::sendError() example",
    "output": "<?php\nfunction\n_http_400\n(\n$req\n) {\n\n$req\n->\nsendError\n(\n400\n);\n}\n$base\n= new\nEventBase\n();\n$http\n= new\nEventHttp\n(\n$base\n);\n$http\n->\nsetCallback\n(\n\"/err400\"\n,\n\"_http_400\"\n);\n$http\n->\nbind\n(\n\"0.0.0.0\"\n,\n8010\n);\n$base\n->\nloop\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventListener::__construct() example",
    "output": "<?php\n/*\n * Simple echo server based on libevent's connection listener.\n *\n * Usage:\n * 1) In one terminal window run:\n *\n * $ php listener.php 9881\n *\n * 2) In another terminal window open up connection, e.g.:\n *\n * $ nc 127.0.0.1 9881\n *\n * 3) start typing. The server should repeat the input.\n */\nclass\nMyListenerConnection\n{\n    private\n$bev\n,\n$base\n;\n    public function\n__destruct\n() {\n\n$this\n->\nbev\n->\nfree\n();\n    }\n    public function\n__construct\n(\n$base\n,\n$fd\n) {\n\n$this\n->\nbase\n=\n$base\n;\n\n$this\n->\nbev\n= new\nEventBufferEvent\n(\n$base\n,\n$fd\n,\nEventBufferEvent\n::\nOPT_CLOSE_ON_FREE\n);\n\n$this\n->\nbev\n->\nsetCallbacks\n(array(\n$this\n,\n\"echoReadCallback\"\n),\nNULL\n,\n            array(\n$this\n,\n\"echoEventCallback\"\n),\nNULL\n);\n        if (!\n$this\n->\nbev\n->\nenable\n(\nEvent\n::\nREAD\n)) {\n            echo\n\"Failed to enable READ\\n\"\n;\n            return;\n        }\n    }\n    public function\nechoReadCallback\n(\n$bev\n,\n$ctx\n) {\n\n// Copy all the data from the input buffer to the output buffer\n\n        // Variant #1\n\n$bev\n->\noutput\n->\naddBuffer\n(\n$bev\n->\ninput\n);\n\n/* Variant #2 */\n        /*\n        $input    = $bev->getInput();\n        $output = $bev->getOutput();\n        $output->addBuffer($input);\n        */\n\n}\n    public function\nechoEventCallback\n(\n$bev\n,\n$events\n,\n$ctx\n) {\n        if (\n$events\n&\nEventBufferEvent\n::\nERROR\n) {\n            echo\n\"Error from bufferevent\\n\"\n;\n        }\n        if (\n$events\n& (\nEventBufferEvent\n::\nEOF\n|\nEventBufferEvent\n::\nERROR\n)) {\n\n//$bev->free();\n\n$this\n->\n__destruct\n();\n        }\n    }\n}\nclass\nMyListener\n{\n    public\n$base\n,\n\n$listener\n,\n\n$socket\n;\n    private\n$conn\n= array();\n    public function\n__destruct\n() {\n        foreach (\n$this\n->\nconn\nas &\n$c\n)\n$c\n=\nNULL\n;\n    }\n    public function\n__construct\n(\n$port\n) {\n\n$this\n->\nbase\n= new\nEventBase\n();\n        if (!\n$this\n->\nbase\n) {\n            echo\n\"Couldn't open event base\"\n;\n            exit(\n1\n);\n        }\n\n// Variant #1\n        /*\n        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!socket_bind($this->socket, '0.0.0.0', $port)) {\n            echo \"Unable to bind socket\\n\";\n            exit(1);\n        }\n        $this->listener = new EventListener($this->base,\n            array($this, \"acceptConnCallback\"), $this->base,\n            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,\n            -1, $this->socket);\n         */\n        // Variant #2\n\n$this\n->\nlistener\n= new\nEventListener\n(\n$this\n->\nbase\n,\n             array(\n$this\n,\n\"acceptConnCallback\"\n),\n$this\n->\nbase\n,\n\nEventListener\n::\nOPT_CLOSE_ON_FREE\n|\nEventListener\n::\nOPT_REUSEABLE\n, -\n1\n,\n\n\"0.0.0.0:\n$port\n\"\n);\n        if (!\n$this\n->\nlistener\n) {\n            echo\n\"Couldn't create listener\"\n;\n            exit(\n1\n);\n        }\n\n$this\n->\nlistener\n->\nsetErrorCallback\n(array(\n$this\n,\n\"accept_error_cb\"\n));\n    }\n    public function\ndispatch\n() {\n\n$this\n->\nbase\n->\ndispatch\n();\n    }\n\n// This callback is invoked when there is data to read on $bev\n\npublic function\nacceptConnCallback\n(\n$listener\n,\n$fd\n,\n$address\n,\n$ctx\n) {\n\n// We got a new connection! Set up a bufferevent for it. */\n\n$base\n=\n$this\n->\nbase\n;\n\n$this\n->\nconn\n[] = new\nMyListenerConnection\n(\n$base\n,\n$fd\n);\n    }\n    public function\naccept_error_cb\n(\n$listener\n,\n$ctx\n) {\n\n$base\n=\n$this\n->\nbase\n;\n\nfprintf\n(\nSTDERR\n,\n\"Got an error %d (%s) on the listener. \"\n\n.\n\"Shutting down.\\n\"\n,\n\nEventUtil\n::\ngetLastSocketErrno\n(),\n\nEventUtil\n::\ngetLastSocketError\n());\n\n$base\n->\nexit\n(\nNULL\n);\n    }\n}\n$port\n=\n9808\n;\nif (\n$argc\n>\n1\n) {\n\n$port\n= (int)\n$argv\n[\n1\n];\n}\nif (\n$port\n<=\n0\n||\n$port\n>\n65535\n) {\n    exit(\n\"Invalid port\"\n);\n}\n$l\n= new\nMyListener\n(\n$port\n);\n$l\n->\ndispatch\n();\n?>"
  },
  {
    "input": "Example #1 \n    EventSslContext::__construct() example",
    "output": "<?php\n$ctx\n= new\nEventSslContext\n(\nEventSslContext\n::\nSSLv3_SERVER_METHOD\n, array(\n\nEventSslContext\n::\nOPT_LOCAL_CERT\n=>\n$local_cert\n,\n\nEventSslContext\n::\nOPT_LOCAL_PK\n=>\n$local_pk\n,\n\nEventSslContext\n::\nOPT_PASSPHRASE\n=>\n\"echo server\"\n,\n\nEventSslContext\n::\nOPT_VERIFY_PEER\n=>\ntrue\n,\n\nEventSslContext\n::\nOPT_ALLOW_SELF_SIGNED\n=>\nfalse\n,\n));\n?>"
  },
  {
    "input": "Example #1 FTP example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// check connection\nif ((!\n$ftp\n) || (!\n$login_result\n)) {\n    echo\n\"FTP connection has failed!\"\n;\n    echo\n\"Attempted to connect to\n$ftp_server\n for user\n$ftp_user_name\n\"\n;\n    exit;\n} else {\n    echo\n\"Connected to\n$ftp_server\n, for user\n$ftp_user_name\n\"\n;\n}\n// upload the file\n$upload\n=\nftp_put\n(\n$ftp\n,\n$destination_file\n,\n$source_file\n,\nFTP_BINARY\n);\n// check upload status\nif (!\n$upload\n) {\n    echo\n\"FTP upload has failed!\"\n;\n} else {\n    echo\n\"Uploaded\n$source_file\n to\n$ftp_server\n as\n$destination_file\n\"\n;\n}\n// close the FTP connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_alloc() example",
    "output": "<?php\n$file\n=\n\"/home/user/myfile\"\n;\n// connect to the server\n$ftp\n=\nftp_connect\n(\n'ftp.example.com'\n);\n$login_result\n=\nftp_login\n(\n$ftp\n,\n'anonymous'\n,\n'user@example.com'\n);\nif (\nftp_alloc\n(\n$ftp\n,\nfilesize\n(\n$file\n),\n$result\n)) {\n  echo\n\"Space successfully allocated on server.  Sending\n$file\n.\\n\"\n;\n\nftp_put\n(\n$ftp\n,\n'/incoming/myfile'\n,\n$file\n,\nFTP_BINARY\n);\n} else {\n  echo\n\"Unable to allocate space on server.  Server said:\n$result\n\\n\"\n;\n}\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_cdup() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// change the current directory to html\nftp_chdir\n(\n$ftp\n,\n'html'\n);\necho\nftp_pwd\n(\n$ftp\n);\n// /html\n// return to the parent directory\nif (\nftp_cdup\n(\n$ftp\n)) {\n  echo\n\"cdup successful\\n\"\n;\n} else {\n  echo\n\"cdup not successful\\n\"\n;\n}\necho\nftp_pwd\n(\n$ftp\n);\n// /\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_chdir() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// check connection\nif ((!\n$ftp\n) || (!\n$login_result\n)) {\n    die(\n\"FTP connection has failed !\"\n);\n}\necho\n\"Current directory: \"\n.\nftp_pwd\n(\n$ftp\n) .\n\"\\n\"\n;\n// try to change the directory to somedir\nif (\nftp_chdir\n(\n$ftp\n,\n\"somedir\"\n)) {\n    echo\n\"Current directory is now: \"\n.\nftp_pwd\n(\n$ftp\n) .\n\"\\n\"\n;\n} else {\n    echo\n\"Couldn't change directory\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_chmod() example",
    "output": "<?php\n$file\n=\n'public_html/index.php'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to chmod $file to 644\nif (\nftp_chmod\n(\n$ftp\n,\n0644\n,\n$file\n) !==\nfalse\n) {\n echo\n\"\n$file\n chmoded successfully to 644\\n\"\n;\n} else {\n echo\n\"could not chmod\n$file\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_close() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// print the current directory\necho\nftp_pwd\n(\n$ftp\n);\n// close this connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_connect() example",
    "output": "<?php\n$ftp_server\n=\n\"ftp.example.com\"\n;\n// set up a connection or die\n$ftp\n=\nftp_connect\n(\n$ftp_server\n) or die(\n\"Couldn't connect to\n$ftp_server\n\"\n);\n?>"
  },
  {
    "input": "Example #1 ftp_delete() example",
    "output": "<?php\n$file\n=\n'public_html/old.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to delete $file\nif (\nftp_delete\n(\n$ftp\n,\n$file\n)) {\n echo\n\"\n$file\n deleted successful\\n\"\n;\n} else {\n echo\n\"could not delete\n$file\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_exec() example",
    "output": "<?php\n// variable initialization\n$command\n=\n'ls -al >files.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// execute command\nif (\nftp_exec\n(\n$ftp\n,\n$command\n)) {\n    echo\n\"\n$command\n executed successfully\\n\"\n;\n} else {\n    echo\n\"could not execute\n$command\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_fget() example",
    "output": "<?php\n// path to remote file\n$remote_file\n=\n'somefile.txt'\n;\n$local_file\n=\n'localfile.txt'\n;\n// open some file to write to\n$handle\n=\nfopen\n(\n$local_file\n,\n'w'\n);\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to download $remote_file and save it to $handle\nif (\nftp_fget\n(\n$ftp\n,\n$handle\n,\n$remote_file\n,\nFTP_ASCII\n,\n0\n)) {\n echo\n\"successfully written to\n$local_file\n\\n\"\n;\n} else {\n echo\n\"There was a problem while downloading\n$remote_file\n to\n$local_file\n\\n\"\n;\n}\n// close the connection and the file handler\nftp_close\n(\n$ftp\n);\nfclose\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 ftp_fput() example",
    "output": "<?php\n// open some file for reading\n$file\n=\n'somefile.txt'\n;\n$fp\n=\nfopen\n(\n$file\n,\n'r'\n);\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to upload $file\nif (\nftp_fput\n(\n$ftp\n,\n$file\n,\n$fp\n,\nFTP_ASCII\n)) {\n    echo\n\"Successfully uploaded\n$file\n\\n\"\n;\n} else {\n    echo\n\"There was a problem while uploading\n$file\n\\n\"\n;\n}\n// close the connection and the file handler\nftp_close\n(\n$ftp\n);\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_get() example",
    "output": "<?php\n// define some variables\n$local_file\n=\n'local.zip'\n;\n$server_file\n=\n'server.zip'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to download $server_file and save to $local_file\nif (\nftp_get\n(\n$ftp\n,\n$local_file\n,\n$server_file\n,\nFTP_BINARY\n)) {\n    echo\n\"Successfully written to\n$local_file\n\\n\"\n;\n} else {\n    echo\n\"There was a problem\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_get_option() example",
    "output": "<?php\n// Get the timeout of the given FTP connection\n$timeout\n=\nftp_get_option\n(\n$ftp\n,\nFTP_TIMEOUT_SEC\n);\n?>"
  },
  {
    "input": "Example #1 ftp_login() example",
    "output": "<?php\n\n$ftp_server\n=\n\"ftp.example.com\"\n;\n$ftp_user\n=\n\"foo\"\n;\n$ftp_pass\n=\n\"bar\"\n;\n// set up a connection or die\n$ftp\n=\nftp_connect\n(\n$ftp_server\n) or die(\n\"Couldn't connect to\n$ftp_server\n\"\n);\n// try to login\nif (@\nftp_login\n(\n$ftp\n,\n$ftp_user\n,\n$ftp_pass\n)) {\n    echo\n\"Connected as\n$ftp_user\n@\n$ftp_server\n\\n\"\n;\n} else {\n    echo\n\"Couldn't connect as\n$ftp_user\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_mdtm() example",
    "output": "<?php\n$file\n=\n'somefile.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n//  get the last modified time\n$buff\n=\nftp_mdtm\n(\n$ftp\n,\n$file\n);\nif (\n$buff\n!= -\n1\n) {\n\n// somefile.txt was last modified on: March 26 2003 14:16:41.\n\necho\n\"\n$file\n was last modified on : \"\n.\ndate\n(\n\"F d Y H:i:s.\"\n,\n$buff\n);\n} else {\n    echo\n\"Couldn't get mdtime\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_mkdir() example",
    "output": "<?php\n$dir\n=\n'www'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to create the directory $dir\nif (\nftp_mkdir\n(\n$ftp\n,\n$dir\n)) {\n echo\n\"successfully created\n$dir\n\\n\"\n;\n} else {\n echo\n\"There was a problem while creating\n$dir\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_mlsd() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// get contents of the current directory\n$contents\n=\nftp_mlsd\n(\n$ftp\n,\n\".\"\n);\n// output $contents\nvar_dump\n(\n$contents\n);\n?>"
  },
  {
    "input": "Example #1 ftp_nb_continue() example",
    "output": "<?php\n// Initiate the download\n$ret\n=\nftp_nb_get\n(\n$ftp\n,\n\"test\"\n,\n\"README\"\n,\nFTP_BINARY\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n// Continue downloading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error downloading the file...\"\n;\n   exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #1 ftp_nb_fget() example",
    "output": "<?php\n// open some file for writing\n$file\n=\n'index.php'\n;\n$fp\n=\nfopen\n(\n$file\n,\n'w'\n);\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// Initiate the download\n$ret\n=\nftp_nb_fget\n(\n$ftp\n,\n$fp\n,\n$file\n,\nFTP_BINARY\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue downloading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error downloading the file...\"\n;\n   exit(\n1\n);\n}\n// close filepointer\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_nb_fput() example",
    "output": "<?php\n$file\n=\n'index.php'\n;\n$fp\n=\nfopen\n(\n$file\n,\n'r'\n);\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// Initiate the upload\n$ret\n=\nftp_nb_fput\n(\n$ftp\n,\n$file\n,\n$fp\n,\nFTP_BINARY\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue upload...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error uploading the file...\"\n;\n   exit(\n1\n);\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_nb_get() example",
    "output": "<?php\n// Initiate the download\n$ret\n=\nftp_nb_get\n(\n$ftp\n,\n\"test\"\n,\n\"README\"\n,\nFTP_BINARY\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue downloading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error downloading the file...\"\n;\n   exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #2 Resuming a download with ftp_nb_get()",
    "output": "<?php\n// Initiate\n$ret\n=\nftp_nb_get\n(\n$ftp\n,\n\"test\"\n,\n\"README\"\n,\nFTP_BINARY\n,\n\nfilesize\n(\n\"test\"\n));\n// OR: $ret = ftp_nb_get($ftp, \"test\", \"README\",\n//                           FTP_BINARY, FTP_AUTORESUME);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue downloading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error downloading the file...\"\n;\n   exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #3 \n     Resuming a download at position 100 to a new\n     file with ftp_nb_get()",
    "output": "<?php\n// Disable Autoseek\nftp_set_option\n(\n$ftp\n,\nFTP_AUTOSEEK\n,\nfalse\n);\n// Initiate\n$ret\n=\nftp_nb_get\n(\n$ftp\n,\n\"newfile\"\n,\n\"README\"\n,\nFTP_BINARY\n,\n100\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n/* ... */\n\n   // Continue downloading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\n?>"
  },
  {
    "input": "Example #1 ftp_nb_put() example",
    "output": "<?php\n// Initiate the Upload\n$ret\n=\nftp_nb_put\n(\n$ftp\n,\n\"test.remote\"\n,\n\"test.local\"\n,\nFTP_BINARY\n);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue uploading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error uploading the file...\"\n;\n   exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #2 Resuming an upload with ftp_nb_put()",
    "output": "<?php\n// Initiate\n$ret\n=\nftp_nb_put\n(\n$ftp\n,\n\"test.remote\"\n,\n\"test.local\"\n,\n\nFTP_BINARY\n,\nftp_size\n(\n\"test.remote\"\n));\n// OR: $ret = ftp_nb_put($ftp, \"test.remote\", \"test.local\",\n//                           FTP_BINARY, FTP_AUTORESUME);\nwhile (\n$ret\n==\nFTP_MOREDATA\n) {\n\n\n// Do whatever you want\n\necho\n\".\"\n;\n\n// Continue uploading...\n\n$ret\n=\nftp_nb_continue\n(\n$ftp\n);\n}\nif (\n$ret\n!=\nFTP_FINISHED\n) {\n   echo\n\"There was an error uploading the file...\"\n;\n   exit(\n1\n);\n}\n?>"
  },
  {
    "input": "Example #1 ftp_nlist() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// get contents of the current directory\n$contents\n=\nftp_nlist\n(\n$ftp\n,\n\".\"\n);\n// output $contents\nvar_dump\n(\n$contents\n);\n?>"
  },
  {
    "input": "Example #1 ftp_pasv() example",
    "output": "<?php\n$file\n=\n'somefile.txt'\n;\n$remote_file\n=\n'readme.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// turn passive mode on\nftp_pasv\n(\n$ftp\n,\ntrue\n);\n// upload a file\nif (\nftp_put\n(\n$ftp\n,\n$remote_file\n,\n$file\n,\nFTP_ASCII\n)) {\n echo\n\"successfully uploaded\n$file\n\\n\"\n;\n} else {\n echo\n\"There was a problem while uploading\n$file\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_put() example",
    "output": "<?php\n$file\n=\n'somefile.txt'\n;\n$remote_file\n=\n'readme.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// upload a file\nif (\nftp_put\n(\n$ftp\n,\n$remote_file\n,\n$file\n,\nFTP_ASCII\n)) {\n echo\n\"successfully uploaded\n$file\n\\n\"\n;\n} else {\n echo\n\"There was a problem while uploading\n$file\n\\n\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_pwd() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// change directory to public_html\nftp_chdir\n(\n$ftp\n,\n'public_html'\n);\n// print current directory\necho\nftp_pwd\n(\n$ftp\n);\n// /public_html\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 Using ftp_raw() to login to an FTP server manually.",
    "output": "<?php\n$ftp\n=\nftp_connect\n(\n\"ftp.example.com\"\n);\n/* This is the same as:\n   ftp_login($ftp, \"joeblow\", \"secret\"); */\nftp_raw\n(\n$ftp\n,\n\"USER joeblow\"\n);\nftp_raw\n(\n$ftp\n,\n\"PASS secret\"\n);\n?>"
  },
  {
    "input": "Example #1 ftp_rawlist() example",
    "output": "<?php\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// get the file list for /\n$buff\n=\nftp_rawlist\n(\n$ftp\n,\n'/'\n);\n// close the connection\nftp_close\n(\n$ftp\n);\n// output the buffer\nvar_dump\n(\n$buff\n);\n?>"
  },
  {
    "input": "Example #1 ftp_rename() example",
    "output": "<?php\n$old_file\n=\n'somefile.txt.bak'\n;\n$new_file\n=\n'somefile.txt'\n;\n// Set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// Login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// Try to rename $old_file to $new_file\nif (\nftp_rename\n(\n$ftp\n,\n$old_file\n,\n$new_file\n)) {\n    echo\n\"Successfully renamed\n$old_file\n to\n$new_file\n\\n\"\n;\n} else {\n    echo\n\"There was a problem while renaming\n$old_file\n to\n$new_file\n\\n\"\n;\n}\n// Close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_rmdir() example",
    "output": "<?php\n$dir\n=\n'www/'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// try to delete the directory $dir\nif (\nftp_rmdir\n(\n$ftp\n,\n$dir\n)) {\n    echo\n\"Successfully deleted\n$dir\n\\n\"\n;\n} else {\n    echo\n\"There was a problem while deleting\n$dir\n\\n\"\n;\n}\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_set_option() example",
    "output": "<?php\n// Set the network timeout to 10 seconds\nftp_set_option\n(\n$ftp\n,\nFTP_TIMEOUT_SEC\n,\n10\n);\n?>"
  },
  {
    "input": "Example #1 Sending a SITE command to an ftp server",
    "output": "<?php\n// Connect to FTP server\n$ftp\n=\nftp_connect\n(\n'ftp.example.com'\n);\nif (!\n$ftp\n) die(\n'Unable to connect to ftp.example.com'\n);\n// Login as \"user\" with password \"pass\"\nif (!\nftp_login\n(\n$ftp\n,\n'user'\n,\n'pass'\n)) die(\n'Error logging into ftp.example.com'\n);\n// Issue: \"SITE CHMOD 0600 /home/user/privatefile\" command to ftp server\nif (\nftp_site\n(\n$ftp\n,\n'CHMOD 0600 /home/user/privatefile'\n)) {\n   echo\n\"Command executed successfully.\\n\"\n;\n} else {\n   die(\n'Command failed.'\n);\n}\n?>"
  },
  {
    "input": "Example #1 ftp_size() example",
    "output": "<?php\n$file\n=\n'somefile.txt'\n;\n// set up basic connection\n$ftp\n=\nftp_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\n// get the size of $file\n$res\n=\nftp_size\n(\n$ftp\n,\n$file\n);\nif (\n$res\n!= -\n1\n) {\n    echo\n\"size of\n$file\n is\n$res\n bytes\"\n;\n} else {\n    echo\n\"couldn't get the size\"\n;\n}\n// close the connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_ssl_connect() example",
    "output": "<?php\n// set up basic ssl connection\n$ftp\n=\nftp_ssl_connect\n(\n$ftp_server\n);\n// login with username and password\n$login_result\n=\nftp_login\n(\n$ftp\n,\n$ftp_user_name\n,\n$ftp_user_pass\n);\nif (!\n$login_result\n) {\n\n// PHP will already have raised an E_WARNING level message in this case\n\ndie(\n\"can't login\"\n);\n}\necho\nftp_pwd\n(\n$ftp\n);\n// close the ssl connection\nftp_close\n(\n$ftp\n);\n?>"
  },
  {
    "input": "Example #1 ftp_systype() example",
    "output": "<?php\n// ftp connection\n$ftp\n=\nftp_connect\n(\n'ftp.example.com'\n);\nftp_login\n(\n$ftp\n,\n'user'\n,\n'password'\n);\n// get the system type\nif (\n$type\n=\nftp_systype\n(\n$ftp\n)) {\n    echo\n\"Example.com is powered by\n$type\n\\n\"\n;\n} else {\n    echo\n\"Couldn't get the systype\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Adding two job servers",
    "output": "<?php\n# Create our client object.\n$gmclient\n= new\nGearmanClient\n();\n# Add two job servers, the first on the default 4730 port\n$gmclient\n->\naddServer\n(\n\"10.0.0.1\"\n);\n$gmclient\n->\naddServer\n(\n\"10.0.0.2\"\n,\n7003\n);\n?>"
  },
  {
    "input": "Example #1 Add two job servers",
    "output": "<?php\n# Create our client object.\n$gmclient\n= new\nGearmanClient\n();\n# Add multiple job servers, the first on the default 4730 port\n$gmclient\n->\naddServers\n(\n\"10.0.0.1,10.0.0.2:7003\"\n);\n?>"
  },
  {
    "input": "Example #1 Basic submission of two tasks",
    "output": "<?php\n# Create our gearman client\n$gmclient\n= new\nGearmanClient\n();\n# add the default job server\n$gmclient\n->\naddServer\n();\n# set a function to be called when the work is complete\n$gmclient\n->\nsetCompleteCallback\n(\n\"complete\"\n);\n# add a task to perform the \"reverse\" function on the string \"Hello World!\"\n$gmclient\n->\naddTask\n(\n\"reverse\"\n,\n\"Hello World!\"\n,\nnull\n,\n\"1\"\n);\n# add another task to perform the \"reverse\" function on the string \"!dlroW olleH\"\n$gmclient\n->\naddTask\n(\n\"reverse\"\n,\n\"!dlroW olleH\"\n,\nnull\n,\n\"2\"\n);\n# run the tasks\n$gmclient\n->\nrunTasks\n();\nfunction\ncomplete\n(\n$task\n)\n{\n  print\n\"COMPLETE: \"\n.\n$task\n->\nunique\n() .\n\", \"\n.\n$task\n->\ndata\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Basic submission of two tasks with passing application context",
    "output": "<?php\n$client\n= new\nGearmanClient\n();\n$client\n->\naddServer\n();\n# set a function to be called when the work is complete\n$client\n->\nsetCompleteCallback\n(\n\"reverse_complete\"\n);\n# Add some tasks for a placeholder of where to put the results\n$results\n= array();\n$client\n->\naddTask\n(\n\"reverse\"\n,\n\"Hello World!\"\n,\n$results\n,\n\"t1\"\n);\n$client\n->\naddTask\n(\n\"reverse\"\n,\n\"!dlroW olleH\"\n,\n$results\n,\n\"t2\"\n);\n$client\n->\nrunTasks\n();\n# The results should now be filled in from the callbacks\nforeach (\n$results\nas\n$id\n=>\n$result\n)\n   echo\n$id\n.\n\": \"\n.\n$result\n[\n'handle'\n] .\n\", \"\n.\n$result\n[\n'data'\n] .\n\"\\n\"\n;\nfunction\nreverse_complete\n(\n$task\n,\n$results\n)\n{\n\n$results\n[\n$task\n->\nunique\n()] = array(\n\"handle\"\n=>\n$task\n->\njobHandle\n(),\n\"data\"\n=>\n$task\n->\ndata\n());\n}\n?>"
  },
  {
    "input": "Example #1 Simple job submission with immediate return",
    "output": "<?php\n# Client code\necho\n\"Starting\\n\"\n;\n# Create our client object.\n$gmclient\n= new\nGearmanClient\n();\n# Add default server (localhost).\n$gmclient\n->\naddServer\n();\necho\n\"Sending job\\n\"\n;\n$result\n=\n$gmclient\n->\ndoNormal\n(\n\"reverse\"\n,\n\"Hello!\"\n);\necho\n\"Success:\n$result\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Simple job submission with immediate return",
    "output": "<?php\n?>"
  },
  {
    "input": "Example #1 Monitor the status of a long running background job",
    "output": "<?php\n/* create our object */\n$gmclient\n= new\nGearmanClient\n();\n/* add the default server */\n$gmclient\n->\naddServer\n();\n/* run reverse client */\n$job_handle\n=\n$gmclient\n->\ndoBackground\n(\n\"reverse\"\n,\n\"this is a test\"\n);\nif (\n$gmclient\n->\nreturnCode\n() !=\nGEARMAN_SUCCESS\n)\n{\n  echo\n\"bad return code\\n\"\n;\n  exit;\n}\n$done\n=\nfalse\n;\ndo\n{\n\nsleep\n(\n3\n);\n\n$stat\n=\n$gmclient\n->\njobStatus\n(\n$job_handle\n);\n   if (!\n$stat\n[\n0\n])\n// the job is known so it is not done\n\n$done\n=\ntrue\n;\n   echo\n\"Running: \"\n. (\n$stat\n[\n1\n] ?\n\"true\"\n:\n\"false\"\n) .\n\", numerator: \"\n.\n$stat\n[\n2\n] .\n\", denomintor: \"\n.\n$stat\n[\n3\n] .\n\"\\n\"\n;\n}\nwhile(!\n$done\n);\necho\n\"done!\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Simple worker making use of extra application context data",
    "output": "<?php\n# get a gearman worker\n$worker\n= new\nGearmanWorker\n();\n# add the default server (localhost)\n$worker\n->\naddServer\n();\n# define a variable to hold application data\n$count\n=\n0\n;\n# add the \"reverse\" function\n$worker\n->\naddFunction\n(\n\"reverse\"\n,\n\"reverse_cb\"\n,\n$count\n);\n# start the worker\nwhile (\n$worker\n->\nwork\n());\nfunction\nreverse_cb\n(\n$job\n, &\n$count\n)\n{\n\n$count\n++;\n  return\n\"\n$count\n: \"\n.\nstrrev\n(\n$job\n->\nworkload\n());\n}\n?>"
  },
  {
    "input": "Example #1 Add alternate Gearman servers",
    "output": "<?php\n$worker\n= new\nGearmanWorker\n();\n$worker\n->\naddServer\n(\n\"10.0.0.1\"\n);\n$worker\n->\naddServer\n(\n\"10.0.0.2\"\n,\n7003\n);\n?>"
  },
  {
    "input": "Example #1 Add two job servers",
    "output": "<?php\n$worker\n= new\nGearmanWorker\n();\n$worker\n->\naddServers\n(\n\"10.0.0.1,10.0.0.2:7003\"\n);\n?>"
  },
  {
    "input": "Example #1 A simple worker with a 5 second timeout",
    "output": "<?php\necho\n\"Starting\\n\"\n;\n# Create our worker object.\n$gmworker\n= new\nGearmanWorker\n();\n# Add default server (localhost).\n$gmworker\n->\naddServer\n();\n# Register function \"reverse\" with the server.\n$gmworker\n->\naddFunction\n(\n\"reverse\"\n,\n\"reverse_fn\"\n);\n# Set the timeout to 5 seconds\n$gmworker\n->\nsetTimeout\n(\n5000\n);\necho\n\"Waiting for job...\\n\"\n;\nwhile(@\n$gmworker\n->\nwork\n() ||\n$gmworker\n->\nreturnCode\n() ==\nGEARMAN_TIMEOUT\n)\n{\n  if (\n$gmworker\n->\nreturnCode\n() ==\nGEARMAN_TIMEOUT\n)\n  {\n\n# Normally one would want to do something useful here ...\n\necho\n\"Timeout. Waiting for next job...\\n\"\n;\n    continue;\n  }\n  if (\n$gmworker\n->\nreturnCode\n() !=\nGEARMAN_SUCCESS\n)\n  {\n    echo\n\"return_code: \"\n.\n$gmworker\n->\nreturnCode\n() .\n\"\\n\"\n;\n    break;\n  }\n}\necho\n\"Done\\n\"\n;\nfunction\nreverse_fn\n(\n$job\n)\n{\n  return\nstrrev\n(\n$job\n->\nworkload\n());\n}\n?>"
  },
  {
    "input": "Example #1 Running worker in non-blocking mode",
    "output": "<?php\necho\n\"Starting\\n\"\n;\n# Create our worker object\n$worker\n= new\nGearmanWorker\n();\n# Make the worker non-blocking\n$worker\n->\naddOptions\n(\nGEARMAN_WORKER_NON_BLOCKING\n);\n# Add the default server (localhost, port 4730)\n$worker\n->\naddServer\n();\n# Add our reverse function\n$worker\n->\naddFunction\n(\n'reverse'\n,\n'reverse_fn'\n);\n# Try to grab a job\nwhile (@\n$worker\n->\nwork\n() ||\n\n$worker\n->\nreturnCode\n() ==\nGEARMAN_IO_WAIT\n||\n\n$worker\n->\nreturnCode\n() ==\nGEARMAN_NO_JOBS\n)\n{\n  if (\n$worker\n->\nreturnCode\n() ==\nGEARMAN_SUCCESS\n)\n    continue;\n  echo\n\"Waiting for next job...\\n\"\n;\n  if (!@\n$worker\n->\nwait\n())\n  {\n    if (\n$worker\n->\nreturnCode\n() ==\nGEARMAN_NO_ACTIVE_FDS\n)\n    {\n\n# We are not connected to any servers, so wait a bit before\n      # trying to reconnect.\n\nsleep\n(\n5\n);\n      continue;\n    }\n    break;\n  }\n}\necho\n\"Worker Error: \"\n.\n$worker\n->\nerror\n() .\n\"\\n\"\n;\nfunction\nreverse_fn\n(\n$job\n)\n{\n  return\nstrrev\n(\n$job\n->\nworkload\n());\n}\n?>"
  },
  {
    "input": "Example #1 GearmanWorker::work() example",
    "output": "<?php\n# create the worker\n$worker\n= new\nGearmanWorker\n();\n# add the default job server (localhost)\n$worker\n->\naddServer\n();\n# add the reverse function\n$worker\n->\naddFunction\n(\n\"reverse\"\n,\n\"my_reverse_function\"\n);\n# start te worker listening for job submissions\nwhile (\n$worker\n->\nwork\n());\n\nfunction\nmy_reverse_function\n(\n$job\n)\n{\n  return\nstrrev\n(\n$job\n->\nworkload\n());\n}\n?>"
  },
  {
    "input": "Example #1 Testing support for paged result control",
    "output": "<?php\n// $ds is a valid link identifier for a directory server\n$result\n=\nldap_read\n(\n$ds\n,\n''\n,\n'(objectClass=*)'\n, [\n'supportedControl'\n]);\nif (!\nin_array\n(\nLDAP_CONTROL_PAGEDRESULTS\n,\nldap_get_entries\n(\n$ds\n,\n$result\n)[\n0\n][\n'supportedcontrol'\n])) {\n  die(\n\"This server does not support paged result control\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 LDAP search example",
    "output": "<?php\n// basic sequence with LDAP is connect, bind, search, interpret search\n// result, close connection\necho\n\"<h3>LDAP query test</h3>\"\n;\necho\n\"Connecting ...\"\n;\n$ds\n=\nldap_connect\n(\n\"localhost\"\n);\n// must be a valid LDAP server!\necho\n\"connect result is \"\n.\n$ds\n.\n\"<br />\"\n;\nif (\n$ds\n) {\n    echo\n\"Binding ...\"\n;\n\n$r\n=\nldap_bind\n(\n$ds\n);\n// this is an \"anonymous\" bind, typically\n                           // read-only access\n\necho\n\"Bind result is \"\n.\n$r\n.\n\"<br />\"\n;\n    echo\n\"Searching for (sn=S*) ...\"\n;\n\n// Search surname entry\n\n$sr\n=\nldap_search\n(\n$ds\n,\n\"o=My Company, c=US\"\n,\n\"sn=S*\"\n);\n    echo\n\"Search result is \"\n.\n$sr\n.\n\"<br />\"\n;\n    echo\n\"Number of entries returned is \"\n.\nldap_count_entries\n(\n$ds\n,\n$sr\n) .\n\"<br />\"\n;\n    echo\n\"Getting entries ...<p>\"\n;\n\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);\n    echo\n\"Data for \"\n.\n$info\n[\n\"count\"\n] .\n\" items returned:<p>\"\n;\n    for (\n$i\n=\n0\n;\n$i\n<\n$info\n[\n\"count\"\n];\n$i\n++) {\n        echo\n\"dn is: \"\n.\n$info\n[\n$i\n][\n\"dn\"\n] .\n\"<br />\"\n;\n        echo\n\"first cn entry is: \"\n.\n$info\n[\n$i\n][\n\"cn\"\n][\n0\n] .\n\"<br />\"\n;\n        echo\n\"first email entry is: \"\n.\n$info\n[\n$i\n][\n\"mail\"\n][\n0\n] .\n\"<br /><hr />\"\n;\n    }\n    echo\n\"Closing connection\"\n;\n\nldap_close\n(\n$ds\n);\n} else {\n    echo\n\"<h4>Unable to connect to LDAP server</h4>\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Bind with policy information",
    "output": "<?php\n$user\n=\n'cn=admin,dc=example,dc=com'\n;\n$passwd\n=\n'adminpassword'\n;\n$ds\n=\nldap_connect\n(\n'ldap://localhost'\n);\nif (\n$ds\n) {\n\n$r\n=\nldap_bind_ext\n(\n$ds\n,\n$user\n,\n$passwd\n, [[\n'oid'\n=>\nLDAP_CONTROL_PASSWORDPOLICYREQUEST\n]]);\n    if (\nldap_parse_result\n(\n$ds\n,\n$r\n,\n$errcode\n,\n$matcheddn\n,\n$errmsg\n,\n$referrals\n,\n$ctrls\n)) {\n        if (\n$errcode\n!=\n0\n) {\n            die(\n\"Error:\n$errmsg\n (\n$errcode\n)\"\n);\n        }\n        if (isset(\n$ctrls\n[\nLDAP_CONTROL_PASSWORDPOLICYRESPONSE\n])) {\n\n$value\n=\n$ctrls\n[\nLDAP_CONTROL_PASSWORDPOLICYRESPONSE\n][\n'value'\n];\n            echo\n\"Expires in: \"\n.\n$value\n[\n'expire'\n].\n\" seconds\\n\"\n;\n            echo\n\"Number of auth left: \"\n.\n$value\n[\n'grace'\n].\n\"\\n\"\n;\n            if (isset(\n$value\n[\n'error'\n])) {\n                echo\n\"Policy error code: \"\n.\n$value\n[\n'error'\n];\n            }\n        }\n    }\n} else {\n    die(\n\"Unable to connect to LDAP server\"\n);\n}\n?>"
  },
  {
    "input": "Example #2 Modify description only if it's not empty",
    "output": "<?php\n// $link is an LDAP connection\n$result\n=\nldap_mod_replace_ext\n(\n\n$link\n,\n\n'o=test,dc=example,dc=com'\n,\n    [\n'description'\n=>\n'New description'\n],\n    [\n        [\n\n'oid'\n=>\nLDAP_CONTROL_ASSERT\n,\n\n'iscritical'\n=>\nTRUE\n,\n\n'value'\n=> [\n'filter'\n=>\n'(!(description=*))'\n]\n        ]\n    ]\n);\n// Then use ldap_parse_result\n?>"
  },
  {
    "input": "Example #3 Read some values before deletion",
    "output": "<?php\n// $link is an LDAP connection\n$result\n=\nldap_delete_ext\n(\n\n$link\n,\n\n'o=test,dc=example,dc=com'\n,\n    [\n        [\n\n'oid'\n=>\nLDAP_CONTROL_PRE_READ\n,\n\n'iscritical'\n=>\nTRUE\n,\n\n'value'\n=> [\n'attrs'\n=> [\n'o'\n,\n'description'\n]]\n        ]\n    ]\n);\n// Then use ldap_parse_result\n?>"
  },
  {
    "input": "Example #4 Delete a reference",
    "output": "<?php\n// $link is an LDAP connection\n// Without the control it would delete the referenced node\n// Make sure to set the control as critical to avoid that\n$result\n=\nldap_delete_ext\n(\n\n$link\n,\n\n'cn=reference,dc=example,dc=com'\n,\n    [[\n'oid'\n=>\nLDAP_CONTROL_MANAGEDSAIT\n,\n'iscritical'\n=>\nTRUE\n]]\n);\n// Then use ldap_parse_result\n?>"
  },
  {
    "input": "Example #5 Use pagination for a search",
    "output": "<?php\n// $link is an LDAP connection\n$cookie\n=\n''\n;\ndo {\n\n$result\n=\nldap_search\n(\n\n$link\n,\n'dc=example,dc=base'\n,\n'(cn=*)'\n, [\n'cn'\n],\n0\n,\n0\n,\n0\n,\nLDAP_DEREF_NEVER\n,\n        [[\n'oid'\n=>\nLDAP_CONTROL_PAGEDRESULTS\n,\n'value'\n=> [\n'size'\n=>\n2\n,\n'cookie'\n=>\n$cookie\n]]]\n    );\n\nldap_parse_result\n(\n$link\n,\n$result\n,\n$errcode\n,\n$matcheddn\n,\n$errmsg\n,\n$referrals\n,\n$controls\n);\n\n// To keep the example short errors are not tested\n\n$entries\n=\nldap_get_entries\n(\n$link\n,\n$result\n);\n    foreach (\n$entries\nas\n$entry\n) {\n        echo\n\"cn: \"\n.\n$entry\n[\n'cn'\n][\n0\n].\n\"\\n\"\n;\n    }\n    if (isset(\n$controls\n[\nLDAP_CONTROL_PAGEDRESULTS\n][\n'value'\n][\n'cookie'\n])) {\n\n// You need to pass the cookie from the last call to the next one\n\n$cookie\n=\n$controls\n[\nLDAP_CONTROL_PAGEDRESULTS\n][\n'value'\n][\n'cookie'\n];\n    } else {\n\n$cookie\n=\n''\n;\n    }\n\n// Empty cookie means last page\n} while (\nstrlen\n(\n$cookie\n) >\n0\n);\n?>"
  },
  {
    "input": "Example #1 Complete example with authenticated bind",
    "output": "<?php\n$ds\n=\nldap_connect\n(\n\"localhost\"\n);\n// assuming the LDAP server is on this host\nif (\n$ds\n) {\n\n// bind with appropriate dn to give update access\n\n$r\n=\nldap_bind\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n\"secret\"\n);\n\n// prepare data\n\n$info\n[\n\"cn\"\n] =\n\"John Jones\"\n;\n\n$info\n[\n\"sn\"\n] =\n\"Jones\"\n;\n\n$info\n[\n\"objectclass\"\n] =\n\"person\"\n;\n\n// add data to directory\n\n$r\n=\nldap_add\n(\n$ds\n,\n\"cn=John Jones, o=My Company, c=US\"\n,\n$info\n);\n\nldap_close\n(\n$ds\n);\n} else {\n    echo\n\"Unable to connect to LDAP server\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Using LDAP Bind",
    "output": "<?php\n// using ldap bind\n$ldaprdn\n=\n'uname'\n;\n// ldap rdn or dn\n$ldappass\n=\n'password'\n;\n// associated password\n// connect to ldap server\n$ldapconn\n=\nldap_connect\n(\n\"ldap://ldap.example.com\"\n)\n    or die(\n\"Could not connect to LDAP server.\"\n);\nif (\n$ldapconn\n) {\n\n// binding to ldap server\n\n$ldapbind\n=\nldap_bind\n(\n$ldapconn\n,\n$ldaprdn\n,\n$ldappass\n);\n\n// verify binding\n\nif (\n$ldapbind\n) {\n        echo\n\"LDAP bind successful...\"\n;\n    } else {\n        echo\n\"LDAP bind failed...\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Using LDAP Bind Anonymously",
    "output": "<?php\n//using ldap bind anonymously\n// connect to ldap server\n$ldapconn\n=\nldap_connect\n(\n\"ldap://ldap.example.com\"\n)\n    or die(\n\"Could not connect to LDAP server.\"\n);\nif (\n$ldapconn\n) {\n\n// binding anonymously\n\n$ldapbind\n=\nldap_bind\n(\n$ldapconn\n);\n    if (\n$ldapbind\n) {\n        echo\n\"LDAP bind anonymous successful...\"\n;\n    } else {\n        echo\n\"LDAP bind anonymous failed...\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Complete example of password check",
    "output": "<?php\n$ds\n=\nldap_connect\n(\n\"localhost\"\n);\n// assuming the LDAP server is on this host\nif (\n$ds\n) {\n\n// bind\n\nif (\nldap_bind\n(\n$ds\n)) {\n\n// prepare data\n\n$dn\n=\n\"cn=Matti Meikku, ou=My Unit, o=My Company, c=FI\"\n;\n\n$value\n=\n\"secretpassword\"\n;\n\n$attr\n=\n\"password\"\n;\n\n// compare value\n\n$r\n=\nldap_compare\n(\n$ds\n,\n$dn\n,\n$attr\n,\n$value\n);\n        if (\n$r\n=== -\n1\n) {\n            echo\n\"Error: \"\n.\nldap_error\n(\n$ds\n);\n        } elseif (\n$r\n===\ntrue\n) {\n            echo\n\"Password correct.\"\n;\n        } elseif (\n$r\n===\nfalse\n) {\n            echo\n\"Wrong guess! Password incorrect.\"\n;\n        }\n    } else {\n        echo\n\"Unable to bind to LDAP server.\"\n;\n    }\n\nldap_close\n(\n$ds\n);\n} else {\n    echo\n\"Unable to connect to LDAP server.\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Example of connecting to LDAP server.",
    "output": "<?php\n// LDAP variables\n$ldapuri\n=\n\"ldap://ldap.example.com:389\"\n;\n// your ldap-uri\n// Connecting to LDAP\n$ldapconn\n=\nldap_connect\n(\n$ldapuri\n)\n          or die(\n\"That LDAP-URI was not parseable\"\n);\n?>"
  },
  {
    "input": "Example #2 Example of connecting securely to LDAP server.",
    "output": "<?php\n// make sure your host is the correct one\n// that you issued your secure certificate to\n$ldaphost\n=\n\"ldaps://ldap.example.com/\"\n;\n// Connecting to LDAP\n$ldapconn\n=\nldap_connect\n(\n$ldaphost\n)\n          or die(\n\"That LDAP-URI was not parseable\"\n);\n?>"
  },
  {
    "input": "Example #1 LDAP pagination",
    "output": "<?php\n\n// $ds is a valid link identifier (see ldap_connect)\n\nldap_set_option\n(\n$ds\n,\nLDAP_OPT_PROTOCOL_VERSION\n,\n3\n);\n\n$dn\n=\n'ou=example,dc=org'\n;\n\n$filter\n=\n'(|(sn=Doe*)(givenname=John*))'\n;\n\n$justthese\n= array(\n'ou'\n,\n'sn'\n,\n'givenname'\n,\n'mail'\n);\n\n// enable pagination with a page size of 1.\n\nldap_control_paged_result\n(\n$ds\n,\n1\n);\n\n$sr\n=\nldap_search\n(\n$ds\n,\n$dn\n,\n$filter\n,\n$justthese\n);\n\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);\n     echo\n$info\n[\n'count'\n] .\n' entries returned'\n.\nPHP_EOL\n;"
  },
  {
    "input": "Example #2 LDAP pagination",
    "output": "<?php\n\n// $ds is a valid link identifier (see ldap_connect)\n\nldap_set_option\n(\n$ds\n,\nLDAP_OPT_PROTOCOL_VERSION\n,\n3\n);\n\n$dn\n=\n'ou=example,dc=org'\n;\n\n$filter\n=\n'(|(sn=Doe*)(givenname=John*))'\n;\n\n$justthese\n= array(\n'ou'\n,\n'sn'\n,\n'givenname'\n,\n'mail'\n);\n\n// enable pagination with a page size of 100.\n\n$pageSize\n=\n100\n;\n\n$cookie\n=\n''\n;\n     do {\n\nldap_control_paged_result\n(\n$ds\n,\n$pageSize\n,\ntrue\n,\n$cookie\n);\n\n$result\n=\nldap_search\n(\n$ds\n,\n$dn\n,\n$filter\n,\n$justthese\n);\n\n$entries\n=\nldap_get_entries\n(\n$ds\n,\n$result\n);\n\n         foreach (\n$entries\nas\n$e\n) {\n             echo\n$e\n[\n'dn'\n] .\nPHP_EOL\n;\n         }\n\nldap_control_paged_result_response\n(\n$ds\n,\n$result\n,\n$cookie\n);\n\n     } while(\n$cookie\n!==\nnull\n&&\n$cookie\n!=\n''\n);"
  },
  {
    "input": "Example #1 Enumerating all LDAP error messages",
    "output": "<?php\n\nfor (\n$i\n=\n0\n;\n$i\n<\n100\n;\n$i\n++) {\n\nprintf\n(\n\"Error\n$i\n: %s<br />\\n\"\n,\nldap_err2str\n(\n$i\n));\n  }\n?>"
  },
  {
    "input": "Example #1 Generating and catching an error",
    "output": "<?php\n// This example contains an error, which we will catch.\n$ld\n=\nldap_connect\n(\n\"localhost\"\n);\n$bind\n=\nldap_bind\n(\n$ld\n);\n// syntax error in filter expression (errno 87),\n// must be \"objectclass=*\" to work.\n$res\n=  @\nldap_search\n(\n$ld\n,\n\"o=Myorg, c=DE\"\n,\n\"objectclass\"\n);\nif (!\n$res\n) {\n    echo\n\"LDAP-Errno: \"\n.\nldap_errno\n(\n$ld\n) .\n\"<br />\\n\"\n;\n    echo\n\"LDAP-Error: \"\n.\nldap_error\n(\n$ld\n) .\n\"<br />\\n\"\n;\n    die(\n\"Argh!<br />\\n\"\n);\n}\n$info\n=\nldap_get_entries\n(\n$ld\n,\n$res\n);\necho\n$info\n[\n\"count\"\n] .\n\" matching entries.<br />\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Searching for an email address",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n// $mail is an email address provided by the user in a form\n$base\n=\n\"o=My Company, c=US\"\n;\n$filter\n=\n\"(mail=\"\n.\nldap_escape\n(\n$mail\n,\n\"\"\n,\nLDAP_ESCAPE_FILTER\n).\n\")\"\n;\n$sr\n=\nldap_search\n(\n$ds\n,\n$base\n,\n$filter\n, array(\n\"sn\"\n,\n\"givenname\"\n,\n\"mail\"\n));\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);\necho\n$info\n[\n\"count\"\n].\n\" entries returned\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Whoami extended operation",
    "output": "<?php\n$ds\n=\nldap_connect\n(\n\"localhost\"\n);\n// assuming the LDAP server is on this host\nif (\n$ds\n) {\n\n// bind with appropriate dn to give update access\n\n$bind\n=\nldap_bind\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n\"secret\"\n);\n    if (!\n$bind\n) {\n      echo\n\"Unable to bind to LDAP server\"\n;\n      exit;\n    }\n\n// Call WHOAMI EXOP\n\n$r\n=\nldap_exop\n(\n$ds\n,\nLDAP_EXOP_WHO_AM_I\n);\n\n// Parse the result object\n\nldap_parse_exop\n(\n$ds\n,\n$r\n,\n$retdata\n);\n\n// Output: string(31) \"dn:cn=root, o=My Company, c=US\"\n\nvar_dump\n(\n$retdata\n);\n\n// Same thing using $response_data parameter\n\n$success\n=\nldap_exop\n(\n$ds\n,\nLDAP_EXOP_WHO_AM_I\n,\nNULL\n,\nNULL\n,\n$retdata\n,\n$retoid\n);\n    if (\n$success\n) {\n\nvar_dump\n(\n$retdata\n);\n    }\n\nldap_close\n(\n$ds\n);\n} else {\n    echo\n\"Unable to connect to LDAP server\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 PASSWD extended operation",
    "output": "<?php\n$ds\n=\nldap_connect\n(\n\"localhost\"\n);\n// assuming the LDAP server is on this host\nif (\n$ds\n) {\n\n// bind with appropriate dn to give update access\n\n$bind\n=\nldap_bind\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n\"secret\"\n);\n    if (!\n$bind\n) {\n      echo\n\"Unable to bind to LDAP server\"\n;\n      exit;\n    }\n\n// use PASSWD EXOP to change the user password for a generated one\n\n$genpw\n=\nldap_exop_passwd\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n\"secret\"\n);\n    if (\n$genpw\n) {\n\n// use the generated password to bind\n\n$bind\n=\nldap_bind\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n$genpw\n);\n    }\n\n// set the password back to \"secret\"\n\nldap_exop_passwd\n(\n$ds\n,\n\"cn=root, o=My Company, c=US\"\n,\n$genpw\n,\n\"secret\"\n);\n\nldap_close\n(\n$ds\n);\n} else {\n    echo\n\"Unable to connect to LDAP server\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 \n     Show the list of attributes held for a particular directory entry",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n// $sr is a valid search result from a prior call to\n// one of the ldap directory search calls\n$entry\n=\nldap_first_entry\n(\n$ds\n,\n$sr\n);\n$attrs\n=\nldap_get_attributes\n(\n$ds\n,\n$entry\n);\necho\n$attrs\n[\n\"count\"\n] .\n\" attributes held for this entry:<p>\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n$attrs\n[\n\"count\"\n];\n$i\n++) {\n    echo\n$attrs\n[\n$i\n] .\n\"<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Check protocol version",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\nif (\nldap_get_option\n(\n$ds\n,\nLDAP_OPT_PROTOCOL_VERSION\n,\n$version\n)) {\n    echo\n\"Using protocol version\n$version\n\\n\"\n;\n} else {\n    echo\n\"Unable to determine protocol version\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 List all values of the \"mail\" attribute for a directory entry",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n// $sr is a valid search result from a prior call to\n//     one of the ldap directory search calls\n// $entry is a valid entry identifier from a prior call to\n//        one of the calls that returns a directory entry\n$values\n=\nldap_get_values\n(\n$ds\n,\n$entry\n,\n\"mail\"\n);\necho\n$values\n[\n\"count\"\n] .\n\" email addresses for this entry.<br />\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n$values\n[\n\"count\"\n];\n$i\n++) {\n    echo\n$values\n[\n$i\n] .\n\"<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Produce a list of all organizational units of an organization",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n$basedn\n=\n\"o=My Company, c=US\"\n;\n$justthese\n= array(\n\"ou\"\n);\n$sr\n=\nldap_list\n(\n$ds\n,\n$basedn\n,\n\"ou=*\"\n,\n$justthese\n);\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$info\n[\n\"count\"\n];\n$i\n++) {\n    echo\n$info\n[\n$i\n][\n\"ou\"\n][\n0\n];\n}\n?>"
  },
  {
    "input": "Example #1 Add a telephone number to a contact",
    "output": "<?php\n$dn\n=\n\"cn=John Smith,ou=Wizards,dc=example,dc=com\"\n;\n$modifs\n= [\n    [\n\n\"attrib\"\n=>\n\"telephoneNumber\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_ADD\n,\n\n\"values\"\n=> [\n\"+1 555 555 1717\"\n],\n    ],\n];\nldap_modify_batch\n(\n$connection\n,\n$dn\n,\n$modifs\n);\n?>"
  },
  {
    "input": "Example #2 Rename a user",
    "output": "<?php\n$dn\n=\n\"cn=John Smith,ou=Wizards,dc=example,dc=com\"\n;\n$modifs\n= [\n    [\n\n\"attrib\"\n=>\n\"sn\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_REPLACE\n,\n\n\"values\"\n=> [\n\"Smith-Jones\"\n],\n    ],\n    [\n\n\"attrib\"\n=>\n\"givenName\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_REPLACE\n,\n\n\"values\"\n=> [\n\"Jack\"\n],\n    ],\n];\nldap_modify_batch\n(\n$connection\n,\n$dn\n,\n$modifs\n);\nldap_rename\n(\n$connection\n,\n$dn\n,\n\"cn=Jack Smith-Jones\"\n,\nNULL\n,\nTRUE\n);\n?>"
  },
  {
    "input": "Example #3 Add two e-mail addresses to a user",
    "output": "<?php\n$dn\n=\n\"cn=Jack Smith-Jones,ou=Wizards,dc=example,dc=com\"\n;\n$modifs\n= [\n    [\n\n\"attrib\"\n=>\n\"mail\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_ADD\n,\n\n\"values\"\n=> [\n\n\"jack.smith@example.com\"\n,\n\n\"jack.smith-jones@example.com\"\n,\n        ],\n    ],\n];\nldap_modify_batch\n(\n$connection\n,\n$dn\n,\n$modifs\n);\n?>"
  },
  {
    "input": "Example #4 Change a user's password",
    "output": "<?php\n$dn\n=\n\"cn=Jack Smith-Jones,ou=Wizards,dc=example,dc=com\"\n;\n$modifs\n= [\n    [\n\n\"attrib\"\n=>\n\"userPassword\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_REMOVE\n,\n\n\"values\"\n=> [\n\"Tr0ub4dor&3\"\n],\n    ],\n    [\n\n\"attrib\"\n=>\n\"userPassword\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_ADD\n,\n\n\"values\"\n=> [\n\"correct horse battery staple\"\n],\n    ],\n];\nldap_modify_batch\n(\n$connection\n,\n$dn\n,\n$modifs\n);\n?>"
  },
  {
    "input": "Example #5 Change a user's password (Active Directory)",
    "output": "<?php\nfunction\nadifyPw\n(\n$pw\n)\n{\n    return\niconv\n(\n\"UTF-8\"\n,\n\"UTF-16LE\"\n,\n'\"'\n.\n$pw\n.\n'\"'\n);\n}\n$dn\n=\n\"cn=Jack Smith-Jones,ou=Wizards,dc=ad,dc=example,dc=com\"\n;\n$modifs\n= [\n    [\n\n\"attrib\"\n=>\n\"unicodePwd\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_REMOVE\n,\n\n\"values\"\n=> [\nadifyPw\n(\n\"Tr0ub4dor&3\"\n)],\n    ],\n    [\n\n\"attrib\"\n=>\n\"unicodePwd\"\n,\n\n\"modtype\"\n=>\nLDAP_MODIFY_BATCH_ADD\n,\n\n\"values\"\n=> [\nadifyPw\n(\n\"correct horse battery staple\"\n)],\n    ],\n];\nldap_modify_batch\n(\n$connection\n,\n$dn\n,\n$modifs\n);"
  },
  {
    "input": "Example #1 ldap_parse_result() example",
    "output": "<?php\n$result\n=\nldap_search\n(\n$ldap\n,\n\"cn=userref,dc=my-domain,dc=com\"\n,\n\"(cn=user*)\"\n);\n$errcode\n=\n$dn\n=\n$errmsg\n=\n$refs\n=\nnull\n;\nif (\nldap_parse_result\n(\n$ldap\n,\n$result\n,\n$errcode\n,\n$dn\n,\n$errmsg\n,\n$refs\n)) {\n\n// do something with $errcode, $dn, $errmsg and $refs\n}\n?>"
  },
  {
    "input": "Example #1 LDAP search",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n// $person is all or part of a person's name, eg \"Jo\"\n$dn\n=\n\"o=My Company, c=US\"\n;\n$filter\n=\n\"(|(sn=\n$person\n*)(givenname=\n$person\n*))\"\n;\n$justthese\n= array(\n\"ou\"\n,\n\"sn\"\n,\n\"givenname\"\n,\n\"mail\"\n);\n$sr\n=\nldap_search\n(\n$ds\n,\n$dn\n,\n$filter\n,\n$justthese\n);\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);\necho\n$info\n[\n\"count\"\n].\n\" entries returned\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Set protocol version",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\nif (\nldap_set_option\n(\n$ds\n,\nLDAP_OPT_PROTOCOL_VERSION\n,\n3\n)) {\n    echo\n\"Using LDAPv3\"\n;\n} else {\n    echo\n\"Failed to set protocol version to 3\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Set server controls",
    "output": "<?php\n// $ds is a valid LDAP\\Connection instance for a directory server\n// control with no value\n$ctrl1\n= array(\n\"oid\"\n=>\n\"1.2.752.58.10.1\"\n,\n\"iscritical\"\n=>\ntrue\n);\n// iscritical defaults to FALSE\n$ctrl2\n= array(\n\"oid\"\n=>\n\"1.2.752.58.1.10\"\n,\n\"value\"\n=>\n\"magic\"\n);\n// try to set both controls\nif (!\nldap_set_option\n(\n$ds\n,\nLDAP_OPT_SERVER_CONTROLS\n, array(\n$ctrl1\n,\n$ctrl2\n))) {\n    echo\n\"Failed to set server controls\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 LDAP sort",
    "output": "<?php\n\n// $ds is a valid link identifier (see ldap_connect)\n\n$dn\n=\n'ou=example,dc=org'\n;\n\n$filter\n=\n'(|(sn=Doe*)(givenname=John*))'\n;\n\n$justthese\n= array(\n'ou'\n,\n'sn'\n,\n'givenname'\n,\n'mail'\n);\n\n$sr\n=\nldap_search\n(\n$ds\n,\n$dn\n,\n$filter\n,\n$justthese\n);\n\n// Sort\n\nldap_sort\n(\n$ds\n,\n$sr\n,\n'sn'\n);\n\n// Retrieving the data\n\n$info\n=\nldap_get_entries\n(\n$ds\n,\n$sr\n);"
  },
  {
    "input": "Example #2 Using memcache session handler",
    "output": "<?php\n$session_save_path\n=\n\"tcp://\n$host\n:\n$port\n?persistent=1&weight=2&timeout=2&retry_interval=10,  ,tcp://\n$host\n:\n$port\n  \"\n;\nini_set\n(\n'session.save_handler'\n,\n'memcache'\n);\nini_set\n(\n'session.save_path'\n,\n$session_save_path\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::add() example",
    "output": "<?php\n$memcache_obj\n=\nmemcache_connect\n(\n\"localhost\"\n,\n11211\n);\n/* procedural API */\nmemcache_add\n(\n$memcache_obj\n,\n'var_key'\n,\n'test variable'\n,\nfalse\n,\n30\n);\n/* OO API */\n$memcache_obj\n->\nadd\n(\n'var_key'\n,\n'test variable'\n,\nfalse\n,\n30\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::addServer() example",
    "output": "<?php\n/* OO API */\n$memcache\n= new\nMemcache\n;\n$memcache\n->\naddServer\n(\n'memcache_host'\n,\n11211\n);\n$memcache\n->\naddServer\n(\n'memcache_host2'\n,\n11211\n);\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\nmemcache_add_server\n(\n$memcache_obj\n,\n'memcache_host2'\n,\n11211\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::close() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/*\ndo something here...\n*/\nmemcache_close\n(\n$memcache_obj\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n/*\ndo something here...\n*/\n$memcache_obj\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 Memcache::connect() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/* OO API */\n$memcache\n= new\nMemcache\n;\n$memcache\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::decrement() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/* decrement item by 2 */\n$new_value\n=\nmemcache_decrement\n(\n$memcache_obj\n,\n'test_item'\n,\n2\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n/* decrement item by 3 */\n$new_value\n=\n$memcache_obj\n->\ndecrement\n(\n'test_item'\n,\n3\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::delete() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/* item will be deleted by the server */\nmemcache_delete\n(\n$memcache_obj\n,\n'key_to_delete'\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n$memcache_obj\n->\ndelete\n(\n'key_to_delete'\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::flush() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\nmemcache_flush\n(\n$memcache_obj\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n$memcache_obj\n->\nflush\n();\n?>"
  },
  {
    "input": "Example #1 Memcache::get() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n$var\n=\nmemcache_get\n(\n$memcache_obj\n,\n'some_key'\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n$var\n=\n$memcache_obj\n->\nget\n(\n'some_key'\n);\n/*\nYou also can use array of keys as a parameter.\nIf such item wasn't found at the server, the result\narray simply will not include such key.\n*/\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n$var\n=\nmemcache_get\n(\n$memcache_obj\n, Array(\n'some_key'\n,\n'another_key'\n));\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n$var\n=\n$memcache_obj\n->\nget\n(Array(\n'some_key'\n,\n'second_key'\n));\n?>"
  },
  {
    "input": "Example #1 Memcache::getExtendedStats() example",
    "output": "<?php\n    $memcache_obj\n= new\nMemcache\n;\n\n$memcache_obj\n->\naddServer\n(\n'memcache_host'\n,\n11211\n);\n\n$memcache_obj\n->\naddServer\n(\n'failed_host'\n,\n11211\n);\n\n\n$stats\n=\n$memcache_obj\n->\ngetExtendedStats\n();\n\nprint_r\n(\n$stats\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::getServerStatus() example",
    "output": "<?php\n/* OO API */\n$memcache\n= new\nMemcache\n;\n$memcache\n->\naddServer\n(\n'memcache_host'\n,\n11211\n);\necho\n$memcache\n->\ngetServerStatus\n(\n'memcache_host'\n,\n11211\n);\n/* procedural API */\n$memcache\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\necho\nmemcache_get_server_status\n(\n$memcache\n,\n'memcache_host'\n,\n11211\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::getVersion() example",
    "output": "<?php\n/* OO API */\n$memcache\n= new\nMemcache\n;\n$memcache\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\necho\n$memcache\n->\ngetVersion\n();\n/* procedural API */\n$memcache\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\necho\nmemcache_get_version\n(\n$memcache\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::increment() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/* increment counter by 2 */\n$current_value\n=\nmemcache_increment\n(\n$memcache_obj\n,\n'counter'\n,\n2\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n/* increment counter by 3 */\n$current_value\n=\n$memcache_obj\n->\nincrement\n(\n'counter'\n,\n3\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::pconnect() example",
    "output": "<?php\n/* procedural API */\n$memcache_obj\n=\nmemcache_pconnect\n(\n'memcache_host'\n,\n11211\n);\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\npconnect\n(\n'memcache_host'\n,\n11211\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::replace() example",
    "output": "<?php\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/* procedural API */\nmemcache_replace\n(\n$memcache_obj\n,\n\"test_key\"\n,\n\"some variable\"\n,\nfalse\n,\n30\n);\n/* OO API */\n$memcache_obj\n->\nreplace\n(\n\"test_key\"\n,\n\"some variable\"\n,\nfalse\n,\n30\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::set() example",
    "output": "<?php\n/* procedural API */\n/* connect to memcached server */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\n/*\nset value of item with key 'var_key'\nusing 0 as flag value, compression is not used\nexpire time is 30 seconds\n*/\nmemcache_set\n(\n$memcache_obj\n,\n'var_key'\n,\n'some variable'\n,\n0\n,\n30\n);\necho\nmemcache_get\n(\n$memcache_obj\n,\n'var_key'\n);\n?>"
  },
  {
    "input": "Example #2 Memcache::set() example",
    "output": "<?php\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n/* connect to memcached server */\n$memcache_obj\n->\nconnect\n(\n'memcache_host'\n,\n11211\n);\n/*\nset value of item with key 'var_key', using on-the-fly compression\nexpire time is 50 seconds\n*/\n$memcache_obj\n->\nset\n(\n'var_key'\n,\n'some really big variable'\n,\nMEMCACHE_COMPRESSED\n,\n50\n);\necho\n$memcache_obj\n->\nget\n(\n'var_key'\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::setCompressThreshold() example",
    "output": "<?php\n/* OO API */\n$memcache_obj\n= new\nMemcache\n;\n$memcache_obj\n->\naddServer\n(\n'memcache_host'\n,\n11211\n);\n$memcache_obj\n->\nsetCompressThreshold\n(\n20000\n,\n0.2\n);\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\nmemcache_set_compress_threshold\n(\n$memcache_obj\n,\n20000\n,\n0.2\n);\n?>"
  },
  {
    "input": "Example #1 Memcache::setServerParams() example",
    "output": "<?php\nfunction\n_callback_memcache_failure\n(\n$host\n,\n$port\n) {\n    print\n\"memcache '\n$host\n:\n$port\n' failed\"\n;\n}\n/* OO API */\n$memcache\n= new\nMemcache\n;\n// Add the server in offline mode\n$memcache\n->\naddServer\n(\n'memcache_host'\n,\n11211\n,\nfalse\n,\n1\n,\n1\n, -\n1\n,\nfalse\n);\n// Bring the server back online\n$memcache\n->\nsetServerParams\n(\n'memcache_host'\n,\n11211\n,\n1\n,\n15\n,\ntrue\n,\n'_callback_memcache_failure'\n);\n/* procedural API */\n$memcache_obj\n=\nmemcache_connect\n(\n'memcache_host'\n,\n11211\n);\nmemcache_set_server_params\n(\n$memcache_obj\n,\n'memcache_host'\n,\n11211\n,\n1\n,\n15\n,\ntrue\n,\n'_callback_memcache_failure'\n);\n?>"
  },
  {
    "input": "Example #1 Result callback example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$items\n= array(\n\n'key1'\n=>\n'value1'\n,\n\n'key2'\n=>\n'value2'\n,\n\n'key3'\n=>\n'value3'\n);\n$m\n->\nsetMulti\n(\n$items\n);\n$m\n->\ngetDelayed\n(array(\n'key1'\n,\n'key3'\n),\ntrue\n,\n'result_cb'\n);\nfunction\nresult_cb\n(\n$memc\n,\n$item\n)\n{\n\nvar_dump\n(\n$item\n);\n}\n?>"
  },
  {
    "input": "Example #1 Read-through callback example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$profile_info\n=\n$m\n->\nget\n(\n'user:'\n.\n$user_id\n,\n'user_info_cb'\n);\nfunction\nuser_info_cb\n(\n$memc\n,\n$key\n, &\n$value\n)\n{\n\n$user_id\n=\nsubstr\n(\n$key\n,\n5\n);\n\n/* lookup profile info in the DB */\n    /* ... */\n\n$value\n=\n$profile_info\n;\n    return\ntrue\n;\n}\n?>"
  },
  {
    "input": "Example #1 Memcached::addServer() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n/* Add 2 servers, so that the second one\n   is twice as likely to be selected. */\n$m\n->\naddServer\n(\n'mem1.domain.com'\n,\n11211\n,\n33\n);\n$m\n->\naddServer\n(\n'mem2.domain.com'\n,\n11211\n,\n67\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::addServers() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$servers\n= array(\n    array(\n'mem1.domain.com'\n,\n11211\n,\n33\n),\n    array(\n'mem2.domain.com'\n,\n11211\n,\n67\n)\n);\n$m\n->\naddServers\n(\n$servers\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::append() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nsetOption\n(\nMemcached\n::\nOPT_COMPRESSION\n,\nfalse\n);\n$m\n->\nset\n(\n'foo'\n,\n'abc'\n);\n$m\n->\nappend\n(\n'foo'\n,\n'def'\n);\nvar_dump\n(\n$m\n->\nget\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 Memcached::cas() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\ndo {\n\n/* fetch IP list and its token */\n\n$ips\n=\n$m\n->\nget\n(\n'ip_block'\n,\nnull\n,\n$cas\n);\n\n/* if list doesn't exist yet, create it and do\n       an atomic add which will fail if someone else already added it */\n\nif (\n$m\n->\ngetResultCode\n() ==\nMemcached\n::\nRES_NOTFOUND\n) {\n\n$ips\n= array(\n$_SERVER\n[\n'REMOTE_ADDR'\n]);\n\n$m\n->\nadd\n(\n'ip_block'\n,\n$ips\n);\n\n/* otherwise, add IP to the list and store via compare-and-swap\n       with the token, which will fail if someone else updated the list */\n\n} else {\n\n$ips\n[] =\n$_SERVER\n[\n'REMOTE_ADDR'\n];\n\n$m\n->\ncas\n(\n$cas\n,\n'ip_block'\n,\n$ips\n);\n    }\n} while (\n$m\n->\ngetResultCode\n() !=\nMemcached\n::\nRES_SUCCESS\n);\n?>"
  },
  {
    "input": "Example #1 Creating a Memcached object",
    "output": "<?php\n/* Create a regular instance */\n$m\n= new\nMemcached\n();\necho\nget_class\n(\n$m\n);\n/* Create a persistent instance */\n$m2\n= new\nMemcached\n(\n'story_pool'\n);\n$m3\n= new\nMemcached\n(\n'story_pool'\n);\n/* now $m2 and $m3 share the same connection */\n?>"
  },
  {
    "input": "Example #1 Memcached::decrement() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'counter'\n,\n5\n);\n$n\n=\n$m\n->\ndecrement\n(\n'counter'\n);\nvar_dump\n(\n$n\n);\n$n\n=\n$m\n->\ndecrement\n(\n'counter'\n,\n10\n);\nvar_dump\n(\n$n\n);\nvar_dump\n(\n$m\n->\nget\n(\n'counter'\n));\n$m\n->\nset\n(\n'counter'\n,\n'abc'\n);\n$n\n=\n$m\n->\nincrement\n(\n'counter'\n);\n// ^ will fail due to item value not being numeric\nvar_dump\n(\n$n\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::delete() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\ndelete\n(\n'key1'\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::fetch() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'int'\n,\n99\n);\n$m\n->\nset\n(\n'string'\n,\n'a simple string'\n);\n$m\n->\nset\n(\n'array'\n, array(\n11\n,\n12\n));\n$m\n->\ngetDelayed\n(array(\n'int'\n,\n'array'\n),\ntrue\n);\nwhile (\n$result\n=\n$m\n->\nfetch\n()) {\n\nvar_dump\n(\n$result\n);\n}\n?>"
  },
  {
    "input": "Example #1 Memcached::getDelayed() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'int'\n,\n99\n);\n$m\n->\nset\n(\n'string'\n,\n'a simple string'\n);\n$m\n->\nset\n(\n'array'\n, array(\n11\n,\n12\n));\n$m\n->\ngetDelayed\n(array(\n'int'\n,\n'array'\n),\ntrue\n);\nvar_dump\n(\n$m\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 Memcached::flush() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n/* flush all items in 10 seconds */\n$m\n->\nflush\n(\n10\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::get() example #1",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'foo'\n,\n100\n);\nvar_dump\n(\n$m\n->\nget\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #2 Memcached::get() example #2",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\nif (!(\n$ip\n=\n$m\n->\nget\n(\n'ip_block'\n))) {\n    if (\n$m\n->\ngetResultCode\n() ==\nMemcached\n::\nRES_NOTFOUND\n) {\n\n$ip\n= array();\n\n$m\n->\nset\n(\n'ip_block'\n,\n$ip\n);\n    } else {\n\n/* log error */\n        /* ...       */\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 Memcached::getDelayed() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'int'\n,\n99\n);\n$m\n->\nset\n(\n'string'\n,\n'a simple string'\n);\n$m\n->\nset\n(\n'array'\n, array(\n11\n,\n12\n));\n$m\n->\ngetDelayed\n(array(\n'int'\n,\n'array'\n),\ntrue\n);\nvar_dump\n(\n$m\n->\nfetchAll\n());\n?>"
  },
  {
    "input": "Example #1 Memcached::getMulti() example for Memcached v3",
    "output": "<?php\n// Valid for v3 of the extension\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$items\n= array(\n\n'key1'\n=>\n'value1'\n,\n\n'key2'\n=>\n'value2'\n,\n\n'key3'\n=>\n'value3'\n);\n$m\n->\nsetMulti\n(\n$items\n);\n$result\n=\n$m\n->\ngetMulti\n(array(\n'key1'\n,\n'key3'\n,\n'badkey'\n));\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #2 Memcached::getMulti() example for Memcached v1 and v2",
    "output": "<?php\n// Valid for v1 and v2 of the extension\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$items\n= array(\n\n'key1'\n=>\n'value1'\n,\n\n'key2'\n=>\n'value2'\n,\n\n'key3'\n=>\n'value3'\n);\n$m\n->\nsetMulti\n(\n$items\n);\n$result\n=\n$m\n->\ngetMulti\n(array(\n'key1'\n,\n'key3'\n,\n'badkey'\n),\n$cas\n);\nvar_dump\n(\n$result\n,\n$cas\n);\n?>"
  },
  {
    "input": "Example #3 Memcached::GET_PRESERVE_ORDER example for Memcached v3",
    "output": "<?php\n// Valid for v3 of the extension\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$data\n= array(\n\n'foo'\n=>\n'foo-data'\n,\n\n'bar'\n=>\n'bar-data'\n,\n\n'baz'\n=>\n'baz-data'\n,\n\n'lol'\n=>\n'lol-data'\n,\n\n'kek'\n=>\n'kek-data'\n,\n);\n$m\n->\nsetMulti\n(\n$data\n,\n3600\n);\n$keys\n=\narray_keys\n(\n$data\n);\n$keys\n[] =\n'zoo'\n;\n$got\n=\n$m\n->\ngetMulti\n(\n$keys\n,\nMemcached\n::\nGET_PRESERVE_ORDER\n);\nforeach (\n$got\nas\n$k\n=>\n$v\n) {\n    echo\n\"\n$k\n\n$v\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #4 Memcached::GET_PRESERVE_ORDER example for Memcached v1 and v2",
    "output": "<?php\n// Valid for v1 and v2 of the extension\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$data\n= array(\n\n'foo'\n=>\n'foo-data'\n,\n\n'bar'\n=>\n'bar-data'\n,\n\n'baz'\n=>\n'baz-data'\n,\n\n'lol'\n=>\n'lol-data'\n,\n\n'kek'\n=>\n'kek-data'\n,\n);\n$m\n->\nsetMulti\n(\n$data\n,\n3600\n);\n$null\n=\nnull\n;\n$keys\n=\narray_keys\n(\n$data\n);\n$keys\n[] =\n'zoo'\n;\n$got\n=\n$m\n->\ngetMulti\n(\n$keys\n,\n$null\n,\nMemcached\n::\nGET_PRESERVE_ORDER\n);\nforeach (\n$got\nas\n$k\n=>\n$v\n) {\n    echo\n\"\n$k\n\n$v\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Retrieving Memcached options",
    "output": "<?php\n$m\n= new\nMemcached\n();\nvar_dump\n(\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_COMPRESSION\n));\nvar_dump\n(\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_POLL_TIMEOUT\n));\n?>"
  },
  {
    "input": "Example #1 Memcached::getResultCode() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nadd\n(\n'foo'\n,\n'bar'\n);\nif (\n$m\n->\ngetResultCode\n() ==\nMemcached\n::\nRES_NOTSTORED\n) {\n\n/* ... */\n}\n?>"
  },
  {
    "input": "Example #1 Memcached::getResultMessage() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nadd\n(\n'foo'\n,\n'bar'\n);\n// first time should succeed\n$m\n->\nadd\n(\n'foo'\n,\n'bar'\n);\necho\n$m\n->\ngetResultMessage\n(),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Memcached::getServerByKey() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServers\n(array(\n    array(\n'mem1.domain.com'\n,\n11211\n,\n40\n),\n    array(\n'mem2.domain.com'\n,\n11211\n,\n40\n),\n    array(\n'mem3.domain.com'\n,\n11211\n,\n20\n),\n));\n$m\n->\nsetOption\n(\nMemcached\n::\nOPT_LIBKETAMA_COMPATIBLE\n,\ntrue\n);\nvar_dump\n(\n$m\n->\ngetServerByKey\n(\n'user'\n));\nvar_dump\n(\n$m\n->\ngetServerByKey\n(\n'log'\n));\nvar_dump\n(\n$m\n->\ngetServerByKey\n(\n'ip'\n));\n?>"
  },
  {
    "input": "Example #1 Memcached::getServerList() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServers\n(array(\n    array(\n'mem1.domain.com'\n,\n11211\n,\n20\n),\n    array(\n'mem2.domain.com'\n,\n11311\n,\n80\n),\n));\nvar_dump\n(\n$m\n->\ngetServerList\n());\n?>"
  },
  {
    "input": "Example #1 Memcached::getStats() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\nprint_r\n(\n$m\n->\ngetStats\n());\n?>"
  },
  {
    "input": "Example #1 Memcached::getVersion() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\nprint_r\n(\n$m\n->\ngetVersion\n());\n?>"
  },
  {
    "input": "Example #1 Memcached::increment() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'counter'\n,\n0\n);\n$m\n->\nincrement\n(\n'counter'\n);\n$n\n=\n$m\n->\nincrement\n(\n'counter'\n,\n10\n);\nvar_dump\n(\n$n\n);\n$m\n->\nset\n(\n'counter'\n,\n'abc'\n);\n$n\n=\n$m\n->\nincrement\n(\n'counter'\n);\n// ^ will fail due to item value not being numeric\nvar_dump\n(\n$n\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::prepend() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nsetOption\n(\nMemcached\n::\nOPT_COMPRESSION\n,\nfalse\n);\n$m\n->\nset\n(\n'foo'\n,\n'abc'\n);\n$m\n->\nprepend\n(\n'foo'\n,\n'def'\n);\nvar_dump\n(\n$m\n->\nget\n(\n'foo'\n));\n?>"
  },
  {
    "input": "Example #1 Memcached::set() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$m\n->\nset\n(\n'int'\n,\n99\n);\n$m\n->\nset\n(\n'string'\n,\n'a simple string'\n);\n$m\n->\nset\n(\n'array'\n, array(\n11\n,\n12\n));\n/* expire 'object' key in 5 minutes */\n$m\n->\nset\n(\n'object'\n, new\nstdClass\n,\ntime\n() +\n300\n);\nvar_dump\n(\n$m\n->\nget\n(\n'int'\n));\nvar_dump\n(\n$m\n->\nget\n(\n'string'\n));\nvar_dump\n(\n$m\n->\nget\n(\n'array'\n));\nvar_dump\n(\n$m\n->\nget\n(\n'object'\n));\n?>"
  },
  {
    "input": "Example #1 Memcached::setByKey() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n/* keep IP blocks on a certain server */\n$m\n->\nsetByKey\n(\n'api-cache'\n,\n'block-ip:169.254.253.252'\n,\n1\n);\n$m\n->\nsetByKey\n(\n'api-cache'\n,\n'block-ip:169.127.127.202'\n,\n1\n);\n?>"
  },
  {
    "input": "Example #1 Memcached::setMulti() example",
    "output": "<?php\n$m\n= new\nMemcached\n();\n$m\n->\naddServer\n(\n'localhost'\n,\n11211\n);\n$items\n= array(\n\n'key1'\n=>\n'value1'\n,\n\n'key2'\n=>\n'value2'\n,\n\n'key3'\n=>\n'value3'\n);\n$m\n->\nsetMulti\n(\n$items\n,\ntime\n() +\n300\n);\n?>"
  },
  {
    "input": "Example #1 Setting a Memcached option",
    "output": "<?php\n$m\n= new\nMemcached\n();\nvar_dump\n(\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_HASH\n) ==\nMemcached\n::\nHASH_DEFAULT\n);\n$m\n->\nsetOption\n(\nMemcached\n::\nOPT_HASH\n,\nMemcached\n::\nHASH_MURMUR\n);\n$m\n->\nsetOption\n(\nMemcached\n::\nOPT_PREFIX_KEY\n,\n\"widgets\"\n);\necho\n\"Prefix key is now: \"\n,\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_PREFIX_KEY\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Setting Memcached options",
    "output": "<?php\n$m\n= new\nMemcached\n();\nvar_dump\n(\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_HASH\n) ==\nMemcached\n::\nHASH_DEFAULT\n);\n$m\n->\nsetOptions\n(array(\nMemcached\n::\nOPT_HASH\n=>\nMemcached\n::\nHASH_MURMUR\n,\nMemcached\n::\nOPT_PREFIX_KEY\n=>\n\"widgets\"\n));\nvar_dump\n(\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_HASH\n) ==\nMemcached\n::\nHASH_DEFAULT\n);\necho\n\"Prefix key is now: \"\n,\n$m\n->\ngetOption\n(\nMemcached\n::\nOPT_PREFIX_KEY\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_back()\n     example",
    "output": "<?php\n    mqseries_back\n(\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_begin()\n     example",
    "output": "<?php\n    $mqbo\n= array();\n\nmqseries_begin\n(\n$conn\n,\n\n$mqbo\n,\n\n$comp_code\n,\n\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\n/* reason code 2121 is a warning for more information see MQSeries reference manual.*/\n\nif (\n$reason\n!==\n2121\n) {\n\nprintf\n(\n\"CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        }\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_close()\n     example",
    "output": "<?php\n    mqseries_close\n(\n$conn\n,\n$obj\n,\nMQSERIES_MQCO_NONE\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"close CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_cmit()\n     example",
    "output": "<?php\n    mqseries_cmit\n(\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"cmit CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_conn()\n     example",
    "output": "<?php\n    mqseries_conn\n(\n'WMQ1'\n,\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"conn CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        exit;\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_connx()\n     example",
    "output": "<?php\n    $mqcno\n= array(\n\n'Version'\n=>\nMQSERIES_MQCNO_VERSION_2\n,\n\n'Options'\n=>\nMQSERIES_MQCNO_STANDARD_BINDING\n,\n\n'MQCD'\n=> array(\n'ChannelName'\n=>\n'MQNX9420.CLIENT'\n,\n\n'ConnectionName'\n=>\n'localhost'\n,\n\n'TransportType'\n=>\nMQSERIES_MQXPT_TCP\n)\n    );\n\nmqseries_connx\n(\n'MQNX9420'\n,\n$mqcno\n,\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"Connx CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        exit;\n    }\n\n?>"
  },
  {
    "input": "Example #2 \n     mqseries_connx()\n     example using SSL connection & OCSP Responder URL",
    "output": "<?php\n    $mqcno\n= array(\n\n'Version'\n=>\n4\n,\n//MQCNO_VERSION_4\n\n'Options'\n=>\nMQSERIES_MQCNO_STANDARD_BINDING\n,\n\n'MQCD'\n=> array(\n\n'Version'\n=>\n7\n,\n//MQCD_VERSION_7\n\n'ConnectionName'\n=>\n'localhost'\n,\n\n'TransportType'\n=>\nMQSERIES_MQXPT_TCP\n,\n\n'ChannelName'\n=>\n'CONNECTIONCHANNEL'\n,\n\n'SSLCipherSpec'\n=>\n'NULL_SHA'\n\n),\n\n'MQSCO'\n=> array(\n\n'KeyRepository'\n=>\n'/var/mqm/qmgrs/QUEUEMGR/ssl/key'\n,\n//Local path where the SSL key repository can be found\n\n'MQAIR'\n=> array(\n\n'Version'\n=>\n2\n,\n//MQAIR_VERSION_2\n\n'AuthInfoType'\n=>\n2\n,\n//MQAIT_OCSP\n\n'OCSPResponderURL'\n=>\n'http://dummy.OCSP.responder'\n\n)\n        )\n    );\n\nmqseries_connx\n(\n'QUEUEMGR'\n,\n$mqcno\n,\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"Connx CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        exit;\n    }\n\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_disc()\n     example",
    "output": "<?php\n    mqseries_disc\n(\n$conn\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"disc CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_get()\n     example",
    "output": "<?php\n// open connection to the queue manager\n\nmqseries_conn\n(\n'WMQ1'\n,\n$conn\n,\n$comp_code\n,\n$reason\n);\n// $conn now hold the reference to the connection to the queue manager.\n// open the connection to the testq queue\n\nmqseries_open\n(\n\n$conn\n,\n                array(\n'ObjectName'\n=>\n'TESTQ'\n),\n\nMQSERIES_MQOO_INPUT_AS_Q_DEF\n|\nMQSERIES_MQOO_FAIL_IF_QUIESCING\n|\nMQSERIES_MQOO_OUTPUT\n,\n\n$obj\n,\n\n$comp_code\n,\n\n$reason\n);\n// $obj now holds the reference to the object (TESTQ)\n// setup empty message descriptor.\n\n$mdg\n= array();\n// setup get message options\n\n$gmo\n= array(\n'Options'\n=>\nMQSERIES_MQGMO_FAIL_IF_QUIESCING\n|\nMQSERIES_MQGMO_WAIT\n,\n'WaitInterval'\n=>\n3000\n);\n// get the message from the queue\n\nmqseries_get\n(\n$conn\n,\n$obj\n,\n$mdg\n,\n$gmo\n,\n255\n,\n$msg\n,\n$data_length\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"GET CompCode:%d Reason:%d Text:%s<br>\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n\n// close the object reference $obj\n\nmqseries_close\n(\n$conn\n,\n$obj\n,\nMQSERIES_MQCO_NONE\n,\n$comp_code\n,\n$reason\n);\n// disconnect from the queue manager.\n\nmqseries_disc\n(\n$conn\n,\n$comp_code\n,\n$reason\n);\n\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_inq()\n     example",
    "output": "<?php\n    $int_attr\n= array();\n\n$char_attr\n=\n\"\"\n;\n\n\nmqseries_inq\n(\n$conn\n,\n$obj\n,\n1\n, array(\nMQSERIES_MQCA_Q_MGR_NAME\n),\n0\n,\n$int_attr\n,\n48\n,\n$char_attr\n,\n$comp_code\n,\n$reason\n);\n\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"INQ CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    } else {\n        echo\n\"INQ QManager name result \"\n.\n$char_attr\n.\n\"<br>\\n\"\n;\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_open()\n     example",
    "output": "<?php\n    $mqods\n= array(\n'ObjectName'\n=>\n'TESTQ'\n);\n\nmqseries_open\n(\n\n$conn\n,\n\n$mqods\n,\n\nMQSERIES_MQOO_INPUT_AS_Q_DEF\n|\nMQSERIES_MQOO_FAIL_IF_QUIESCING\n|\nMQSERIES_MQOO_OUTPUT\n,\n\n$obj\n,\n\n$comp_code\n,\n\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"open CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        exit;\n    }\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_put()\n     example",
    "output": "<?php\n// open connection to the queue manager\n\nmqseries_conn\n(\n'WMQ1'\n,\n$conn\n,\n$comp_code\n,\n$reason\n);\n// $conn now hold the reference to the connection to the queue manager.\n// open the connectio to the testq queueu\n\nmqseries_open\n(\n\n$conn\n,\n                array(\n'ObjectName'\n=>\n'TESTQ'\n),\n\nMQSERIES_MQOO_INPUT_AS_Q_DEF\n|\nMQSERIES_MQOO_FAIL_IF_QUIESCING\n|\nMQSERIES_MQOO_OUTPUT\n,\n\n$obj\n,\n\n$comp_code\n,\n\n$reason\n);\n// $obj now holds the reference to the object (TESTQ)\n// setup the message descriptor array. Check MQSeries reference manuals.\n\n$md\n= array(\n\n'Version'\n=>\nMQSERIES_MQMD_VERSION_1\n,\n\n'Expiry'\n=>\nMQSERIES_MQEI_UNLIMITED\n,\n\n'Report'\n=>\nMQSERIES_MQRO_NONE\n,\n\n'MsgType'\n=>\nMQSERIES_MQMT_DATAGRAM\n,\n\n'Format'\n=>\nMQSERIES_MQFMT_STRING\n,\n\n'Priority'\n=>\n1\n,\n\n'Persistence'\n=>\nMQSERIES_MQPER_PERSISTENT\n);\n// setup the put message options.\n\n$pmo\n= array(\n'Options'\n=>\nMQSERIES_MQPMO_NEW_MSG_ID\n|\nMQSERIES_MQPMO_SYNCPOINT\n);\n\n// put the message 'Ping' on the queueu.\n\nmqseries_put\n(\n$conn\n,\n$obj\n,\n$md\n,\n$pmo\n,\n'Ping'\n,\n$comp_code\n,\n$reason\n);\n    if (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"put CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n    }\n// close the object reference $obj\n\nmqseries_close\n(\n$conn\n,\n$obj\n,\nMQSERIES_MQCO_NONE\n,\n$comp_code\n,\n$reason\n);\n// disconnect from the queue manager.\n\nmqseries_disc\n(\n$conn\n,\n$comp_code\n,\n$reason\n);\n\n?>"
  },
  {
    "input": "Example #1 \n     mqseries_strerror()\n     example",
    "output": "<?php\n\nif (\n$comp_code\n!==\nMQSERIES_MQCC_OK\n) {\n\nprintf\n(\n\"open CompCode:%d Reason:%d Text:%s<br>\\n\"\n,\n$comp_code\n,\n$reason\n,\nmqseries_strerror\n(\n$reason\n));\n        exit;\n    }\n?>"
  },
  {
    "input": "Example #1 Using dns_get_record()",
    "output": "<?php\n$result\n=\ndns_get_record\n(\n\"php.net\"\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 fsockopen() Example",
    "output": "<?php\n$fp\n=\nfsockopen\n(\n\"www.example.com\"\n,\n80\n,\n$errno\n,\n$errstr\n,\n30\n);\nif (!\n$fp\n) {\n    echo\n\"\n$errstr\n (\n$errno\n)<br />\\n\"\n;\n} else {\n\n$out\n=\n\"GET / HTTP/1.1\\r\\n\"\n;\n\n$out\n.=\n\"Host: www.example.com\\r\\n\"\n;\n\n$out\n.=\n\"Connection: Close\\r\\n\\r\\n\"\n;\n\nfwrite\n(\n$fp\n,\n$out\n);\n    while (!\nfeof\n(\n$fp\n)) {\n        echo\nfgets\n(\n$fp\n,\n128\n);\n    }\n\nfclose\n(\n$fp\n);\n}\n?>"
  },
  {
    "input": "Example #1 A simple gethostbyaddr() example",
    "output": "<?php\n$hostname\n=\ngethostbyaddr\n(\n$_SERVER\n[\n'REMOTE_ADDR'\n]);\necho\n$hostname\n;\n?>"
  },
  {
    "input": "Example #1 A simple gethostbyname() example",
    "output": "<?php\n$ip\n=\ngethostbyname\n(\n'www.example.com'\n);\necho\n$ip\n;\n?>"
  },
  {
    "input": "Example #1 gethostbynamel() example",
    "output": "<?php\n$hosts\n=\ngethostbynamel\n(\n'www.example.com'\n);\nprint_r\n(\n$hosts\n);\n?>"
  },
  {
    "input": "Example #1 A simple gethostname() example",
    "output": "<?php\necho\ngethostname\n();\n// may output e.g,: sandie\n?>"
  },
  {
    "input": "Example #1 getprotobyname() example",
    "output": "<?php\n$protocol\n=\n'tcp'\n;\n$get_prot\n=\ngetprotobyname\n(\n$protocol\n);\nif (\n$get_prot\n===\nFALSE\n) {\n    echo\n'Invalid Protocol'\n;\n} else {\n    echo\n'Protocol #'\n.\n$get_prot\n;\n}\n?>"
  },
  {
    "input": "Example #1 getservbyname() example",
    "output": "<?php\n$services\n= array(\n'http'\n,\n'ftp'\n,\n'ssh'\n,\n'telnet'\n,\n'imap'\n,\n'smtp'\n,\n'nicname'\n,\n'gopher'\n,\n'finger'\n,\n'pop3'\n,\n'www'\n);\nforeach (\n$services\nas\n$service\n) {\n\n$port\n=\ngetservbyname\n(\n$service\n,\n'tcp'\n);\n    echo\n$service\n.\n\": \"\n.\n$port\n.\n\"<br />\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 header_register_callback() example",
    "output": "<?php\nheader\n(\n'Content-Type: text/plain'\n);\nheader\n(\n'X-Test: foo'\n);\nfunction\nfoo\n() {\n foreach (\nheaders_list\n() as\n$header\n) {\n   if (\nstrpos\n(\n$header\n,\n'X-Powered-By:'\n) !==\nfalse\n) {\n\nheader_remove\n(\n'X-Powered-By'\n);\n   }\n\nheader_remove\n(\n'X-Test'\n);\n }\n}\n$result\n=\nheader_register_callback\n(\n'foo'\n);\necho\n\"a\"\n;\n?>"
  },
  {
    "input": "Example #1 Unsetting specific header.",
    "output": "<?php\nheader\n(\n\"X-Foo: Bar\"\n);\nheader\n(\n\"X-Bar: Baz\"\n);\nheader_remove\n(\n\"X-Foo\"\n);\n?>"
  },
  {
    "input": "Example #2 Unsetting all previously set headers.",
    "output": "<?php\nheader\n(\n\"X-Foo: Bar\"\n);\nheader\n(\n\"X-Bar: Baz\"\n);\nheader_remove\n();\n?>"
  },
  {
    "input": "Example #1 Example using headers_list()",
    "output": "<?php\n/* setcookie() will add a response header on its own */\nsetcookie\n(\n'foo'\n,\n'bar'\n);\n/* Define a custom response header\n   This will be ignored by most clients */\nheader\n(\n\"Example-Test: foo\"\n);\n/* Specify plain text content in our response */\nheader\n(\n'Content-Type: text/plain; charset=UTF-8'\n);\n/* What headers are going to be sent? */\nvar_dump\n(\nheaders_list\n());\n?>"
  },
  {
    "input": "Example #1 Examples using headers_sent()",
    "output": "<?php\n// If no headers are sent, send one\nif (!\nheaders_sent\n()) {\n\nheader\n(\n'Location: http://www.example.com/'\n);\n    exit;\n}\n// An example using the optional file and line parameters\n// Note that $filename and $linenum are passed in for later use.\n// Do not assign them values beforehand.\nif (!\nheaders_sent\n(\n$filename\n,\n$linenum\n)) {\n\nheader\n(\n'Location: http://www.example.com/'\n);\n    exit;\n// You would most likely trigger an error here.\n} else {\n    echo\n\"Headers already sent in\n$filename\n on line\n$linenum\n\\n\"\n.\n\n\"Cannot redirect, for now please click this <a \"\n.\n\n\"href=\\\"http://www.example.com\\\">link</a> instead\\n\"\n;\n    exit;\n}\n?>"
  },
  {
    "input": "Example #1 Using http_response_code() in a web server environment",
    "output": "<?php\n// Get the current response code and set a new one\nvar_dump\n(\nhttp_response_code\n(\n404\n));\n// Get the new response code\nvar_dump\n(\nhttp_response_code\n());\n?>"
  },
  {
    "input": "Example #2 Using http_response_code() in a CLI environment",
    "output": "<?php\n// Get the current default response code\nvar_dump\n(\nhttp_response_code\n());\n// Set a response code\nvar_dump\n(\nhttp_response_code\n(\n201\n));\n// Get the new response code\nvar_dump\n(\nhttp_response_code\n());\n?>"
  },
  {
    "input": "Example #1 inet_ntop() Example",
    "output": "<?php\n$packed\n=\nchr\n(\n127\n) .\nchr\n(\n0\n) .\nchr\n(\n0\n) .\nchr\n(\n1\n);\n$expanded\n=\ninet_ntop\n(\n$packed\n);\n/* Outputs: 127.0.0.1 */\necho\n$expanded\n;\n$packed\n=\nstr_repeat\n(\nchr\n(\n0\n),\n15\n) .\nchr\n(\n1\n);\n$expanded\n=\ninet_ntop\n(\n$packed\n);\n/* Outputs: ::1 */\necho\n$expanded\n;\n?>"
  },
  {
    "input": "Example #1 inet_pton() Example",
    "output": "<?php\n$in_addr\n=\ninet_pton\n(\n'127.0.0.1'\n);\n\n$in6_addr\n=\ninet_pton\n(\n'::1'\n);\n?>"
  },
  {
    "input": "Example #1 ip2long() Example",
    "output": "<?php\n$ip\n=\ngethostbyname\n(\n'www.example.com'\n);\n$out\n=\n\"The following URLs are equivalent:<br />\\n\"\n;\n$out\n.=\n'http://www.example.com/, http://'\n.\n$ip\n.\n'/, and http://'\n.\nsprintf\n(\n\"%u\"\n,\nip2long\n(\n$ip\n)) .\n\"/<br />\\n\"\n;\necho\n$out\n;\n?>"
  },
  {
    "input": "Example #1 request_parse_body() example",
    "output": "<?php\n// Parse request and store result in the $_POST and $_FILES superglobals.\n[\n$_POST\n,\n$_FILES\n] =\nrequest_parse_body\n();\n// Echo the content of some transferred file\necho\nfile_get_contents\n(\n$_FILES\n[\n'file_name'\n][\n'tmp_name'\n]);\n?>"
  },
  {
    "input": "Example #2 request_parse_body() example with customized options",
    "output": "<?php\n// form.php\nassert_logged_in\n();\n// Only for this form, we allow a bigger upload size.\n[\n$_POST\n,\n$_FILES\n] =\nrequest_parse_body\n([\n\n'post_max_size'\n=>\n'10M'\n,\n\n'upload_max_filesize'\n=>\n'10M'\n,\n]);\n// Do something with the uploaded files.\n?>"
  },
  {
    "input": "Example #1 setcookie() send example",
    "output": "<?php\n$value\n=\n'something from somewhere'\n;\nsetcookie\n(\n\"TestCookie\"\n,\n$value\n);\nsetcookie\n(\n\"TestCookie\"\n,\n$value\n,\ntime\n()+\n3600\n);\n/* expire in 1 hour */\nsetcookie\n(\n\"TestCookie\"\n,\n$value\n,\ntime\n()+\n3600\n,\n\"/~rasmus/\"\n,\n\"example.com\"\n,\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Using syslog()",
    "output": "<?php\n// open syslog, include the process ID and also send\n// the log to standard error, and use a user defined\n// logging mechanism\nopenlog\n(\n\"myScriptLog\"\n,\nLOG_PID\n|\nLOG_PERROR\n,\nLOG_LOCAL0\n);\n// some code\nif (\nauthorized_client\n()) {\n\n// do something\n} else {\n\n// unauthorized client!\n    // log the attempt\n\n$access\n=\ndate\n(\n\"Y/m/d H:i:s\"\n);\n\nsyslog\n(\nLOG_WARNING\n,\n\"Unauthorized client:\n$access\n\n{\n$_SERVER\n[\n'REMOTE_ADDR'\n]}\n (\n{\n$_SERVER\n[\n'HTTP_USER_AGENT'\n]}\n)\"\n);\n}\ncloselog\n();\n?>"
  },
  {
    "input": "Example #1 Procedural usage of rrd",
    "output": "<?php\n$rrdFile\n=\ndirname\n(\n__FILE__\n) .\n\"/speed.rrd\"\n;\n//create rrd file\nrrd_create\n(\n$rrdFile\n,\n array(\n\n\"--start\"\n,\n920804400\n,\n\n\"DS:speed:COUNTER:600:U:U\"\n,\n\n\"RRA:AVERAGE:0.5:1:24\"\n,\n\n\"RRA:AVERAGE:0.5:6:10\"\n\n)\n);\n//update rrd file\nrrd_update\n(\n$rrdFile\n,\n array(\n\n\"920804700:12345\"\n,\n\n\"920805000:12357\"\n\n)\n);\n//graph output\nrrd_graph\n(\ndirname\n(\n__FILE__\n) .\n\"/speed.png\"\n,\n array(\n\n\"--start\"\n,\n\"920804400\"\n,\n\n\"--end\"\n,\n\"920808000\"\n,\n\n\"--vertical-label\"\n,\n\"m/s\"\n,\n\n\"DEF:myspeed=\n$rrdFile\n:speed:AVERAGE\"\n,\n\n\"CDEF:realspeed=myspeed,1000,*\"\n,\n\n\"LINE2:realspeed#FF0000\"\n\n)\n);\n?>"
  },
  {
    "input": "Example #1 OO usage of rrd",
    "output": "<?php\n$rrdFile\n=\ndirname\n(\n__FILE__\n) .\n\"/speed.rrd\"\n;\n$outputPngFile\n=\ndirname\n(\n__FILE__\n) .\n\"/speed.png\"\n;\n$creator\n= new\nRRDCreator\n(\n$rrdFile\n,\n\"now -10d\"\n,\n500\n);\n$creator\n->\naddDataSource\n(\n\"speed:COUNTER:600:U:U\"\n);\n$creator\n->\naddArchive\n(\n\"AVERAGE:0.5:1:24\"\n);\n$creator\n->\naddArchive\n(\n\"AVERAGE:0.5:6:10\"\n);\n$creator\n->\nsave\n();\n$updater\n= new\nRRDUpdater\n(\n$rrdFile\n);\n$updater\n->\nupdate\n(array(\n\"speed\"\n=>\n\"12345\"\n),\n\"920804700\"\n);\n$updater\n->\nupdate\n(array(\n\"speed\"\n=>\n\"12357\"\n),\n\"920805000\"\n);\n$graphObj\n= new\nRRDGraph\n(\n$outputPngFile\n);\n$graphObj\n->\nsetOptions\n(\n    array(\n\n\"--start\"\n=>\n\"920804400\"\n,\n\n\"--end\"\n=>\n920808000\n,\n\n\"--vertical-label\"\n=>\n\"m/s\"\n,\n\n\"DEF:myspeed=\n$rrdFile\n:speed:AVERAGE\"\n,\n\n\"CDEF:realspeed=myspeed,1000,*\"\n,\n\n\"LINE2:realspeed#FF0000\"\n\n)\n);\n$graphObj\n->\nsave\n();\n?>"
  },
  {
    "input": "Example #1 RRDGraph::setOptions() example",
    "output": "<?php\n$graphObj\n->\nsetOptions\n(array(\n\n\"--start\"\n=>\n\"920804400\"\n,\n\n\"--end\"\n=>\n920808000\n,\n\n\"--vertical-label\"\n=>\n\"m/s\"\n,\n\n\"DEF:myspeed=\n$rrdFile\n:speed:AVERAGE\"\n,\n\n\"CDEF:realspeed=myspeed,1000,*\"\n,\n\n\"LINE2:realspeed#FF0000\"\n));\n?>"
  },
  {
    "input": "Example #2 Set multiple color options",
    "output": "<?php\n$graphObj\n->\nsetOptions\n(array(\n\n\"--start\"\n=>\n\"920804400\"\n,\n\n\"--end\"\n=>\n920808000\n,\n\n\"--vertical-label\"\n=>\n\"m/s\"\n,\n\n\"--color=BACK#00000000\"\n,\n\n\"--color=GRID#00000000\"\n,\n\n\"--color=MGRID#00000000\"\n,\n\n\"DEF:myspeed=\n$rrdFile\n:speed:AVERAGE\"\n,\n\n\"CDEF:realspeed=myspeed,1000,*\"\n,\n\n\"LINE2:realspeed#FF0000\"\n));\n?>"
  },
  {
    "input": "Example #1 RRDUpdater::update() examples",
    "output": "<?php\n$updator\n= new\nRRDUpdater\n(\n\"speed.rrd\"\n);\n//updates the data source \"speed\" with value \"12411\"\n//for time defined by timestamp \"920807700\"\n$updator\n->\nupdate\n(array(\n\"speed\"\n=>\n\"12411\"\n),\n\"920807700\"\n);\n?>"
  },
  {
    "input": "Example #1 Fetch instrumented calls",
    "output": "<?php\nfile_get_contents\n(\n'a.txt'\n);\nfile_get_contents\n(\n'b.txt'\n);\nprint_r\n(\nscoutapm_get_calls\n());\n?>"
  },
  {
    "input": "Example #1 Fetch the list of functions scoutapm will instrument",
    "output": "<?php\nprint_r\n(\nscoutapm_list_instrumented_functions\n());\n?>"
  },
  {
    "input": "Example #1 snmp_get_quick_print() example",
    "output": "<?php\n$quickprint\n=\nsnmp_get_quick_print\n();\n?>"
  },
  {
    "input": "Example #1 Using snmp_get_valueretrieval()",
    "output": "<?php\n $ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n if (\nsnmp_get_valueretrieval\n() &\nSNMP_VALUE_OBJECT\n) {\n   echo\n$ret\n->\nvalue\n;\n } else {\n   echo\n$ret\n;\n }\n?>"
  },
  {
    "input": "Example #1 Using snmp_read_mib()",
    "output": "<?php\n print_r\n(\nsnmprealwalk\n(\n'localhost'\n,\n'public'\n,\n'.1.3.6.1.2.1.2.3.4.5'\n) );\n\n\nsnmp_read_mib\n(\n'./FOO-BAR-MIB.txt'\n);\n\nprint_r\n(\nsnmprealwalk\n(\n'localhost'\n,\n'public'\n,\n'FOO-BAR-MIB::someTable'\n) );\n?>"
  },
  {
    "input": "Example #1 Using snmp_set_enum_print()",
    "output": "<?php\n snmp_set_enum_print\n(\n0\n);\n echo\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifOperStatus.3'\n) .\n\"\\n\"\n;\n\nsnmp_set_enum_print\n(\n1\n);\n echo\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifOperStatus.3'\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Using snmprealwalk()",
    "output": "<?php\n snmp_read_mib\n(\n\"/usr/share/mibs/netsnmp/NET-SNMP-TC\"\n);\n\n// default or SNMP_OID_OUTPUT_MODULE\n\nprint_r\n(\nsnmprealwalk\n(\n'localhost'\n,\n'public'\n,\n'RFC1213-MIB::sysObjectID'\n) );\n\nsnmp_set_oid_output_format\n(\nSNMP_OID_OUTPUT_NUMERIC\n);\n\nprint_r\n(\nsnmprealwalk\n(\n'localhost'\n,\n'public'\n,\n'RFC1213-MIB::sysObjectID'\n) );\n\nsnmp_set_oid_output_format\n(\nSNMP_OID_OUTPUT_FULL\n);\n\nprint_r\n(\nsnmprealwalk\n(\n'localhost'\n,\n'public'\n,\n'RFC1213-MIB::sysObjectID'\n) );\n?>"
  },
  {
    "input": "Example #1 Using snmp_set_quick_print()",
    "output": "<?php\nsnmp_set_quick_print\n(\n0\n);\n$a\n=\nsnmpget\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\".1.3.6.1.2.1.2.2.1.9.1\"\n);\necho\n\"\n$a\n\\n\"\n;\nsnmp_set_quick_print\n(\n1\n);\n$a\n=\nsnmpget\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\".1.3.6.1.2.1.2.2.1.9.1\"\n);\necho\n\"\n$a\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Using\n     snmp_set_valueretrieval()",
    "output": "<?php\n snmp_set_valueretrieval\n(\nSNMP_VALUE_LIBRARY\n);\n\n$ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n\n// $ret = \"STRING: lo\"\n\nsnmp_set_valueretrieval\n(\nSNMP_VALUE_PLAIN\n);\n\n$ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n\n// $ret = \"lo\";\n\nsnmp_set_valueretrieval\n(\nSNMP_VALUE_OBJECT\n);\n\n$ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n\n// stdClass Object\n // (\n //   [type] => 4        <-- SNMP_OCTET_STR, see constants\n //   [value] => lo\n // )\n\nsnmp_set_valueretrieval\n(\nSNMP_VALUE_OBJECT\n|\nSNMP_VALUE_PLAIN\n);\n\n$ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n\n// stdClass Object\n // (\n //   [type] => 4        <-- SNMP_OCTET_STR, see constants\n //   [value] => lo\n // )\n\nsnmp_set_valueretrieval\n(\nSNMP_VALUE_OBJECT\n|\nSNMP_VALUE_LIBRARY\n);\n\n$ret\n=\nsnmpget\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n\n// stdClass Object\n // (\n //   [type] => 4        <-- SNMP_OCTET_STR, see constants\n //   [value] => STRING: lo\n // )\n?>"
  },
  {
    "input": "Example #1 Using snmp2_get()",
    "output": "<?php\n$syscontact\n=\nsnmp2_get\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\"system.SysContact.0\"\n);\n?>"
  },
  {
    "input": "Example #1 Using snmp2_get_next()",
    "output": "<?php\n$nameOfSecondInterface\n=\nsnmp2_get_next\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n?>"
  },
  {
    "input": "Example #1 Using snmp2_real_walk()",
    "output": "<?php\n print_r\n(\nsnmp2_real_walk\n(\n\"localhost\"\n,\n\"public\"\n,\n\"IF-MIB::ifName\"\n));\n?>"
  },
  {
    "input": "Example #1 Using snmp2_set()",
    "output": "<?php\n  snmp2_set\n(\n\"localhost\"\n,\n\"public\"\n,\n\"IF-MIB::ifAlias.3\"\n,\n\"s\"\n,\n\"foo\"\n);\n?>"
  },
  {
    "input": "Example #2 Using snmp2_set() for setting BITS SNMP object id",
    "output": "<?php\n  snmp2_set\n(\n\"localhost\"\n,\n\"public\"\n,\n'FOO-MIB::bar.42'\n,\n'b'\n,\n'0 1 2 3 4'\n);\n// or\n\nsnmp2_set\n(\n\"localhost\"\n,\n\"public\"\n,\n'FOO-MIB::bar.42'\n,\n'x'\n,\n'F0'\n);\n?>"
  },
  {
    "input": "Example #1 snmp2_walk() Example",
    "output": "<?php\n$a\n=\nsnmp2_walk\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\"\"\n);\nforeach (\n$a\nas\n$val\n) {\n    echo\n\"\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Using snmp3_get()",
    "output": "<?php\n$nameOfSecondInterface\n=\nsnmp3_get\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'IF-MIB::ifName.2'\n);\n?>"
  },
  {
    "input": "Example #1 Using snmp3_getnext()",
    "output": "<?php\n$nameOfSecondInterface\n=\nsnmp3_getnext\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'IF-MIB::ifName.1'\n);\n?>"
  },
  {
    "input": "Example #1 Using\n     snmp3_real_walk()",
    "output": "<?php\n var_export\n(\nsnmp3_real_walk\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'IF-MIB::ifName'\n));\n?>"
  },
  {
    "input": "Example #1 Using snmp3_set()",
    "output": "<?php\n  snmp3_set\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'IF-MIB::ifAlias.3'\n,\n's'\n,\n\"foo\"\n);\n?>"
  },
  {
    "input": "Example #2 Using snmp3_set() for setting BITS SNMP object id",
    "output": "<?php\n  snmp3_set\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'FOO-MIB::bar.42'\n,\n'b'\n,\n'0 1 2 3 4'\n);\n// or\n\nsnmp3_set\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'FOO-MIB::bar.42'\n,\n'x'\n,\n'F0'\n);\n?>"
  },
  {
    "input": "Example #1 snmp3_walk() Example",
    "output": "<?php\n$ret\n=\nsnmp3_walk\n(\n'localhost'\n,\n'james'\n,\n'authPriv'\n,\n'SHA'\n,\n'secret007'\n,\n'AES'\n,\n'secret007'\n,\n'IF-MIB::ifName'\n);\nvar_export\n(\n$ret\n);\n?>"
  },
  {
    "input": "Example #1 Using snmpget()",
    "output": "<?php\n$syscontact\n=\nsnmpget\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\"system.SysContact.0\"\n);\n?>"
  },
  {
    "input": "Example #1 Using snmpgetnext()",
    "output": "<?php\n$nameOfSecondInterface\n=\nsnmpgetnetxt\n(\n'localhost'\n,\n'public'\n,\n'IF-MIB::ifName.1'\n);\n?>"
  },
  {
    "input": "Example #1 Using snmprealwalk()",
    "output": "<?php\n print_r\n(\nsnmprealwalk\n(\n\"localhost\"\n,\n\"public\"\n,\n\"IF-MIB::ifName\"\n));\n?>"
  },
  {
    "input": "Example #1 Using snmpset()",
    "output": "<?php\n  snmpset\n(\n\"localhost\"\n,\n\"public\"\n,\n\"IF-MIB::ifAlias.3\"\n,\n\"s\"\n,\n\"foo\"\n);\n?>"
  },
  {
    "input": "Example #2 Using snmpset() for setting BITS SNMP object id",
    "output": "<?php\n  snmpset\n(\n\"localhost\"\n,\n\"public\"\n,\n'FOO-MIB::bar.42'\n,\n'b'\n,\n'0 1 2 3 4'\n);\n// or\n\nsnmpset\n(\n\"localhost\"\n,\n\"public\"\n,\n'FOO-MIB::bar.42'\n,\n'x'\n,\n'F0'\n);\n?>"
  },
  {
    "input": "Example #1 snmpwalk() Example",
    "output": "<?php\n$a\n=\nsnmpwalk\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\"\"\n);\nforeach (\n$a\nas\n$val\n) {\n    echo\n\"\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 snmpwalkoid() Example",
    "output": "<?php\n$a\n=\nsnmpwalkoid\n(\n\"127.0.0.1\"\n,\n\"public\"\n,\n\"\"\n);\nfor (\nreset\n(\n$a\n);\n$i\n=\nkey\n(\n$a\n);\nnext\n(\n$a\n)) {\n    echo\n\"\n$i\n:\n$a\n[\n$i\n]\n<br />\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Fetching the physical location of the host",
    "output": "<?php\n$session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_1\n,\n\"127.0.0.1\"\n,\n\"public\"\n);\n$sysdescr\n=\n$session\n->\nget\n(\n\"sysDescr.0\"\n);\necho\n\"\n$sysdescr\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Multiple SNMP objects",
    "output": "$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $results = $session->get(array(\"sysDescr.0\", \"sysName.0\"));\n  print_r($results);\n  $session->close();"
  },
  {
    "input": "Example #2 Miltiple SNMP objects",
    "output": "<?php\n  $session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_1\n,\n\"127.0.0.1\"\n,\n\"public\"\n);\n\n$results\n=\n$session\n->\ngetnext\n(array(\n\"sysDescr.0\"\n,\n\"sysName.0\"\n));\n\nprint_r\n(\n$results\n);\n\n$session\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 Set single SNMP object id",
    "output": "<?php\n  $session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_2C\n,\n\"127.0.0.1\"\n,\n\"private\"\n);\n\n$session\n->\nset\n(\n'SNMPv2-MIB::sysContact.0'\n,\n's'\n,\n\"Nobody\"\n);\n?>"
  },
  {
    "input": "Example #2 Set multiple values using single SNMP::set()\n   call",
    "output": "<?php\n  $session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_2C\n,\n\"127.0.0.1\"\n,\n\"private\"\n);\n\n$session\n->\nset\n(array(\n'SNMPv2-MIB::sysContact.0'\n,\n'SNMPv2-MIB::sysLocation.0'\n), array(\n's'\n,\n's'\n), array(\n\"Nobody\"\n,\n\"Nowhere\"\n));\n// or\n\n$session\n->\nset\n(array(\n'SNMPv2-MIB::sysContact.0'\n,\n'SNMPv2-MIB::sysLocation.0'\n),\n's'\n, array(\n\"Nobody\"\n,\n\"Nowhere\"\n));\n?>"
  },
  {
    "input": "Example #3 Using SNMP::set() for setting BITS SNMP object id",
    "output": "<?php\n  $session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_2C\n,\n\"127.0.0.1\"\n,\n\"private\"\n);\n\n$session\n->\nset\n(\n'FOO-MIB::bar.42'\n,\n'b'\n,\n'0 1 2 3 4'\n);\n// or\n\n$session\n->\nset\n(\n'FOO-MIB::bar.42'\n,\n'x'\n,\n'F0'\n);\n?>"
  },
  {
    "input": "Example #1 SNMP::walk() example",
    "output": "<?php\n  $session\n= new\nSNMP\n(\nSNMP\n::\nVERSION_1\n,\n\"127.0.0.1\"\n,\n\"public\"\n);\n\n$fulltree\n=\n$session\n->\nwalk\n(\n\".\"\n);\n\nprint_r\n(\n$fulltree\n);\n\n$session\n->\nclose\n();\n?>"
  },
  {
    "input": "Example #1 Using socket_atmark() to set the source address",
    "output": "<?php\n// Create a new socket\n$sock\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nvar_dump\n(\nsocket_atmark\n(\n$sock\n));\n// Close\nsocket_close\n(\n$sock\n);\n?>"
  },
  {
    "input": "Example #1 Using socket_bind() to set the source address",
    "output": "<?php\n// Create a new socket\n$sock\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\n// An example list of IP addresses owned by the computer\n$sourceips\n[\n'kevin'\n]    =\n'127.0.0.1'\n;\n$sourceips\n[\n'madcoder'\n] =\n'127.0.0.2'\n;\n// Bind the source address\nsocket_bind\n(\n$sock\n,\n$sourceips\n[\n'madcoder'\n]);\n// Connect to destination address\nsocket_connect\n(\n$sock\n,\n'127.0.0.1'\n,\n80\n);\n// Write\n$request\n=\n'GET / HTTP/1.1'\n.\n\"\\r\\n\"\n.\n\n'Host: example.com'\n.\n\"\\r\\n\\r\\n\"\n;\nsocket_write\n(\n$sock\n,\n$request\n);\n// Close\nsocket_close\n(\n$sock\n);\n?>"
  },
  {
    "input": "Example #1 socket_create_pair() example",
    "output": "<?php\n$sockets\n= array();\n/* On Windows we need to use AF_INET */\n$domain\n= (\nstrtoupper\n(\nsubstr\n(\nPHP_OS\n,\n0\n,\n3\n)) ==\n'WIN'\n?\nAF_INET\n:\nAF_UNIX\n);\n/* Setup socket pair */\nif (\nsocket_create_pair\n(\n$domain\n,\nSOCK_STREAM\n,\n0\n,\n$sockets\n) ===\nfalse\n) {\n    echo\n\"socket_create_pair failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n());\n}\n/* Send and Receive Data */\nif (\nsocket_write\n(\n$sockets\n[\n0\n],\n\"ABCdef123\\n\"\n,\nstrlen\n(\n\"ABCdef123\\n\"\n)) ===\nfalse\n) {\n    echo\n\"socket_write() failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n(\n$sockets\n[\n0\n]));\n}\nif ((\n$data\n=\nsocket_read\n(\n$sockets\n[\n1\n],\nstrlen\n(\n\"ABCdef123\\n\"\n),\nPHP_BINARY_READ\n)) ===\nfalse\n) {\n    echo\n\"socket_read() failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n(\n$sockets\n[\n1\n]));\n}\nvar_dump\n(\n$data\n);\n/* Close sockets */\nsocket_close\n(\n$sockets\n[\n0\n]);\nsocket_close\n(\n$sockets\n[\n1\n]);\n?>"
  },
  {
    "input": "Example #2 socket_create_pair() IPC example",
    "output": "<?php\n$ary\n= array();\n$strone\n=\n'Message From Parent.'\n;\n$strtwo\n=\n'Message From Child.'\n;\nif (\nsocket_create_pair\n(\nAF_UNIX\n,\nSOCK_STREAM\n,\n0\n,\n$ary\n) ===\nfalse\n) {\n    echo\n\"socket_create_pair() failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n());\n}\n$pid\n=\npcntl_fork\n();\nif (\n$pid\n== -\n1\n) {\n    echo\n'Could not fork Process.'\n;\n} elseif (\n$pid\n) {\n\n/*parent*/\n\nsocket_close\n(\n$ary\n[\n0\n]);\n    if (\nsocket_write\n(\n$ary\n[\n1\n],\n$strone\n,\nstrlen\n(\n$strone\n)) ===\nfalse\n) {\n        echo\n\"socket_write() failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n(\n$ary\n[\n1\n]));\n    }\n    if (\nsocket_read\n(\n$ary\n[\n1\n],\nstrlen\n(\n$strtwo\n),\nPHP_BINARY_READ\n) ==\n$strtwo\n) {\n        echo\n\"Received\n$strtwo\n\\n\"\n;\n    }\n\nsocket_close\n(\n$ary\n[\n1\n]);\n} else {\n\n/*child*/\n\nsocket_close\n(\n$ary\n[\n1\n]);\n    if (\nsocket_write\n(\n$ary\n[\n0\n],\n$strtwo\n,\nstrlen\n(\n$strtwo\n)) ===\nfalse\n) {\n        echo\n\"socket_write() failed. Reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n(\n$ary\n[\n0\n]));\n    }\n    if (\nsocket_read\n(\n$ary\n[\n0\n],\nstrlen\n(\n$strone\n),\nPHP_BINARY_READ\n) ==\n$strone\n) {\n        echo\n\"Received\n$strone\n\\n\"\n;\n    }\n\nsocket_close\n(\n$ary\n[\n0\n]);\n}\n?>"
  },
  {
    "input": "Example #1 socket_get_option() example",
    "output": "<?php\n$socket\n=\nsocket_create_listen\n(\n1223\n);\n$linger\n= array(\n'l_linger'\n=>\n1\n,\n'l_onoff'\n=>\n1\n);\nsocket_set_option\n(\n$socket\n,\nSOL_SOCKET\n,\nSO_LINGER\n,\n$linger\n);\nvar_dump\n(\nsocket_get_option\n(\n$socket\n,\nSOL_SOCKET\n,\nSO_REUSEADDR\n));\n?>"
  },
  {
    "input": "Example #1 socket_import_stream() example",
    "output": "<?php\n$stream\n=\nstream_socket_server\n(\n\"udp://0.0.0.0:58380\"\n,\n$errno\n,\n$errstr\n,\nSTREAM_SERVER_BIND\n);\n$sock\n=\nsocket_import_stream\n(\n$stream\n);\n?>"
  },
  {
    "input": "Example #1 socket_last_error() example",
    "output": "<?php\n$socket\n= @\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (\n$socket\n===\nfalse\n) {\n\n$errorcode\n=\nsocket_last_error\n();\n\n$errormsg\n=\nsocket_strerror\n(\n$errorcode\n);\n\n    die(\n\"Couldn't create socket: [\n$errorcode\n]\n$errormsg\n\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 socket_recvfrom() example",
    "output": "<?php\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_DGRAM\n,\nSOL_UDP\n);\nsocket_bind\n(\n$socket\n,\n'127.0.0.1'\n,\n1223\n);\n$from\n=\n''\n;\n$port\n=\n0\n;\nsocket_recvfrom\n(\n$socket\n,\n$buf\n,\n12\n,\n0\n,\n$from\n,\n$port\n);\necho\n\"Received\n$buf\n from remote address\n$from\n and remote port\n$port\n\"\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 Using null with socket_select()",
    "output": "<?php\n$e\n=\nNULL\n;\nsocket_select\n(\n$r\n,\n$w\n,\n$e\n,\n0\n);\n?>"
  },
  {
    "input": "Example #2 Understanding socket_select()'s result",
    "output": "<?php\n$e\n=\nNULL\n;\nif (\nfalse\n===\nsocket_select\n(\n$r\n,\n$w\n,\n$e\n,\n0\n)) {\n    echo\n\"socket_select() failed, reason: \"\n.\n\nsocket_strerror\n(\nsocket_last_error\n()) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 socket_select() example",
    "output": "<?php\n/* Prepare the read array */\n$read\n= array(\n$socket1\n,\n$socket2\n);\n$write\n=\nNULL\n;\n$except\n=\nNULL\n;\n$num_changed_sockets\n=\nsocket_select\n(\n$read\n,\n$write\n,\n$except\n,\n0\n);\nif (\n$num_changed_sockets\n===\nfalse\n) {\n\n/* Error handling */\n} else if (\n$num_changed_sockets\n>\n0\n) {\n\n/* At least at one of the sockets something interesting happened */\n}\n?>"
  },
  {
    "input": "Example #1 socket_sendto() Example",
    "output": "<?php\n    $sock\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_DGRAM\n,\nSOL_UDP\n);\n\n$msg\n=\n\"Ping !\"\n;\n\n$len\n=\nstrlen\n(\n$msg\n);\n\nsocket_sendto\n(\n$sock\n,\n$msg\n,\n$len\n,\n0\n,\n'127.0.0.1'\n,\n1223\n);\n\nsocket_close\n(\n$sock\n);\n?>"
  },
  {
    "input": "Example #1 socket_set_block() example",
    "output": "<?php\n$socket\n=\nsocket_create_listen\n(\n1223\n);\nsocket_set_block\n(\n$socket\n);\nsocket_accept\n(\n$socket\n);\n?>"
  },
  {
    "input": "Example #1 socket_set_nonblock() example",
    "output": "<?php\n$socket\n=\nsocket_create_listen\n(\n1223\n);\nsocket_set_nonblock\n(\n$socket\n);\nsocket_accept\n(\n$socket\n);\n?>"
  },
  {
    "input": "Example #1 socket_set_option() example",
    "output": "<?php\n$socket\n=\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n);\nif (!\nis_resource\n(\n$socket\n)) {\n    echo\n'Unable to create socket: '\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\nPHP_EOL\n;\n}\nif (!\nsocket_set_option\n(\n$socket\n,\nSOL_SOCKET\n,\nSO_REUSEADDR\n,\n1\n)) {\n    echo\n'Unable to set option on socket: '\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\nPHP_EOL\n;\n}\nif (!\nsocket_bind\n(\n$socket\n,\n'127.0.0.1'\n,\n1223\n)) {\n    echo\n'Unable to bind socket: '\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\nPHP_EOL\n;\n}\n$rval\n=\nsocket_get_option\n(\n$socket\n,\nSOL_SOCKET\n,\nSO_REUSEADDR\n);\nif (\n$rval\n===\nfalse\n) {\n    echo\n'Unable to get socket option: '\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\nPHP_EOL\n;\n} else if (\n$rval\n!==\n0\n) {\n    echo\n'SO_REUSEADDR is set on socket !'\n.\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 socket_strerror() example",
    "output": "<?php\nif (\nfalse\n== (\n$socket\n= @\nsocket_create\n(\nAF_INET\n,\nSOCK_STREAM\n,\nSOL_TCP\n))) {\n   echo\n\"socket_create() failed: reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n()) .\n\"\\n\"\n;\n}\nif (\nfalse\n== (@\nsocket_bind\n(\n$socket\n,\n'127.0.0.1'\n,\n80\n))) {\n   echo\n\"socket_bind() failed: reason: \"\n.\nsocket_strerror\n(\nsocket_last_error\n(\n$socket\n)) .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Authenticating with a ssh agent",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nif (\nssh2_auth_agent\n(\n$connection\n,\n'username'\n)) {\n  echo\n\"Authentication Successful!\\n\"\n;\n} else {\n  die(\n'Authentication Failed...'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Authentication using a public hostkey",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n, array(\n'hostkey'\n=>\n'ssh-rsa'\n));\nif (\nssh2_auth_hostbased_file\n(\n$connection\n,\n'remoteusername'\n,\n'myhost.example.com'\n,\n\n'/usr/local/etc/hostkey_rsa.pub'\n,\n\n'/usr/local/etc/hostkey_rsa'\n,\n'secret'\n,\n\n'localusername'\n)) {\n  echo\n\"Public Key Hostbased Authentication Successful\\n\"\n;\n} else {\n  die(\n'Public Key Hostbased Authentication Failed'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Retrieving a list of authentication methods",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\n$auth_methods\n=\nssh2_auth_none\n(\n$connection\n,\n'user'\n);\nif (\nin_array\n(\n'password'\n,\n$auth_methods\n)) {\n  echo\n\"Server supports password based authentication\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Authenticating with a password",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nif (\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'secret'\n)) {\n  echo\n\"Authentication Successful!\\n\"\n;\n} else {\n  die(\n'Authentication Failed...'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Authentication using a public key",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n, array(\n'hostkey'\n=>\n'ssh-rsa'\n));\nif (\nssh2_auth_pubkey_file\n(\n$connection\n,\n'username'\n,\n\n'/home/username/.ssh/id_rsa.pub'\n,\n\n'/home/username/.ssh/id_rsa'\n,\n'secret'\n)) {\n  echo\n\"Public Key Authentication Successful\\n\"\n;\n} else {\n  die(\n'Public Key Authentication Failed'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Executing a command",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$stream\n=\nssh2_exec\n(\n$connection\n,\n'/usr/local/bin/php -i'\n);\n?>"
  },
  {
    "input": "Example #1 Opening a shell and retrieving the stderr stream associated with it",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$stdio_stream\n=\nssh2_shell\n(\n$connection\n);\n$stderr_stream\n=\nssh2_fetch_stream\n(\n$stdio_stream\n,\nSSH2_STREAM_STDERR\n);\n?>"
  },
  {
    "input": "Example #1 Checking the fingerprint against a known value",
    "output": "<?php\n$known_host\n=\n'6F89C2F0A719B30CC38ABDF90755F2E4'\n;\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\n$fingerprint\n=\nssh2_fingerprint\n(\n$connection\n,\n\nSSH2_FINGERPRINT_MD5\n|\nSSH2_FINGERPRINT_HEX\n);\nif (\n$fingerprint\n!=\n$known_host\n) {\n  die(\n\"HOSTKEY MISMATCH!\\n\"\n.\n\n\"Possible Man-In-The-Middle Attack?\"\n);\n}\n?>"
  },
  {
    "input": "Example #1 Determining what methods were negotiated",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\n$methods\n=\nssh2_methods_negotiated\n(\n$connection\n);\necho\n\"Encryption keys were negotiated using:\n{\n$methods\n[\n'kex'\n]}\n\\n\"\n;\necho\n\"Server identified using an\n{\n$methods\n[\n'hostkey'\n]}\n with \"\n;\necho\n\"fingerprint: \"\n.\nssh2_fingerprint\n(\n$connection\n) .\n\"\\n\"\n;\necho\n\"Client to Server packets will use methods:\\n\"\n;\necho\n\"\\tCrypt:\n{\n$methods\n[\n'client_to_server'\n][\n'crypt'\n]}\n\\n\"\n;\necho\n\"\\tComp:\n{\n$methods\n[\n'client_to_server'\n][\n'comp'\n]}\n\\n\"\n;\necho\n\"\\tMAC:\n{\n$methods\n[\n'client_to_server'\n][\n'mac'\n]}\n\\n\"\n;\necho\n\"Server to Client packets will use methods:\\n\"\n;\necho\n\"\\tCrypt:\n{\n$methods\n[\n'server_to_client'\n][\n'crypt'\n]}\n\\n\"\n;\necho\n\"\\tComp:\n{\n$methods\n[\n'server_to_client'\n][\n'comp'\n]}\n\\n\"\n;\necho\n\"\\tMAC:\n{\n$methods\n[\n'server_to_client'\n][\n'mac'\n]}\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Adding a publickey with ssh2_publickey_add()",
    "output": "<?php\n$ssh2\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$ssh2\n,\n'jdoe'\n,\n'password'\n);\n$pkey\n=\nssh2_publickey_init\n(\n$ssh2\n);\n$keyblob\n=\nbase64_decode\n(\n'\nAAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5PTrLRdjNONxXH1tVFGn0\nBd26BF0aCP9qyJRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xj\nzaLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VEHYckxQ16CjSTibI5X\n69GmnYC9PNqEYq/1TP+HF10='\n);\nssh2_publickey_add\n(\n$pkey\n,\n'ssh-rsa'\n,\n$keyblob\n,\nfalse\n, array(\n'comment'\n=>\n\"John's Key\"\n));\n?>"
  },
  {
    "input": "Example #1 Listing authorized keys with ssh2_publickey_list()",
    "output": "<?php\n$ssh2\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$ssh2\n,\n'jdoe'\n,\n'secret'\n);\n$pkey\n=\nssh2_publickey_init\n(\n$ssh2\n);\n$list\n=\nssh2_publickey_list\n(\n$pkey\n);\nforeach(\n$list\nas\n$key\n) {\n  echo\n\"Key:\n{\n$key\n[\n'name'\n]}\n\\n\"\n;\n  echo\n\"Blob: \"\n.\nchunk_split\n(\nbase64_encode\n(\n$key\n[\n'blob'\n]),\n40\n,\n\"\\n\"\n) .\n\"\\n\"\n;\n  echo\n\"Comment:\n{\n$key\n[\n'attrs'\n][\n'comment'\n]}\n\\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Downloading a file via SCP",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\nssh2_scp_recv\n(\n$connection\n,\n'/remote/filename'\n,\n'/local/filename'\n);\n?>"
  },
  {
    "input": "Example #1 Uploading a file via SCP",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\nssh2_scp_send\n(\n$connection\n,\n'/local/filename'\n,\n'/remote/filename'\n,\n0644\n);\n?>"
  },
  {
    "input": "Example #1 Opening a file via SFTP",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\n$stream\n=\nfopen\n(\n'ssh2.sftp://'\n.\nintval\n(\n$sftp\n) .\n'/path/to/file'\n,\n'r'\n);\n?>"
  },
  {
    "input": "Example #1 Changing the mode of a file on a remote server",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_chmod\n(\n$sftp\n,\n'/somedir/somefile'\n,\n0755\n);\n?>"
  },
  {
    "input": "Example #1 Stating a symbolic link via SFTP",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\n$statinfo\n=\nssh2_sftp_lstat\n(\n$sftp\n,\n'/path/to/symlink'\n);\n$filesize\n=\n$statinfo\n[\n'size'\n];\n$group\n=\n$statinfo\n[\n'gid'\n];\n$owner\n=\n$statinfo\n[\n'uid'\n];\n$atime\n=\n$statinfo\n[\n'atime'\n];\n$mtime\n=\n$statinfo\n[\n'mtime'\n];\n$mode\n=\n$statinfo\n[\n'mode'\n];\n?>"
  },
  {
    "input": "Example #1 Creating a directory on a remote server",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_mkdir\n(\n$sftp\n,\n'/home/username/newdir'\n);\n/* Or:  mkdir(\"ssh2.sftp://$sftp/home/username/newdir\"); */\n?>"
  },
  {
    "input": "Example #1 Reading a symbolic link",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\n$target\n=\nssh2_sftp_readlink\n(\n$sftp\n,\n'/tmp/mysql.sock'\n);\n/* $target is now (e.g.): '/var/run/mysql.sock' */\n?>"
  },
  {
    "input": "Example #1 Resolving a pathname",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\n$realpath\n=\nssh2_sftp_realpath\n(\n$sftp\n,\n'/home/username/../../../..//./usr/../etc/passwd'\n);\n/* $realpath is now: '/etc/passwd' */\n?>"
  },
  {
    "input": "Example #1 Renaming a file via sftp",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_rename\n(\n$sftp\n,\n'/home/username/oldname'\n,\n'/home/username/newname'\n);\n?>"
  },
  {
    "input": "Example #1 Removing a directory on a remote server",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_rmdir\n(\n$sftp\n,\n'/home/username/deltodel'\n);\n/* Or:  rmdir(\"ssh2.sftp://$sftp/home/username/dirtodel\"); */\n?>"
  },
  {
    "input": "Example #1 Stating a file via SFTP",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\n$statinfo\n=\nssh2_sftp_stat\n(\n$sftp\n,\n'/path/to/file'\n);\n$filesize\n=\n$statinfo\n[\n'size'\n];\n$group\n=\n$statinfo\n[\n'gid'\n];\n$owner\n=\n$statinfo\n[\n'uid'\n];\n$atime\n=\n$statinfo\n[\n'atime'\n];\n$mtime\n=\n$statinfo\n[\n'mtime'\n];\n$mode\n=\n$statinfo\n[\n'mode'\n];\n?>"
  },
  {
    "input": "Example #1 Creating a symbolic link",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_symlink\n(\n$sftp\n,\n'/var/run/mysql.sock'\n,\n'/tmp/mysql.sock'\n);\n?>"
  },
  {
    "input": "Example #1 Deleting a file",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$sftp\n=\nssh2_sftp\n(\n$connection\n);\nssh2_sftp_unlink\n(\n$sftp\n,\n'/home/username/stale_file'\n);\n?>"
  },
  {
    "input": "Example #1 Requesting an interactive shell",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_password\n(\n$connection\n,\n'username'\n,\n'password'\n);\n$stream\n=\nssh2_shell\n(\n$connection\n,\n'vt102'\n,\nnull\n,\n80\n,\n24\n,\nSSH2_TERM_UNIT_CHARS\n);\n?>"
  },
  {
    "input": "Example #1 Opening a tunnel to an arbitrary host",
    "output": "<?php\n$connection\n=\nssh2_connect\n(\n'shell.example.com'\n,\n22\n);\nssh2_auth_pubkey_file\n(\n$connection\n,\n'username'\n,\n'id_dsa.pub'\n,\n'id_dsa'\n);\n$tunnel\n=\nssh2_tunnel\n(\n$connection\n,\n'10.0.0.101'\n,\n12345\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$queue\n=\n'/queue/foo'\n;\n$msg\n=\n'bar'\n;\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* send a message to the queue 'foo' */\n$stomp\n->\nsend\n(\n$queue\n,\n$msg\n);\n/* subscribe to messages from the queue 'foo' */\n$stomp\n->\nsubscribe\n(\n$queue\n);\n/* read a frame */\n$frame\n=\n$stomp\n->\nreadFrame\n();\nif (\n$frame\n->\nbody\n===\n$msg\n) {\n\nvar_dump\n(\n$frame\n);\n\n/* acknowledge that the frame was received */\n\n$stomp\n->\nack\n(\n$frame\n);\n}\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$queue\n=\n'/queue/foo'\n;\n$msg\n=\n'bar'\n;\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* begin a transaction */\nstomp_begin\n(\n$link\n,\n't1'\n);\n/* send a message to the queue 'foo' */\nstomp_send\n(\n$link\n,\n$queue\n,\n$msg\n, array(\n'transaction'\n=>\n't1'\n));\n/* commit a transaction */\nstomp_commit\n(\n$link\n,\n't1'\n);\n/* subscribe to messages from the queue 'foo' */\nstomp_subscribe\n(\n$link\n,\n$queue\n);\n/* read a frame */\n$frame\n=\nstomp_read_frame\n(\n$link\n);\nif (\n$frame\n[\n'body'\n] ===\n$msg\n) {\n\nvar_dump\n(\n$frame\n);\n\n/* acknowledge that the frame was received */\n\nstomp_ack\n(\n$link\n,\n$frame\n[\n'headers'\n][\n'message-id'\n]);\n}\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 stomp_connect_error() example",
    "output": "<?php\n$link\n=\nstomp_connect\n(\n'http://localhost:61613'\n);\nif(!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n?>"
  },
  {
    "input": "Example #1 stomp_version() example",
    "output": "<?php\nvar_dump\n(\nstomp_version\n());\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* begin a transaction */\n$stomp\n->\nbegin\n(\n't1'\n);\n/* send a message to the queue */\n$stomp\n->\nsend\n(\n'/queue/foo'\n,\n'bar'\n, array(\n'transaction'\n=>\n't1'\n));\n/* rollback */\n$stomp\n->\nabort\n(\n't1'\n);\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'tcp://localhost:61613'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* begin a transaction */\nstomp_begin\n(\n$link\n,\n't1'\n);\n/* send a message to the queue 'foo' */\nstomp_send\n(\n$link\n,\n'/queue/foo'\n,\n'bar'\n, array(\n'transaction'\n=>\n't1'\n));\n/* rollback */\nstomp_abort\n(\n$link\n,\n't1'\n);\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n$queue\n=\n'/queue/foo'\n;\n$msg\n=\n'bar'\n;\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* send a message to the queue 'foo' */\n$stomp\n->\nsend\n(\n$queue\n,\n$msg\n);\n/* subscribe to messages from the queue 'foo' */\n$stomp\n->\nsubscribe\n(\n$queue\n);\n/* read a frame */\n$frame\n=\n$stomp\n->\nreadFrame\n();\nif (\n$frame\n->\nbody\n===\n$msg\n) {\n\n/* acknowledge that the frame was received */\n\n$stomp\n->\nack\n(\n$frame\n);\n}\n/* remove the subscription */\n$stomp\n->\nunsubscribe\n(\n$queue\n);\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n$queue\n=\n'/queue/foo'\n;\n$msg\n=\n'bar'\n;\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* begin a transaction */\nstomp_begin\n(\n$link\n,\n't1'\n);\n/* send a message to the queue 'foo' */\nstomp_send\n(\n$link\n,\n$queue\n,\n$msg\n, array(\n'transaction'\n=>\n't1'\n));\n/* commit a transaction */\nstomp_commit\n(\n$link\n,\n't1'\n);\n/* subscribe to messages from the queue 'foo' */\nstomp_subscribe\n(\n$link\n,\n$queue\n);\n/* read a frame */\n$frame\n=\nstomp_read_frame\n(\n$link\n);\nif (\n$frame\n[\n'body'\n] ===\n$msg\n) {\n\n/* acknowledge that the frame was received */\n\nstomp_ack\n(\n$link\n,\n$frame\n[\n'headers'\n][\n'message-id'\n]);\n}\n/* remove the subscription */\nstomp_unsubscribe\n(\n$link\n,\n$queue\n);\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* begin a transaction */\n$stomp\n->\nbegin\n(\n't1'\n);\n/* send a message to the queue */\n$stomp\n->\nsend\n(\n'/queue/foo'\n,\n'bar'\n, array(\n'transaction'\n=>\n't1'\n));\n/* commit */\n$stomp\n->\ncommit\n(\n't1'\n);\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'tcp://localhost:61613'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* begin a transaction */\nstomp_begin\n(\n$link\n,\n't1'\n);\n/* send a message to the queue 'foo' */\nstomp_send\n(\n$link\n,\n'/queue/foo'\n,\n'bar'\n, array(\n'transaction'\n=>\n't1'\n));\n/* commit */\nstomp_commit\n(\n$link\n,\n't1'\n);\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\nvar_dump\n(\n$stomp\n->\nerror\n());\nif (!\n$stomp\n->\nabort\n(\n'unknown-transaction'\n, array(\n'receipt'\n=>\n'foo'\n))) {\n\nvar_dump\n(\n$stomp\n->\nerror\n());\n}\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\nvar_dump\n(\nstomp_error\n(\n$link\n));\nif (!\nstomp_abort\n(\n$link\n,\n'unknown-transaction'\n, array(\n'receipt'\n=>\n'foo'\n))) {\n\nvar_dump\n(\nstomp_error\n(\n$link\n));\n}\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\nvar_dump\n(\n$stomp\n->\ngetReadTimeout\n());\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\nvar_dump\n(\nstomp_get_read_timeout\n(\n$link\n));\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\nvar_dump\n(\n$stomp\n->\ngetSessionId\n());\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\nvar_dump\n(\nstomp_get_session_id\n(\n$link\n));\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n/* subscribe to messages from the queue 'foo' */\n$stomp\n->\nsubscribe\n(\n'/queue/foo'\n);\n/* read a frame */\nvar_dump\n(\n$stomp\n->\nreadFrame\n());\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\n/* subscribe to messages from the queue 'foo' */\nstomp_subscribe\n(\n$link\n,\n'/queue/foo'\n);\n/* read a frame */\n$frame\n=\nstomp_read_frame\n(\n$link\n);\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Object-oriented style",
    "output": "<?php\n/* connection */\ntry {\n\n$stomp\n= new\nStomp\n(\n'tcp://localhost:61613'\n);\n} catch(\nStompException $e\n) {\n    die(\n'Connection failed: '\n.\n$e\n->\ngetMessage\n());\n}\n$stomp\n->\nsetReadTimeout\n(\n10\n);\n\n/* close connection */\nunset(\n$stomp\n);\n?>"
  },
  {
    "input": "Example #2 Procedural style",
    "output": "<?php\n/* connection */\n$link\n=\nstomp_connect\n(\n'ssl://localhost:61612'\n);\n/* check connection */\nif (!\n$link\n) {\n    die(\n'Connection failed: '\n.\nstomp_connect_error\n());\n}\nstomp_set_read_timeout\n(\n$link\n,\n10\n);\n\n/* close connection */\nstomp_close\n(\n$link\n);\n?>"
  },
  {
    "input": "Example #1 Train from array",
    "output": "<?php\n$data\n= array(\n    array(-\n1\n,\n1\n=>\n0.43\n,\n3\n=>\n0.12\n,\n9284\n=>\n0.2\n),\n    array(\n1\n,\n1\n=>\n0.22\n,\n5\n=>\n0.01\n,\n94\n=>\n0.11\n),\n);\n$svm\n= new\nSVM\n();\n$model\n=\n$svm\n->\ntrain\n(\n$data\n);\n$data\n= array(\n1\n=>\n0.43\n,\n3\n=>\n0.12\n,\n9284\n=>\n0.2\n);\n$result\n=\n$model\n->\npredict\n(\n$data\n);\nvar_dump\n(\n$result\n);\n$model\n->\nsave\n(\n'model.svm'\n);\n?>"
  },
  {
    "input": "Example #2 Train from a file",
    "output": "<?php\n$svm\n= new\nSVM\n();\n$model\n=\n$svm\n->\ntrain\n(\n\"traindata.txt\"\n);\n?>"
  },
  {
    "input": "Example #1 svn_blame() example",
    "output": "<?php\n$svnurl\n=\n'http://svn.example.org/svnroot/foo/trunk/index.php'\n;\nprint_r\n(\nsvn_blame\n(\n$svnurl\n) );\n?>"
  },
  {
    "input": "Example #1 Basic example",
    "output": "<?php\necho\nsvn_client_version\n();\n?>"
  },
  {
    "input": "Example #1 svn_export() example",
    "output": "<?php\n$working_dir\n=\n'../'\n;\n$new_working_dir\n=\n'/home/user/devel/foo/trunk'\n;\nsvn_export\n(\n$working_dir\n,\n$new_working_dir\n);\n?>"
  },
  {
    "input": "Example #1 svn_log() example",
    "output": "<?php\nprint_r\n(\nsvn_log\n(\n'http://www.example.com/'\n,\n23\n) );\n?>"
  },
  {
    "input": "Example #1 svn_ls() example",
    "output": "<?php\nprint_r\n(\nsvn_ls\n(\n'http://www.example.com/svnroot/'\n) );\n?>"
  },
  {
    "input": "Example #1 Ban an URL",
    "output": "<?php\n$args\n= array(\n\nVARNISH_CONFIG_HOST\n=>\n\"::1\"\n,\n\nVARNISH_CONFIG_PORT\n=>\n6082\n,\n\nVARNISH_CONFIG_SECRET\n=>\n\"5174826b-8595-4958-aa7a-0609632ad7ca\"\n,\n\nVARNISH_CONFIG_TIMEOUT\n=>\n300\n,\n);\n$va\n= new\nVarnishAdmin\n(\n$args\n);\ntry {\n    if(!\n$va\n->\nconnect\n()) {\n        throw new\nVarnishException\n(\n\"Connection failed\\n\"\n);\n    }\n} catch (\nVarnishException $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n    exit(\n3\n);\n}\ntry {\n    if(!\n$va\n->\nauth\n()) {\n        throw new\nVarnishException\n(\n\"Auth failed\\n\"\n);\n    }\n} catch (\nVarnishException $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n    exit(\n3\n);\n}\ntry {\n\n$status\n=\n$va\n->\nban\n(\n'req.url ~ \"^/$\"'\n);\n    if (\nVARNISH_STATUS_OK\n!=\n$status\n) {\n        throw new\nVarnishException\n(\n\"Ban method returned\n$status\n status\\n\"\n);\n    }\n} catch (\nVarnishException $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n    exit(\n3\n);\n}\nexit(\n0\n);\n?>"
  },
  {
    "input": "Example #1 Get statistic snapshot",
    "output": "<?php\n$vs\n= new\nVarnishStat\n;\ntry {\n\n$data\n=\n$vs\n->\ngetSnapshot\n();\n} catch (\nVarnishException $e\n) {\n    echo\n$e\n->\ngetMessage\n();\n    exit(\n3\n);\n}\nexit(\n0\n);\n?>"
  },
  {
    "input": "Example #1 Read varnish shared memory log",
    "output": "<?php\n$vl\n= new\nVarnishLog\n;\nwhile(\n1\n) {\n\n$line\n=\n$vl\n->\ngetLine\n();\n\nprintf\n(\n\"%s %d %s\"\n,\nVarnishLog\n::\ngetTagName\n(\n$line\n[\n'tag'\n]),\n$line\n[\n'id'\n],\n\n$line\n[\n'data'\n]);\n}\nexit(\n0\n);\n?>"
  },
  {
    "input": "Example #1 VarnishAdmin::__construct() example",
    "output": "<?php\n    $args\n= array(\n\nVARNISH_CONFIG_HOST\n=>\n\"::1\"\n,\n\nVARNISH_CONFIG_PORT\n=>\n6082\n,\n\nVARNISH_CONFIG_SECRET\n=>\n\"5174826b-8595-4958-aa7a-0609632ad7ca\"\n,\n\nVARNISH_CONFIG_TIMEOUT\n=>\n300\n,\n    );\n\n$va\n= new\nVarnishAdmin\n(\n$args\n);\n?>"
  },
  {
    "input": "Example #1 Parallel searching using Yaz",
    "output": "<?php\n$host\n=\n$_REQUEST\n[\nhost\n];\n$query\n=\n$_REQUEST\n[\nquery\n];\n$num_hosts\n=\ncount\n(\n$host\n);\nif (empty(\n$query\n) ||\ncount\n(\n$host\n) ==\n0\n) {\n    echo\n'<form method=\"get\">\n    <input type=\"checkbox\"\n    name=\"host[]\" value=\"bagel.indexdata.dk/gils\" />\n        GILS test\n    <input type=\"checkbox\"\n    name=\"host[]\" value=\"localhost:9999/Default\" />\n        local test\n    <input type=\"checkbox\" checked=\"checked\"\n    name=\"host[]\" value=\"z3950.loc.gov:7090/voyager\" />\n        Library of Congress\n    <br />\n    RPN Query:\n    <input type=\"text\" size=\"30\" name=\"query\" />\n    <input type=\"submit\" name=\"action\" value=\"Search\" />\n    </form>\n    '\n;\n} else {\n    echo\n'You searched for '\n.\nhtmlspecialchars\n(\n$query\n) .\n'<br />'\n;\n    for (\n$i\n=\n0\n;\n$i\n<\n$num_hosts\n;\n$i\n++) {\n\n$id\n[] =\nyaz_connect\n(\n$host\n[\n$i\n]);\n\nyaz_syntax\n(\n$id\n[\n$i\n],\n\"usmarc\"\n);\n\nyaz_range\n(\n$id\n[\n$i\n],\n1\n,\n10\n);\n\nyaz_search\n(\n$id\n[\n$i\n],\n\"rpn\"\n,\n$query\n);\n    }\n\nyaz_wait\n();\n    for (\n$i\n=\n0\n;\n$i\n<\n$num_hosts\n;\n$i\n++) {\n        echo\n'<hr />'\n.\n$host\n[\n$i\n] .\n':'\n;\n\n$error\n=\nyaz_error\n(\n$id\n[\n$i\n]);\n        if (!empty(\n$error\n)) {\n            echo\n\"Error:\n$error\n\"\n;\n        } else {\n\n$hits\n=\nyaz_hits\n(\n$id\n[\n$i\n]);\n            echo\n\"Result Count\n$hits\n\"\n;\n        }\n        echo\n'<dl>'\n;\n        for (\n$p\n=\n1\n;\n$p\n<=\n10\n;\n$p\n++) {\n\n$rec\n=\nyaz_record\n(\n$id\n[\n$i\n],\n$p\n,\n\"string\"\n);\n            if (empty(\n$rec\n)) continue;\n            echo\n\"<dt><b>\n$p\n</b></dt><dd>\"\n;\n            echo\nnl2br\n(\n$rec\n);\n            echo\n\"</dd>\"\n;\n        }\n        echo\n'</dl>'\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 CCL configuration",
    "output": "<?php\n$fields\n= array(\n\n\"ti\"\n=>\n\"1=4\"\n,\n\n\"au\"\n=>\n\"1=1\"\n,\n\n\"isbn\"\n=>\n\"1=7\"\n);\nyaz_ccl_conf\n(\n$id\n,\n$fields\n);\n?>"
  },
  {
    "input": "Example #1 Record Update",
    "output": "<?php\n$con\n=\nyaz_connect\n(\n\"myhost/database\"\n);\n$args\n= array (\n\n\"record\"\n=>\n\"<gils><title>some title</title></gils>\"\n,\n\n\"syntax\"\n=>\n\"xml\"\n,\n\n\"action\"\n=>\n\"specialUpdate\"\n);\nyaz_es\n(\n$con\n,\n\"update\"\n,\n$args\n);\nyaz_wait\n();\n$result\n=\nyaz_es_result\n(\n$id\n);\n?>"
  },
  {
    "input": "Example #2 Working with MARCXML",
    "output": "<?php\n$rec\n=\nyaz_record\n(\n$id\n,\n$p\n,\n\"xml; charset=marc-8,utf-8\"\n);\n?>"
  },
  {
    "input": "Example #1 PHP function that scans titles",
    "output": "<?php\nfunction\nscan_titles\n(\n$id\n,\n$startterm\n)\n{\n\nyaz_scan\n(\n$id\n,\n\"rpn\"\n,\n\"@attr 1=4 \"\n.\n$startterm\n);\n\nyaz_wait\n();\n\n$errno\n=\nyaz_errno\n(\n$id\n);\n  if (\n$errno\n==\n0\n) {\n\n$ar\n=\nyaz_scan_result\n(\n$id\n,\n$options\n);\n    echo\n'Scan ok; '\n;\n    foreach (\n$options\nas\n$key\n=>\n$val\n) {\n      echo\n\"\n$key\n =\n$val\n &nbsp;\"\n;\n    }\n    echo\n'<br /><table>'\n;\n    while (list(\n$key\n, list(\n$k\n,\n$term\n,\n$tcount\n)) =\neach\n(\n$ar\n)) {\n      if (empty(\n$k\n)) continue;\n      echo\n\"<tr><td>\n$term\n</td><td>\n$tcount\n</td></tr>\"\n;\n    }\n    echo\n'</table>'\n;\n  } else {\n    echo\n\"Scan failed. Error: \"\n.\nyaz_error\n(\n$id\n) .\n\"<br />\"\n;\n  }\n}\n?>"
  },
  {
    "input": "Example #1 solr_get_version() example",
    "output": "<?php\n$solr_version\n=\nsolr_get_version\n();\nprint\n$solr_version\n;\n?>"
  },
  {
    "input": "Example #1 Contents of the BootStrap file",
    "output": "<?php\n/* Domain name of the Solr server */\ndefine\n(\n'SOLR_SERVER_HOSTNAME'\n,\n'solr.example.com'\n);\n/* Whether or not to run in secure mode */\ndefine\n(\n'SOLR_SECURE'\n,\ntrue\n);\n/* HTTP Port to connection */\ndefine\n(\n'SOLR_SERVER_PORT'\n, ((\nSOLR_SECURE\n) ?\n8443\n:\n8983\n));\n/* HTTP Basic Authentication Username */\ndefine\n(\n'SOLR_SERVER_USERNAME'\n,\n'admin'\n);\n/* HTTP Basic Authentication password */\ndefine\n(\n'SOLR_SERVER_PASSWORD'\n,\n'changeit'\n);\n/* HTTP connection timeout */\n/* This is maximum time in seconds allowed for the http data transfer operation. Default value is 30 seconds */\ndefine\n(\n'SOLR_SERVER_TIMEOUT'\n,\n10\n);\n/* File name to a PEM-formatted private key + private certificate (concatenated in that order) */\ndefine\n(\n'SOLR_SSL_CERT'\n,\n'certs/combo.pem'\n);\n/* File name to a PEM-formatted private certificate only */\ndefine\n(\n'SOLR_SSL_CERT_ONLY'\n,\n'certs/solr.crt'\n);\n/* File name to a PEM-formatted private key */\ndefine\n(\n'SOLR_SSL_KEY'\n,\n'certs/solr.key'\n);\n/* Password for PEM-formatted private key file */\ndefine\n(\n'SOLR_SSL_KEYPASSWORD'\n,\n'StrongAndSecurePassword'\n);\n/* Name of file holding one or more CA certificates to verify peer with*/\ndefine\n(\n'SOLR_SSL_CAINFO'\n,\n'certs/cacert.crt'\n);\n/* Name of directory holding multiple CA certificates to verify peer with */\ndefine\n(\n'SOLR_SSL_CAPATH'\n,\n'certs/'\n);\n?>"
  },
  {
    "input": "Example #2 Adding a document to the index",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$doc\n= new\nSolrInputDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n334455\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Software'\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Lucene'\n);\n$updateResponse\n=\n$client\n->\naddDocument\n(\n$doc\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #3 Merging one document into another document",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$doc\n= new\nSolrDocument\n();\n$second_doc\n= new\nSolrDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n1123\n);\n$doc\n->\nfeatures\n=\n\"PHP Client Side\"\n;\n$doc\n->\nfeatures\n=\n\"Fast development cycles\"\n;\n$doc\n[\n'cat'\n] =\n'Software'\n;\n$doc\n[\n'cat'\n] =\n'Custom Search'\n;\n$doc\n->\ncat\n=\n'Information Technology'\n;\n$second_doc\n->\naddField\n(\n'cat'\n,\n'Lucene Search'\n);\n$second_doc\n->\nmerge\n(\n$doc\n,\ntrue\n);\nprint_r\n(\n$second_doc\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #4 Searching for documents - SolrObject responses",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n'lucene'\n);\n$query\n->\nsetStart\n(\n0\n);\n$query\n->\nsetRows\n(\n50\n);\n$query\n->\naddField\n(\n'cat'\n)->\naddField\n(\n'features'\n)->\naddField\n(\n'id'\n)->\naddField\n(\n'timestamp'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #5 Searching for documents - SolrDocument responses",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n'lucene'\n);\n$query\n->\nsetStart\n(\n0\n);\n$query\n->\nsetRows\n(\n50\n);\n$query\n->\naddField\n(\n'cat'\n)->\naddField\n(\n'features'\n)->\naddField\n(\n'id'\n)->\naddField\n(\n'timestamp'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$query_response\n->\nsetParseMode\n(\nSolrQueryResponse\n::\nPARSE_SOLR_DOC\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #6 Simple TermsComponent example - basic",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetTerms\n(\ntrue\n);\n$query\n->\nsetTermsField\n(\n'cat'\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #7 Simple TermsComponent example - using a prefix",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetTerms\n(\ntrue\n);\n/* Return only terms starting with $prefix */\n$prefix\n=\n'c'\n;\n$query\n->\nsetTermsField\n(\n'cat'\n)->\nsetTermsPrefix\n(\n$prefix\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #8 Simple TermsComponent example - specifying a minimum frequency",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetTerms\n(\ntrue\n);\n/* Return only terms starting with $prefix */\n$prefix\n=\n'c'\n;\n/* Return only terms with a frequency of 2 or greater */\n$min_frequency\n=\n2\n;\n$query\n->\nsetTermsField\n(\n'cat'\n)->\nsetTermsPrefix\n(\n$prefix\n)->\nsetTermsMinCount\n(\n$min_frequency\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #9 Simple Facet Example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetField\n(\n'cat'\n)->\naddFacetField\n(\n'name'\n)->\nsetFacetMinCount\n(\n2\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response_array\n=\n$updateResponse\n->\ngetResponse\n();\n$facet_data\n=\n$response_array\n->\nfacet_counts\n->\nfacet_fields\n;\nprint_r\n(\n$facet_data\n);\n?>"
  },
  {
    "input": "Example #10 Simple Facet Example - with optional field override for mincount",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetField\n(\n'cat'\n)->\naddFacetField\n(\n'name'\n)->\nsetFacetMinCount\n(\n2\n)->\nsetFacetMinCount\n(\n4\n,\n'name'\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response_array\n=\n$updateResponse\n->\ngetResponse\n();\n$facet_data\n=\n$response_array\n->\nfacet_counts\n->\nfacet_fields\n;\nprint_r\n(\n$facet_data\n);\n?>"
  },
  {
    "input": "Example #11 Facet Date Example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetDateField\n(\n'manufacturedate_dt'\n);\n$query\n->\nsetFacetDateStart\n(\n'2006-02-13T00:00:00Z'\n);\n$query\n->\nsetFacetDateEnd\n(\n'2012-02-13T00:00:00Z'\n);\n$query\n->\nsetFacetDateGap\n(\n'+1YEAR'\n);\n$query\n->\nsetFacetDateHardEnd\n(\n1\n);\n$query\n->\naddFacetDateOther\n(\n'before'\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response_array\n=\n$updateResponse\n->\ngetResponse\n();\n$facet_data\n=\n$response_array\n->\nfacet_counts\n->\nfacet_dates\n;\nprint_r\n(\n$facet_data\n);\n?>"
  },
  {
    "input": "Example #12 Connecting to SSL-Enabled Server",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'timeout'\n=>\nSOLR_SERVER_TIMEOUT\n,\n\n'secure'\n=>\nSOLR_SECURE\n,\n\n'ssl_cert'\n=>\nSOLR_SSL_CERT_ONLY\n,\n\n'ssl_key'\n=>\nSOLR_SSL_KEY\n,\n\n'ssl_keypassword'\n=>\nSOLR_SSL_KEYPASSWORD\n,\n\n'ssl_cainfo'\n=>\nSOLR_SSL_CAINFO\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetField\n(\n'cat'\n)->\naddFacetField\n(\n'name'\n)->\nsetFacetMinCount\n(\n2\n)->\nsetFacetMinCount\n(\n4\n,\n'name'\n);\n$updateResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response_array\n=\n$updateResponse\n->\ngetResponse\n();\n$facet_data\n=\n$response_array\n->\nfacet_counts\n->\nfacet_fields\n;\nprint_r\n(\n$facet_data\n);\n?>"
  },
  {
    "input": "Example #13 Collapsing a SolrQuery",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$collapseFunction\n= new\nSolrCollapseFunction\n(\n'manu_id_s'\n);\n$collapseFunction\n->\nsetSize\n(\n2\n)\n->\nsetNullPolicy\n(\nSolrCollapseFunction\n::\nNULLPOLICY_IGNORE\n);\n$query\n->\ncollapse\n(\n$collapseFunction\n)\n->\nsetRows\n(\n4\n);\n$queryResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$queryResponse\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #14 Solr Real Time Get (RTG) example SolrClient::getById()",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$response\n=\n$client\n->\ngetById\n(\n'GB18030TEST'\n);\nprint_r\n(\n$response\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #1 SolrInputDocument::addChildDocument() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_STORE_PATH\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$product\n= new\nSolrInputDocument\n();\n$product\n->\naddField\n(\n'id'\n,\n'P-BLACK'\n);\n$product\n->\naddField\n(\n'cat'\n,\n'tshirt'\n);\n$product\n->\naddField\n(\n'cat'\n,\n'polo'\n);\n$product\n->\naddField\n(\n'content_type'\n,\n'product'\n);\n$small\n= new\nSolrInputDocument\n();\n$small\n->\naddField\n(\n'id'\n,\n'TS-BLK-S'\n);\n$small\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$small\n->\naddField\n(\n'size'\n,\n'S'\n);\n$small\n->\naddField\n(\n'inventory'\n,\n100\n);\n$medium\n= new\nSolrInputDocument\n();\n$medium\n->\naddField\n(\n'id'\n,\n'TS-BLK-M'\n);\n$medium\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$medium\n->\naddField\n(\n'size'\n,\n'M'\n);\n$medium\n->\naddField\n(\n'inventory'\n,\n200\n);\n$large\n= new\nSolrInputDocument\n();\n$large\n->\naddField\n(\n'id'\n,\n'TS-BLK-L'\n);\n$large\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$large\n->\naddField\n(\n'size'\n,\n'L'\n);\n$large\n->\naddField\n(\n'inventory'\n,\n300\n);\n// add child documents\n$product\n->\naddChildDocument\n(\n$small\n);\n$product\n->\naddChildDocument\n(\n$medium\n);\n$product\n->\naddChildDocument\n(\n$large\n);\n// add product document block to the index\n$updateResponse\n=\n$client\n->\naddDocument\n(\n\n$product\n,\n\ntrue\n,\n// overwrite if the document exists\n\n10000\n// commit within 10 seconds\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());"
  },
  {
    "input": "Example #1 SolrInputDocument::addChildDocuments() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_STORE_PATH\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$product\n= new\nSolrInputDocument\n();\n$product\n->\naddField\n(\n'id'\n,\n'P-BLACK'\n);\n$product\n->\naddField\n(\n'cat'\n,\n'tshirt'\n);\n$product\n->\naddField\n(\n'cat'\n,\n'polo'\n);\n$product\n->\naddField\n(\n'content_type'\n,\n'product'\n);\n$small\n= new\nSolrInputDocument\n();\n$small\n->\naddField\n(\n'id'\n,\n'TS-BLK-S'\n);\n$small\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$small\n->\naddField\n(\n'size'\n,\n'S'\n);\n$small\n->\naddField\n(\n'inventory'\n,\n100\n);\n$medium\n= new\nSolrInputDocument\n();\n$medium\n->\naddField\n(\n'id'\n,\n'TS-BLK-M'\n);\n$medium\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$medium\n->\naddField\n(\n'size'\n,\n'M'\n);\n$medium\n->\naddField\n(\n'inventory'\n,\n200\n);\n$large\n= new\nSolrInputDocument\n();\n$large\n->\naddField\n(\n'id'\n,\n'TS-BLK-L'\n);\n$large\n->\naddField\n(\n'content_type'\n,\n'sku'\n);\n$large\n->\naddField\n(\n'size'\n,\n'L'\n);\n$large\n->\naddField\n(\n'inventory'\n,\n300\n);\n// add child documents\n$skus\n= [\n$small\n,\n$medium\n,\n$large\n];\n$product\n->\naddChildDocuments\n(\n$skus\n);\n// add the product document block to the index\n$updateResponse\n=\n$client\n->\naddDocument\n(\n\n$product\n,\n\ntrue\n,\n// overwrite if the document exists\n\n10000\n// commit within 10 seconds\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());"
  },
  {
    "input": "Example #1 SolrDocument::toArray() example",
    "output": "<?php\n$doc\n= new\nSolrDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n1123\n);\n$doc\n->\nfeatures\n=\n\"PHP Client Side\"\n;\n$doc\n->\nfeatures\n=\n\"Fast development cycles\"\n;\n$doc\n[\n'cat'\n] =\n'Software'\n;\n$doc\n[\n'cat'\n] =\n'Custom Search'\n;\n$doc\n->\ncat\n=\n'Information Technology'\n;\nprint_r\n(\n$doc\n->\ntoArray\n());\n?>"
  },
  {
    "input": "Example #1 SolrObject::__construct() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SolrObject::offsetUnset() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SolrClient::addDocument() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$doc\n= new\nSolrInputDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n334455\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Software'\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Lucene'\n);\n$updateResponse\n=\n$client\n->\naddDocument\n(\n$doc\n);\n// you will have to commit changes to be written if you didn't use $commitWithin\n$client\n->\ncommit\n();\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #2 SolrClient::addDocument() example 2",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$doc\n= new\nSolrInputDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n334455\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Software'\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Lucene'\n);\n// No need to call commit() because $commitWithin is passed, so Solr Server will auto commit within 10 seconds\n$updateResponse\n=\n$client\n->\naddDocument\n(\n$doc\n,\nfalse\n,\n10000\n);\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #1 SolrClient::addDocuments() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$doc\n= new\nSolrInputDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n334455\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Software'\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Lucene'\n);\n$doc2\n= clone\n$doc\n;\n$doc2\n->\ndeleteField\n(\n'id'\n);\n$doc2\n->\naddField\n(\n'id'\n,\n334456\n);\n$docs\n= array(\n$doc\n,\n$doc2\n);\n$updateResponse\n=\n$client\n->\naddDocuments\n(\n$docs\n);\n// no changes will be written to disk unless $commitWithin is passed or SolrClient::commit is called\nprint_r\n(\n$updateResponse\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #1 SolrClient::__construct() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_PATH_TO_SOLR\n,\n\n'wt'\n=>\n'xml'\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$doc\n= new\nSolrInputDocument\n();\n$doc\n->\naddField\n(\n'id'\n,\n334455\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Software'\n);\n$doc\n->\naddField\n(\n'cat'\n,\n'Lucene'\n);\n$updateResponse\n=\n$client\n->\naddDocument\n(\n$doc\n);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::deleteByQuery() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n//This will erase the entire index\n$client\n->\ndeleteByQuery\n(\n\"*:*\"\n);\n$client\n->\ncommit\n();\n?>"
  },
  {
    "input": "Example #1 SolrClient::getById() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$response\n=\n$client\n->\ngetById\n(\n'GB18030TEST'\n);\nprint_r\n(\n$response\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #1 SolrClient::getByIds() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$response\n=\n$client\n->\ngetByIds\n([\n'GB18030TEST'\n,\n'6H500F0'\n]);\nprint_r\n(\n$response\n->\ngetResponse\n());\n?>"
  },
  {
    "input": "Example #1 SolrClient::ping() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$pingresponse\n=\n$client\n->\nping\n();\n?>"
  },
  {
    "input": "Example #1 SolrClient::query() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\n'localhost'\n,\n\n'login'\n=>\n'username'\n,\n\n'password'\n=>\n'password'\n,\n\n'port'\n=>\n'8983'\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n'lucene'\n);\n$query\n->\nsetStart\n(\n0\n);\n$query\n->\nsetRows\n(\n50\n);\n$query\n->\naddField\n(\n'cat'\n)->\naddField\n(\n'features'\n)->\naddField\n(\n'id'\n)->\naddField\n(\n'timestamp'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #1 SolrClient::request() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$update_response\n=\n$client\n->\nrequest\n(\n\"<commit/>\"\n);\n$response\n=\n$update_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #1 SolrClient::setResponseWriter() example",
    "output": "<?php\n// This is my custom class for objects\nclass\nSolrClass\n{\n   public\n$_properties\n= array();\n   public function\n__get\n(\n$property_name\n) {\n\n      if (\nproperty_exists\n(\n$this\n,\n$property_name\n)) {\n\n          return\n$this\n->\n$property_name\n;\n\n      } else if (isset(\n$_properties\n[\n$property_name\n])) {\n\n          return\n$_properties\n[\n$property_name\n];\n      }\n\n      return\nnull\n;\n   }\n}\n$options\n= array\n(\n\n'hostname'\n=>\n'localhost'\n,\n\n'port'\n=>\n8983\n,\n\n'path'\n=>\n'/solr/core1'\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$client\n->\nsetResponseWriter\n(\n\"json\"\n);\n//$response = $client->ping();\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n\"*:*\"\n);\n$query\n->\nset\n(\n\"objectClassName\"\n,\n\"SolrClass\"\n);\n$query\n->\nset\n(\n\"objectPropertiesStorageMode\"\n,\n1\n);\n// 0 for independent properties, 1 for combined\ntry\n{\n$response\n=\n$client\n->\nquery\n(\n$query\n);\n$resp\n=\n$response\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\nprint_r\n(\n$resp\n);\n} catch (\nException $e\n) {\nprint_r\n(\n$e\n);\n}\n?>"
  },
  {
    "input": "Example #1 SolrParams::setParam() example",
    "output": "<?php\n$param\n= new\nSolrParams\n();\n$param\n->\nsetParam\n(\n'q'\n,\n'solr'\n)->\nsetParam\n(\n'rows'\n,\n2\n);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::addFacetField() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n$query\n);\n$query\n->\naddField\n(\n'price'\n)->\naddField\n(\n'color'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetField\n(\n'price'\n)->\naddFacetField\n(\n'color'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n[\n'facet_counts'\n][\n'facet_fields'\n]);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::addFacetField() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\nsetFacet\n(\ntrue\n);\n$query\n->\naddFacetQuery\n(\n'price:[* TO 500]'\n)->\naddFacetQuery\n(\n'price:[500 TO *]'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n->\nfacet_counts\n->\nfacet_queries\n);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::addFilterQuery() example",
    "output": "<?php\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n();\n$query\n->\nsetQuery\n(\n'*:*'\n);\n$query\n->\naddFilterQuery\n(\n'color:blue,green'\n);\n$query_response\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$query_response\n->\ngetResponse\n();\nprint_r\n(\n$response\n[\n'facet_counts'\n][\n'facet_fields'\n]);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::addGroupSortField() example",
    "output": "<?php\n$solrQuery\n= new\nSolrQuery\n(\n'*:*'\n);\n$solrQuery\n\n->\nsetGroup\n(\ntrue\n)\n    ->\naddGroupSortField\n(\n'price'\n,\nSolrQuery\n::\nORDER_ASC\n);\n\necho\n$solrQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrQuery::collapse() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$collapseFunction\n= new\nSolrCollapseFunction\n(\n'manu_id_s'\n);\n$collapseFunction\n->\nsetSize\n(\n2\n)\n->\nsetNullPolicy\n(\nSolrCollapseFunction\n::\nNULLPOLICY_IGNORE\n);\n$query\n->\ncollapse\n(\n$collapseFunction\n)\n->\nsetRows\n(\n4\n);\n$queryResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$queryResponse\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #1 SolrQuery::setExpand() example",
    "output": "<?php\n$query\n= new\nSolrQuery\n(\n'lucene'\n);\n$query\n\n->\nsetExpand\n(\ntrue\n)\n    ->\nsetExpandRows\n(\n50\n)\n    ->\nsetExpandQuery\n(\n'text:product'\n)\n    ->\naddExpandFilterQuery\n(\n'manu:apple'\n)\n    ->\naddExpandFilterQuery\n(\n'inStock:true'\n)\n    ->\naddExpandSortField\n(\n'score'\n,\nSolrQuery\n::\nORDER_DESC\n)\n    ->\naddExpandSortField\n(\n'title'\n,\nSolrQuery\n::\nORDER_ASC\n);\necho\n$query\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addBigramPhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddBigramPhraseField\n(\n'cat'\n,\n2\n,\n5.1\n)\n    ->\naddBigramPhraseField\n(\n'feature'\n,\n4.5\n)\n;\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addBoostQuery() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddBoostQuery\n(\n'cat'\n,\n'clothing'\n,\n2\n)\n    ->\naddBoostQuery\n(\n'cat'\n,\n'electronics'\n,\n5.1\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addPhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddPhraseField\n(\n'cat'\n,\n3\n,\n1\n)\n    ->\naddPhraseField\n(\n'third'\n,\n4\n,\n2\n)\n    ->\naddPhraseField\n(\n'source'\n,\n55\n)\n;\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addQueryField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddQueryField\n(\n\"location\"\n,\n4\n)\n    ->\naddQueryField\n(\n\"price\"\n)\n    ->\naddQueryField\n(\n\"sku\"\n)\n    ->\naddQueryField\n(\n\"title\"\n,\n3.4\n)\n;\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addTrigramPhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\naddTrigramPhraseField\n(\n'cat'\n,\n2\n,\n5.1\n)\n->\naddTrigramPhraseField\n(\n'feature'\n,\n4.5\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::addUserField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\naddUserField\n(\n'cat'\n)\n->\naddUserField\n(\n'text'\n)\n->\naddUserField\n(\n'*_dt'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::__construct() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removeBigramPhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddBigramPhraseField\n(\n'cat'\n,\n2\n,\n5.1\n)\n    ->\naddBigramPhraseField\n(\n'feature'\n,\n4.5\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n// remove cat from pf2\n$dismaxQuery\n\n->\nremoveBigramPhraseField\n(\n'cat'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removeBoostQuery() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n\n->\naddBoostQuery\n(\n'cat'\n,\n'electronics'\n,\n5.1\n)\n    ->\naddBoostQuery\n(\n'cat'\n,\n'hard drive'\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n// now remove a query part with field 'cat'\n$dismaxQuery\n->\nremoveBoostQuery\n(\n'cat'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removePhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n\n->\naddPhraseField\n(\n'first'\n,\n3\n,\n1\n)\n    ->\naddPhraseField\n(\n'second'\n,\n4\n,\n1\n)\n    ->\naddPhraseField\n(\n'cat'\n,\n55\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\necho\n$dismaxQuery\n->\nremovePhraseField\n(\n'second'\n);\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removeQueryField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n\n->\naddQueryField\n(\n'first'\n,\n3\n)\n    ->\naddQueryField\n(\n'second'\n,\n0.2\n)\n    ->\naddQueryField\n(\n'cat'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n// remove field 'second'\necho\n$dismaxQuery\n->\nremoveQueryField\n(\n'second'\n);\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removeTrigramPhraseField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\naddTrigramPhraseField\n(\n'cat'\n,\n2\n,\n5.1\n)\n->\naddTrigramPhraseField\n(\n'feature'\n,\n4.5\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n// reverse\n$dismaxQuery\n->\nremoveTrigramPhraseField\n(\n'cat'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::removeUserField() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\naddUserField\n(\n'cat'\n)\n->\naddUserField\n(\n'text'\n)\n->\naddUserField\n(\n'*_dt'\n)\n;\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n// remove field named 'text'\n$dismaxQuery\n->\nremoveUserField\n(\n'text'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setBigramPhraseFields() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n->\nsetBigramPhraseFields\n(\n\"cat~5.1^2 feature^4.5\"\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setBigramPhraseSlop() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\nsetBigramPhraseSlop\n(\n5\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setBoostFunction() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$boostRecentDocsFunction\n=\n\"recip(ms(NOW,mydatefield),3.16e-11,1,1)\"\n;\n$dismaxQuery\n->\nsetBoostFunction\n(\n$boostRecentDocsFunction\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setBoostQuery() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n->\nsetBoostQuery\n(\n'cat:electronics manu:local^2'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setMinimumMatch() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n// 75% of the query clauses must match\n$dismaxQuery\n->\nsetMinimumMatch\n(\n\"75%\"\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setPhraseFields() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n\"lucene\"\n);\n$dismaxQuery\n->\nsetPhraseFields\n(\n\"cat~5.1^2 feature^4.5\"\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setPhraseSlop() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\nsetPhraseSlop\n(\n4\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setQueryAlt() example",
    "output": "<?php\n$dismaxQuery\n= new\nDisMaxQuery\n();\n$dismaxQuery\n->\nsetQueryAlt\n(\n'*:*'\n);\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setQueryPhraseSlop() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n();\n$dismaxQuery\n->\nsetQueryPhraseSlop\n(\n3\n);\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setTieBreaker() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n();\n$dismaxQuery\n->\nsetTieBreaker\n(\n0.1\n);\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setTrigramPhraseFields() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\nsetTrigramPhraseFields\n(\n'cat~5.1^2 feature^4.5'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setTrigramPhraseSlop() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\nsetTrigramPhraseSlop\n(\n2\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::setUserFields() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n(\n'lucene'\n);\n$dismaxQuery\n->\nsetUserFields\n(\n'field1 field2 *_txt'\n);\necho\n$dismaxQuery\n.\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::useDisMaxQueryParser() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n();\n$dismaxQuery\n->\nuseDisMaxQueryParser\n();\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrDisMaxQuery::useEDisMaxQueryParser() example",
    "output": "<?php\n$dismaxQuery\n= new\nSolrDisMaxQuery\n();\n$dismaxQuery\n->\nuseEDisMaxQueryParser\n();\necho\n$dismaxQuery\n;\n?>"
  },
  {
    "input": "Example #1 SolrCollapseFunction::__construct() example",
    "output": "<?php\ninclude\n\"bootstrap.php\"\n;\n$options\n= array\n(\n\n'hostname'\n=>\nSOLR_SERVER_HOSTNAME\n,\n\n'login'\n=>\nSOLR_SERVER_USERNAME\n,\n\n'password'\n=>\nSOLR_SERVER_PASSWORD\n,\n\n'port'\n=>\nSOLR_SERVER_PORT\n,\n\n'path'\n=>\nSOLR_SERVER_PATH\n);\n$client\n= new\nSolrClient\n(\n$options\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$func\n= new\nSolrCollapseFunction\n(\n'field_name'\n);\n$func\n->\nsetMax\n(\n'sum(cscore(),field(some_other_field))'\n);\n$func\n->\nsetSize\n(\n100\n);\n$func\n->\nsetNullPolicy\n(\nSolrCollapseFunction\n::\nNULLPOLICY_EXPAND\n);\n$query\n->\ncollapse\n(\n$func\n);\n$queryResponse\n=\n$client\n->\nquery\n(\n$query\n);\n$response\n=\n$queryResponse\n->\ngetResponse\n();\nprint_r\n(\n$response\n);\n?>"
  },
  {
    "input": "Example #1 SolrCollapseFunction::setHint() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 SolrCollapseFunction::setMax() example",
    "output": "<?php\n$func\n= new\nSolrCollapseFunction\n(\n'field_name'\n);\n$func\n->\nsetMax\n(\n'sum(cscore(),field(some_field))'\n);\n$query\n= new\nSolrQuery\n(\n'*:*'\n);\n$query\n->\ncollapse\n(\n$func\n);\n?>"
  },
  {
    "input": "Example #1 apache_get_modules() example",
    "output": "<?php\nprint_r\n(\napache_get_modules\n());\n?>"
  },
  {
    "input": "Example #1 apache_get_version() example",
    "output": "<?php\n$version\n=\napache_get_version\n();\necho\n\"\n$version\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 apache_lookup_uri() example",
    "output": "<?php\n$info\n=\napache_lookup_uri\n(\n'index.php?var=value'\n);\nprint_r\n(\n$info\n);\nif (\nfile_exists\n(\n$info\n->\nfilename\n)) {\n    echo\n'file exists!'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Passing information between PHP and Perl",
    "output": "<?php\napache_note\n(\n'name'\n,\n'Fredrik Ekengren'\n);\n// Call perl script\nvirtual\n(\n\"/perl/some_script.pl\"\n);\n$result\n=\napache_note\n(\n\"resultdata\"\n);\n?>"
  },
  {
    "input": "Example #2 Logging values in access.log",
    "output": "<?php\napache_note\n(\n'sessionID'\n,\nsession_id\n());\n?>"
  },
  {
    "input": "Example #1 apache_request_headers() example",
    "output": "<?php\n$headers\n=\napache_request_headers\n();\nforeach (\n$headers\nas\n$header\n=>\n$value\n) {\n    echo\n\"\n$header\n:\n$value\n <br />\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 apache_response_headers() example",
    "output": "<?php\nprint_r\n(\napache_response_headers\n());\n?>"
  },
  {
    "input": "Example #1 Setting an Apache environment variable using apache_setenv()",
    "output": "<?php\napache_setenv\n(\n\"EXAMPLE_VAR\"\n,\n\"Example Value\"\n);\n?>"
  },
  {
    "input": "Example #1 getallheaders() example",
    "output": "<?php\nforeach (\ngetallheaders\n() as\n$name\n=>\n$value\n) {\n    echo\n\"\n$name\n:\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 \n     Registering a variable with $_SESSION.",
    "output": "<?php\nsession_start\n();\nif (!isset(\n$_SESSION\n[\n'count'\n])) {\n\n$_SESSION\n[\n'count'\n] =\n0\n;\n} else {\n\n$_SESSION\n[\n'count'\n]++;\n}\n?>"
  },
  {
    "input": "Example #2 \n     Unregistering a variable with $_SESSION.",
    "output": "<?php\nsession_start\n();\nunset(\n$_SESSION\n[\n'count'\n]);\n?>"
  },
  {
    "input": "Example #1 Counting the number of hits of a single user",
    "output": "<?php\nsession_start\n();\nif (empty(\n$_SESSION\n[\n'count'\n])) {\n\n$_SESSION\n[\n'count'\n] =\n1\n;\n} else {\n\n$_SESSION\n[\n'count'\n]++;\n}\n?>\n<p>\nHello visitor, you have seen this page\n<?php\necho\n$_SESSION\n[\n'count'\n];\n?>\n times.\n</p>\n<p>\nTo continue, <a href=\"nextpage.php?\n<?php\necho\nhtmlspecialchars\n(\nSID\n);\n?>\n\">click\nhere</a>.\n</p>"
  },
  {
    "input": "Example #1 session_cache_expire() example",
    "output": "<?php\n/* set the cache limiter to 'private' */\nsession_cache_limiter\n(\n'private'\n);\n$cache_limiter\n=\nsession_cache_limiter\n();\n/* set the cache expire to 30 minutes */\nsession_cache_expire\n(\n30\n);\n$cache_expire\n=\nsession_cache_expire\n();\n/* start the session */\nsession_start\n();\necho\n\"The cache limiter is now set to\n$cache_limiter\n<br />\"\n;\necho\n\"The cached session pages expire after\n$cache_expire\n minutes\"\n;\n?>"
  },
  {
    "input": "Example #1 session_cache_limiter() example",
    "output": "<?php\n/* set the cache limiter to 'private' */\nsession_cache_limiter\n(\n'private'\n);\n$cache_limiter\n=\nsession_cache_limiter\n();\necho\n\"The cache limiter is now set to\n$cache_limiter\n<br />\"\n;\n?>"
  },
  {
    "input": "Example #1 session_create_id() example with session_regenerate_id()",
    "output": "<?php\n// My session start function support timestamp management\nfunction\nmy_session_start\n() {\n\nsession_start\n();\n\n// Do not allow to use too old session ID\n\nif (!empty(\n$_SESSION\n[\n'deleted_time'\n]) &&\n$_SESSION\n[\n'deleted_time'\n] <\ntime\n() -\n180\n) {\n\nsession_destroy\n();\n\nsession_start\n();\n    }\n}\n// My session regenerate id function\nfunction\nmy_session_regenerate_id\n() {\n\n// Call session_create_id() while session is active to\n    // make sure collision free.\n\nif (\nsession_status\n() !=\nPHP_SESSION_ACTIVE\n) {\n\nsession_start\n();\n    }\n\n// WARNING: Never use confidential strings for prefix!\n\n$newid\n=\nsession_create_id\n(\n'myprefix-'\n);\n\n// Set deleted timestamp. Session data must not be deleted immediately for reasons.\n\n$_SESSION\n[\n'deleted_time'\n] =\ntime\n();\n\n// Finish session\n\nsession_commit\n();\n\n// Make sure to accept user defined session ID\n    // NOTE: You must enable use_strict_mode for normal operations.\n\nini_set\n(\n'session.use_strict_mode'\n,\n0\n);\n\n// Set new custom session ID\n\nsession_id\n(\n$newid\n);\n\n// Start with custom session ID\n\nsession_start\n();\n}\n// Make sure use_strict_mode is enabled.\n// use_strict_mode is mandatory for security reasons.\nini_set\n(\n'session.use_strict_mode'\n,\n1\n);\nmy_session_start\n();\n// Session ID must be regenerated when\n//  - User logged in\n//  - User logged out\n//  - Certain period has passed\nmy_session_regenerate_id\n();\n// Write useful codes\n?>"
  },
  {
    "input": "Example #1 Destroying a session with $_SESSION",
    "output": "<?php\n// Initialize the session.\n// If you are using session_name(\"something\"), don't forget it now!\nsession_start\n();\n// Unset all of the session variables.\n$_SESSION\n= array();\n// If it's desired to kill the session, also delete the session cookie.\n// Note: This will destroy the session, and not just the session data!\nif (\nini_get\n(\n\"session.use_cookies\"\n)) {\n\n$params\n=\nsession_get_cookie_params\n();\n\nsetcookie\n(\nsession_name\n(),\n''\n,\ntime\n() -\n42000\n,\n\n$params\n[\n\"path\"\n],\n$params\n[\n\"domain\"\n],\n\n$params\n[\n\"secure\"\n],\n$params\n[\n\"httponly\"\n]\n    );\n}\n// Finally, destroy the session.\nsession_destroy\n();\n?>"
  },
  {
    "input": "Example #1 session_gc() example for task managers like cron",
    "output": "<?php\n// Note: This script should be executed by the same user of web server process.\n// Need active session to initialize session data storage access.\nsession_start\n();\n// Executes GC immediately\nsession_gc\n();\n// Clean up session ID created by session_gc()\nsession_destroy\n();\n?>"
  },
  {
    "input": "Example #2 session_gc() example for user accessible script",
    "output": "<?php\n// Note: session_gc() is recommended to be used by task manager script, but\n// it may be used as follows.\n// Used for last GC time check\n$gc_time\n=\n'/tmp/php_session_last_gc'\n;\n$gc_period\n=\n1800\n;\nsession_start\n();\n// Execute GC only when GC period elapsed.\n// i.e. Calling session_gc() every request is waste of resources.\nif (\nfile_exists\n(\n$gc_time\n)) {\n    if (\nfilemtime\n(\n$gc_time\n) <\ntime\n() -\n$gc_period\n) {\n\nsession_gc\n();\n\ntouch\n(\n$gc_time\n);\n    }\n} else {\n\ntouch\n(\n$gc_time\n);\n}\n?>"
  },
  {
    "input": "Example #1 session_name() example",
    "output": "<?php\n/* set the session name to WebsiteID */\n$previous_name\n=\nsession_name\n(\n\"WebsiteID\"\n);\necho\n\"The previous session name was\n$previous_name\n<br />\"\n;\n?>"
  },
  {
    "input": "Example #1 A session_regenerate_id() example",
    "output": "<?php\n// NOTE: This code is not fully working code, but an example!\nsession_start\n();\n// Check destroyed time-stamp\nif (isset(\n$_SESSION\n[\n'destroyed'\n])\n    &&\n$_SESSION\n[\n'destroyed'\n] <\ntime\n() -\n300\n) {\n\n// Should not happen usually. This could be attack or due to unstable network.\n    // Remove all authentication status of this users session.\n\nremove_all_authentication_flag_from_active_sessions\n(\n$_SESSION\n[\n'userid'\n]);\n    throw(new\nDestroyedSessionAccessException\n);\n}\n$old_sessionid\n=\nsession_id\n();\n// Set destroyed timestamp\n$_SESSION\n[\n'destroyed'\n] =\ntime\n();\n// session_regenerate_id() saves old session data\n// Simply calling session_regenerate_id() may result in lost session, etc.\n// See next example.\nsession_regenerate_id\n();\n// New session does not need destroyed timestamp\nunset(\n$_SESSION\n[\n'destroyed'\n]);\n$new_sessionid\n=\nsession_id\n();\necho\n\"Old Session:\n$old_sessionid\n<br />\"\n;\necho\n\"New Session:\n$new_sessionid\n<br />\"\n;\nprint_r\n(\n$_SESSION\n);\n?>"
  },
  {
    "input": "Example #2 Avoiding lost session by session_regenerate_id()",
    "output": "<?php\n// NOTE: This code is not fully working code, but an example!\n// my_session_start() and my_session_regenerate_id() avoid lost sessions by\n// unstable network. In addition, this code may prevent exploiting stolen\n// session by attackers.\nfunction\nmy_session_start\n() {\n\nsession_start\n();\n    if (isset(\n$_SESSION\n[\n'destroyed'\n])) {\n       if (\n$_SESSION\n[\n'destroyed'\n] <\ntime\n()-\n300\n) {\n\n// Should not happen usually. This could be attack or due to unstable network.\n           // Remove all authentication status of this users session.\n\nremove_all_authentication_flag_from_active_sessions\n(\n$_SESSION\n[\n'userid'\n]);\n           throw(new\nDestroyedSessionAccessException\n);\n       }\n       if (isset(\n$_SESSION\n[\n'new_session_id'\n])) {\n\n// Not fully expired yet. Could be lost cookie by unstable network.\n           // Try again to set proper session ID cookie.\n           // NOTE: Do not try to set session ID again if you would like to remove\n           // authentication flag.\n\nsession_commit\n();\n\nsession_id\n(\n$_SESSION\n[\n'new_session_id'\n]);\n\n// New session ID should exist\n\nsession_start\n();\n           return;\n       }\n   }\n}\nfunction\nmy_session_regenerate_id\n() {\n\n// New session ID is required to set proper session ID\n    // when session ID is not set due to unstable network.\n\n$new_session_id\n=\nsession_create_id\n();\n\n$_SESSION\n[\n'new_session_id'\n] =\n$new_session_id\n;\n\n\n// Set destroy timestamp\n\n$_SESSION\n[\n'destroyed'\n] =\ntime\n();\n\n\n// Write and close current session;\n\nsession_commit\n();\n\n// Start session with new session ID\n\nsession_id\n(\n$new_session_id\n);\n\nini_set\n(\n'session.use_strict_mode'\n,\n0\n);\n\nsession_start\n();\n\nini_set\n(\n'session.use_strict_mode'\n,\n1\n);\n\n\n// New session does not need them\n\nunset(\n$_SESSION\n[\n'destroyed'\n]);\n    unset(\n$_SESSION\n[\n'new_session_id'\n]);\n}\n?>"
  },
  {
    "input": "Example #1 page1.php",
    "output": "<?php\n// page1.php\nsession_start\n();\necho\n'Welcome to page #1'\n;\n$_SESSION\n[\n'favcolor'\n] =\n'green'\n;\n$_SESSION\n[\n'animal'\n]   =\n'cat'\n;\n$_SESSION\n[\n'time'\n]     =\ntime\n();\n// Works if session cookie was accepted\necho\n'<br /><a href=\"page2.php\">page 2</a>'\n;\n// Or maybe pass along the session id, if needed\necho\n'<br /><a href=\"page2.php?'\n.\nSID\n.\n'\">page 2</a>'\n;\n?>"
  },
  {
    "input": "Example #2 page2.php",
    "output": "<?php\n// page2.php\nsession_start\n();\necho\n'Welcome to page #2<br />'\n;\necho\n$_SESSION\n[\n'favcolor'\n];\n// green\necho\n$_SESSION\n[\n'animal'\n];\n// cat\necho\ndate\n(\n'Y m d H:i:s'\n,\n$_SESSION\n[\n'time'\n]);\n// You may want to use SID here, like we did in page1.php\necho\n'<br /><a href=\"page1.php\">page 1</a>'\n;\n?>"
  },
  {
    "input": "Example #3 Overriding the cookie lifetime",
    "output": "<?php\n// This sends a persistent cookie that lasts a day.\nsession_start\n([\n\n'cookie_lifetime'\n=>\n86400\n,\n]);\n?>"
  },
  {
    "input": "Example #4 Reading the session and closing it",
    "output": "<?php\n// If we know we don't need to change anything in the\n// session, we can just read and close rightaway to avoid\n// locking the session file and blocking other pages\nsession_start\n([\n\n'cookie_lifetime'\n=>\n86400\n,\n\n'read_and_close'\n=>\ntrue\n,\n]);"
  },
  {
    "input": "Example #1 \n     Using SessionHandler to add encryption to internal PHP save handlers.",
    "output": "<?php\n\n/**\n  * decrypt AES 256\n  *\n  * @param data $edata\n  * @param string $password\n  * @return decrypted data\n  */\nfunction\ndecrypt\n(\n$edata\n,\n$password\n) {\n\n$data\n=\nbase64_decode\n(\n$edata\n);\n\n$salt\n=\nsubstr\n(\n$data\n,\n0\n,\n16\n);\n\n$ct\n=\nsubstr\n(\n$data\n,\n16\n);\n\n$rounds\n=\n3\n;\n// depends on key length\n\n$data00\n=\n$password\n.\n$salt\n;\n\n$hash\n= array();\n\n$hash\n[\n0\n] =\nhash\n(\n'sha256'\n,\n$data00\n,\ntrue\n);\n\n$result\n=\n$hash\n[\n0\n];\n    for (\n$i\n=\n1\n;\n$i\n<\n$rounds\n;\n$i\n++) {\n\n$hash\n[\n$i\n] =\nhash\n(\n'sha256'\n,\n$hash\n[\n$i\n-\n1\n].\n$data00\n,\ntrue\n);\n\n$result\n.=\n$hash\n[\n$i\n];\n    }\n\n$key\n=\nsubstr\n(\n$result\n,\n0\n,\n32\n);\n\n$iv\n=\nsubstr\n(\n$result\n,\n32\n,\n16\n);\n    return\nopenssl_decrypt\n(\n$ct\n,\n'AES-256-CBC'\n,\n$key\n,\ntrue\n,\n$iv\n);\n  }\n/**\n * crypt AES 256\n *\n * @param data $data\n * @param string $password\n * @return base64 encrypted data\n */\nfunction\nencrypt\n(\n$data\n,\n$password\n) {\n\n// Generate a cryptographically secure random salt using random_bytes()\n\n$salt\n=\nrandom_bytes\n(\n16\n);\n\n$salted\n=\n''\n;\n\n$dx\n=\n''\n;\n\n// Salt the key(32) and iv(16) = 48\n\nwhile (\nstrlen\n(\n$salted\n) <\n48\n) {\n\n$dx\n=\nhash\n(\n'sha256'\n,\n$dx\n.\n$password\n.\n$salt\n,\ntrue\n);\n\n$salted\n.=\n$dx\n;\n    }\n\n$key\n=\nsubstr\n(\n$salted\n,\n0\n,\n32\n);\n\n$iv\n=\nsubstr\n(\n$salted\n,\n32\n,\n16\n);\n\n$encrypted_data\n=\nopenssl_encrypt\n(\n$data\n,\n'AES-256-CBC'\n,\n$key\n,\ntrue\n,\n$iv\n);\n    return\nbase64_encode\n(\n$salt\n.\n$encrypted_data\n);\n}\nclass\nEncryptedSessionHandler\nextends\nSessionHandler\n{\n    private\n$key\n;\n    public function\n__construct\n(\n$key\n)\n    {\n\n$this\n->\nkey\n=\n$key\n;\n    }\n    public function\nread\n(\n$id\n)\n    {\n\n$data\n=\nparent\n::\nread\n(\n$id\n);\n        if (!\n$data\n) {\n            return\n\"\"\n;\n        } else {\n            return\ndecrypt\n(\n$data\n,\n$this\n->\nkey\n);\n        }\n    }\n    public function\nwrite\n(\n$id\n,\n$data\n)\n    {\n\n$data\n=\nencrypt\n(\n$data\n,\n$this\n->\nkey\n);\n        return\nparent\n::\nwrite\n(\n$id\n,\n$data\n);\n    }\n}\n// we'll intercept the native 'files' handler, but will equally work\n// with other internal native handlers like 'sqlite', 'memcache' or 'memcached'\n// which are provided by PHP extensions.\nini_set\n(\n'session.save_handler'\n,\n'files'\n);\n$key\n=\n'secret_string'\n;\n$handler\n= new\nEncryptedSessionHandler\n(\n$key\n);\nsession_set_save_handler\n(\n$handler\n,\ntrue\n);\nsession_start\n();\n// proceed to set and retrieve values by key from $_SESSION"
  },
  {
    "input": "Example #1 Tokenize comma separated integer list",
    "output": "<?php\nuse\nParle\\Token\n;\nuse\nParle\\Lexer\n;\nuse\nParle\\LexerException\n;\n/* name => id */\n$token\n= array(\n\n\"COMMA\"\n=>\n1\n,\n\n\"CRLF\"\n=>\n2\n,\n\n\"DECIMAL\"\n=>\n3\n,\n);\n/* id => name */\n$tokenIdToName\n=\narray_flip\n(\n$token\n);\n$lex\n= new\nLexer\n;\n$lex\n->\npush\n(\n\"[\\x2c]\"\n,\n$token\n[\n\"COMMA\"\n]);\n$lex\n->\npush\n(\n\"[\\r][\\n]\"\n,\n$token\n[\n\"CRLF\"\n]);\n$lex\n->\npush\n(\n\"[\\d]+\"\n,\n$token\n[\n\"DECIMAL\"\n]);\n$lex\n->\nbuild\n();\n$in\n=\n\"0,1,2\\r\\n3,42,5\\r\\n6,77,8\\r\\n\"\n;\n$lex\n->\nconsume\n(\n$in\n);\ndo {\n\n$lex\n->\nadvance\n();\n\n$tok\n=\n$lex\n->\ngetToken\n();\n        if (\nToken\n::\nUNKNOWN\n==\n$tok\n->\nid\n) {\n                throw new\nLexerException\n(\n\"Unknown token '\n{\n$tok\n->\nvalue\n}\n' at offset\n{\n$lex\n->\nmarker\n}\n.\"\n);\n        }\n        echo\n\"TOKEN: \"\n,\n$tokenIdToName\n[\n$tok\n->\nid\n],\nPHP_EOL\n;\n} while (\nToken\n::\nEOI\n!=\n$tok\n->\nid\n);"
  },
  {
    "input": "Example #2 Tokenize assign statement",
    "output": "<?php\nuse\nParle\n\\{\nToken\n,\nLexer\n};\n$lex\n= new\nLexer\n;\n$lex\n->\npush\n(\n\"\\$[a-zA-Z_][a-zA-Z0-9_]*\"\n,\n1\n);\n$lex\n->\npush\n(\n\"=\"\n,\n2\n);\n$lex\n->\npush\n(\n\"\\d+\"\n,\n3\n);\n$lex\n->\npush\n(\n\";\"\n,\n4\n);\n$lex\n->\nbuild\n();\n$lex\n->\nconsume\n(\n'$x = 42; $y = 24;'\n);\ndo {\n\n$lex\n->\nadvance\n();\n\n$tok\n=\n$lex\n->\ngetToken\n();\n\nvar_dump\n(\n$tok\n);\n} while (\nToken\n::\nEOI\n!=\n$tok\n->\nid\n);"
  },
  {
    "input": "Example #1 Simple calculator",
    "output": "<?php\nuse\nParle\n\\{\nParser\n,\nParserException\n,\nLexer\n,\nToken\n};\n$p\n= new\nParser\n;\n$p\n->\ntoken\n(\n\"INTEGER\"\n);\n$p\n->\nleft\n(\n\"'+' '-' '*' '/'\"\n);\n$p\n->\npush\n(\n\"start\"\n,\n\"exp\"\n);\n$prod_add\n=\n$p\n->\npush\n(\n\"exp\"\n,\n\"exp '+' exp\"\n);\n$prod_sub\n=\n$p\n->\npush\n(\n\"exp\"\n,\n\"exp '-' exp\"\n);\n$prod_mul\n=\n$p\n->\npush\n(\n\"exp\"\n,\n\"exp '*' exp\"\n);\n$prod_div\n=\n$p\n->\npush\n(\n\"exp\"\n,\n\"exp '/' exp\"\n);\n$p\n->\npush\n(\n\"exp\"\n,\n\"INTEGER\"\n);\n/* Production index unused. */\n$p\n->\nbuild\n();\n$lex\n= new\nLexer\n;\n$lex\n->\npush\n(\n\"[+]\"\n,\n$p\n->\ntokenId\n(\n\"'+'\"\n));\n$lex\n->\npush\n(\n\"[-]\"\n,\n$p\n->\ntokenId\n(\n\"'-'\"\n));\n$lex\n->\npush\n(\n\"[*]\"\n,\n$p\n->\ntokenId\n(\n\"'*'\"\n));\n$lex\n->\npush\n(\n\"[/]\"\n,\n$p\n->\ntokenId\n(\n\"'/'\"\n));\n$lex\n->\npush\n(\n\"\\\\d+\"\n,\n$p\n->\ntokenId\n(\n\"INTEGER\"\n));\n$lex\n->\npush\n(\n\"\\\\s+\"\n,\nToken\n::\nSKIP\n);\n$lex\n->\nbuild\n();\n$exp\n= array(\n\n\"1 + 1\"\n,\n\n\"33 / 10\"\n,\n\n\"100 * 45\"\n,\n\n\"17 - 45\"\n,\n);\nforeach (\n$exp\nas\n$in\n) {\n    if (!\n$p\n->\nvalidate\n(\n$in\n,\n$lex\n)) {\n        throw new\nParserException\n(\n\"Failed to validate input\"\n);\n    }\n\n$p\n->\nconsume\n(\n$in\n,\n$lex\n);\n    while (\nParser\n::\nACTION_ERROR\n!=\n$p\n->\naction\n&&\nParser\n::\nACTION_ACCEPT\n!=\n$p\n->\naction\n) {\n        switch (\n$p\n->\naction\n) {\n            case\nParser\n::\nACTION_ERROR\n:\n                throw new\nParserException\n(\n\"Parser error\"\n);\n                break;\n            case\nParser\n::\nACTION_SHIFT\n:\n            case\nParser\n::\nACTION_GOTO\n:\n            case\nParser\n::\nACTION_ACCEPT\n:\n                break;\n            case\nParser\n::\nACTION_REDUCE\n:\n                switch (\n$p\n->\nreduceId\n) {\n                    case\n$prod_add\n:\n\n$l\n=\n$p\n->\nsigil\n(\n0\n);\n\n$r\n=\n$p\n->\nsigil\n(\n2\n);\n                        echo\n\"\n$l\n +\n$r\n = \"\n. (\n$l\n+\n$r\n) .\n\"\\n\"\n;\n                        break;\n                    case\n$prod_sub\n:\n\n$l\n=\n$p\n->\nsigil\n(\n0\n);\n\n$r\n=\n$p\n->\nsigil\n(\n2\n);\n                        echo\n\"\n$l\n -\n$r\n = \"\n. (\n$l\n-\n$r\n) .\n\"\\n\"\n;\n                        break;\n                    case\n$prod_mul\n:\n\n$l\n=\n$p\n->\nsigil\n(\n0\n);\n\n$r\n=\n$p\n->\nsigil\n(\n2\n);\n                        echo\n\"\n$l\n *\n$r\n = \"\n. (\n$l\n*\n$r\n) .\n\"\\n\"\n;\n                        break;\n                    case\n$prod_div\n:\n\n$l\n=\n$p\n->\nsigil\n(\n0\n);\n\n$r\n=\n$p\n->\nsigil\n(\n2\n);\n                    echo\n\"\n$l\n /\n$r\n = \"\n. (\n$l\n/\n$r\n) .\n\"\\n\"\n;\n                        break;\n            }\n            break;\n        }\n\n$p\n->\nadvance\n();\n    }\n}"
  },
  {
    "input": "Example #2 Parse words out from a sentence",
    "output": "<?php\nuse\nParle\n\\{\nLexer\n,\nToken\n,\nParser\n,\nParserException\n};\n$p\n= new\nParser\n;\n$p\n->\ntoken\n(\n\"WORD\"\n);\n$p\n->\npush\n(\n\"START\"\n,\n\"SENTENCE\"\n);\n$p\n->\npush\n(\n\"SENTENCE\"\n,\n\"WORDS\"\n);\n$prod_word_0\n=\n$p\n->\npush\n(\n\"WORDS\"\n,\n\"WORDS WORD\"\n);\n$prod_word_1\n=\n$p\n->\npush\n(\n\"WORDS\"\n,\n\"WORD\"\n);\n$p\n->\nbuild\n();\n$lex\n= new\nLexer\n;\n$lex\n->\npush\n(\n\"[^\\s]{-}[\\.,\\:\\;\\?]+\"\n,\n$p\n->\ntokenId\n(\n\"WORD\"\n));\n$lex\n->\npush\n(\n\"[\\s\\.,\\:\\;\\?]+\"\n,\nToken\n::\nSKIP\n);\n$lex\n->\nbuild\n();\n$in\n=\n\"Dis-moi où est ton papa?\"\n;\n$p\n->\nconsume\n(\n$in\n,\n$lex\n);\ndo {\n    switch (\n$p\n->\naction\n) {\n    case\nParser\n::\nACTION_ERROR\n:\n        throw new\nParserException\n(\n\"Error\"\n);\n        break;\n    case\nParser\n::\nACTION_SHIFT\n:\n    case\nParser\n::\nACTION_GOTO\n:\n\n/* var_dump($p->trace());*/\n\nbreak;\n    case\nParser\n::\nACTION_REDUCE\n:\n\n$rid\n=\n$p\n->\nreduceId\n();\n        if (\n$rid\n==\n$prod_word_1\n) {\n\nvar_dump\n(\n$p\n->\nsigil\n(\n0\n));\n        } if (\n$rid\n==\n$prod_word_0\n) {\n\nvar_dump\n(\n$p\n->\nsigil\n(\n1\n));\n        }\n        break;\n    }\n\n$p\n->\nadvance\n();\n} while (\nParser\n::\nACTION_ACCEPT\n!=\n$p\n->\naction\n);"
  },
  {
    "input": "Example #1 Usage of comments in PCRE pattern",
    "output": "<?php\n$subject\n=\n'test'\n;\n/* (?# can be used to add comments without enabling PCRE_EXTENDED */\n$match\n=\npreg_match\n(\n'/te(?# this is a comment)st/'\n,\n$subject\n);\nvar_dump\n(\n$match\n);\n/* Whitespace and # is treated as part of the pattern unless PCRE_EXTENDED is enabled */\n$match\n=\npreg_match\n(\n'/te   #~~~~\nst/'\n,\n$subject\n);\nvar_dump\n(\n$match\n);\n/* When PCRE_EXTENDED is enabled, all whitespace data characters and anything\n   that follows an unescaped # on the same line is ignored */\n$match\n=\npreg_match\n(\n'/te    #~~~~\nst/x'\n,\n$subject\n);\nvar_dump\n(\n$match\n);"
  },
  {
    "input": "Example #1 \n     Example comparing preg_filter() \n     with preg_replace()",
    "output": "<?php\n$subject\n= array(\n'1'\n,\n'a'\n,\n'2'\n,\n'b'\n,\n'3'\n,\n'A'\n,\n'B'\n,\n'4'\n);\n$pattern\n= array(\n'/\\d/'\n,\n'/[a-z]/'\n,\n'/[1a]/'\n);\n$replace\n= array(\n'A:$0'\n,\n'B:$0'\n,\n'C:$0'\n);\necho\n\"preg_filter returns\\n\"\n;\nprint_r\n(\npreg_filter\n(\n$pattern\n,\n$replace\n,\n$subject\n));\necho\n\"preg_replace returns\\n\"\n;\nprint_r\n(\npreg_replace\n(\n$pattern\n,\n$replace\n,\n$subject\n));\n?>"
  },
  {
    "input": "Example #1 preg_grep() example",
    "output": "<?php\n// return all array elements\n// containing floating point numbers\n$fl_array\n=\npreg_grep\n(\n\"/^(\\d+)?\\.\\d+$/\"\n,\n$array\n);\n?>"
  },
  {
    "input": "Example #1 preg_last_error() example",
    "output": "<?php\npreg_match\n(\n'/(?:\\D+|<\\d+>)*[!?]/'\n,\n'foobar foobar foobar'\n);\nif (\npreg_last_error\n() ==\nPREG_BACKTRACK_LIMIT_ERROR\n) {\n    echo\n'Backtrack limit was exhausted!'\n;\n}\n?>"
  },
  {
    "input": "Example #1 preg_last_error_msg() example",
    "output": "<?php\npreg_match\n(\n'/(?:\\D+|<\\d+>)*[!?]/'\n,\n'foobar foobar foobar'\n);\nif (\npreg_last_error\n() !==\nPREG_NO_ERROR\n) {\n    echo\npreg_last_error_msg\n();\n}\n?>"
  },
  {
    "input": "Example #1 Find the string of text \"php\"",
    "output": "<?php\n// The \"i\" after the pattern delimiter indicates a case-insensitive search\nif (\npreg_match\n(\n\"/php/i\"\n,\n\"PHP is the web scripting language of choice.\"\n)) {\n    echo\n\"A match was found.\"\n;\n} else {\n    echo\n\"A match was not found.\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Find the word \"web\"",
    "output": "<?php\n/* The \\b in the pattern indicates a word boundary, so only the distinct\n * word \"web\" is matched, and not a word partial like \"webbing\" or \"cobweb\" */\nif (\npreg_match\n(\n\"/\\bweb\\b/i\"\n,\n\"PHP is the web scripting language of choice.\"\n)) {\n    echo\n\"A match was found.\"\n;\n} else {\n    echo\n\"A match was not found.\"\n;\n}\nif (\npreg_match\n(\n\"/\\bweb\\b/i\"\n,\n\"PHP is the website scripting language of choice.\"\n)) {\n    echo\n\"A match was found.\"\n;\n} else {\n    echo\n\"A match was not found.\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Getting the domain name out of a URL",
    "output": "<?php\n// get host name from URL\npreg_match\n(\n'@^(?:http://)?([^/]+)@i'\n,\n\n\"http://www.php.net/index.html\"\n,\n$matches\n);\n$host\n=\n$matches\n[\n1\n];\n// get last two segments of host name\npreg_match\n(\n'/[^.]+\\.[^.]+$/'\n,\n$host\n,\n$matches\n);\necho\n\"domain name is:\n{\n$matches\n[\n0\n]}\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Using named subpattern",
    "output": "<?php\n$str\n=\n'foobar: 2008'\n;\npreg_match\n(\n'/(?P<name>\\w+): (?P<digit>\\d+)/'\n,\n$str\n,\n$matches\n);\n/* Alternative */\n// preg_match('/(?<name>\\w+): (?<digit>\\d+)/', $str, $matches);\nprint_r\n(\n$matches\n);\n?>"
  },
  {
    "input": "Example #1 Getting all phone numbers out of some text.",
    "output": "<?php\npreg_match_all\n(\n\"/\\(?  (\\d{3})?  \\)?  (?(1)  [\\-\\s] ) \\d{3}-\\d{4}/x\"\n,\n\n\"Call 555-1212 or 1-800-555-1212\"\n,\n$phones\n);\n?>"
  },
  {
    "input": "Example #2 Find matching HTML tags (greedy)",
    "output": "<?php\n// The \\\\2 is an example of backreferencing. This tells pcre that\n// it must match the second set of parentheses in the regular expression\n// itself, which would be the ([\\w]+) in this case. The extra backslash is\n// required because the string is in double quotes.\n$html\n=\n\"<b>bold text</b><a href=howdy.html>click me</a>\"\n;\npreg_match_all\n(\n\"/(<([\\w]+)[^>]*>)(.*?)(<\\/\\\\2>)/\"\n,\n$html\n,\n$matches\n,\nPREG_SET_ORDER\n);\nforeach (\n$matches\nas\n$val\n) {\n    echo\n\"matched: \"\n.\n$val\n[\n0\n] .\n\"\\n\"\n;\n    echo\n\"part 1: \"\n.\n$val\n[\n1\n] .\n\"\\n\"\n;\n    echo\n\"part 2: \"\n.\n$val\n[\n2\n] .\n\"\\n\"\n;\n    echo\n\"part 3: \"\n.\n$val\n[\n3\n] .\n\"\\n\"\n;\n    echo\n\"part 4: \"\n.\n$val\n[\n4\n] .\n\"\\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Using named subpattern",
    "output": "<?php\n$str\n= <<<FOO\na: 1\nb: 2\nc: 3\nFOO;\npreg_match_all\n(\n'/(?P<name>\\w+): (?P<digit>\\d+)/'\n,\n$str\n,\n$matches\n);\n/* Alternative */\n// preg_match_all('/(?<name>\\w+): (?<digit>\\d+)/', $str, $matches);\nprint_r\n(\n$matches\n);\n?>"
  },
  {
    "input": "Example #1 preg_quote() example",
    "output": "<?php\n$keywords\n=\n'$40 for a g3/400'\n;\n$keywords\n=\npreg_quote\n(\n$keywords\n,\n'/'\n);\necho\n$keywords\n;\n// returns \\$40 for a g3\\/400\n?>"
  },
  {
    "input": "Example #2 Italicizing a word within some text",
    "output": "<?php\n// In this example, preg_quote($word) is used to keep the\n// asterisks from having special meaning to the regular\n// expression.\n$textbody\n=\n\"This book is *very* difficult to find.\"\n;\n$word\n=\n\"*very*\"\n;\n$textbody\n=\npreg_replace\n(\n\"/\"\n.\npreg_quote\n(\n$word\n,\n'/'\n) .\n\"/\"\n,\n\n\"<i>\"\n.\n$word\n.\n\"</i>\"\n,\n\n$textbody\n);\n?>"
  },
  {
    "input": "Example #1 Using backreferences followed by numeric literals",
    "output": "<?php\n$string\n=\n'April 15, 2003'\n;\n$pattern\n=\n'/(\\w+) (\\d+), (\\d+)/i'\n;\n$replacement\n=\n'${1}1,$3'\n;\necho\npreg_replace\n(\n$pattern\n,\n$replacement\n,\n$string\n);\n?>"
  },
  {
    "input": "Example #2 Using indexed arrays with preg_replace()",
    "output": "<?php\n$string\n=\n'The quick brown fox jumps over the lazy dog.'\n;\n$patterns\n= array();\n$patterns\n[\n0\n] =\n'/quick/'\n;\n$patterns\n[\n1\n] =\n'/brown/'\n;\n$patterns\n[\n2\n] =\n'/fox/'\n;\n$replacements\n= array();\n$replacements\n[\n2\n] =\n'bear'\n;\n$replacements\n[\n1\n] =\n'black'\n;\n$replacements\n[\n0\n] =\n'slow'\n;\necho\npreg_replace\n(\n$patterns\n,\n$replacements\n,\n$string\n);\n?>"
  },
  {
    "input": "Example #3 Replacing several values",
    "output": "<?php\n$patterns\n= array (\n'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/'\n,\n\n'/^\\s*{(\\w+)}\\s*=/'\n);\n$replace\n= array (\n'\\3/\\4/\\1\\2'\n,\n'$\\1 ='\n);\necho\npreg_replace\n(\n$patterns\n,\n$replace\n,\n'{startDate} = 1999-5-27'\n);\n?>"
  },
  {
    "input": "Example #5 Using the count parameter",
    "output": "<?php\n$count\n=\n0\n;\necho\npreg_replace\n(array(\n'/\\d/'\n,\n'/\\s/'\n),\n'*'\n,\n'xp 4 to'\n, -\n1\n,\n$count\n);\necho\n$count\n;\n//3\n?>"
  },
  {
    "input": "Example #1 preg_replace_callback() and\n        anonymous function",
    "output": "<?php\n/* a unix-style command line filter to convert uppercase\n * letters at the beginning of paragraphs to lowercase */\n$fp\n=\nfopen\n(\n\"php://stdin\"\n,\n\"r\"\n) or die(\n\"can't read stdin\"\n);\nwhile (!\nfeof\n(\n$fp\n)) {\n\n$line\n=\nfgets\n(\n$fp\n);\n\n$line\n=\npreg_replace_callback\n(\n\n'|<p>\\s*\\w|'\n,\n        function (\n$matches\n) {\n            return\nstrtolower\n(\n$matches\n[\n0\n]);\n        },\n\n$line\n\n);\n    echo\n$line\n;\n}\nfclose\n(\n$fp\n);\n?>"
  },
  {
    "input": "Example #2 preg_replace_callback() example",
    "output": "<?php\n// this text was used in 2002\n// we want to get this up to date for 2003\n$text\n=\n\"April fools day is 04/01/2002\\n\"\n;\n$text\n.=\n\"Last christmas was 12/24/2001\\n\"\n;\n// the callback function\nfunction\nnext_year\n(\n$matches\n)\n{\n\n// as usual: $matches[0] is the complete match\n  // $matches[1] the match for the first subpattern\n  // enclosed in '(...)' and so on\n\nreturn\n$matches\n[\n1\n].(\n$matches\n[\n2\n]+\n1\n);\n}\necho\npreg_replace_callback\n(\n\n\"|(\\d{2}/\\d{2}/)(\\d{4})|\"\n,\n\n\"next_year\"\n,\n\n$text\n);\n?>"
  },
  {
    "input": "Example #3 preg_replace_callback() using recursive structure\n     to handle encapsulated BB code",
    "output": "<?php\n$input\n=\n\"plain [indent] deep [indent] deeper [/indent] deep [/indent] plain\"\n;\nfunction\nparseTagsRecursive\n(\n$input\n)\n{\n\n$regex\n=\n'#\\[indent]((?:[^[]|\\[(?!/?indent])|(?R))+)\\[/indent]#'\n;\n    if (\nis_array\n(\n$input\n)) {\n\n$input\n=\n'<div style=\"margin-left: 10px\">'\n.\n$input\n[\n1\n].\n'</div>'\n;\n    }\n    return\npreg_replace_callback\n(\n$regex\n,\n'parseTagsRecursive'\n,\n$input\n);\n}\n$output\n=\nparseTagsRecursive\n(\n$input\n);\necho\n$output\n;\n?>"
  },
  {
    "input": "Example #1 preg_replace_callback_array() example",
    "output": "<?php\n$subject\n=\n'Aaaaaa Bbb'\n;\npreg_replace_callback_array\n(\n    [\n\n'~[a]+~i'\n=> function (\n$match\n) {\n            echo\nstrlen\n(\n$match\n[\n0\n]),\n' matches for \"a\" found'\n,\nPHP_EOL\n;\n        },\n\n'~[b]+~i'\n=> function (\n$match\n) {\n            echo\nstrlen\n(\n$match\n[\n0\n]),\n' matches for \"b\" found'\n,\nPHP_EOL\n;\n        }\n    ],\n\n$subject\n);\n?>"
  },
  {
    "input": "Example #1 preg_split() example : Get the parts of a search string",
    "output": "<?php\n// split the phrase by any number of commas or space characters,\n// which include \" \", \\r, \\t, \\n and \\f\n$keywords\n=\npreg_split\n(\n\"/[\\s,]+/\"\n,\n\"hypertext language, programming\"\n);\nprint_r\n(\n$keywords\n);\n?>"
  },
  {
    "input": "Example #2 Splitting a string into component characters",
    "output": "<?php\n$str\n=\n'string'\n;\n$chars\n=\npreg_split\n(\n'//'\n,\n$str\n, -\n1\n,\nPREG_SPLIT_NO_EMPTY\n);\nprint_r\n(\n$chars\n);\n?>"
  },
  {
    "input": "Example #3 Splitting a string into matches and their offsets",
    "output": "<?php\n$str\n=\n'hypertext language programming'\n;\n$chars\n=\npreg_split\n(\n'/ /'\n,\n$str\n, -\n1\n,\nPREG_SPLIT_OFFSET_CAPTURE\n);\nprint_r\n(\n$chars\n);\n?>"
  },
  {
    "input": "Example #1 addcslashes() example",
    "output": "<?php\n$escaped\n=\naddcslashes\n(\n$not_escaped\n,\n\"\\0..\\37!@\\177..\\377\"\n);\n?>"
  },
  {
    "input": "Example #1 An addslashes() example",
    "output": "<?php\n$str\n=\n\"Is your name O'Reilly?\"\n;\n// Outputs: Is your name O\\'Reilly?\necho\naddslashes\n(\n$str\n);\n?>"
  },
  {
    "input": "Example #1 bin2hex() example",
    "output": "<?php\n$hex\n=\nbin2hex\n(\n'Hello world!'\n);\nvar_dump\n(\n$hex\n);\nvar_dump\n(\nhex2bin\n(\n$hex\n));\n?>"
  },
  {
    "input": "Example #1 chr() example",
    "output": "<?php\n// Assumes the string will be used as ASCII or an ASCII-compatible encoding\n$str\n=\n\"The string ends in escape: \"\n;\n$str\n.=\nchr\n(\n27\n);\n/* add an escape character at the end of $str */\n/* Often this is more useful */\n$str\n=\nsprintf\n(\n\"The string ends in escape: %c\"\n,\n27\n);\n?>"
  },
  {
    "input": "Example #2 Overflow behavior",
    "output": "<?php\necho\nchr\n(-\n159\n),\nchr\n(\n833\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #3 Building a UTF-8 string from individual bytes",
    "output": "<?php\n$str\n=\nchr\n(\n240\n) .\nchr\n(\n159\n) .\nchr\n(\n144\n) .\nchr\n(\n152\n);\necho\n$str\n;\n?>"
  },
  {
    "input": "Example #1 chunk_split() example",
    "output": "<?php\n// format $data using RFC 2045 semantics\n$new_string\n=\nchunk_split\n(\nbase64_encode\n(\n$data\n));\n?>"
  },
  {
    "input": "Example #1 convert_uudecode() example",
    "output": "<?php\necho\nconvert_uudecode\n(\n\"+22!L;W9E(%!(4\\\"$`\\n`\"\n);\n?>"
  },
  {
    "input": "Example #1 convert_uuencode() example",
    "output": "<?php\n$some_string\n=\n\"test\\ntext text\\r\\n\"\n;\necho\nconvert_uuencode\n(\n$some_string\n);\n?>"
  },
  {
    "input": "Example #1 count_chars() example",
    "output": "<?php\n$data\n=\n\"Two Ts and one F.\"\n;\nforeach (\ncount_chars\n(\n$data\n,\n1\n) as\n$i\n=>\n$val\n) {\n   echo\n\"There were\n$val\n instance(s) of \\\"\"\n,\nchr\n(\n$i\n) ,\n\"\\\" in the string.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 crypt() examples",
    "output": "<?php\n$user_input\n=\n'rasmuslerdorf'\n;\n$hashed_password\n=\n'$6$rounds=1000000$NJy4rIPjpOaU$0ACEYGg/aKCY3v8O8AfyiO7CTfZQ8/W231Qfh2tRLmfdvFD6XfHk12u6hMr9cYIA4hnpjLNSTRtUwYr9km9Ij/'\n;\n// Validate an existing crypt() hash in a way that is compatible with non-PHP software.\nif (\nhash_equals\n(\n$hashed_password\n,\ncrypt\n(\n$user_input\n,\n$hashed_password\n))) {\n   echo\n\"Password verified!\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 echo examples",
    "output": "<?php\necho\n\"echo does not require parentheses.\"\n;\n// Strings can either be passed individually as multiple arguments or\n// concatenated together and passed as a single argument\necho\n'This '\n,\n'string '\n,\n'was '\n,\n'made '\n,\n'with multiple parameters.'\n,\n\"\\n\"\n;\necho\n'This '\n.\n'string '\n.\n'was '\n.\n'made '\n.\n'with concatenation.'\n.\n\"\\n\"\n;\n// No newline or space is added; the below outputs \"helloworld\" all on one line\necho\n\"hello\"\n;\necho\n\"world\"\n;\n// Same as above\necho\n\"hello\"\n,\n\"world\"\n;\necho\n\"This string spans\nmultiple lines. The newlines will be\noutput as well\"\n;\necho\n\"This string spans\\nmultiple lines. The newlines will be\\noutput as well.\"\n;\n// The argument can be any expression which produces a string\n$foo\n=\n\"example\"\n;\necho\n\"foo is\n$foo\n\"\n;\n// foo is example\n$fruits\n= [\n\"lemon\"\n,\n\"orange\"\n,\n\"banana\"\n];\necho\nimplode\n(\n\" and \"\n,\n$fruits\n);\n// lemon and orange and banana\n// Non-string expressions are coerced to string, even if declare(strict_types=1) is used\necho\n6\n*\n7\n;\n// 42\n// Because echo does not behave as an expression, the following code is invalid.\n(\n$some_var\n) ? echo\n'true'\n: echo\n'false'\n;\n// However, the following examples will work:\n(\n$some_var\n) ? print\n'true'\n: print\n'false'\n;\n// print is also a construct, but\n                                            // it is a valid expression, returning 1,\n                                            // so it may be used in this context.\necho\n$some_var\n?\n'true'\n:\n'false'\n;\n// evaluating the expression first and passing it to echo\n?>"
  },
  {
    "input": "Example #1 explode() examples",
    "output": "<?php\n// Example 1\n$pizza\n=\n\"piece1 piece2 piece3 piece4 piece5 piece6\"\n;\n$pieces\n=\nexplode\n(\n\" \"\n,\n$pizza\n);\necho\n$pieces\n[\n0\n];\n// piece1\necho\n$pieces\n[\n1\n];\n// piece2\n// Example 2\n$data\n=\n\"foo:*:1023:1000::/home/foo:/bin/sh\"\n;\nlist(\n$user\n,\n$pass\n,\n$uid\n,\n$gid\n,\n$gecos\n,\n$home\n,\n$shell\n) =\nexplode\n(\n\":\"\n,\n$data\n);\necho\n$user\n;\n// foo\necho\n$pass\n;\n// *\n?>"
  },
  {
    "input": "Example #2 explode() return examples",
    "output": "<?php\n/*\n   A string that doesn't contain the delimiter will simply\n   return a one-length array of the original string.\n*/\n$input1\n=\n\"hello\"\n;\n$input2\n=\n\"hello,there\"\n;\n$input3\n=\n','\n;\nvar_dump\n(\nexplode\n(\n','\n,\n$input1\n) );\nvar_dump\n(\nexplode\n(\n','\n,\n$input2\n) );\nvar_dump\n(\nexplode\n(\n','\n,\n$input3\n) );\n?>"
  },
  {
    "input": "Example #3 limit parameter examples",
    "output": "<?php\n$str\n=\n'one|two|three|four'\n;\n// positive limit\nprint_r\n(\nexplode\n(\n'|'\n,\n$str\n,\n2\n));\n// negative limit\nprint_r\n(\nexplode\n(\n'|'\n,\n$str\n, -\n1\n));\n?>"
  },
  {
    "input": "Example #1 fprintf(): zero-padded integers",
    "output": "<?php\nif (!(\n$fp\n=\nfopen\n(\n'date.txt'\n,\n'w'\n))) {\n    return;\n}\nfprintf\n(\n$fp\n,\n\"%04d-%02d-%02d\"\n,\n$year\n,\n$month\n,\n$day\n);\n// will write the formatted ISO date to date.txt\n?>"
  },
  {
    "input": "Example #2 fprintf(): formatting currency",
    "output": "<?php\nif (!(\n$fp\n=\nfopen\n(\n'currency.txt'\n,\n'w'\n))) {\n    return;\n}\n$money1\n=\n68.75\n;\n$money2\n=\n54.35\n;\n$money\n=\n$money1\n+\n$money2\n;\n// echo $money will output \"123.1\";\n$len\n=\nfprintf\n(\n$fp\n,\n'%01.2f'\n,\n$money\n);\n// will write \"123.10\" to currency.txt\necho\n\"wrote\n$len\n bytes to currency.txt\"\n;\n// use the return value of fprintf to determine how many bytes we wrote\n?>"
  },
  {
    "input": "Example #1 Translation Table Example",
    "output": "<?php\nvar_dump\n(\nget_html_translation_table\n(\nHTML_ENTITIES\n,\nENT_QUOTES\n|\nENT_HTML5\n));\n?>"
  },
  {
    "input": "Example #1 hex2bin() example",
    "output": "<?php\n$hex\n=\nhex2bin\n(\n\"6578616d706c65206865782064617461\"\n);\nvar_dump\n(\n$hex\n);\n?>"
  },
  {
    "input": "Example #1 Decoding HTML entities",
    "output": "<?php\n$orig\n=\n\"I'll \\\"walk\\\" the <b>dog</b> now\"\n;\n$a\n=\nhtmlentities\n(\n$orig\n);\n$b\n=\nhtml_entity_decode\n(\n$a\n);\necho\n$a\n;\n// I'll &quot;walk&quot; the &lt;b&gt;dog&lt;/b&gt; now\necho\n$b\n;\n// I'll \"walk\" the <b>dog</b> now\n?>"
  },
  {
    "input": "Example #1 A htmlentities() example",
    "output": "<?php\n$str\n=\n\"A 'quote' is <b>bold</b>\"\n;\necho\nhtmlentities\n(\n$str\n);\necho\n\"\\n\\n\"\n;\necho\nhtmlentities\n(\n$str\n,\nENT_COMPAT\n);\n?>"
  },
  {
    "input": "Example #2 Usage of ENT_IGNORE",
    "output": "<?php\n$str\n=\n\"\\x8F!!!\"\n;\n// Outputs an empty string\necho\nhtmlentities\n(\n$str\n,\nENT_QUOTES\n,\n\"UTF-8\"\n);\n// Outputs \"!!!\"\necho\nhtmlentities\n(\n$str\n,\nENT_QUOTES\n|\nENT_IGNORE\n,\n\"UTF-8\"\n);\n?>"
  },
  {
    "input": "Example #1 htmlspecialchars() example",
    "output": "<?php\n$new\n=\nhtmlspecialchars\n(\n\"<a href='test'>Test</a>\"\n,\nENT_QUOTES\n);\necho\n$new\n;\n// &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;\n?>"
  },
  {
    "input": "Example #1 A htmlspecialchars_decode() example",
    "output": "<?php\n$str\n=\n\"<p>this -&gt; &quot;</p>\\n\"\n;\necho\nhtmlspecialchars_decode\n(\n$str\n);\n// note that here the quotes aren't converted\necho\nhtmlspecialchars_decode\n(\n$str\n,\nENT_NOQUOTES\n);\n?>"
  },
  {
    "input": "Example #1 implode() example",
    "output": "<?php\n$array\n= [\n'lastname'\n,\n'email'\n,\n'phone'\n];\nvar_dump\n(\nimplode\n(\n\",\"\n,\n$array\n));\n// string(20) \"lastname,email,phone\"\n// Empty string when using an empty array:\nvar_dump\n(\nimplode\n(\n'hello'\n, []));\n// string(0) \"\"\n// The separator is optional:\nvar_dump\n(\nimplode\n([\n'a'\n,\n'b'\n,\n'c'\n]));\n// string(3) \"abc\"\n?>"
  },
  {
    "input": "Example #1 lcfirst() example",
    "output": "<?php\n$foo\n=\n'HelloWorld'\n;\n$foo\n=\nlcfirst\n(\n$foo\n);\n// helloWorld\n$bar\n=\n'HELLO WORLD!'\n;\n$bar\n=\nlcfirst\n(\n$bar\n);\n// hELLO WORLD!\n$bar\n=\nlcfirst\n(\nstrtoupper\n(\n$bar\n));\n// hELLO WORLD!\n?>"
  },
  {
    "input": "Example #1 levenshtein() example",
    "output": "<?php\n// input misspelled word\n$input\n=\n'carrrot'\n;\n// array of words to check against\n$words\n= array(\n'apple'\n,\n'pineapple'\n,\n'banana'\n,\n'orange'\n,\n\n'radish'\n,\n'carrot'\n,\n'pea'\n,\n'bean'\n,\n'potato'\n);\n// no shortest distance found, yet\n$shortest\n= -\n1\n;\n// loop through words to find the closest\nforeach (\n$words\nas\n$word\n) {\n\n// calculate the distance between the input word,\n    // and the current word\n\n$lev\n=\nlevenshtein\n(\n$input\n,\n$word\n);\n\n// check for an exact match\n\nif (\n$lev\n==\n0\n) {\n\n// closest word is this one (exact match)\n\n$closest\n=\n$word\n;\n\n$shortest\n=\n0\n;\n\n// break out of the loop; we've found an exact match\n\nbreak;\n    }\n\n// if this distance is less than the next found shortest\n    // distance, OR if a next shortest word has not yet been found\n\nif (\n$lev\n<=\n$shortest\n||\n$shortest\n<\n0\n) {\n\n// set the closest match, and shortest distance\n\n$closest\n=\n$word\n;\n\n$shortest\n=\n$lev\n;\n    }\n}\necho\n\"Input word:\n$input\n\\n\"\n;\nif (\n$shortest\n==\n0\n) {\n    echo\n\"Exact match found:\n$closest\n\\n\"\n;\n} else {\n    echo\n\"Did you mean:\n$closest\n?\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 localeconv() example",
    "output": "<?php\nif (\nfalse\n!==\nsetlocale\n(\nLC_ALL\n,\n'nl_NL.UTF-8@euro'\n)) {\n\n$locale_info\n=\nlocaleconv\n();\n\nprint_r\n(\n$locale_info\n);\n}\n?>"
  },
  {
    "input": "Example #1 Usage example of ltrim()",
    "output": "<?php\n$text\n=\n\"\\t\\tThese are a few words :) ...  \"\n;\n$binary\n=\n\"\\x09Example string\\x0A\"\n;\n$hello\n=\n\"Hello World\"\n;\nvar_dump\n(\n$text\n,\n$binary\n,\n$hello\n);\nprint\n\"\\n\"\n;\n$trimmed\n=\nltrim\n(\n$text\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\nltrim\n(\n$text\n,\n\" \\t.\"\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\nltrim\n(\n$hello\n,\n\"Hdle\"\n);\nvar_dump\n(\n$trimmed\n);\n// trim the ASCII control characters at the beginning of $binary\n// (from 0 to 31 inclusive)\n$clean\n=\nltrim\n(\n$binary\n,\n\"\\x00..\\x1F\"\n);\nvar_dump\n(\n$clean\n);\n?>"
  },
  {
    "input": "Example #1 A md5() example",
    "output": "<?php\n$str\n=\n'apple'\n;\nif (\nmd5\n(\n$str\n) ===\n'1f3870be274f6c49b3e31a0c6728957f'\n) {\n    echo\n\"Would you like a green or red apple?\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Usage example of md5_file()",
    "output": "<?php\n$file\n=\n'php-5.3.0alpha2-Win32-VC9-x64.zip'\n;\necho\n'MD5 file hash of '\n.\n$file\n.\n': '\n.\nmd5_file\n(\n$file\n);\n?>"
  },
  {
    "input": "Example #1 metaphone() basic example",
    "output": "<?php\nvar_dump\n(\nmetaphone\n(\n'programming'\n));\nvar_dump\n(\nmetaphone\n(\n'programmer'\n));\n?>"
  },
  {
    "input": "Example #2 Using the max_phonemes parameter",
    "output": "<?php\nvar_dump\n(\nmetaphone\n(\n'programming'\n,\n5\n));\nvar_dump\n(\nmetaphone\n(\n'programmer'\n,\n5\n));\n?>"
  },
  {
    "input": "Example #1 nl_langinfo() example",
    "output": "<?php\nvar_dump\n(\nnl_langinfo\n(\nCODESET\n));\nvar_dump\n(\nnl_langinfo\n(\nYESEXPR\n));\n?>"
  },
  {
    "input": "Example #1 Using nl2br()",
    "output": "<?php\necho\nnl2br\n(\n\"foo isn't\\n bar\"\n);\n?>"
  },
  {
    "input": "Example #2 Generating valid HTML markup using the use_xhtml parameter",
    "output": "<?php\necho\nnl2br\n(\n\"Welcome\\r\\nThis is my HTML document\"\n,\nfalse\n);\n?>"
  },
  {
    "input": "Example #3 Various newline separators",
    "output": "<?php\n$string\n=\n\"This\\r\\nis\\n\\ra\\nstring\\r\"\n;\necho\nnl2br\n(\n$string\n);\n?>"
  },
  {
    "input": "Example #1 ord() example",
    "output": "<?php\n$str\n=\n\"\\n\"\n;\nif (\nord\n(\n$str\n) ==\n10\n) {\n    echo\n\"The first character of \\$str is a line feed.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Examining the individual bytes of a UTF-8 string",
    "output": "<?php\ndeclare(\nencoding\n=\n'UTF-8'\n);\n$str\n=\n\"🐘\"\n;\nfor (\n$pos\n=\n0\n;\n$pos\n<\nstrlen\n(\n$str\n);\n$pos\n++ ) {\n\n$byte\n=\nsubstr\n(\n$str\n,\n$pos\n);\n echo\n'Byte '\n.\n$pos\n.\n' of $str has value '\n.\nord\n(\n$byte\n) .\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Using parse_str()",
    "output": "<?php\n$str\n=\n\"first=value&arr[]=foo+bar&arr[]=baz\"\n;\n// Recommended\nparse_str\n(\n$str\n,\n$output\n);\necho\n$output\n[\n'first'\n];\n// value\necho\n$output\n[\n'arr'\n][\n0\n];\n// foo bar\necho\n$output\n[\n'arr'\n][\n1\n];\n// baz\n// DISCOURAGED\nparse_str\n(\n$str\n);\necho\n$first\n;\n// value\necho\n$arr\n[\n0\n];\n// foo bar\necho\n$arr\n[\n1\n];\n// baz\n?>"
  },
  {
    "input": "Example #2 parse_str() name mangling",
    "output": "<?php\nparse_str\n(\n\"My Value=Something\"\n);\necho\n$My_Value\n;\n// Something\nparse_str\n(\n\"My Value=Something\"\n,\n$output\n);\necho\n$output\n[\n'My_Value'\n];\n// Something\n?>"
  },
  {
    "input": "Example #1 print examples",
    "output": "<?php\nprint\n\"print does not require parentheses.\"\n;\n// No newline or space is added; the below outputs \"helloworld\" all on one line\nprint\n\"hello\"\n;\nprint\n\"world\"\n;\nprint\n\"This string spans\nmultiple lines. The newlines will be\noutput as well\"\n;\nprint\n\"This string spans\\nmultiple lines. The newlines will be\\noutput as well.\"\n;\n// The argument can be any expression which produces a string\n$foo\n=\n\"example\"\n;\nprint\n\"foo is\n$foo\n\"\n;\n// foo is example\n$fruits\n= [\n\"lemon\"\n,\n\"orange\"\n,\n\"banana\"\n];\nprint\nimplode\n(\n\" and \"\n,\n$fruits\n);\n// lemon and orange and banana\n// Non-string expressions are coerced to string, even if declare(strict_types=1) is used\nprint\n6\n*\n7\n;\n// 42\n// Because print has a return value, it can be used in expressions\n// The following outputs \"hello world\"\nif ( print\n\"hello\"\n) {\n    echo\n\" world\"\n;\n}\n// The following outputs \"true\"\n(\n1\n===\n1\n) ? print\n'true'\n: print\n'false'\n;\n?>"
  },
  {
    "input": "Example #1 printf(): various examples",
    "output": "<?php\n$n\n=\n43951789\n;\n$u\n= -\n43951789\n;\n$c\n=\n65\n;\n// ASCII 65 is 'A'\n// notice the double %%, this prints a literal '%' character\nprintf\n(\n\"%%b = '%b'\\n\"\n,\n$n\n);\n// binary representation\nprintf\n(\n\"%%c = '%c'\\n\"\n,\n$c\n);\n// print the ascii character, same as chr() function\nprintf\n(\n\"%%d = '%d'\\n\"\n,\n$n\n);\n// standard integer representation\nprintf\n(\n\"%%e = '%e'\\n\"\n,\n$n\n);\n// scientific notation\nprintf\n(\n\"%%u = '%u'\\n\"\n,\n$n\n);\n// unsigned integer representation of a positive integer\nprintf\n(\n\"%%u = '%u'\\n\"\n,\n$u\n);\n// unsigned integer representation of a negative integer\nprintf\n(\n\"%%f = '%f'\\n\"\n,\n$n\n);\n// floating point representation\nprintf\n(\n\"%%o = '%o'\\n\"\n,\n$n\n);\n// octal representation\nprintf\n(\n\"%%s = '%s'\\n\"\n,\n$n\n);\n// string representation\nprintf\n(\n\"%%x = '%x'\\n\"\n,\n$n\n);\n// hexadecimal representation (lower-case)\nprintf\n(\n\"%%X = '%X'\\n\"\n,\n$n\n);\n// hexadecimal representation (upper-case)\nprintf\n(\n\"%%+d = '%+d'\\n\"\n,\n$n\n);\n// sign specifier on a positive integer\nprintf\n(\n\"%%+d = '%+d'\\n\"\n,\n$u\n);\n// sign specifier on a negative integer\n?>"
  },
  {
    "input": "Example #2 printf(): string specifiers",
    "output": "<?php\n$s\n=\n'monkey'\n;\n$t\n=\n'many monkeys'\n;\nprintf\n(\n\"[%s]\\n\"\n,\n$s\n);\n// standard string output\nprintf\n(\n\"[%10s]\\n\"\n,\n$s\n);\n// right-justification with spaces\nprintf\n(\n\"[%-10s]\\n\"\n,\n$s\n);\n// left-justification with spaces\nprintf\n(\n\"[%010s]\\n\"\n,\n$s\n);\n// zero-padding works on strings too\nprintf\n(\n\"[%'#10s]\\n\"\n,\n$s\n);\n// use the custom padding character '#'\nprintf\n(\n\"[%'#*s]\\n\"\n,\n10\n,\n$s\n);\n// Provide the padding width as an additional argument\nprintf\n(\n\"[%10.9s]\\n\"\n,\n$t\n);\n// right-justification but with a cutoff of 8 characters\nprintf\n(\n\"[%-10.9s]\\n\"\n,\n$t\n);\n// left-justification but with a cutoff of 8 characters\n?>"
  },
  {
    "input": "Example #1 quoted_printable_decode() example",
    "output": "<?php\n$encoded\n=\nquoted_printable_encode\n(\n'Möchten Sie ein paar Äpfel?'\n);\nvar_dump\n(\n$encoded\n);\nvar_dump\n(\nquoted_printable_decode\n(\n$encoded\n));\n?>"
  },
  {
    "input": "Example #1 quoted_printable_encode() example",
    "output": "<?php\n$encoded\n=\nquoted_printable_encode\n(\n'Möchten Sie ein paar Äpfel?'\n);\nvar_dump\n(\n$encoded\n);\nvar_dump\n(\nquoted_printable_decode\n(\n$encoded\n));\n?>"
  },
  {
    "input": "Example #1 quotemeta() example",
    "output": "<?php\nvar_dump\n(\nquotemeta\n(\n'PHP is a popular scripting language. Fast, flexible, and pragmatic.'\n));\n?>"
  },
  {
    "input": "Example #1 Usage example of rtrim()",
    "output": "<?php\n$text\n=\n\"\\t\\tThese are a few words :) ...  \"\n;\n$binary\n=\n\"\\x09Example string\\x0A\"\n;\n$hello\n=\n\"Hello World\"\n;\nvar_dump\n(\n$text\n,\n$binary\n,\n$hello\n);\nprint\n\"\\n\"\n;\n$trimmed\n=\nrtrim\n(\n$text\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\nrtrim\n(\n$text\n,\n\" \\t.\"\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\nrtrim\n(\n$hello\n,\n\"Hdle\"\n);\nvar_dump\n(\n$trimmed\n);\n// trim the ASCII control characters at the end of $binary\n// (from 0 to 31 inclusive)\n$clean\n=\nrtrim\n(\n$binary\n,\n\"\\x00..\\x1F\"\n);\nvar_dump\n(\n$clean\n);\n?>"
  },
  {
    "input": "Example #1 setlocale() Examples",
    "output": "<?php\n/* Set locale to Dutch */\nsetlocale\n(\nLC_ALL\n,\n'nl_NL'\n);\n/* Output: vrijdag 22 december 1978 */\necho\nstrftime\n(\n\"%A %e %B %Y\"\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n12\n,\n22\n,\n1978\n));\n/* try different possible locale names for german */\n$loc_de\n=\nsetlocale\n(\nLC_ALL\n,\n'de_DE@euro'\n,\n'de_DE'\n,\n'de'\n,\n'ge'\n);\necho\n\"Preferred locale for german on this system is '\n$loc_de\n'\"\n;\n?>"
  },
  {
    "input": "Example #2 setlocale() Examples for Windows",
    "output": "<?php\n/* Set locale to Dutch */\nsetlocale\n(\nLC_ALL\n,\n'nld_nld'\n);\n/* Output: vrijdag 22 december 1978 */\necho\nstrftime\n(\n\"%A %d %B %Y\"\n,\nmktime\n(\n0\n,\n0\n,\n0\n,\n12\n,\n22\n,\n1978\n));\n/* try different possible locale names for german */\n$loc_de\n=\nsetlocale\n(\nLC_ALL\n,\n'de_DE@euro'\n,\n'de_DE'\n,\n'deu_deu'\n);\necho\n\"Preferred locale for german on this system is '\n$loc_de\n'\"\n;\n?>"
  },
  {
    "input": "Example #1 A sha1() example",
    "output": "<?php\n$str\n=\n'apple'\n;\nif (\nsha1\n(\n$str\n) ===\n'd0be2dc421be4fcd0172e5afceea3970e2f3d940'\n) {\n    echo\n\"Would you like a green or red apple?\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sha1_file() example",
    "output": "<?php\nforeach(\nglob\n(\n'/home/Kalle/myproject/*.php'\n) as\n$ent\n)\n{\n    if(\nis_dir\n(\n$ent\n))\n    {\n        continue;\n    }\n    echo\n$ent\n.\n' (SHA1: '\n.\nsha1_file\n(\n$ent\n) .\n')'\n,\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Soundex Examples",
    "output": "<?php\nsoundex\n(\n\"Euler\"\n)       ==\nsoundex\n(\n\"Ellery\"\n);\n// E460\nsoundex\n(\n\"Gauss\"\n)       ==\nsoundex\n(\n\"Ghosh\"\n);\n// G200\nsoundex\n(\n\"Hilbert\"\n)     ==\nsoundex\n(\n\"Heilbronn\"\n);\n// H416\nsoundex\n(\n\"Knuth\"\n)       ==\nsoundex\n(\n\"Kant\"\n);\n// K530\nsoundex\n(\n\"Lloyd\"\n)       ==\nsoundex\n(\n\"Ladd\"\n);\n// L300\nsoundex\n(\n\"Lukasiewicz\"\n) ==\nsoundex\n(\n\"Lissajous\"\n);\n// L222\n?>"
  },
  {
    "input": "Example #2 Specifying padding character",
    "output": "<?php\necho\nsprintf\n(\n\"%'.9d\\n\"\n,\n123\n);\necho\nsprintf\n(\n\"%'.09d\\n\"\n,\n123\n);\n?>"
  },
  {
    "input": "Example #3 Position specifier with other specifiers",
    "output": "<?php\n$format\n=\n'The %2$s contains %1$04d monkeys'\n;\necho\nsprintf\n(\n$format\n,\n$num\n,\n$location\n);\n?>"
  },
  {
    "input": "Example #4 sprintf(): zero-padded integers",
    "output": "<?php\n$isodate\n=\nsprintf\n(\n\"%04d-%02d-%02d\"\n,\n$year\n,\n$month\n,\n$day\n);\n?>"
  },
  {
    "input": "Example #5 sprintf(): formatting currency",
    "output": "<?php\n$money1\n=\n68.75\n;\n$money2\n=\n54.35\n;\n$money\n=\n$money1\n+\n$money2\n;\necho\n$money\n;\necho\n\"\\n\"\n;\n$formatted\n=\nsprintf\n(\n\"%01.2f\"\n,\n$money\n);\necho\n$formatted\n;\n?>"
  },
  {
    "input": "Example #6 sprintf(): scientific notation",
    "output": "<?php\n$number\n=\n362525200\n;\necho\nsprintf\n(\n\"%.3e\"\n,\n$number\n);\n?>"
  },
  {
    "input": "Example #1 sscanf() Example",
    "output": "<?php\n// getting the serial number\nlist(\n$serial\n) =\nsscanf\n(\n\"SN/2350001\"\n,\n\"SN/%d\"\n);\n// and the date of manufacturing\n$mandate\n=\n\"January 01 2000\"\n;\nlist(\n$month\n,\n$day\n,\n$year\n) =\nsscanf\n(\n$mandate\n,\n\"%s %d %d\"\n);\necho\n\"Item\n$serial\n was manufactured on:\n$year\n-\"\n.\nsubstr\n(\n$month\n,\n0\n,\n3\n) .\n\"-\n$day\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 sscanf() - using optional parameters",
    "output": "<?php\n// get author info and generate DocBook entry\n$auth\n=\n\"24\\tLewis Carroll\"\n;\n$n\n=\nsscanf\n(\n$auth\n,\n\"%d\\t%s %s\"\n,\n$id\n,\n$first\n,\n$last\n);\necho\n\"<author id='\n$id\n'>\n    <firstname>\n$first\n</firstname>\n    <surname>\n$last\n</surname>\n</author>\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Using the empty string ''",
    "output": "<?php\nif (\nstr_contains\n(\n'abc'\n,\n''\n)) {\n    echo\n\"Checking the existence of the empty string will always return true\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Showing case-sensitivity",
    "output": "<?php\n$string\n=\n'The lazy fox jumped over the fence'\n;\nif (\nstr_contains\n(\n$string\n,\n'lazy'\n)) {\n    echo\n\"The string 'lazy' was found in the string\\n\"\n;\n}\nif (\nstr_contains\n(\n$string\n,\n'Lazy'\n)) {\n    echo\n'The string \"Lazy\" was found in the string'\n;\n} else {\n    echo\n'\"Lazy\" was not found because the case does not match'\n;\n}\n?>"
  },
  {
    "input": "Example #1 Basic str_decrement() example",
    "output": "<?php\n$str\n=\n'ABC'\n;\nvar_dump\n(\nstr_decrement\n(\n$str\n));\n?>"
  },
  {
    "input": "Example #2 str_decrement() example with a carry",
    "output": "<?php\n$str\n=\n'ZA'\n;\nvar_dump\n(\nstr_decrement\n(\n$str\n));\n$str\n=\n'AA'\n;\nvar_dump\n(\nstr_decrement\n(\n$str\n));\n?>"
  },
  {
    "input": "Example #1 Using the empty string ''",
    "output": "<?php\nif (\nstr_ends_with\n(\n'abc'\n,\n''\n)) {\n    echo\n\"All strings end with the empty string\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Showing case-sensitivity",
    "output": "<?php\n$string\n=\n'The lazy fox jumped over the fence'\n;\nif (\nstr_ends_with\n(\n$string\n,\n'fence'\n)) {\n    echo\n\"The string ends with 'fence'\\n\"\n;\n}\nif (\nstr_ends_with\n(\n$string\n,\n'Fence'\n)) {\n    echo\n'The string ends with \"Fence\"'\n;\n} else {\n    echo\n'\"Fence\" was not found because the case does not match'\n;\n}\n?>"
  },
  {
    "input": "Example #1 str_getcsv() example",
    "output": "<?php\n$string\n=\n'PHP,Java,Python,Kotlin,Swift'\n;\n$data\n=\nstr_getcsv\n(\n$string\n);\nvar_dump\n(\n$data\n);\n?>"
  },
  {
    "input": "Example #2 str_getcsv() example with an empty string",
    "output": "<?php\n$string\n=\n''\n;\n$data\n=\nstr_getcsv\n(\n$string\n);\nvar_dump\n(\n$data\n);\n?>"
  },
  {
    "input": "Example #1 Basic str_increment() example",
    "output": "<?php\n$str\n=\n'ABC'\n;\nvar_dump\n(\nstr_increment\n(\n$str\n));\n?>"
  },
  {
    "input": "Example #2 str_increment() example with a carry",
    "output": "<?php\n$str\n=\n'DZ'\n;\nvar_dump\n(\nstr_increment\n(\n$str\n));\n$str\n=\n'ZZ'\n;\nvar_dump\n(\nstr_increment\n(\n$str\n));\n?>"
  },
  {
    "input": "Example #1 str_ireplace() example",
    "output": "<?php\n$bodytag\n=\nstr_ireplace\n(\n\"%body%\"\n,\n\"black\"\n,\n\"<body text=%BODY%>\"\n);\necho\n$bodytag\n;\n// <body text=black>\n?>"
  },
  {
    "input": "Example #1 str_pad() example",
    "output": "<?php\n$input\n=\n\"Alien\"\n;\necho\nstr_pad\n(\n$input\n,\n10\n);\n// produces \"Alien     \"\necho\nstr_pad\n(\n$input\n,\n10\n,\n\"-=\"\n,\nSTR_PAD_LEFT\n);\n// produces \"-=-=-Alien\"\necho\nstr_pad\n(\n$input\n,\n10\n,\n\"_\"\n,\nSTR_PAD_BOTH\n);\n// produces \"__Alien___\"\necho\nstr_pad\n(\n$input\n,\n6\n,\n\"___\"\n);\n// produces \"Alien_\"\necho\nstr_pad\n(\n$input\n,\n3\n,\n\"*\"\n);\n// produces \"Alien\"\n?>"
  },
  {
    "input": "Example #1 str_repeat() example",
    "output": "<?php\necho\nstr_repeat\n(\n\"-=\"\n,\n10\n);\n?>"
  },
  {
    "input": "Example #1 Basic str_replace() examples",
    "output": "<?php\n// Provides: <body text='black'>\n$bodytag\n=\nstr_replace\n(\n\"%body%\"\n,\n\"black\"\n,\n\"<body text='%body%'>\"\n);\n// Provides: Hll Wrld f PHP\n$vowels\n= array(\n\"a\"\n,\n\"e\"\n,\n\"i\"\n,\n\"o\"\n,\n\"u\"\n,\n\"A\"\n,\n\"E\"\n,\n\"I\"\n,\n\"O\"\n,\n\"U\"\n);\n$onlyconsonants\n=\nstr_replace\n(\n$vowels\n,\n\"\"\n,\n\"Hello World of PHP\"\n);\n// Provides: You should eat pizza, beer, and ice cream every day\n$phrase\n=\n\"You should eat fruits, vegetables, and fiber every day.\"\n;\n$healthy\n= array(\n\"fruits\"\n,\n\"vegetables\"\n,\n\"fiber\"\n);\n$yummy\n= array(\n\"pizza\"\n,\n\"beer\"\n,\n\"ice cream\"\n);\n$newphrase\n=\nstr_replace\n(\n$healthy\n,\n$yummy\n,\n$phrase\n);\n// Provides: 2\n$str\n=\nstr_replace\n(\n\"ll\"\n,\n\"\"\n,\n\"good golly miss molly!\"\n,\n$count\n);\necho\n$count\n;\n?>"
  },
  {
    "input": "Example #2 Examples of potential str_replace() gotchas",
    "output": "<?php\n// Order of replacement\n$str\n=\n\"Line 1\\nLine 2\\rLine 3\\r\\nLine 4\\n\"\n;\n$order\n= array(\n\"\\r\\n\"\n,\n\"\\n\"\n,\n\"\\r\"\n);\n$replace\n=\n'<br />'\n;\n// Processes \\r\\n's first so they aren't converted twice.\n$newstr\n=\nstr_replace\n(\n$order\n,\n$replace\n,\n$str\n);\n// Outputs F because A is replaced with B, then B is replaced with C, and so on...\n// Finally E is replaced with F, because of left to right replacements.\n$search\n= array(\n'A'\n,\n'B'\n,\n'C'\n,\n'D'\n,\n'E'\n);\n$replace\n= array(\n'B'\n,\n'C'\n,\n'D'\n,\n'E'\n,\n'F'\n);\n$subject\n=\n'A'\n;\necho\nstr_replace\n(\n$search\n,\n$replace\n,\n$subject\n);\n// Outputs: apearpearle pear\n// For the same reason mentioned above\n$letters\n= array(\n'a'\n,\n'p'\n);\n$fruit\n= array(\n'apple'\n,\n'pear'\n);\n$text\n=\n'a p'\n;\n$output\n=\nstr_replace\n(\n$letters\n,\n$fruit\n,\n$text\n);\necho\n$output\n;\n?>"
  },
  {
    "input": "Example #1 str_rot13() example",
    "output": "<?php\necho\nstr_rot13\n(\n'PHP 4.3.0'\n);\n// CUC 4.3.0\n?>"
  },
  {
    "input": "Example #1 str_shuffle() example",
    "output": "<?php\n$str\n=\n'abcdef'\n;\n$shuffled\n=\nstr_shuffle\n(\n$str\n);\n// This will echo something like: bfdaec\necho\n$shuffled\n;\n?>"
  },
  {
    "input": "Example #1 Example uses of str_split()",
    "output": "<?php\n$str\n=\n\"Hello Friend\"\n;\n$arr1\n=\nstr_split\n(\n$str\n);\n$arr2\n=\nstr_split\n(\n$str\n,\n3\n);\nprint_r\n(\n$arr1\n);\nprint_r\n(\n$arr2\n);\n?>"
  },
  {
    "input": "Example #1 Using the empty string ''",
    "output": "<?php\nif (\nstr_starts_with\n(\n'abc'\n,\n''\n)) {\n    echo\n\"All strings start with the empty string\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Showing case-sensitivity",
    "output": "<?php\n$string\n=\n'The lazy fox jumped over the fence'\n;\nif (\nstr_starts_with\n(\n$string\n,\n'The'\n)) {\n    echo\n\"The string starts with 'The'\\n\"\n;\n}\nif (\nstr_starts_with\n(\n$string\n,\n'the'\n)) {\n    echo\n'The string starts with \"the\"'\n;\n} else {\n    echo\n'\"the\" was not found because the case does not match'\n;\n}\n?>"
  },
  {
    "input": "Example #1 A str_word_count() example",
    "output": "<?php\n$str\n=\n\"Hello fri3nd, you're\n       looking          good today!\"\n;\nprint_r\n(\nstr_word_count\n(\n$str\n,\n1\n));\nprint_r\n(\nstr_word_count\n(\n$str\n,\n2\n));\nprint_r\n(\nstr_word_count\n(\n$str\n,\n1\n,\n'àáãç3'\n));\necho\nstr_word_count\n(\n$str\n);\n?>"
  },
  {
    "input": "Example #1 strcasecmp() example",
    "output": "<?php\n$var1\n=\n\"Hello\"\n;\n$var2\n=\n\"hello\"\n;\nif (\nstrcasecmp\n(\n$var1\n,\n$var2\n) ==\n0\n) {\n    echo\n'$var1 is equal to $var2 in a case-insensitive string comparison'\n;\n}\n?>"
  },
  {
    "input": "Example #1 strcmp() example",
    "output": "<?php\n$var1\n=\n\"Hello\"\n;\n$var2\n=\n\"hello\"\n;\nif (\nstrcmp\n(\n$var1\n,\n$var2\n) !==\n0\n) {\n    echo\n'$var1 is not equal to $var2 in a case sensitive string comparison'\n;\n}\n?>"
  },
  {
    "input": "Example #1 strcspn() example",
    "output": "<?php\n$a\n=\nstrcspn\n(\n'banana'\n,\n'a'\n);\n$b\n=\nstrcspn\n(\n'banana'\n,\n'abcd'\n);\n$c\n=\nstrcspn\n(\n'banana'\n,\n'z'\n);\n$d\n=\nstrcspn\n(\n'abcdhelloabcd'\n,\n'a'\n, -\n9\n);\n$e\n=\nstrcspn\n(\n'abcdhelloabcd'\n,\n'a'\n, -\n9\n, -\n5\n);\nvar_dump\n(\n$a\n);\nvar_dump\n(\n$b\n);\nvar_dump\n(\n$c\n);\nvar_dump\n(\n$d\n);\nvar_dump\n(\n$e\n);\n?>"
  },
  {
    "input": "Example #1 strip_tags() example",
    "output": "<?php\n$text\n=\n'<p>Test paragraph.</p><!-- Comment --> <a href=\"#fragment\">Other text</a>'\n;\necho\nstrip_tags\n(\n$text\n);\necho\n\"\\n\"\n;\n// Allow <p> and <a>\necho\nstrip_tags\n(\n$text\n,\n'<p><a>'\n);\n// as of PHP 7.4.0 the line above can be written as:\n// echo strip_tags($text, ['p', 'a']);\n?>"
  },
  {
    "input": "Example #1 stripcslashes() example",
    "output": "<?php\nvar_dump\n(\nstripcslashes\n(\n'I\\'d have a coffee.\\nNot a problem.'\n) ===\n\"I'd have a coffee.\nNot a problem.\"\n);\n// true\n?>"
  },
  {
    "input": "Example #1 stripos() examples",
    "output": "<?php\n$findme\n=\n'a'\n;\n$mystring1\n=\n'xyz'\n;\n$mystring2\n=\n'ABC'\n;\n$pos1\n=\nstripos\n(\n$mystring1\n,\n$findme\n);\n$pos2\n=\nstripos\n(\n$mystring2\n,\n$findme\n);\n// Nope, 'a' is certainly not in 'xyz'\nif (\n$pos1\n===\nfalse\n) {\n    echo\n\"The string '\n$findme\n' was not found in the string '\n$mystring1\n'\"\n;\n}\n// Note our use of ===.  Simply == would not work as expected\n// because the position of 'a' is the 0th (first) character.\nif (\n$pos2\n!==\nfalse\n) {\n    echo\n\"We found '\n$findme\n' in '\n$mystring2\n' at position\n$pos2\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A stripslashes() example",
    "output": "<?php\n$str\n=\n\"Is your name O\\'reilly?\"\n;\n// Outputs: Is your name O'reilly?\necho\nstripslashes\n(\n$str\n);\n?>"
  },
  {
    "input": "Example #2 Using stripslashes() on an array",
    "output": "<?php\nfunction\nstripslashes_deep\n(\n$value\n)\n{\n\n$value\n=\nis_array\n(\n$value\n) ?\n\narray_map\n(\n'stripslashes_deep'\n,\n$value\n) :\n\nstripslashes\n(\n$value\n);\n    return\n$value\n;\n}\n// Example\n$array\n= array(\n\"f\\\\'oo\"\n,\n\"b\\\\'ar\"\n, array(\n\"fo\\\\'o\"\n,\n\"b\\\\'ar\"\n));\n$array\n=\nstripslashes_deep\n(\n$array\n);\n// Output\nprint_r\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #1 stristr() example",
    "output": "<?php\n  $email\n=\n'USER@EXAMPLE.com'\n;\n  echo\nstristr\n(\n$email\n,\n'e'\n);\n// outputs ER@EXAMPLE.com\n\necho\nstristr\n(\n$email\n,\n'e'\n,\ntrue\n);\n// outputs US\n?>"
  },
  {
    "input": "Example #2 Testing if a string is found or not",
    "output": "<?php\n  $string\n=\n'Hello World!'\n;\n  if(\nstristr\n(\n$string\n,\n'earth'\n) ===\nFALSE\n) {\n    echo\n'\"earth\" not found in string'\n;\n  }\n// outputs: \"earth\" not found in string\n?>"
  },
  {
    "input": "Example #3 Using a non \"string\" needle",
    "output": "<?php\n  $string\n=\n'APPLE'\n;\n  echo\nstristr\n(\n$string\n,\n97\n);\n// 97 = lowercase a\n// outputs: APPLE\n?>"
  },
  {
    "input": "Example #1 A strlen() example",
    "output": "<?php\n$str\n=\n'abcdef'\n;\necho\nstrlen\n(\n$str\n);\n// 6\n$str\n=\n' ab cd '\n;\necho\nstrlen\n(\n$str\n);\n// 7\n?>"
  },
  {
    "input": "Example #1 strnatcasecmp() example",
    "output": "<?php\nvar_dump\n(\nstrnatcasecmp\n(\n'Apple'\n,\n'Banana'\n));\nvar_dump\n(\nstrnatcasecmp\n(\n'Banana'\n,\n'Apple'\n));\nvar_dump\n(\nstrnatcasecmp\n(\n'apple'\n,\n'Apple'\n));\n?>"
  },
  {
    "input": "Example #1 strncasecmp() example",
    "output": "<?php\n$var1\n=\n'Hello John'\n;\n$var2\n=\n'hello Doe'\n;\nif (\nstrncasecmp\n(\n$var1\n,\n$var2\n,\n5\n) ===\n0\n) {\n    echo\n'First 5 characters of $var1 and $var2 are equals in a case-insensitive string comparison'\n;\n}\n?>"
  },
  {
    "input": "Example #1 strncmp() example",
    "output": "<?php\n$var1\n=\n'Hello John'\n;\n$var2\n=\n'Hello Doe'\n;\nif (\nstrncmp\n(\n$var1\n,\n$var2\n,\n5\n) ===\n0\n) {\n    echo\n'First 5 characters of $var1 and $var2 are equal in a case-sensitive string comparison'\n;\n}\n?>"
  },
  {
    "input": "Example #1 strpbrk() example",
    "output": "<?php\n$text\n=\n'This is a Simple text.'\n;\n// this echoes \"is is a Simple text.\" because 'i' is matched first\necho\nstrpbrk\n(\n$text\n,\n'mi'\n);\n// this echoes \"Simple text.\" because chars are case sensitive\necho\nstrpbrk\n(\n$text\n,\n'S'\n);\n?>"
  },
  {
    "input": "Example #1 Using ===",
    "output": "<?php\n$mystring\n=\n'abc'\n;\n$findme\n=\n'a'\n;\n$pos\n=\nstrpos\n(\n$mystring\n,\n$findme\n);\n// Note our use of ===.  Simply == would not work as expected\n// because the position of 'a' was the 0th (first) character.\nif (\n$pos\n===\nfalse\n) {\n    echo\n\"The string '\n$findme\n' was not found in the string '\n$mystring\n'\"\n;\n} else {\n    echo\n\"The string '\n$findme\n' was found in the string '\n$mystring\n'\"\n;\n    echo\n\" and exists at position\n$pos\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Using !==",
    "output": "<?php\n$mystring\n=\n'abc'\n;\n$findme\n=\n'a'\n;\n$pos\n=\nstrpos\n(\n$mystring\n,\n$findme\n);\n// The !== operator can also be used.  Using != would not work as expected\n// because the position of 'a' is 0. The statement (0 != false) evaluates\n// to false.\nif (\n$pos\n!==\nfalse\n) {\n     echo\n\"The string '\n$findme\n' was found in the string '\n$mystring\n'\"\n;\n         echo\n\" and exists at position\n$pos\n\"\n;\n} else {\n     echo\n\"The string '\n$findme\n' was not found in the string '\n$mystring\n'\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Using an offset",
    "output": "<?php\n// We can search for the character, ignoring anything before the offset\n$newstring\n=\n'abcdef abcdef'\n;\n$pos\n=\nstrpos\n(\n$newstring\n,\n'a'\n,\n1\n);\n// $pos = 7, not 0\n?>"
  },
  {
    "input": "Example #1 strrchr() example",
    "output": "<?php\n$ext\n=\nstrrchr\n(\n'somefile.txt'\n,\n'.'\n);\necho\n\"file extension:\n$ext\n \\n\"\n;\n$ext\n=\n$ext\n?\nstrtolower\n(\nsubstr\n(\n$ext\n,\n1\n)) :\n''\n;\necho\n\"file extension:\n$ext\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Reversing a string with strrev()",
    "output": "<?php\necho\nstrrev\n(\n\"Hello world!\"\n);\n// outputs \"!dlrow olleH\"\n?>"
  },
  {
    "input": "Example #1 A simple strripos() example",
    "output": "<?php\n$haystack\n=\n'ababcd'\n;\n$needle\n=\n'aB'\n;\n$pos\n=\nstrripos\n(\n$haystack\n,\n$needle\n);\nif (\n$pos\n===\nfalse\n) {\n    echo\n\"Sorry, we did not find (\n$needle\n) in (\n$haystack\n)\"\n;\n} else {\n    echo\n\"Congratulations!\\n\"\n;\n    echo\n\"We found the last (\n$needle\n) in (\n$haystack\n) at position (\n$pos\n)\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Searching with offsets",
    "output": "<?php\n$foo\n=\n\"0123456789a123456789b123456789c\"\n;\n// Looking for '0' from the 0th byte (from the beginning)\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'0'\n,\n0\n));\n// Looking for '0' from the 1st byte (after byte \"0\")\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'0'\n,\n1\n));\n// Looking for '7' from the 21th byte (after byte 20)\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'7'\n,\n20\n));\n// Looking for '7' from the 29th byte (after byte 28)\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'7'\n,\n28\n));\n// Looking for '7' right to left from the 5th byte from the end\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'7'\n, -\n5\n));\n// Looking for 'c' right to left from the 2nd byte from the end\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'c'\n, -\n2\n));\n// Looking for '9c' right to left from the 2nd byte from the end\nvar_dump\n(\nstrrpos\n(\n$foo\n,\n'9c'\n, -\n2\n));\n?>"
  },
  {
    "input": "Example #1 strspn() example",
    "output": "<?php\n// subject does not start with any characters from mask\nvar_dump\n(\nstrspn\n(\n\"foo\"\n,\n\"o\"\n));\n// examine two characters from subject starting at offset 1\nvar_dump\n(\nstrspn\n(\n\"foo\"\n,\n\"o\"\n,\n1\n,\n2\n));\n// examine one character from subject starting at offset 1\nvar_dump\n(\nstrspn\n(\n\"foo\"\n,\n\"o\"\n,\n1\n,\n1\n));\n?>"
  },
  {
    "input": "Example #1 strstr() example",
    "output": "<?php\n$email\n=\n'name@example.com'\n;\n$domain\n=\nstrstr\n(\n$email\n,\n'@'\n);\necho\n$domain\n;\n// prints @example.com\n$user\n=\nstrstr\n(\n$email\n,\n'@'\n,\ntrue\n);\necho\n$user\n;\n// prints name\n?>"
  },
  {
    "input": "Example #1 strtok() example",
    "output": "<?php\n$string\n=\n\"This is\\tan example\\nstring\"\n;\n/* Use tab and newline as tokenizing characters as well  */\n$tok\n=\nstrtok\n(\n$string\n,\n\" \\n\\t\"\n);\nwhile (\n$tok\n!==\nfalse\n) {\n    echo\n\"Word=\n$tok\n<br />\"\n;\n\n$tok\n=\nstrtok\n(\n\" \\n\\t\"\n);\n}\n?>"
  },
  {
    "input": "Example #2 strtok() behavior on empty part found",
    "output": "<?php\n$first_token\n=\nstrtok\n(\n'/something'\n,\n'/'\n);\n$second_token\n=\nstrtok\n(\n'/'\n);\nvar_dump\n(\n$first_token\n,\n$second_token\n);\n?>"
  },
  {
    "input": "Example #3 The difference between strtok() and explode()",
    "output": "<?php\n$string\n=\n\";aaa;;bbb;\"\n;\n$parts\n= [];\n$tok\n=\nstrtok\n(\n$string\n,\n\";\"\n);\nwhile (\n$tok\n!==\nfalse\n) {\n\n$parts\n[] =\n$tok\n;\n\n$tok\n=\nstrtok\n(\n\";\"\n);\n}\necho\njson_encode\n(\n$parts\n),\n\"\\n\"\n;\n$parts\n=\nexplode\n(\n\";\"\n,\n$string\n);\necho\njson_encode\n(\n$parts\n),\n\"\\n\"\n;"
  },
  {
    "input": "Example #1 strtolower() example",
    "output": "<?php\n$str\n=\n\"Mary Had A Little Lamb and She LOVED It So\"\n;\n$str\n=\nstrtolower\n(\n$str\n);\necho\n$str\n;\n// Prints mary had a little lamb and she loved it so\n?>"
  },
  {
    "input": "Example #1 strtoupper() example",
    "output": "<?php\n$str\n=\n\"Mary Had A Little Lamb and She LOVED It So\"\n;\n$str\n=\nstrtoupper\n(\n$str\n);\necho\n$str\n;\n// Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\n?>"
  },
  {
    "input": "Example #1 strtr() example",
    "output": "<?php\n//In this form, strtr() does byte-by-byte translation\n//Therefore, we are assuming a single-byte encoding here:\n$addr\n=\nstrtr\n(\n$addr\n,\n\"äåö\"\n,\n\"aao\"\n);\n?>"
  },
  {
    "input": "Example #2 strtr() example with two arguments",
    "output": "<?php\n$trans\n= array(\n\"h\"\n=>\n\"-\"\n,\n\"hello\"\n=>\n\"hi\"\n,\n\"hi\"\n=>\n\"hello\"\n);\necho\nstrtr\n(\n\"hi all, I said hello\"\n,\n$trans\n);\n?>"
  },
  {
    "input": "Example #3 strtr() behavior comparison",
    "output": "<?php\necho\nstrtr\n(\n\"baab\"\n,\n\"ab\"\n,\n\"01\"\n),\n\"\\n\"\n;\n$trans\n= array(\n\"ab\"\n=>\n\"01\"\n);\necho\nstrtr\n(\n\"baab\"\n,\n$trans\n);\n?>"
  },
  {
    "input": "Example #1 Using a negative offset",
    "output": "<?php\n$rest\n=\nsubstr\n(\n\"abcdef\"\n, -\n1\n);\n// returns \"f\"\n$rest\n=\nsubstr\n(\n\"abcdef\"\n, -\n2\n);\n// returns \"ef\"\n$rest\n=\nsubstr\n(\n\"abcdef\"\n, -\n3\n,\n1\n);\n// returns \"d\"\n?>"
  },
  {
    "input": "Example #2 Using a negative length",
    "output": "<?php\n$rest\n=\nsubstr\n(\n\"abcdef\"\n,\n0\n, -\n1\n);\n// returns \"abcde\"\n$rest\n=\nsubstr\n(\n\"abcdef\"\n,\n2\n, -\n1\n);\n// returns \"cde\"\n$rest\n=\nsubstr\n(\n\"abcdef\"\n,\n4\n, -\n4\n);\n// returns \"\"; prior to PHP 8.0.0, false was returned\n$rest\n=\nsubstr\n(\n\"abcdef\"\n, -\n3\n, -\n1\n);\n// returns \"de\"\n?>"
  },
  {
    "input": "Example #3 Basic substr() usage",
    "output": "<?php\necho\nsubstr\n(\n'abcdef'\n,\n1\n);\n// bcdef\necho\nsubstr\n(\n\"abcdef\"\n,\n1\n,\nnull\n);\n// bcdef; prior to PHP 8.0.0, empty string was returned\necho\nsubstr\n(\n'abcdef'\n,\n1\n,\n3\n);\n// bcd\necho\nsubstr\n(\n'abcdef'\n,\n0\n,\n4\n);\n// abcd\necho\nsubstr\n(\n'abcdef'\n,\n0\n,\n8\n);\n// abcdef\necho\nsubstr\n(\n'abcdef'\n, -\n1\n,\n1\n);\n// f\n// Accessing single characters in a string\n// can also be achieved using \"square brackets\"\n$string\n=\n'abcdef'\n;\necho\n$string\n[\n0\n];\n// a\necho\n$string\n[\n3\n];\n// d\necho\n$string\n[\nstrlen\n(\n$string\n)-\n1\n];\n// f\n?>"
  },
  {
    "input": "Example #4 substr() casting behaviour",
    "output": "<?php\nclass\napple\n{\n    public function\n__toString\n() {\n        return\n\"green\"\n;\n    }\n}\necho\n\"1) \"\n.\nvar_export\n(\nsubstr\n(\n\"pear\"\n,\n0\n,\n2\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"2) \"\n.\nvar_export\n(\nsubstr\n(\n54321\n,\n0\n,\n2\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"3) \"\n.\nvar_export\n(\nsubstr\n(new\napple\n(),\n0\n,\n2\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"4) \"\n.\nvar_export\n(\nsubstr\n(\ntrue\n,\n0\n,\n1\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"5) \"\n.\nvar_export\n(\nsubstr\n(\nfalse\n,\n0\n,\n1\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"6) \"\n.\nvar_export\n(\nsubstr\n(\n\"\"\n,\n0\n,\n1\n),\ntrue\n).\nPHP_EOL\n;\necho\n\"7) \"\n.\nvar_export\n(\nsubstr\n(\n1.2e3\n,\n0\n,\n4\n),\ntrue\n).\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 A substr_compare() example",
    "output": "<?php\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"bc\"\n,\n1\n,\n2\n);\n// 0\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"de\"\n, -\n2\n,\n2\n);\n// 0\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"bcg\"\n,\n1\n,\n2\n);\n// 0\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"BC\"\n,\n1\n,\n2\n,\ntrue\n);\n// 0\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"bc\"\n,\n1\n,\n3\n);\n// 1\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"cd\"\n,\n1\n,\n2\n);\n// -1\necho\nsubstr_compare\n(\n\"abcde\"\n,\n\"abc\"\n,\n5\n,\n1\n);\n// warning\n?>"
  },
  {
    "input": "Example #1 A substr_count() example",
    "output": "<?php\n$text\n=\n'This is a test'\n;\necho\nstrlen\n(\n$text\n);\n// 14\necho\nsubstr_count\n(\n$text\n,\n'is'\n);\n// 2\n// the string is reduced to 's is a test', so it prints 1\necho\nsubstr_count\n(\n$text\n,\n'is'\n,\n3\n);\n// the text is reduced to 's i', so it prints 0\necho\nsubstr_count\n(\n$text\n,\n'is'\n,\n3\n,\n3\n);\n// generates a warning because 5+10 > 14\necho\nsubstr_count\n(\n$text\n,\n'is'\n,\n5\n,\n10\n);\n// prints only 1, because it doesn't count overlapped substrings\n$text2\n=\n'gcdgcdgcd'\n;\necho\nsubstr_count\n(\n$text2\n,\n'gcdgcd'\n);\n?>"
  },
  {
    "input": "Example #1 Simple substr_replace() examples",
    "output": "<?php\n$var\n=\n'ABCDEFGH:/MNRPQR/'\n;\necho\n\"Original:\n$var\n<hr />\\n\"\n;\n/* These two examples replace all of $var with 'bob'. */\necho\nsubstr_replace\n(\n$var\n,\n'bob'\n,\n0\n) .\n\"<br />\\n\"\n;\necho\nsubstr_replace\n(\n$var\n,\n'bob'\n,\n0\n,\nstrlen\n(\n$var\n)) .\n\"<br />\\n\"\n;\n/* Insert 'bob' right at the beginning of $var. */\necho\nsubstr_replace\n(\n$var\n,\n'bob'\n,\n0\n,\n0\n) .\n\"<br />\\n\"\n;\n/* These next two replace 'MNRPQR' in $var with 'bob'. */\necho\nsubstr_replace\n(\n$var\n,\n'bob'\n,\n10\n, -\n1\n) .\n\"<br />\\n\"\n;\necho\nsubstr_replace\n(\n$var\n,\n'bob'\n, -\n7\n, -\n1\n) .\n\"<br />\\n\"\n;\n/* Delete 'MNRPQR' from $var. */\necho\nsubstr_replace\n(\n$var\n,\n''\n,\n10\n, -\n1\n) .\n\"<br />\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 \n     Using substr_replace() to replace multiple strings at\n     once",
    "output": "<?php\n$input\n= array(\n'A: XXX'\n,\n'B: XXX'\n,\n'C: XXX'\n);\n// A simple case: replace XXX in each string with YYY.\necho\nimplode\n(\n'; '\n,\nsubstr_replace\n(\n$input\n,\n'YYY'\n,\n3\n,\n3\n)).\n\"\\n\"\n;\n// A more complicated case where each replacement is different.\n$replace\n= array(\n'AAA'\n,\n'BBB'\n,\n'CCC'\n);\necho\nimplode\n(\n'; '\n,\nsubstr_replace\n(\n$input\n,\n$replace\n,\n3\n,\n3\n)).\n\"\\n\"\n;\n// Replace a different number of characters each time.\n$length\n= array(\n1\n,\n2\n,\n3\n);\necho\nimplode\n(\n'; '\n,\nsubstr_replace\n(\n$input\n,\n$replace\n,\n3\n,\n$length\n)).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Usage example of trim()",
    "output": "<?php\n$text\n=\n\"\\t\\tThese are a few words :) ...  \"\n;\n$binary\n=\n\"\\x09Example string\\x0A\"\n;\n$hello\n=\n\"Hello World\"\n;\nvar_dump\n(\n$text\n,\n$binary\n,\n$hello\n);\nprint\n\"\\n\"\n;\n$trimmed\n=\ntrim\n(\n$text\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\ntrim\n(\n$text\n,\n\" \\t.\"\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\ntrim\n(\n$hello\n,\n\"Hdle\"\n);\nvar_dump\n(\n$trimmed\n);\n$trimmed\n=\ntrim\n(\n$hello\n,\n'HdWr'\n);\nvar_dump\n(\n$trimmed\n);\n// trim the ASCII control characters at the beginning and end of $binary\n// (from 0 to 31 inclusive)\n$clean\n=\ntrim\n(\n$binary\n,\n\"\\x00..\\x1F\"\n);\nvar_dump\n(\n$clean\n);\n?>"
  },
  {
    "input": "Example #2 Trimming array values with trim()",
    "output": "<?php\nfunction\ntrim_value\n(&\n$value\n)\n{\n\n$value\n=\ntrim\n(\n$value\n);\n}\n$fruit\n= array(\n'apple'\n,\n'banana '\n,\n' cranberry '\n);\nvar_dump\n(\n$fruit\n);\narray_walk\n(\n$fruit\n,\n'trim_value'\n);\nvar_dump\n(\n$fruit\n);\n?>"
  },
  {
    "input": "Example #1 ucfirst() example",
    "output": "<?php\n$foo\n=\n'hello world!'\n;\n$foo\n=\nucfirst\n(\n$foo\n);\n// Hello world!\n$bar\n=\n'HELLO WORLD!'\n;\n$bar\n=\nucfirst\n(\n$bar\n);\n// HELLO WORLD!\n$bar\n=\nucfirst\n(\nstrtolower\n(\n$bar\n));\n// Hello world!\n?>"
  },
  {
    "input": "Example #1 ucwords() example",
    "output": "<?php\n$foo\n=\n'hello world!'\n;\n$foo\n=\nucwords\n(\n$foo\n);\n// Hello World!\n$bar\n=\n'HELLO WORLD!'\n;\n$bar\n=\nucwords\n(\n$bar\n);\n// HELLO WORLD!\n$bar\n=\nucwords\n(\nstrtolower\n(\n$bar\n));\n// Hello World!\n?>"
  },
  {
    "input": "Example #2 ucwords() example with custom delimiter",
    "output": "<?php\n$foo\n=\n'hello|world!'\n;\n$bar\n=\nucwords\n(\n$foo\n);\n// Hello|world!\n$baz\n=\nucwords\n(\n$foo\n,\n\"|\"\n);\n// Hello|World!\n?>"
  },
  {
    "input": "Example #3 ucwords() example with additional delimiters",
    "output": "<?php\n$foo\n=\n\"mike o'hara\"\n;\n$bar\n=\nucwords\n(\n$foo\n);\n// Mike O'hara\n$baz\n=\nucwords\n(\n$foo\n,\n\" \\t\\r\\n\\f\\v'\"\n);\n// Mike O'Hara\n?>"
  },
  {
    "input": "Example #1 Basic examples",
    "output": "<?php\n// Convert the string 'Zoë' from UTF-8 to ISO 8859-1\n$utf8_string\n=\n\"\\x5A\\x6F\\xC3\\xAB\"\n;\n$iso8859_1_string\n=\nutf8_decode\n(\n$utf8_string\n);\necho\nbin2hex\n(\n$iso8859_1_string\n),\n\"\\n\"\n;\n// Invalid UTF-8 sequences are replaced with '?'\n$invalid_utf8_string\n=\n\"\\xC3\"\n;\n$iso8859_1_string\n=\nutf8_decode\n(\n$invalid_utf8_string\n);\nvar_dump\n(\n$iso8859_1_string\n);\n// Characters which don't exist in ISO 8859-1, such as\n// '€' (Euro Sign) are also replaced with '?'\n$utf8_string\n=\n\"\\xE2\\x82\\xAC\"\n;\n$iso8859_1_string\n=\nutf8_decode\n(\n$utf8_string\n);\nvar_dump\n(\n$iso8859_1_string\n);\n?>"
  },
  {
    "input": "Example #1 Basic example",
    "output": "<?php\n// Convert the string 'Zoë' from ISO 8859-1 to UTF-8\n$iso8859_1_string\n=\n\"\\x5A\\x6F\\xEB\"\n;\n$utf8_string\n=\nutf8_encode\n(\n$iso8859_1_string\n);\necho\nbin2hex\n(\n$utf8_string\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 vfprintf(): zero-padded integers",
    "output": "<?php\nif (!(\n$fp\n=\nfopen\n(\n'date.txt'\n,\n'w'\n)))\n    return;\nvfprintf\n(\n$fp\n,\n\"%04d-%02d-%02d\"\n, array(\n$year\n,\n$month\n,\n$day\n));\n// will write the formatted ISO date to date.txt\n?>"
  },
  {
    "input": "Example #1 vprintf(): zero-padded integers",
    "output": "<?php\nvprintf\n(\n\"%04d-%02d-%02d\"\n,\nexplode\n(\n'-'\n,\n'1988-8-1'\n));\n?>"
  },
  {
    "input": "Example #1 vsprintf(): zero-padded integers",
    "output": "<?php\nprint\nvsprintf\n(\n\"%04d-%02d-%02d\"\n,\nexplode\n(\n'-'\n,\n'1988-8-1'\n));\n?>"
  },
  {
    "input": "Example #1 wordwrap() example",
    "output": "<?php\n$text\n=\n\"The quick brown fox jumped over the lazy dog.\"\n;\n$newtext\n=\nwordwrap\n(\n$text\n,\n20\n,\n\"<br />\\n\"\n);\necho\n$newtext\n;\n?>"
  },
  {
    "input": "Example #2 wordwrap() example",
    "output": "<?php\n$text\n=\n\"A very long woooooooooooord.\"\n;\n$newtext\n=\nwordwrap\n(\n$text\n,\n8\n,\n\"\\n\"\n,\ntrue\n);\necho\n\"\n$newtext\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 wordwrap() example",
    "output": "<?php\n$text\n=\n\"A very long woooooooooooooooooord. and something\"\n;\n$newtext\n=\nwordwrap\n(\n$text\n,\n8\n,\n\"\\n\"\n,\nfalse\n);\necho\n\"\n$newtext\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 array() example",
    "output": "<?php\n$fruits\n= array (\n\n\"fruits\"\n=> array(\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n),\n\n\"numbers\"\n=> array(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n),\n\n\"holes\"\n=> array(\n\"first\"\n,\n5\n=>\n\"second\"\n,\n\"third\"\n)\n);\n?>"
  },
  {
    "input": "Example #2 Automatic index with array()",
    "output": "<?php\n$array\n= array(\n1\n,\n1\n,\n1\n,\n1\n,\n1\n,\n8\n=>\n1\n,\n4\n=>\n1\n,\n19\n,\n3\n=>\n13\n);\nprint_r\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #3 1-based index with array()",
    "output": "<?php\n$firstquarter\n= array(\n1\n=>\n'January'\n,\n'February'\n,\n'March'\n);\nprint_r\n(\n$firstquarter\n);\n?>"
  },
  {
    "input": "Example #4 Accessing an array inside double quotes",
    "output": "<?php\n$foo\n= array(\n'bar'\n=>\n'baz'\n);\necho\n\"Hello\n{\n$foo\n[\n'bar'\n]}\n!\"\n;\n// Hello baz!\n?>"
  },
  {
    "input": "Example #1 array_all() example",
    "output": "<?php\n$array\n= [\n\n'a'\n=>\n'dog'\n,\n\n'b'\n=>\n'cat'\n,\n\n'c'\n=>\n'cow'\n,\n\n'd'\n=>\n'duck'\n,\n\n'e'\n=>\n'goose'\n,\n\n'f'\n=>\n'elephant'\n];\n// Check, if all animal names are shorter than 12 letters.\nvar_dump\n(\narray_all\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) <\n12\n;\n}));\n// Check, if all animal names are longer than 5 letters.\nvar_dump\n(\narray_all\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) >\n5\n;\n}));\n// Check, if all array keys are strings.\nvar_dump\n(\narray_all\n(\n$array\n, function (\nstring $value\n,\n$key\n) {\n   return\nis_string\n(\n$key\n);\n}));\n?>"
  },
  {
    "input": "Example #1 array_any() example",
    "output": "<?php\n$array\n= [\n\n'a'\n=>\n'dog'\n,\n\n'b'\n=>\n'cat'\n,\n\n'c'\n=>\n'cow'\n,\n\n'd'\n=>\n'duck'\n,\n\n'e'\n=>\n'goose'\n,\n\n'f'\n=>\n'elephant'\n];\n// Check, if any animal name is longer than 5 letters.\nvar_dump\n(\narray_any\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) >\n5\n;\n}));\n// Check, if any animal name is shorter than 3 letters.\nvar_dump\n(\narray_any\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) <\n3\n;\n}));\n// Check, if any array key is not a string.\nvar_dump\n(\narray_any\n(\n$array\n, function (\nstring $value\n,\n$key\n) {\n   return !\nis_string\n(\n$key\n);\n}));\n?>"
  },
  {
    "input": "Example #1 array_change_key_case() example",
    "output": "<?php\n$input_array\n= array(\n\"FirSt\"\n=>\n1\n,\n\"SecOnd\"\n=>\n4\n);\nprint_r\n(\narray_change_key_case\n(\n$input_array\n,\nCASE_UPPER\n));\n?>"
  },
  {
    "input": "Example #1 array_chunk() example",
    "output": "<?php\n$input_array\n= array(\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n,\n'e'\n);\nprint_r\n(\narray_chunk\n(\n$input_array\n,\n2\n));\nprint_r\n(\narray_chunk\n(\n$input_array\n,\n2\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 Get the column of first names from a recordset",
    "output": "<?php\n// Array representing a possible record set returned from a database\n$records\n= [\n    [\n\n'id'\n=>\n2135\n,\n\n'first_name'\n=>\n'John'\n,\n\n'last_name'\n=>\n'Doe'\n,\n    ],\n    [\n\n'id'\n=>\n3245\n,\n\n'first_name'\n=>\n'Sally'\n,\n\n'last_name'\n=>\n'Smith'\n,\n    ],\n    [\n\n'id'\n=>\n5342\n,\n\n'first_name'\n=>\n'Jane'\n,\n\n'last_name'\n=>\n'Jones'\n,\n    ],\n    [\n\n'id'\n=>\n5623\n,\n\n'first_name'\n=>\n'Peter'\n,\n\n'last_name'\n=>\n'Doe'\n,\n    ]\n];\n\n$first_names\n=\narray_column\n(\n$records\n,\n'first_name'\n);\nprint_r\n(\n$first_names\n);\n?>"
  },
  {
    "input": "Example #2 \n     Get the column of last names from a recordset, indexed by the \"id\" column",
    "output": "<?php\n// Using the $records array from Example #1\n$records\n= [\n    [\n\n'id'\n=>\n2135\n,\n\n'first_name'\n=>\n'John'\n,\n\n'last_name'\n=>\n'Doe'\n,\n    ],\n    [\n\n'id'\n=>\n3245\n,\n\n'first_name'\n=>\n'Sally'\n,\n\n'last_name'\n=>\n'Smith'\n,\n    ],\n    [\n\n'id'\n=>\n5342\n,\n\n'first_name'\n=>\n'Jane'\n,\n\n'last_name'\n=>\n'Jones'\n,\n    ],\n    [\n\n'id'\n=>\n5623\n,\n\n'first_name'\n=>\n'Peter'\n,\n\n'last_name'\n=>\n'Doe'\n,\n    ]\n];\n$last_names\n=\narray_column\n(\n$records\n,\n'last_name'\n,\n'id'\n);\nprint_r\n(\n$last_names\n);\n?>"
  },
  {
    "input": "Example #3 \n     Get the column of usernames from the public \"username\" property of an\n     object",
    "output": "<?php\nclass\nUser\n{\n    public\n$username\n;\n    public function\n__construct\n(\nstring $username\n)\n    {\n\n$this\n->\nusername\n=\n$username\n;\n    }\n}\n$users\n= [\n    new\nUser\n(\n'user 1'\n),\n    new\nUser\n(\n'user 2'\n),\n    new\nUser\n(\n'user 3'\n),\n];\nprint_r\n(\narray_column\n(\n$users\n,\n'username'\n));\n?>"
  },
  {
    "input": "Example #4 \n     Get the column of names from the private \"name\" property of an object\n     using the magic methods __isset() and __get()",
    "output": "<?php\nclass\nPerson\n{\n    private\n$name\n;\n    public function\n__construct\n(\nstring $name\n)\n    {\n\n$this\n->\nname\n=\n$name\n;\n    }\n    public function\n__get\n(\n$prop\n)\n    {\n        return\n$this\n->\n$prop\n;\n    }\n    public function\n__isset\n(\n$prop\n) :\nbool\n\n{\n        return isset(\n$this\n->\n$prop\n);\n    }\n}\n$people\n= [\n    new\nPerson\n(\n'Fred'\n),\n    new\nPerson\n(\n'Jane'\n),\n    new\nPerson\n(\n'John'\n),\n];\nprint_r\n(\narray_column\n(\n$people\n,\n'name'\n));\n?>"
  },
  {
    "input": "Example #1 A simple array_combine() example",
    "output": "<?php\n$a\n= array(\n'green'\n,\n'red'\n,\n'yellow'\n);\n$b\n= array(\n'avocado'\n,\n'apple'\n,\n'banana'\n);\n$c\n=\narray_combine\n(\n$a\n,\n$b\n);\nprint_r\n(\n$c\n);\n?>"
  },
  {
    "input": "Example #1 array_count_values() example",
    "output": "<?php\n$array\n= array(\n1\n,\n\"hello\"\n,\n1\n,\n\"world\"\n,\n\"hello\"\n);\nprint_r\n(\narray_count_values\n(\n$array\n));\n?>"
  },
  {
    "input": "Example #1 array_diff() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"red\"\n,\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"b\"\n=>\n\"green\"\n,\n\"yellow\"\n,\n\"red\"\n);\n$result\n=\narray_diff\n(\n$array1\n,\n$array2\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_diff_ukey() example",
    "output": "<?php\nfunction\nkey_compare_func\n(\n$key1\n,\n$key2\n)\n{\n    if (\n$key1\n==\n$key2\n)\n        return\n0\n;\n    else if (\n$key1\n>\n$key2\n)\n        return\n1\n;\n    else\n        return -\n1\n;\n}\n$array1\n= array(\n'blue'\n=>\n1\n,\n'red'\n=>\n2\n,\n'green'\n=>\n3\n,\n'purple'\n=>\n4\n);\n$array2\n= array(\n'green'\n=>\n5\n,\n'blue'\n=>\n6\n,\n'yellow'\n=>\n7\n,\n'cyan'\n=>\n8\n);\nvar_dump\n(\narray_diff_ukey\n(\n$array1\n,\n$array2\n,\n'key_compare_func'\n));\n?>"
  },
  {
    "input": "Example #1 array_fill() example",
    "output": "<?php\n$a\n=\narray_fill\n(\n5\n,\n6\n,\n'banana'\n);\nprint_r\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #2 array_fill() example with a negative start index",
    "output": "<?php\n$a\n=\narray_fill\n(-\n2\n,\n4\n,\n'pear'\n);\nprint_r\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #1 array_fill_keys() example",
    "output": "<?php\n$keys\n= array(\n'foo'\n,\n5\n,\n10\n,\n'bar'\n);\n$a\n=\narray_fill_keys\n(\n$keys\n,\n'banana'\n);\nprint_r\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #1 array_filter() example",
    "output": "<?php\nfunction\nodd\n(\n$var\n)\n{\n\n// returns whether the input integer is odd\n\nreturn\n$var\n&\n1\n;\n}\nfunction\neven\n(\n$var\n)\n{\n\n// returns whether the input integer is even\n\nreturn !(\n$var\n&\n1\n);\n}\n$array1\n= [\n'a'\n=>\n1\n,\n'b'\n=>\n2\n,\n'c'\n=>\n3\n,\n'd'\n=>\n4\n,\n'e'\n=>\n5\n];\n$array2\n= [\n6\n,\n7\n,\n8\n,\n9\n,\n10\n,\n11\n,\n12\n];\necho\n\"Odd :\\n\"\n;\nprint_r\n(\narray_filter\n(\n$array1\n,\n\"odd\"\n));\necho\n\"Even:\\n\"\n;\nprint_r\n(\narray_filter\n(\n$array2\n,\n\"even\"\n));\n?>"
  },
  {
    "input": "Example #2 array_filter() without\n    callback",
    "output": "<?php\n$entry\n= [\n\n0\n=>\n'foo'\n,\n\n1\n=>\nfalse\n,\n\n2\n=> -\n1\n,\n\n3\n=>\nnull\n,\n\n4\n=>\n''\n,\n\n5\n=>\n'0'\n,\n\n6\n=>\n0\n,\n];\nprint_r\n(\narray_filter\n(\n$entry\n));\n?>"
  },
  {
    "input": "Example #3 array_filter() with\n    mode",
    "output": "<?php\n$arr\n= [\n'a'\n=>\n1\n,\n'b'\n=>\n2\n,\n'c'\n=>\n3\n,\n'd'\n=>\n4\n];\nvar_dump\n(\narray_filter\n(\n$arr\n, function(\n$k\n) {\n    return\n$k\n==\n'b'\n;\n},\nARRAY_FILTER_USE_KEY\n));\nvar_dump\n(\narray_filter\n(\n$arr\n, function(\n$v\n,\n$k\n) {\n    return\n$k\n==\n'b'\n||\n$v\n==\n4\n;\n},\nARRAY_FILTER_USE_BOTH\n));\n?>"
  },
  {
    "input": "Example #1 array_find() example",
    "output": "<?php\n$array\n= [\n\n'a'\n=>\n'dog'\n,\n\n'b'\n=>\n'cat'\n,\n\n'c'\n=>\n'cow'\n,\n\n'd'\n=>\n'duck'\n,\n\n'e'\n=>\n'goose'\n,\n\n'f'\n=>\n'elephant'\n];\n// Find the first animal with a name longer than 4 characters.\nvar_dump\n(\narray_find\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) >\n4\n;\n}));\n// Find the first animal whose name begins with f.\nvar_dump\n(\narray_find\n(\n$array\n, function (\nstring $value\n) {\n    return\nstr_starts_with\n(\n$value\n,\n'f'\n);\n}));\n// Find the first animal where the array key is the first symbol of the animal.\nvar_dump\n(\narray_find\n(\n$array\n, function (\nstring $value\n,\n$key\n) {\n   return\n$value\n[\n0\n] ===\n$key\n;\n}));\n// Find the first animal where the array key matching a RegEx.\nvar_dump\n(\narray_find\n(\n$array\n, function (\n$value\n,\n$key\n) {\n   return\npreg_match\n(\n'/^([a-f])$/'\n,\n$key\n);\n}));\n?>"
  },
  {
    "input": "Example #1 array_find_key() example",
    "output": "<?php\n$array\n= [\n\n'a'\n=>\n'dog'\n,\n\n'b'\n=>\n'cat'\n,\n\n'c'\n=>\n'cow'\n,\n\n'd'\n=>\n'duck'\n,\n\n'e'\n=>\n'goose'\n,\n\n'f'\n=>\n'elephant'\n];\n// Find the first animal with a name longer than 4 characters.\nvar_dump\n(\narray_find_key\n(\n$array\n, function (\nstring $value\n) {\n    return\nstrlen\n(\n$value\n) >\n4\n;\n}));\n// Find the first animal whose name begins with f.\nvar_dump\n(\narray_find_key\n(\n$array\n, function (\nstring $value\n) {\n    return\nstr_starts_with\n(\n$value\n,\n'f'\n);\n}));\n// Find the first animal where the array key is the first symbol of the animal.\nvar_dump\n(\narray_find_key\n(\n$array\n, function (\nstring $value\n,\n$key\n) {\n   return\n$value\n[\n0\n] ===\n$key\n;\n}));\n// Find the first animal where the array key matching a RegEx.\nvar_dump\n(\narray_find_key\n(\n$array\n, function (\n$value\n,\n$key\n) {\n   return\npreg_match\n(\n'/^([a-f])$/'\n,\n$key\n);\n}));\n?>"
  },
  {
    "input": "Example #1 array_flip() example",
    "output": "<?php\n$input\n= array(\n\"oranges\"\n,\n\"apples\"\n,\n\"pears\"\n);\n$flipped\n=\narray_flip\n(\n$input\n);\nprint_r\n(\n$flipped\n);\n?>"
  },
  {
    "input": "Example #2 array_flip() example : collision",
    "output": "<?php\n$input\n= array(\n\"a\"\n=>\n1\n,\n\"b\"\n=>\n1\n,\n\"c\"\n=>\n2\n);\n$flipped\n=\narray_flip\n(\n$input\n);\nprint_r\n(\n$flipped\n);\n?>"
  },
  {
    "input": "Example #1 array_intersect() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"red\"\n,\n\"blue\"\n);\n$array2\n= array(\n\"b\"\n=>\n\"green\"\n,\n\"yellow\"\n,\n\"red\"\n);\n$result\n=\narray_intersect\n(\n$array1\n,\n$array2\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_intersect_assoc() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"brown\"\n,\n\"c\"\n=>\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"yellow\"\n,\n\"blue\"\n,\n\"red\"\n);\n$result_array\n=\narray_intersect_assoc\n(\n$array1\n,\n$array2\n);\nprint_r\n(\n$result_array\n);\n?>"
  },
  {
    "input": "Example #1 array_intersect_key() example",
    "output": "<?php\n$array1\n= array(\n'blue'\n=>\n1\n,\n'red'\n=>\n2\n,\n'green'\n=>\n3\n,\n'purple'\n=>\n4\n);\n$array2\n= array(\n'green'\n=>\n5\n,\n'blue'\n=>\n6\n,\n'yellow'\n=>\n7\n,\n'cyan'\n=>\n8\n);\nvar_dump\n(\narray_intersect_key\n(\n$array1\n,\n$array2\n));\n?>"
  },
  {
    "input": "Example #1 array_intersect_uassoc() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"brown\"\n,\n\"c\"\n=>\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"a\"\n=>\n\"GREEN\"\n,\n\"B\"\n=>\n\"brown\"\n,\n\"yellow\"\n,\n\"red\"\n);\nprint_r\n(\narray_intersect_uassoc\n(\n$array1\n,\n$array2\n,\n\"strcasecmp\"\n));\n?>"
  },
  {
    "input": "Example #1 array_intersect_ukey() example",
    "output": "<?php\nfunction\nkey_compare_func\n(\n$key1\n,\n$key2\n)\n{\n    if (\n$key1\n==\n$key2\n)\n        return\n0\n;\n    else if (\n$key1\n>\n$key2\n)\n        return\n1\n;\n    else\n        return -\n1\n;\n}\n$array1\n= array(\n'blue'\n=>\n1\n,\n'red'\n=>\n2\n,\n'green'\n=>\n3\n,\n'purple'\n=>\n4\n);\n$array2\n= array(\n'green'\n=>\n5\n,\n'blue'\n=>\n6\n,\n'yellow'\n=>\n7\n,\n'cyan'\n=>\n8\n);\nvar_dump\n(\narray_intersect_ukey\n(\n$array1\n,\n$array2\n,\n'key_compare_func'\n));\n?>"
  },
  {
    "input": "Example #1 array_is_list() example",
    "output": "<?php\narray_is_list\n([]);\n// true\narray_is_list\n([\n'apple'\n,\n2\n,\n3\n]);\n// true\narray_is_list\n([\n0\n=>\n'apple'\n,\n'orange'\n]);\n// true\n// The array does not start at 0\narray_is_list\n([\n1\n=>\n'apple'\n,\n'orange'\n]);\n// false\n// The keys are not in the correct order\narray_is_list\n([\n1\n=>\n'apple'\n,\n0\n=>\n'orange'\n]);\n// false\n// Non-integer keys\narray_is_list\n([\n0\n=>\n'apple'\n,\n'foo'\n=>\n'bar'\n]);\n// false\n// Non-consecutive keys\narray_is_list\n([\n0\n=>\n'apple'\n,\n2\n=>\n'bar'\n]);\n// false\n?>"
  },
  {
    "input": "Example #1 array_key_exists() example",
    "output": "<?php\n$search_array\n= array(\n'first'\n=>\n1\n,\n'second'\n=>\n4\n);\nif (\narray_key_exists\n(\n'first'\n,\n$search_array\n)) {\n    echo\n\"The 'first' element is in the array\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Basic array_key_first() Usage",
    "output": "<?php\n$array\n= [\n'a'\n=>\n1\n,\n'b'\n=>\n2\n,\n'c'\n=>\n3\n];\n$firstKey\n=\narray_key_first\n(\n$array\n);\nvar_dump\n(\n$firstKey\n);\n?>"
  },
  {
    "input": "Example #1 array_keys() example",
    "output": "<?php\n$array\n= array(\n0\n=>\n100\n,\n\"color\"\n=>\n\"red\"\n);\nprint_r\n(\narray_keys\n(\n$array\n));\n$array\n= array(\n\"blue\"\n,\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n,\n\"blue\"\n);\nprint_r\n(\narray_keys\n(\n$array\n,\n\"blue\"\n));\n$array\n= array(\n\"color\"\n=> array(\n\"blue\"\n,\n\"red\"\n,\n\"green\"\n),\n\n\"size\"\n=> array(\n\"small\"\n,\n\"medium\"\n,\n\"large\"\n));\nprint_r\n(\narray_keys\n(\n$array\n));\n?>"
  },
  {
    "input": "Example #1 array_map() example",
    "output": "<?php\nfunction\ncube\n(\n$n\n)\n{\n    return (\n$n\n*\n$n\n*\n$n\n);\n}\n$a\n= [\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n$b\n=\narray_map\n(\n'cube'\n,\n$a\n);\nprint_r\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #2 array_map() using a lambda function",
    "output": "<?php\n$func\n= function(\nint $value\n):\nint\n{\n    return\n$value\n*\n2\n;\n};\nprint_r\n(\narray_map\n(\n$func\n,\nrange\n(\n1\n,\n5\n)));\n// Or as of PHP 7.4.0:\nprint_r\n(\narray_map\n(fn(\n$value\n):\nint\n=>\n$value\n*\n2\n,\nrange\n(\n1\n,\n5\n)));\n?>"
  },
  {
    "input": "Example #3 array_map() - using more arrays",
    "output": "<?php\nfunction\nshow_Spanish\n(\nint $n\n,\nstring $m\n):\nstring\n{\n    return\n\"The number\n{\n$n\n}\n is called\n{\n$m\n}\n in Spanish\"\n;\n}\nfunction\nmap_Spanish\n(\nint $n\n,\nstring $m\n): array\n{\n    return [\n$n\n=>\n$m\n];\n}\n$a\n= [\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n$b\n= [\n'uno'\n,\n'dos'\n,\n'tres'\n,\n'cuatro'\n,\n'cinco'\n];\n$c\n=\narray_map\n(\n'show_Spanish'\n,\n$a\n,\n$b\n);\nprint_r\n(\n$c\n);\n$d\n=\narray_map\n(\n'map_Spanish'\n,\n$a\n,\n$b\n);\nprint_r\n(\n$d\n);\n?>"
  },
  {
    "input": "Example #4 Performing a zip operation of arrays",
    "output": "<?php\n$a\n= [\n1\n,\n2\n,\n3\n,\n4\n,\n5\n];\n$b\n= [\n'one'\n,\n'two'\n,\n'three'\n,\n'four'\n,\n'five'\n];\n$c\n= [\n'uno'\n,\n'dos'\n,\n'tres'\n,\n'cuatro'\n,\n'cinco'\n];\n$d\n=\narray_map\n(\nnull\n,\n$a\n,\n$b\n,\n$c\n);\nprint_r\n(\n$d\n);\n?>"
  },
  {
    "input": "Example #5 \n     null callback with only\n     array",
    "output": "<?php\n$array\n= [\n1\n,\n2\n,\n3\n];\nvar_dump\n(\narray_map\n(\nnull\n,\n$array\n));\n?>"
  },
  {
    "input": "Example #6 array_map() - with string keys",
    "output": "<?php\n$arr\n= [\n'stringkey'\n=>\n'value'\n];\nfunction\ncb1\n(\n$a\n) {\n    return [\n$a\n];\n}\nfunction\ncb2\n(\n$a\n,\n$b\n) {\n    return [\n$a\n,\n$b\n];\n}\nvar_dump\n(\narray_map\n(\n'cb1'\n,\n$arr\n));\nvar_dump\n(\narray_map\n(\n'cb2'\n,\n$arr\n,\n$arr\n));\nvar_dump\n(\narray_map\n(\nnull\n,\n$arr\n));\nvar_dump\n(\narray_map\n(\nnull\n,\n$arr\n,\n$arr\n));\n?>"
  },
  {
    "input": "Example #1 array_merge() example",
    "output": "<?php\n$array1\n= array(\n\"color\"\n=>\n\"red\"\n,\n2\n,\n4\n);\n$array2\n= array(\n\"a\"\n,\n\"b\"\n,\n\"color\"\n=>\n\"green\"\n,\n\"shape\"\n=>\n\"trapezoid\"\n,\n4\n);\n$result\n=\narray_merge\n(\n$array1\n,\n$array2\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #2 Simple array_merge() example",
    "output": "<?php\n$array1\n= array();\n$array2\n= array(\n1\n=>\n\"data\"\n);\n$result\n=\narray_merge\n(\n$array1\n,\n$array2\n);\n?>"
  },
  {
    "input": "Example #3 array_merge() with non-array types",
    "output": "<?php\n$beginning\n=\n'foo'\n;\n$end\n= array(\n1\n=>\n'bar'\n);\n$result\n=\narray_merge\n((array)\n$beginning\n, (array)\n$end\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_merge_recursive() example",
    "output": "<?php\n$ar1\n= array(\n\"color\"\n=> array(\n\"favorite\"\n=>\n\"red\"\n),\n5\n);\n$ar2\n= array(\n10\n,\n\"color\"\n=> array(\n\"favorite\"\n=>\n\"green\"\n,\n\"blue\"\n));\n$result\n=\narray_merge_recursive\n(\n$ar1\n,\n$ar2\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 Sorting multiple arrays",
    "output": "<?php\n$ar1\n= array(\n10\n,\n100\n,\n100\n,\n0\n);\n$ar2\n= array(\n1\n,\n3\n,\n2\n,\n4\n);\narray_multisort\n(\n$ar1\n,\n$ar2\n);\nvar_dump\n(\n$ar1\n);\nvar_dump\n(\n$ar2\n);\n?>"
  },
  {
    "input": "Example #2 Sorting multi-dimensional array",
    "output": "<?php\n$ar\n= array(\n       array(\n\"10\"\n,\n11\n,\n100\n,\n100\n,\n\"a\"\n),\n       array(\n1\n,\n2\n,\n\"2\"\n,\n3\n,\n1\n)\n      );\narray_multisort\n(\n$ar\n[\n0\n],\nSORT_ASC\n,\nSORT_STRING\n,\n\n$ar\n[\n1\n],\nSORT_NUMERIC\n,\nSORT_DESC\n);\nvar_dump\n(\n$ar\n);\n?>"
  },
  {
    "input": "Example #1 array_pad() example",
    "output": "<?php\n$input\n= array(\n12\n,\n10\n,\n9\n);\n$result\n=\narray_pad\n(\n$input\n,\n5\n,\n0\n);\n// result is array(12, 10, 9, 0, 0)\n$result\n=\narray_pad\n(\n$input\n, -\n7\n, -\n1\n);\n// result is array(-1, -1, -1, -1, 12, 10, 9)\n$result\n=\narray_pad\n(\n$input\n,\n2\n,\n\"noop\"\n);\n// not padded\n?>"
  },
  {
    "input": "Example #1 array_pop() example",
    "output": "<?php\n$stack\n= array(\n\"orange\"\n,\n\"banana\"\n,\n\"apple\"\n,\n\"raspberry\"\n);\n$fruit\n=\narray_pop\n(\n$stack\n);\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 array_product() examples",
    "output": "<?php\n$a\n= array(\n2\n,\n4\n,\n6\n,\n8\n);\necho\n\"product(a) = \"\n.\narray_product\n(\n$a\n) .\n\"\\n\"\n;\necho\n\"product(array()) = \"\n.\narray_product\n(array()) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 array_push() example",
    "output": "<?php\n$stack\n= array(\n\"orange\"\n,\n\"banana\"\n);\narray_push\n(\n$stack\n,\n\"apple\"\n,\n\"raspberry\"\n);\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 array_rand() example",
    "output": "<?php\n$input\n= array(\n\"Neo\"\n,\n\"Morpheus\"\n,\n\"Trinity\"\n,\n\"Cypher\"\n,\n\"Tank\"\n);\n$rand_keys\n=\narray_rand\n(\n$input\n,\n2\n);\necho\n$input\n[\n$rand_keys\n[\n0\n]] .\n\"\\n\"\n;\necho\n$input\n[\n$rand_keys\n[\n1\n]] .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 array_reduce() example",
    "output": "<?php\nfunction\nsum\n(\n$carry\n,\n$item\n)\n{\n\n$carry\n+=\n$item\n;\n    return\n$carry\n;\n}\nfunction\nproduct\n(\n$carry\n,\n$item\n)\n{\n\n$carry\n*=\n$item\n;\n    return\n$carry\n;\n}\n$a\n= array(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n);\n$x\n= array();\nvar_dump\n(\narray_reduce\n(\n$a\n,\n\"sum\"\n));\n// int(15)\nvar_dump\n(\narray_reduce\n(\n$a\n,\n\"product\"\n,\n10\n));\n// int(1200), because: 10*1*2*3*4*5\nvar_dump\n(\narray_reduce\n(\n$x\n,\n\"sum\"\n,\n\"No data to reduce\"\n));\n// string(17) \"No data to reduce\"\n?>"
  },
  {
    "input": "Example #1 array_replace() example",
    "output": "<?php\n$base\n= array(\n\"orange\"\n,\n\"banana\"\n,\n\"apple\"\n,\n\"raspberry\"\n);\n$replacements\n= array(\n0\n=>\n\"pineapple\"\n,\n4\n=>\n\"cherry\"\n);\n$replacements2\n= array(\n0\n=>\n\"grape\"\n);\n$basket\n=\narray_replace\n(\n$base\n,\n$replacements\n,\n$replacements2\n);\nvar_dump\n(\n$basket\n);\n?>"
  },
  {
    "input": "Example #2 Example of how nested arrays are handled",
    "output": "<?php\n$base\n= [\n'citrus'\n=> [\n'orange'\n,\n'lemon'\n],\n'pome'\n=> [\n'apple'\n] ];\n$replacements\n= [\n'citrus'\n=> [\n'grapefruit'\n] ];\n$replacements2\n= [\n'citrus'\n=> [\n'kumquat'\n,\n'citron'\n],\n'pome'\n=> [\n'loquat'\n] ];\n$basket\n=\narray_replace\n(\n$base\n,\n$replacements\n,\n$replacements2\n);\nvar_dump\n(\n$basket\n);\n?>"
  },
  {
    "input": "Example #1 array_replace_recursive() example",
    "output": "<?php\n$base\n= array(\n'citrus'\n=> array(\n\"orange\"\n) ,\n'berries'\n=> array(\n\"blackberry\"\n,\n\"raspberry\"\n), );\n$replacements\n= array(\n'citrus'\n=> array(\n'pineapple'\n),\n'berries'\n=> array(\n'blueberry'\n));\n$basket\n=\narray_replace_recursive\n(\n$base\n,\n$replacements\n);\nprint_r\n(\n$basket\n);\n$basket\n=\narray_replace\n(\n$base\n,\n$replacements\n);\nprint_r\n(\n$basket\n);\n?>"
  },
  {
    "input": "Example #2 array_replace_recursive() and recursive behavior",
    "output": "<?php\n$base\n= array(\n'citrus'\n=> array(\n\"orange\"\n) ,\n'berries'\n=> array(\n\"blackberry\"\n,\n\"raspberry\"\n),\n'others'\n=>\n'banana'\n);\n$replacements\n= array(\n'citrus'\n=>\n'pineapple'\n,\n'berries'\n=> array(\n'blueberry'\n),\n'others'\n=> array(\n'litchis'\n));\n$replacements2\n= array(\n'citrus'\n=> array(\n'pineapple'\n),\n'berries'\n=> array(\n'blueberry'\n),\n'others'\n=>\n'litchis'\n);\n$basket\n=\narray_replace_recursive\n(\n$base\n,\n$replacements\n,\n$replacements2\n);\nprint_r\n(\n$basket\n);\n?>"
  },
  {
    "input": "Example #1 array_reverse() example",
    "output": "<?php\n$input\n= array(\n\"php\"\n,\n4.0\n, array(\n\"green\"\n,\n\"red\"\n));\n$reversed\n=\narray_reverse\n(\n$input\n);\n$preserved\n=\narray_reverse\n(\n$input\n,\ntrue\n);\nprint_r\n(\n$input\n);\nprint_r\n(\n$reversed\n);\nprint_r\n(\n$preserved\n);\n?>"
  },
  {
    "input": "Example #1 array_search() example",
    "output": "<?php\n$array\n= array(\n0\n=>\n'blue'\n,\n1\n=>\n'red'\n,\n2\n=>\n'green'\n,\n3\n=>\n'red'\n);\n$key\n=\narray_search\n(\n'green'\n,\n$array\n);\n// $key = 2;\n$key\n=\narray_search\n(\n'red'\n,\n$array\n);\n// $key = 1;\n?>"
  },
  {
    "input": "Example #1 array_shift() example",
    "output": "<?php\n$stack\n= array(\n\"orange\"\n,\n\"banana\"\n,\n\"apple\"\n,\n\"raspberry\"\n);\n$fruit\n=\narray_shift\n(\n$stack\n);\nprint_r\n(\n$stack\n);\n?>"
  },
  {
    "input": "Example #1 array_slice() examples",
    "output": "<?php\n$input\n= array(\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n);\n$output\n=\narray_slice\n(\n$input\n,\n2\n);\n// returns \"c\", \"d\", and \"e\"\n$output\n=\narray_slice\n(\n$input\n, -\n2\n,\n1\n);\n// returns \"d\"\n$output\n=\narray_slice\n(\n$input\n,\n0\n,\n3\n);\n// returns \"a\", \"b\", and \"c\"\n// note the differences in the array keys\nprint_r\n(\narray_slice\n(\n$input\n,\n2\n, -\n1\n));\nprint_r\n(\narray_slice\n(\n$input\n,\n2\n, -\n1\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #2 array_slice() and one-based array",
    "output": "<?php\n$input\n= array(\n1\n=>\n\"a\"\n,\n\"b\"\n,\n\"c\"\n,\n\"d\"\n,\n\"e\"\n);\nprint_r\n(\narray_slice\n(\n$input\n,\n1\n,\n2\n));\n?>"
  },
  {
    "input": "Example #3 array_slice() and array with mixed keys",
    "output": "<?php\n$ar\n= array(\n'a'\n=>\n'apple'\n,\n'b'\n=>\n'banana'\n,\n'42'\n=>\n'pear'\n,\n'd'\n=>\n'orange'\n);\nprint_r\n(\narray_slice\n(\n$ar\n,\n0\n,\n3\n));\nprint_r\n(\narray_slice\n(\n$ar\n,\n0\n,\n3\n,\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 array_splice() examples",
    "output": "<?php\n$input\n= array(\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n,\n\"yellow\"\n);\narray_splice\n(\n$input\n,\n2\n);\nvar_dump\n(\n$input\n);\n$input\n= array(\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n,\n\"yellow\"\n);\narray_splice\n(\n$input\n,\n1\n, -\n1\n);\nvar_dump\n(\n$input\n);\n$input\n= array(\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n,\n\"yellow\"\n);\narray_splice\n(\n$input\n,\n1\n,\ncount\n(\n$input\n),\n\"orange\"\n);\nvar_dump\n(\n$input\n);\n$input\n= array(\n\"red\"\n,\n\"green\"\n,\n\"blue\"\n,\n\"yellow\"\n);\narray_splice\n(\n$input\n, -\n1\n,\n1\n, array(\n\"black\"\n,\n\"maroon\"\n));\nvar_dump\n(\n$input\n);\n?>"
  },
  {
    "input": "Example #1 array_sum() examples",
    "output": "<?php\n$a\n= array(\n2\n,\n4\n,\n6\n,\n8\n);\necho\n\"sum(a) = \"\n.\narray_sum\n(\n$a\n) .\n\"\\n\"\n;\n$b\n= array(\n\"a\"\n=>\n1.2\n,\n\"b\"\n=>\n2.3\n,\n\"c\"\n=>\n3.4\n);\necho\n\"sum(b) = \"\n.\narray_sum\n(\n$b\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 array_udiff() example using stdClass Objects",
    "output": "<?php\n// Arrays to compare\n$array1\n= array(new\nstdClass\n, new\nstdClass\n,\n                new\nstdClass\n, new\nstdClass\n,\n               );\n$array2\n= array(\n                new\nstdClass\n, new\nstdClass\n,\n               );\n// Set some properties for each object\n$array1\n[\n0\n]->\nwidth\n=\n11\n;\n$array1\n[\n0\n]->\nheight\n=\n3\n;\n$array1\n[\n1\n]->\nwidth\n=\n7\n;\n$array1\n[\n1\n]->\nheight\n=\n1\n;\n$array1\n[\n2\n]->\nwidth\n=\n2\n;\n$array1\n[\n2\n]->\nheight\n=\n9\n;\n$array1\n[\n3\n]->\nwidth\n=\n5\n;\n$array1\n[\n3\n]->\nheight\n=\n7\n;\n$array2\n[\n0\n]->\nwidth\n=\n7\n;\n$array2\n[\n0\n]->\nheight\n=\n5\n;\n$array2\n[\n1\n]->\nwidth\n=\n9\n;\n$array2\n[\n1\n]->\nheight\n=\n2\n;\nfunction\ncompare_by_area\n(\n$a\n,\n$b\n) {\n\n$areaA\n=\n$a\n->\nwidth\n*\n$a\n->\nheight\n;\n\n$areaB\n=\n$b\n->\nwidth\n*\n$b\n->\nheight\n;\n\n    if (\n$areaA\n<\n$areaB\n) {\n        return -\n1\n;\n    } elseif (\n$areaA\n>\n$areaB\n) {\n        return\n1\n;\n    } else {\n        return\n0\n;\n    }\n}\nprint_r\n(\narray_udiff\n(\n$array1\n,\n$array2\n,\n'compare_by_area'\n));\n?>"
  },
  {
    "input": "Example #2 array_udiff() example using DateTime Objects",
    "output": "<?php\nclass\nMyCalendar\n{\n    public\n$free\n= array();\n    public\n$booked\n= array();\n    public function\n__construct\n(\n$week\n=\n'now'\n) {\n\n$start\n= new\nDateTime\n(\n$week\n);\n\n$start\n->\nmodify\n(\n'Monday this week midnight'\n);\n\n$end\n= clone\n$start\n;\n\n$end\n->\nmodify\n(\n'Friday this week midnight'\n);\n\n$interval\n= new\nDateInterval\n(\n'P1D'\n);\n        foreach (new\nDatePeriod\n(\n$start\n,\n$interval\n,\n$end\n) as\n$freeTime\n) {\n\n$this\n->\nfree\n[] =\n$freeTime\n;\n        }\n    }\n    public function\nbookAppointment\n(\nDateTime $date\n,\n$note\n) {\n\n$this\n->\nbooked\n[] = array(\n'date'\n=>\n$date\n->\nmodify\n(\n'midnight'\n),\n'note'\n=>\n$note\n);\n    }\n    public function\ncheckAvailability\n() {\n        return\narray_udiff\n(\n$this\n->\nfree\n,\n$this\n->\nbooked\n, array(\n$this\n,\n'customCompare'\n));\n    }\n\n    public function\ncustomCompare\n(\n$free\n,\n$booked\n) {\n        if (\nis_array\n(\n$free\n))\n$a\n=\n$free\n[\n'date'\n];\n        else\n$a\n=\n$free\n;\n        if (\nis_array\n(\n$booked\n))\n$b\n=\n$booked\n[\n'date'\n];\n        else\n$b\n=\n$booked\n;\n        if (\n$a\n==\n$b\n) {\n            return\n0\n;\n        } elseif (\n$a\n>\n$b\n) {\n            return\n1\n;\n        } else {\n            return -\n1\n;\n        }\n    }\n}\n// Create a calendar for weekly appointments\n$myCalendar\n= new\nMyCalendar\n;\n// Book some appointments for this week\n$myCalendar\n->\nbookAppointment\n(new\nDateTime\n(\n'Monday this week'\n),\n\"Cleaning GoogleGuy's apartment.\"\n);\n$myCalendar\n->\nbookAppointment\n(new\nDateTime\n(\n'Wednesday this week'\n),\n\"Going on a snowboarding trip.\"\n);\n$myCalendar\n->\nbookAppointment\n(new\nDateTime\n(\n'Friday this week'\n),\n\"Fixing buggy code.\"\n);\n// Check availability of days by comparing $booked dates against $free dates\necho\n\"I'm available on the following days this week...\\n\\n\"\n;\nforeach (\n$myCalendar\n->\ncheckAvailability\n() as\n$free\n) {\n    echo\n$free\n->\nformat\n(\n'l'\n),\n\"\\n\"\n;\n}\necho\n\"\\n\\n\"\n;\necho\n\"I'm busy on the following days this week...\\n\\n\"\n;\nforeach (\n$myCalendar\n->\nbooked\nas\n$booked\n) {\n    echo\n$booked\n[\n'date'\n]->\nformat\n(\n'l'\n),\n\": \"\n,\n$booked\n[\n'note'\n],\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 array_udiff_assoc() example",
    "output": "<?php\nclass\ncr\n{\n    private\n$priv_member\n;\n    function\n__construct\n(\n$val\n)\n    {\n\n$this\n->\npriv_member\n=\n$val\n;\n    }\n    static function\ncomp_func_cr\n(\n$a\n,\n$b\n)\n    {\n        if (\n$a\n->\npriv_member\n===\n$b\n->\npriv_member\n) return\n0\n;\n        return (\n$a\n->\npriv_member\n>\n$b\n->\npriv_member\n)?\n1\n:-\n1\n;\n    }\n}\n$a\n= array(\n\"0.1\"\n=> new\ncr\n(\n9\n),\n\"0.5\"\n=> new\ncr\n(\n12\n),\n0\n=> new\ncr\n(\n23\n),\n1\n=> new\ncr\n(\n4\n),\n2\n=> new\ncr\n(-\n15\n),);\n$b\n= array(\n\"0.2\"\n=> new\ncr\n(\n9\n),\n\"0.5\"\n=> new\ncr\n(\n22\n),\n0\n=> new\ncr\n(\n3\n),\n1\n=> new\ncr\n(\n4\n),\n2\n=> new\ncr\n(-\n15\n),);\n$result\n=\narray_udiff_assoc\n(\n$a\n,\n$b\n, array(\n\"cr\"\n,\n\"comp_func_cr\"\n));\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_udiff_uassoc() example",
    "output": "<?php\nclass\ncr\n{\n    private\n$priv_member\n;\n    function\n__construct\n(\n$val\n)\n    {\n\n$this\n->\npriv_member\n=\n$val\n;\n    }\n    static function\ncomp_func_cr\n(\n$a\n,\n$b\n)\n    {\n        if (\n$a\n->\npriv_member\n===\n$b\n->\npriv_member\n) return\n0\n;\n        return (\n$a\n->\npriv_member\n>\n$b\n->\npriv_member\n)?\n1\n:-\n1\n;\n    }\n    static function\ncomp_func_key\n(\n$a\n,\n$b\n)\n    {\n        if (\n$a\n===\n$b\n) return\n0\n;\n        return (\n$a\n>\n$b\n)?\n1\n:-\n1\n;\n    }\n}\n$a\n= array(\n\"0.1\"\n=> new\ncr\n(\n9\n),\n\"0.5\"\n=> new\ncr\n(\n12\n),\n0\n=> new\ncr\n(\n23\n),\n1\n=> new\ncr\n(\n4\n),\n2\n=> new\ncr\n(-\n15\n),);\n$b\n= array(\n\"0.2\"\n=> new\ncr\n(\n9\n),\n\"0.5\"\n=> new\ncr\n(\n22\n),\n0\n=> new\ncr\n(\n3\n),\n1\n=> new\ncr\n(\n4\n),\n2\n=> new\ncr\n(-\n15\n),);\n$result\n=\narray_udiff_uassoc\n(\n$a\n,\n$b\n, array(\n\"cr\"\n,\n\"comp_func_cr\"\n), array(\n\"cr\"\n,\n\"comp_func_key\"\n));\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_uintersect() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"brown\"\n,\n\"c\"\n=>\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"a\"\n=>\n\"GREEN\"\n,\n\"B\"\n=>\n\"brown\"\n,\n\"yellow\"\n,\n\"red\"\n);\nprint_r\n(\narray_uintersect\n(\n$array1\n,\n$array2\n,\n\"strcasecmp\"\n));\n?>"
  },
  {
    "input": "Example #1 array_uintersect_assoc() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"brown\"\n,\n\"c\"\n=>\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"a\"\n=>\n\"GREEN\"\n,\n\"B\"\n=>\n\"brown\"\n,\n\"yellow\"\n,\n\"red\"\n);\nprint_r\n(\narray_uintersect_assoc\n(\n$array1\n,\n$array2\n,\n\"strcasecmp\"\n));\n?>"
  },
  {
    "input": "Example #1 array_uintersect_uassoc() example",
    "output": "<?php\n$array1\n= array(\n\"a\"\n=>\n\"green\"\n,\n\"b\"\n=>\n\"brown\"\n,\n\"c\"\n=>\n\"blue\"\n,\n\"red\"\n);\n$array2\n= array(\n\"a\"\n=>\n\"GREEN\"\n,\n\"B\"\n=>\n\"brown\"\n,\n\"yellow\"\n,\n\"red\"\n);\nprint_r\n(\narray_uintersect_uassoc\n(\n$array1\n,\n$array2\n,\n\"strcasecmp\"\n,\n\"strcasecmp\"\n));\n?>"
  },
  {
    "input": "Example #1 array_unique() example",
    "output": "<?php\n$input\n= [\n\"a\"\n=>\n\"green\"\n,\n\"red\"\n,\n\"b\"\n=>\n\"green\"\n,\n\"blue\"\n,\n\"red\"\n];\n$result\n=\narray_unique\n(\n$input\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #2 array_unique() and types",
    "output": "<?php\n$input\n= [\n4\n,\n\"4\"\n,\n\"3\"\n,\n4\n,\n3\n,\n\"3\"\n];\n$result\n=\narray_unique\n(\n$input\n);\nvar_dump\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 array_unshift() example",
    "output": "<?php\n$queue\n= [\n\n\"orange\"\n,\n\n\"banana\"\n];\narray_unshift\n(\n$queue\n,\n\"apple\"\n,\n\"raspberry\"\n);\nvar_dump\n(\n$queue\n);\n?>"
  },
  {
    "input": "Example #1 array_values() example",
    "output": "<?php\n$array\n= array(\n\"size\"\n=>\n\"XL\"\n,\n\"color\"\n=>\n\"gold\"\n);\nprint_r\n(\narray_values\n(\n$array\n));\n?>"
  },
  {
    "input": "Example #1 array_walk() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\nfunction\ntest_alter\n(&\n$item1\n,\n$key\n,\n$prefix\n)\n{\n\n$item1\n=\n\"\n$prefix\n:\n$item1\n\"\n;\n}\nfunction\ntest_print\n(\n$item2\n,\n$key\n)\n{\n    echo\n\"\n$key\n.\n$item2\n\\n\"\n;\n}\necho\n\"Before ...:\\n\"\n;\narray_walk\n(\n$fruits\n,\n'test_print'\n);\narray_walk\n(\n$fruits\n,\n'test_alter'\n,\n'fruit'\n);\necho\n\"... and after:\\n\"\n;\narray_walk\n(\n$fruits\n,\n'test_print'\n);\n?>"
  },
  {
    "input": "Example #2 array_walk() example using anonymous function",
    "output": "<?php\n$elements\n= [\n'a'\n,\n'b'\n,\n'c'\n];\narray_walk\n(\n$elements\n, function (\n$value\n,\n$key\n) {\n  echo\n\"\n{\n$key\n}\n =>\n{\n$value\n}\n\\n\"\n;\n});\n?>"
  },
  {
    "input": "Example #1 array_walk_recursive() example",
    "output": "<?php\n$sweet\n= array(\n'a'\n=>\n'apple'\n,\n'b'\n=>\n'banana'\n);\n$fruits\n= array(\n'sweet'\n=>\n$sweet\n,\n'sour'\n=>\n'lemon'\n);\nfunction\ntest_print\n(\n$item\n,\n$key\n)\n{\n    echo\n\"\n$key\n holds\n$item\n\\n\"\n;\n}\narray_walk_recursive\n(\n$fruits\n,\n'test_print'\n);\n?>"
  },
  {
    "input": "Example #1 arsort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\narsort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 asort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\nasort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 compact() example",
    "output": "<?php\n$city\n=\n\"San Francisco\"\n;\n$state\n=\n\"CA\"\n;\n$event\n=\n\"SIGGRAPH\"\n;\n$location_vars\n= array(\n\"city\"\n,\n\"state\"\n);\n$result\n=\ncompact\n(\n\"event\"\n,\n$location_vars\n);\nprint_r\n(\n$result\n);\n?>"
  },
  {
    "input": "Example #1 count() example",
    "output": "<?php\n$a\n[\n0\n] =\n1\n;\n$a\n[\n1\n] =\n3\n;\n$a\n[\n2\n] =\n5\n;\nvar_dump\n(\ncount\n(\n$a\n));\n$b\n[\n0\n]  =\n7\n;\n$b\n[\n5\n]  =\n9\n;\n$b\n[\n10\n] =\n11\n;\nvar_dump\n(\ncount\n(\n$b\n));\n?>"
  },
  {
    "input": "Example #2 count() non Countable|array example (bad example - don't do this)",
    "output": "<?php\n$b\n[\n0\n]  =\n7\n;\n$b\n[\n5\n]  =\n9\n;\n$b\n[\n10\n] =\n11\n;\nvar_dump\n(\ncount\n(\n$b\n));\nvar_dump\n(\ncount\n(\nnull\n));\nvar_dump\n(\ncount\n(\nfalse\n));\n?>"
  },
  {
    "input": "Example #3 Recursive count() example",
    "output": "<?php\n$food\n= array(\n'fruits'\n=> array(\n'orange'\n,\n'banana'\n,\n'apple'\n),\n\n'veggie'\n=> array(\n'carrot'\n,\n'collard'\n,\n'pea'\n));\n// recursive count\nvar_dump\n(\ncount\n(\n$food\n,\nCOUNT_RECURSIVE\n));\n// normal count\nvar_dump\n(\ncount\n(\n$food\n));\n?>"
  },
  {
    "input": "Example #4 Countable object",
    "output": "<?php\nclass\nCountOfMethods\nimplements\nCountable\n{\n    private function\nsomeMethod\n()\n    {\n    }\n    public function\ncount\n():\nint\n\n{\n        return\ncount\n(\nget_class_methods\n(\n$this\n));\n    }\n}\n$obj\n= new\nCountOfMethods\n();\nvar_dump\n(\ncount\n(\n$obj\n));\n?>"
  },
  {
    "input": "Example #1 Example use of current() and friends",
    "output": "<?php\n$transport\n= array(\n'foot'\n,\n'bike'\n,\n'car'\n,\n'plane'\n);\n$mode\n=\ncurrent\n(\n$transport\n);\n// $mode = 'foot';\n$mode\n=\nnext\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\ncurrent\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\nprev\n(\n$transport\n);\n// $mode = 'foot';\n$mode\n=\nend\n(\n$transport\n);\n// $mode = 'plane';\n$mode\n=\ncurrent\n(\n$transport\n);\n// $mode = 'plane';\n$arr\n= array();\nvar_dump\n(\ncurrent\n(\n$arr\n));\n// bool(false)\n$arr\n= array(array());\nvar_dump\n(\ncurrent\n(\n$arr\n));\n// array(0) { }\n?>"
  },
  {
    "input": "Example #1 each() examples",
    "output": "<?php\n$foo\n= array(\n\"bob\"\n,\n\"fred\"\n,\n\"jussi\"\n,\n\"jouni\"\n,\n\"egon\"\n,\n\"marliese\"\n);\n$bar\n=\neach\n(\n$foo\n);\nprint_r\n(\n$bar\n);\n?>"
  },
  {
    "input": "Example #2 Traversing an array with each()",
    "output": "<?php\n$fruit\n= array(\n'a'\n=>\n'apple'\n,\n'b'\n=>\n'banana'\n,\n'c'\n=>\n'cranberry'\n);\nreset\n(\n$fruit\n);\nwhile (list(\n$key\n,\n$val\n) =\neach\n(\n$fruit\n)) {\n    echo\n\"\n$key\n =>\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 end() example",
    "output": "<?php\n$fruits\n= array(\n'apple'\n,\n'banana'\n,\n'cranberry'\n);\necho\nend\n(\n$fruits\n);\n// cranberry\n?>"
  },
  {
    "input": "Example #1 in_array() example",
    "output": "<?php\n$os\n= array(\n\"Mac\"\n,\n\"NT\"\n,\n\"Irix\"\n,\n\"Linux\"\n);\nif (\nin_array\n(\n\"Irix\"\n,\n$os\n)) {\n    echo\n\"Got Irix\"\n;\n}\nif (\nin_array\n(\n\"mac\"\n,\n$os\n)) {\n    echo\n\"Got mac\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 in_array() with strict example",
    "output": "<?php\n$a\n= array(\n'1.10'\n,\n12.4\n,\n1.13\n);\nif (\nin_array\n(\n'12.4'\n,\n$a\n,\ntrue\n)) {\n    echo\n\"'12.4' found with strict check\\n\"\n;\n}\nif (\nin_array\n(\n1.13\n,\n$a\n,\ntrue\n)) {\n    echo\n\"1.13 found with strict check\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 in_array() with an array as needle",
    "output": "<?php\n$a\n= array(array(\n'p'\n,\n'h'\n), array(\n'p'\n,\n'r'\n),\n'o'\n);\nif (\nin_array\n(array(\n'p'\n,\n'h'\n),\n$a\n)) {\n    echo\n\"'ph' was found\\n\"\n;\n}\nif (\nin_array\n(array(\n'f'\n,\n'i'\n),\n$a\n)) {\n    echo\n\"'fi' was found\\n\"\n;\n}\nif (\nin_array\n(\n'o'\n,\n$a\n)) {\n    echo\n\"'o' was found\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 key() example",
    "output": "<?php\n$array\n= array(\n\n'fruit1'\n=>\n'apple'\n,\n\n'fruit2'\n=>\n'orange'\n,\n\n'fruit3'\n=>\n'grape'\n,\n\n'fruit4'\n=>\n'apple'\n,\n\n'fruit5'\n=>\n'apple'\n);\n// this cycle echoes all associative array\n// key where value equals \"apple\"\nwhile (\n$fruit_name\n=\ncurrent\n(\n$array\n)) {\n    if (\n$fruit_name\n==\n'apple'\n) {\n        echo\nkey\n(\n$array\n),\n\"\\n\"\n;\n    }\n\nnext\n(\n$array\n);\n}\n?>"
  },
  {
    "input": "Example #1 krsort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\nkrsort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ksort() example",
    "output": "<?php\n$fruits\n= array(\n\"d\"\n=>\n\"lemon\"\n,\n\"a\"\n=>\n\"orange\"\n,\n\"b\"\n=>\n\"banana\"\n,\n\"c\"\n=>\n\"apple\"\n);\nksort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 ksort() with int keys",
    "output": "<?php\n$a\n= [\n0\n=>\n'First'\n,\n2\n=>\n'Last'\n,\n1\n=>\n'Middle'\n];\nvar_dump\n(\n$a\n);\nksort\n(\n$a\n);\nvar_dump\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #1 list() examples",
    "output": "<?php\n$info\n= array(\n'coffee'\n,\n'brown'\n,\n'caffeine'\n);\n// Listing all the variables\nlist(\n$drink\n,\n$color\n,\n$power\n) =\n$info\n;\necho\n\"\n$drink\n is\n$color\n and\n$power\n makes it special.\\n\"\n;\n// Listing some of them\nlist(\n$drink\n, ,\n$power\n) =\n$info\n;\necho\n\"\n$drink\n has\n$power\n.\\n\"\n;\n// Or let's skip to only the third one\nlist( , ,\n$power\n) =\n$info\n;\necho\n\"I need\n$power\n!\\n\"\n;\n// list() doesn't work with strings\nlist(\n$bar\n) =\n\"abcde\"\n;\nvar_dump\n(\n$bar\n);\n// NULL\n?>"
  },
  {
    "input": "Example #2 An example use of list()",
    "output": "<?php\n$result\n=\n$pdo\n->\nquery\n(\n\"SELECT id, name FROM employees\"\n);\nwhile (list(\n$id\n,\n$name\n) =\n$result\n->\nfetch\n(\nPDO\n::\nFETCH_NUM\n)) {\n    echo\n\"id:\n$id\n, name:\n$name\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Using nested list()",
    "output": "<?php\nlist(\n$a\n, list(\n$b\n,\n$c\n)) = array(\n1\n, array(\n2\n,\n3\n));\nvar_dump\n(\n$a\n,\n$b\n,\n$c\n);\n?>"
  },
  {
    "input": "Example #1 natcasesort() example",
    "output": "<?php\n$array1\n=\n$array2\n= array(\n'IMG0.png'\n,\n'img12.png'\n,\n'img10.png'\n,\n'img2.png'\n,\n'img1.png'\n,\n'IMG3.png'\n);\nsort\n(\n$array1\n);\necho\n\"Standard sorting\\n\"\n;\nprint_r\n(\n$array1\n);\nnatcasesort\n(\n$array2\n);\necho\n\"\\nNatural order sorting (case-insensitive)\\n\"\n;\nprint_r\n(\n$array2\n);\n?>"
  },
  {
    "input": "Example #1 natsort() examples demonstrating basic usage",
    "output": "<?php\n$array1\n=\n$array2\n= array(\n\"img12.png\"\n,\n\"img10.png\"\n,\n\"img2.png\"\n,\n\"img1.png\"\n);\nasort\n(\n$array1\n);\necho\n\"Standard sorting\\n\"\n;\nprint_r\n(\n$array1\n);\nnatsort\n(\n$array2\n);\necho\n\"\\nNatural order sorting\\n\"\n;\nprint_r\n(\n$array2\n);\n?>"
  },
  {
    "input": "Example #2 natsort() examples demonstrating potential gotchas",
    "output": "<?php\necho\n\"Negative numbers\\n\"\n;\n$negative\n= array(\n'-5'\n,\n'3'\n,\n'-2'\n,\n'0'\n,\n'-1000'\n,\n'9'\n,\n'1'\n);\nprint_r\n(\n$negative\n);\nnatsort\n(\n$negative\n);\nprint_r\n(\n$negative\n);\necho\n\"Zero padding\\n\"\n;\n$zeros\n= array(\n'09'\n,\n'8'\n,\n'10'\n,\n'009'\n,\n'011'\n,\n'0'\n);\nprint_r\n(\n$zeros\n);\nnatsort\n(\n$zeros\n);\nprint_r\n(\n$zeros\n);\n?>"
  },
  {
    "input": "Example #1 Example use of next() and friends",
    "output": "<?php\n$transport\n= array(\n'foot'\n,\n'bike'\n,\n'car'\n,\n'plane'\n);\n$mode\n=\ncurrent\n(\n$transport\n);\n// $mode = 'foot';\n$mode\n=\nnext\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\nnext\n(\n$transport\n);\n// $mode = 'car';\n$mode\n=\nprev\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\nend\n(\n$transport\n);\n// $mode = 'plane';\n?>"
  },
  {
    "input": "Example #1 Example use of prev() and friends",
    "output": "<?php\n$transport\n= array(\n'foot'\n,\n'bike'\n,\n'car'\n,\n'plane'\n);\n$mode\n=\ncurrent\n(\n$transport\n);\n// $mode = 'foot';\n$mode\n=\nnext\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\nnext\n(\n$transport\n);\n// $mode = 'car';\n$mode\n=\nprev\n(\n$transport\n);\n// $mode = 'bike';\n$mode\n=\nend\n(\n$transport\n);\n// $mode = 'plane';\n?>"
  },
  {
    "input": "Example #1 range() examples",
    "output": "<?php\necho\nimplode\n(\n', '\n,\nrange\n(\n0\n,\n12\n)),\nPHP_EOL\n;\necho\nimplode\n(\n', '\n,\nrange\n(\n0\n,\n100\n,\n10\n)),\nPHP_EOL\n;\necho\nimplode\n(\n', '\n,\nrange\n(\n'a'\n,\n'i'\n)),\nPHP_EOL\n;\necho\nimplode\n(\n', '\n,\nrange\n(\n'c'\n,\n'a'\n)),\nPHP_EOL\n;\necho\nimplode\n(\n', '\n,\nrange\n(\n'A'\n,\n'z'\n)),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 reset() example",
    "output": "<?php\n$array\n= array(\n'step one'\n,\n'step two'\n,\n'step three'\n,\n'step four'\n);\n// by default, the pointer is on the first element\necho\ncurrent\n(\n$array\n) .\n\"<br />\\n\"\n;\n// \"step one\"\n// skip two steps\nnext\n(\n$array\n);\nnext\n(\n$array\n);\necho\ncurrent\n(\n$array\n) .\n\"<br />\\n\"\n;\n// \"step three\"\n// reset pointer, start again on step one\nreset\n(\n$array\n);\necho\ncurrent\n(\n$array\n) .\n\"<br />\\n\"\n;\n// \"step one\"\n?>"
  },
  {
    "input": "Example #1 rsort() example",
    "output": "<?php\n$fruits\n= array(\n\"lemon\"\n,\n\"orange\"\n,\n\"banana\"\n,\n\"apple\"\n);\nrsort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"\n$key\n =\n$val\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 shuffle() example",
    "output": "<?php\n$numbers\n=\nrange\n(\n1\n,\n20\n);\nshuffle\n(\n$numbers\n);\nforeach (\n$numbers\nas\n$number\n) {\n    echo\n\"\n$number\n \"\n;\n}\n?>"
  },
  {
    "input": "Example #1 sort() example",
    "output": "<?php\n$fruits\n= array(\n\"lemon\"\n,\n\"orange\"\n,\n\"banana\"\n,\n\"apple\"\n);\nsort\n(\n$fruits\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"fruits[\"\n.\n$key\n.\n\"] = \"\n.\n$val\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 sort() example using case-insensitive natural\n    ordering",
    "output": "<?php\n$fruits\n= array(\n\n\"Orange1\"\n,\n\"orange2\"\n,\n\"Orange3\"\n,\n\"orange20\"\n);\nsort\n(\n$fruits\n,\nSORT_NATURAL\n|\nSORT_FLAG_CASE\n);\nforeach (\n$fruits\nas\n$key\n=>\n$val\n) {\n    echo\n\"fruits[\"\n.\n$key\n.\n\"] = \"\n.\n$val\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Basic uasort() example",
    "output": "<?php\n// Comparison function\nfunction\ncmp\n(\n$a\n,\n$b\n) {\n    if (\n$a\n==\n$b\n) {\n        return\n0\n;\n    }\n    return (\n$a\n<\n$b\n) ? -\n1\n:\n1\n;\n}\n// Array to be sorted\n$array\n= array(\n'a'\n=>\n4\n,\n'b'\n=>\n8\n,\n'c'\n=> -\n1\n,\n'd'\n=> -\n9\n,\n'e'\n=>\n2\n,\n'f'\n=>\n5\n,\n'g'\n=>\n3\n,\n'h'\n=> -\n4\n);\nprint_r\n(\n$array\n);\n// Sort and print the resulting array\nuasort\n(\n$array\n,\n'cmp'\n);\nprint_r\n(\n$array\n);\n?>"
  },
  {
    "input": "Example #1 uksort() example",
    "output": "<?php\nfunction\ncmp\n(\n$a\n,\n$b\n)\n{\n\n$a\n=\npreg_replace\n(\n'@^(a|an|the) @'\n,\n''\n,\n$a\n);\n\n$b\n=\npreg_replace\n(\n'@^(a|an|the) @'\n,\n''\n,\n$b\n);\n    return\nstrcasecmp\n(\n$a\n,\n$b\n);\n}\n$a\n= array(\n\"John\"\n=>\n1\n,\n\"the Earth\"\n=>\n2\n,\n\"an apple\"\n=>\n3\n,\n\"a banana\"\n=>\n4\n);\nuksort\n(\n$a\n,\n\"cmp\"\n);\nforeach (\n$a\nas\n$key\n=>\n$value\n) {\n    echo\n\"\n$key\n:\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 usort() example",
    "output": "<?php\nfunction\ncmp\n(\n$a\n,\n$b\n)\n{\n    if (\n$a\n==\n$b\n) {\n        return\n0\n;\n    }\n    return (\n$a\n<\n$b\n) ? -\n1\n:\n1\n;\n}\n$a\n= array(\n3\n,\n2\n,\n5\n,\n6\n,\n1\n);\nusort\n(\n$a\n,\n\"cmp\"\n);\nforeach (\n$a\nas\n$key\n=>\n$value\n) {\n    echo\n\"\n$key\n:\n$value\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 \n     usort() example using multi-dimensional array",
    "output": "<?php\nfunction\ncmp\n(\n$a\n,\n$b\n)\n{\n    return\nstrcmp\n(\n$a\n[\n\"fruit\"\n],\n$b\n[\n\"fruit\"\n]);\n}\n$fruits\n[\n0\n][\n\"fruit\"\n] =\n\"lemons\"\n;\n$fruits\n[\n1\n][\n\"fruit\"\n] =\n\"apples\"\n;\n$fruits\n[\n2\n][\n\"fruit\"\n] =\n\"grapes\"\n;\nusort\n(\n$fruits\n,\n\"cmp\"\n);\nforeach (\n$fruits\nas\n$key\n=>\n$value\n) {\n    echo\n\"\\$fruits[\n$key\n]: \"\n.\n$value\n[\n\"fruit\"\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 \n     usort() example using a member function of an object",
    "output": "<?php\nclass\nTestObj\n{\n    public\nstring $name\n;\n    function\n__construct\n(\n$name\n)\n    {\n\n$this\n->\nname\n=\n$name\n;\n    }\n\n/* This is the static comparing function: */\n\nstatic function\ncmp_obj\n(\n$a\n,\n$b\n)\n    {\n        return\nstrtolower\n(\n$a\n->\nname\n) <=>\nstrtolower\n(\n$b\n->\nname\n);\n    }\n}\n$a\n[] = new\nTestObj\n(\n\"c\"\n);\n$a\n[] = new\nTestObj\n(\n\"b\"\n);\n$a\n[] = new\nTestObj\n(\n\"d\"\n);\nusort\n(\n$a\n, [\nTestObj\n::class,\n\"cmp_obj\"\n]);\nforeach (\n$a\nas\n$item\n) {\n    echo\n$item\n->\nname\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #4 \n     usort() example using a closure\n     to sort a multi-dimensional array",
    "output": "<?php\n$array\n[\n0\n] = array(\n'key_a'\n=>\n'z'\n,\n'key_b'\n=>\n'c'\n);\n$array\n[\n1\n] = array(\n'key_a'\n=>\n'x'\n,\n'key_b'\n=>\n'b'\n);\n$array\n[\n2\n] = array(\n'key_a'\n=>\n'y'\n,\n'key_b'\n=>\n'a'\n);\nfunction\nbuild_sorter\n(\n$key\n) {\n    return function (\n$a\n,\n$b\n) use (\n$key\n) {\n        return\nstrnatcmp\n(\n$a\n[\n$key\n],\n$b\n[\n$key\n]);\n    };\n}\nusort\n(\n$array\n,\nbuild_sorter\n(\n'key_b'\n));\nforeach (\n$array\nas\n$item\n) {\n    echo\n$item\n[\n'key_a'\n] .\n', '\n.\n$item\n[\n'key_b'\n] .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 test_script.php",
    "output": "<?php\n// register autoloader to load classes\nspl_autoload_register\n();\nfunction\nprintProperties\n(\n$obj\n)\n{\n    foreach (\nget_object_vars\n(\n$obj\n) as\n$prop\n=>\n$val\n) {\n        echo\n\"\\t\n$prop\n =\n$val\n\\n\"\n;\n    }\n}\nfunction\nprintMethods\n(\n$obj\n)\n{\n\n$arr\n=\nget_class_methods\n(\nget_class\n(\n$obj\n));\n    foreach (\n$arr\nas\n$method\n) {\n        echo\n\"\\tfunction\n$method\n()\\n\"\n;\n    }\n}\nfunction\nobjectBelongsTo\n(\n$obj\n,\n$class\n)\n{\n    if (\nis_subclass_of\n(\n$obj\n,\n$class\n)) {\n        echo\n\"Object belongs to class \"\n.\nget_class\n(\n$obj\n);\n        echo\n\", a subclass of\n$class\n\\n\"\n;\n    } else {\n        echo\n\"Object does not belong to a subclass of\n$class\n\\n\"\n;\n    }\n}\n// instantiate 2 objects\n$veggie\n= new\nVegetable\n(\ntrue\n,\n\"blue\"\n);\n$leafy\n= new\nSpinach\n();\n// print out information about objects\necho\n\"veggie: CLASS \"\n.\nget_class\n(\n$veggie\n) .\n\"\\n\"\n;\necho\n\"leafy: CLASS \"\n.\nget_class\n(\n$leafy\n);\necho\n\", PARENT \"\n.\nget_parent_class\n(\n$leafy\n) .\n\"\\n\"\n;\n// show veggie properties\necho\n\"\\nveggie: Properties\\n\"\n;\nprintProperties\n(\n$veggie\n);\n// and leafy methods\necho\n\"\\nleafy: Methods\\n\"\n;\nprintMethods\n(\n$leafy\n);\necho\n\"\\nParentage:\\n\"\n;\nobjectBelongsTo\n(\n$leafy\n,\nSpinach\n::class);\nobjectBelongsTo\n(\n$leafy\n,\nVegetable\n::class);\n?>"
  },
  {
    "input": "Example #1 class_alias() example",
    "output": "<?php\nclass\nFoo\n{ }\nclass_alias\n(\n'Foo'\n,\n'Bar'\n);\n$a\n= new\nFoo\n;\n$b\n= new\nBar\n;\n// the objects are the same\nvar_dump\n(\n$a\n==\n$b\n,\n$a\n===\n$b\n);\nvar_dump\n(\n$a\ninstanceof\n$b\n);\n// the classes are the same\nvar_dump\n(\n$a\ninstanceof\nFoo\n);\nvar_dump\n(\n$a\ninstanceof\nBar\n);\nvar_dump\n(\n$b\ninstanceof\nFoo\n);\nvar_dump\n(\n$b\ninstanceof\nBar\n);\n?>"
  },
  {
    "input": "Example #1 class_exists() example",
    "output": "<?php\n// Check that the class exists before trying to use it\nif (\nclass_exists\n(\n'MyClass'\n)) {\n\n$myclass\n= new\nMyClass\n();\n}\n?>"
  },
  {
    "input": "Example #2 autoload parameter example",
    "output": "<?php\nspl_autoload_register\n(function (\n$class_name\n) {\n    include\n$class_name\n.\n'.php'\n;\n\n// Check to see whether the include declared the class\n\nif (!\nclass_exists\n(\n$class_name\n,\nfalse\n)) {\n        throw new\nLogicException\n(\n\"Unable to load class:\n$class_name\n\"\n);\n    }\n});\nif (\nclass_exists\n(\nMyClass\n::class)) {\n\n$myclass\n= new\nMyClass\n();\n}\n?>"
  },
  {
    "input": "Example #1 enum_exists() example",
    "output": "<?php\n// Check that the enum exists before trying to use it\nif (\nenum_exists\n(\nSuit\n::class)) {\n\n$myclass\n=\nSuit\n::\nHearts\n;\n}\n?>"
  },
  {
    "input": "Example #1 Using get_called_class()",
    "output": "<?php\nclass\nfoo\n{\n    static public function\ntest\n() {\n\nvar_dump\n(\nget_called_class\n());\n    }\n}\nclass\nbar\nextends\nfoo\n{\n}\nfoo\n::\ntest\n();\nbar\n::\ntest\n();\n?>"
  },
  {
    "input": "Example #1 Using get_class()",
    "output": "<?php\nclass\nfoo\n{\n    function\nname\n()\n    {\n        echo\n\"My name is \"\n,\nget_class\n(\n$this\n) ,\n\"\\n\"\n;\n    }\n}\n// create an object\n$bar\n= new\nfoo\n();\n// external call\necho\n\"Its name is \"\n,\nget_class\n(\n$bar\n) ,\n\"\\n\"\n;\n// internal call\n$bar\n->\nname\n();\n?>"
  },
  {
    "input": "Example #2 Using get_class() in superclass",
    "output": "<?php\nabstract class\nbar\n{\n    public function\n__construct\n()\n    {\n\nvar_dump\n(\nget_class\n(\n$this\n));\n\nvar_dump\n(\nget_class\n());\n    }\n}\nclass\nfoo\nextends\nbar\n{\n}\nnew\nfoo\n;\n?>"
  },
  {
    "input": "Example #3 Using get_class() with namespaced classes",
    "output": "<?php\nnamespace\nFoo\\Bar\n;\nclass\nBaz\n{\n    public function\n__construct\n()\n    {\n    }\n}\n$baz\n= new\n\\Foo\\Bar\\Baz\n;\nvar_dump\n(\nget_class\n(\n$baz\n));\n?>"
  },
  {
    "input": "Example #1 get_class_methods() example",
    "output": "<?php\nclass\nmyclass\n{\n\n// constructor\n\nfunction\n__construct\n()\n    {\n        return(\ntrue\n);\n    }\n\n// method 1\n\nfunction\nmyfunc1\n()\n    {\n        return(\ntrue\n);\n    }\n\n// method 2\n\nfunction\nmyfunc2\n()\n    {\n        return(\ntrue\n);\n    }\n}\n$class_methods\n=\nget_class_methods\n(\n'myclass'\n);\n// or\n$class_methods\n=\nget_class_methods\n(new\nmyclass\n());\nforeach (\n$class_methods\nas\n$method_name\n) {\n    echo\n\"\n$method_name\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 get_class_vars() example",
    "output": "<?php\nclass\nMyClass\n{\n    public\n$var1\n;\n// This has no explicit default value (technically it has NULL as a default)...\n\npublic\n$var2\n=\n\"xyz\"\n;\n    public\n$var3\n=\n100\n;\n    private\n$var4\n;\n    public function\n__construct\n()\n    {\n\n// Change some properties\n\n$this\n->\nvar1\n=\n\"foo\"\n;\n\n$this\n->\nvar2\n=\n\"bar\"\n;\n        return\ntrue\n;\n    }\n}\n$my_class\n= new\nMyClass\n();\n$class_vars\n=\nget_class_vars\n(\nget_class\n(\n$my_class\n));\nforeach (\n$class_vars\nas\n$name\n=>\n$value\n) {\n    echo\n\"\n{\n$name\n}\n: \"\n,\nvar_export\n(\n$value\n,\ntrue\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 get_class_vars() and scoping behaviour",
    "output": "<?php\nfunction\nformat\n(\n$array\n)\n{\n    return\nimplode\n(\n'|'\n,\narray_keys\n(\n$array\n)) .\n\"\\r\\n\"\n;\n}\nclass\nTestCase\n{\n    public\n$a\n=\n1\n;\n    protected\n$b\n=\n2\n;\n    private\n$c\n=\n3\n;\n    public static function\nexpose\n()\n    {\n        echo\nformat\n(\nget_class_vars\n(\n__CLASS__\n));\n    }\n}\nTestCase\n::\nexpose\n();\necho\nformat\n(\nget_class_vars\n(\n'TestCase'\n));\n?>"
  },
  {
    "input": "Example #1 get_declared_classes() example",
    "output": "<?php\nprint_r\n(\nget_declared_classes\n());\n?>"
  },
  {
    "input": "Example #1 get_declared_interfaces() example",
    "output": "<?php\nprint_r\n(\nget_declared_interfaces\n());\n?>"
  },
  {
    "input": "Example #1 get_mangled_object_vars() example",
    "output": "<?php\nclass\nA\n{\n    public\n$public\n=\n1\n;\n    protected\n$protected\n=\n2\n;\n    private\n$private\n=\n3\n;\n}\nclass\nB\nextends\nA\n{\n    private\n$private\n=\n4\n;\n}\n$object\n= new\nB\n;\n$object\n->\ndynamic\n=\n5\n;\n$object\n->{\n'6'\n} =\n6\n;\nvar_dump\n(\nget_mangled_object_vars\n(\n$object\n));\nclass\nAO\nextends\nArrayObject\n{\n    private\n$private\n=\n1\n;\n}\n$arrayObject\n= new\nAO\n([\n'x'\n=>\n'y'\n]);\n$arrayObject\n->\ndynamic\n=\n2\n;\nvar_dump\n(\nget_mangled_object_vars\n(\n$arrayObject\n));"
  },
  {
    "input": "Example #1 Use of get_object_vars()",
    "output": "<?php\nclass\nfoo\n{\n    private\n$a\n;\n    public\n$b\n=\n1\n;\n    public\n$c\n;\n    private\n$d\n;\n    static\n$e\n;\n\n    public function\ntest\n() {\n\nvar_dump\n(\nget_object_vars\n(\n$this\n));\n    }\n}\n$test\n= new\nfoo\n;\nvar_dump\n(\nget_object_vars\n(\n$test\n));\n$test\n->\ntest\n();\n?>"
  },
  {
    "input": "Example #1 Using get_parent_class()",
    "output": "<?php\nclass\nDad\n{\n    function\n__construct\n()\n    {\n\n// implements some logic\n\n}\n}\nclass\nChild\nextends\nDad\n{\n    function\n__construct\n()\n    {\n        echo\n\"I'm \"\n,\nget_parent_class\n(\n$this\n) ,\n\"'s son\\n\"\n;\n    }\n}\nclass\nChild2\nextends\nDad\n{\n    function\n__construct\n()\n    {\n        echo\n\"I'm \"\n,\nget_parent_class\n(\n'child2'\n) ,\n\"'s son too\\n\"\n;\n    }\n}\n$foo\n= new\nchild\n();\n$bar\n= new\nchild2\n();\n?>"
  },
  {
    "input": "Example #1 interface_exists() example",
    "output": "<?php\n// Check the interface exists before trying to use it\nif (\ninterface_exists\n(\n'MyInterface'\n)) {\n    class\nMyClass\nimplements\nMyInterface\n\n{\n\n// Methods\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 is_a() example",
    "output": "<?php\n// define a class\nclass\nWidgetFactory\n{\n  var\n$oink\n=\n'moo'\n;\n}\n// create a new object\n$WF\n= new\nWidgetFactory\n();\nif (\nis_a\n(\n$WF\n,\n'WidgetFactory'\n)) {\n  echo\n\"yes, \\$WF is still a WidgetFactory\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Using the instanceof operator",
    "output": "<?php\nif (\n$WF\ninstanceof\nWidgetFactory\n) {\n    echo\n'Yes, $WF is a WidgetFactory'\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_subclass_of() example",
    "output": "<?php\n// define a class\nclass\nWidgetFactory\n{\n  var\n$oink\n=\n'moo'\n;\n}\n// define a child class\nclass\nWidgetFactory_Child\nextends\nWidgetFactory\n{\n  var\n$oink\n=\n'oink'\n;\n}\n// create a new object\n$WF\n= new\nWidgetFactory\n();\n$WFC\n= new\nWidgetFactory_Child\n();\nif (\nis_subclass_of\n(\n$WFC\n,\n'WidgetFactory'\n)) {\n  echo\n\"yes, \\$WFC is a subclass of WidgetFactory\\n\"\n;\n} else {\n  echo\n\"no, \\$WFC is not a subclass of WidgetFactory\\n\"\n;\n}\nif (\nis_subclass_of\n(\n$WF\n,\n'WidgetFactory'\n)) {\n  echo\n\"yes, \\$WF is a subclass of WidgetFactory\\n\"\n;\n} else {\n  echo\n\"no, \\$WF is not a subclass of WidgetFactory\\n\"\n;\n}\nif (\nis_subclass_of\n(\n'WidgetFactory_Child'\n,\n'WidgetFactory'\n)) {\n  echo\n\"yes, WidgetFactory_Child is a subclass of WidgetFactory\\n\"\n;\n} else {\n  echo\n\"no, WidgetFactory_Child is not a subclass of WidgetFactory\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 is_subclass_of() using interface example",
    "output": "<?php\n// Define the Interface\ninterface\nMyInterface\n{\n  public function\nMyFunction\n();\n}\n// Define the class implementation of the interface\nclass\nMyClass\nimplements\nMyInterface\n{\n  public function\nMyFunction\n()\n  {\n    return\n\"MyClass Implements MyInterface!\"\n;\n  }\n}\n// Instantiate the object\n$my_object\n= new\nMyClass\n;\n// Works since 5.3.7\n// Test using the object instance of the class\nif (\nis_subclass_of\n(\n$my_object\n,\n'MyInterface'\n)) {\n  echo\n\"Yes, \\$my_object is a subclass of MyInterface\\n\"\n;\n} else {\n  echo\n\"No, \\$my_object is not a subclass of MyInterface\\n\"\n;\n}\n// Test using a string of the class name\nif (\nis_subclass_of\n(\n'MyClass'\n,\n'MyInterface'\n)) {\n  echo\n\"Yes, MyClass is a subclass of MyInterface\\n\"\n;\n} else {\n  echo\n\"No, MyClass is not a subclass of MyInterface\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 method_exists() example",
    "output": "<?php\n$directory\n= new\nDirectory\n(\n'.'\n);\nvar_dump\n(\nmethod_exists\n(\n$directory\n,\n'read'\n));\n?>"
  },
  {
    "input": "Example #2 Static method_exists() example",
    "output": "<?php\nvar_dump\n(\nmethod_exists\n(\n'Directory'\n,\n'read'\n));\n?>"
  },
  {
    "input": "Example #1 A property_exists() example",
    "output": "<?php\nclass\nmyClass\n{\n    public\n$mine\n;\n    private\n$xpto\n;\n    static protected\n$test\n;\n    static function\ntest\n() {\n\nvar_dump\n(\nproperty_exists\n(\n'myClass'\n,\n'xpto'\n));\n//true\n\n}\n}\nvar_dump\n(\nproperty_exists\n(\n'myClass'\n,\n'mine'\n));\n//true\nvar_dump\n(\nproperty_exists\n(new\nmyClass\n,\n'mine'\n));\n//true\nvar_dump\n(\nproperty_exists\n(\n'myClass'\n,\n'xpto'\n));\n//true\nvar_dump\n(\nproperty_exists\n(\n'myClass'\n,\n'bar'\n));\n//false\nvar_dump\n(\nproperty_exists\n(\n'myClass'\n,\n'test'\n));\n//true\nmyClass\n::\ntest\n();\n?>"
  },
  {
    "input": "Example #1 A ctype_alnum() example (using the default locale)",
    "output": "<?php\n$strings\n= array(\n'AbCd1zyZ9'\n,\n'foo!#$bar'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_alnum\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all letters or digits.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all letters or digits.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_alpha() example (using the default locale)",
    "output": "<?php\n$strings\n= array(\n'KjgWZC'\n,\n'arf12'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_alpha\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all letters.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all letters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_cntrl() example",
    "output": "<?php\n$strings\n= array(\n'string1'\n=>\n\"\\n\\r\\t\"\n,\n'string2'\n=>\n'arf12'\n);\nforeach (\n$strings\nas\n$name\n=>\n$testcase\n) {\n    if (\nctype_cntrl\n(\n$testcase\n)) {\n        echo\n\"The string '\n$name\n' consists of all control characters.\\n\"\n;\n    } else {\n        echo\n\"The string '\n$name\n' does not consist of all control characters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_digit() example",
    "output": "<?php\n$strings\n= array(\n'1820.20'\n,\n'10002'\n,\n'wsl!12'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_digit\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all digits.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all digits.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 A ctype_digit() example comparing strings with integers",
    "output": "<?php\n$numeric_string\n=\n'42'\n;\n$integer\n=\n42\n;\nctype_digit\n(\n$numeric_string\n);\n// true\nctype_digit\n(\n$integer\n);\n// false (ASCII 42 is the * character)\nis_numeric\n(\n$numeric_string\n);\n// true\nis_numeric\n(\n$integer\n);\n// true\n?>"
  },
  {
    "input": "Example #1 A ctype_graph() example",
    "output": "<?php\n$strings\n= array(\n'string1'\n=>\n\"asdf\\n\\r\\t\"\n,\n'string2'\n=>\n'arf12'\n,\n'string3'\n=>\n'LKA#@%.54'\n);\nforeach (\n$strings\nas\n$name\n=>\n$testcase\n) {\n    if (\nctype_graph\n(\n$testcase\n)) {\n        echo\n\"The string '\n$name\n' consists of all (visibly) printable characters.\\n\"\n;\n    } else {\n        echo\n\"The string '\n$name\n' does not consist of all (visibly) printable characters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_lower() example (using the default locale)",
    "output": "<?php\n$strings\n= array(\n'aac123'\n,\n'qiutoas'\n,\n'QASsdks'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_lower\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all lowercase letters.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all lowercase letters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_print() example",
    "output": "<?php\n$strings\n= array(\n'string1'\n=>\n\"asdf\\n\\r\\t\"\n,\n'string2'\n=>\n'arf12'\n,\n'string3'\n=>\n'LKA#@%.54'\n);\nforeach (\n$strings\nas\n$name\n=>\n$testcase\n) {\n    if (\nctype_print\n(\n$testcase\n)) {\n        echo\n\"The string '\n$name\n' consists of all printable characters.\\n\"\n;\n    } else {\n        echo\n\"The string '\n$name\n' does not consist of all printable characters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_punct() example",
    "output": "<?php\n$strings\n= array(\n'ABasdk!@!$#'\n,\n'!@ # $'\n,\n'*&$()'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_punct\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all punctuation.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all punctuation.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_space() example",
    "output": "<?php\n$strings\n= array(\n\n'string1'\n=>\n\"\\n\\r\\t\"\n,\n\n'string2'\n=>\n\"\\narf12\"\n,\n\n'string3'\n=>\n'\\n\\r\\t'\n// note the single quotes\n);\nforeach (\n$strings\nas\n$name\n=>\n$testcase\n) {\n    if (\nctype_space\n(\n$testcase\n)) {\n        echo\n\"The string '\n$name\n' consists of whitespace characters only.\\n\"\n;\n    } else {\n        echo\n\"The string '\n$name\n' contains non-whitespace characters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_upper() example (using the default locale)",
    "output": "<?php\n$strings\n= array(\n'AKLWC139'\n,\n'LMNSDO'\n,\n'akwSKWsm'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_upper\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all uppercase letters.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all uppercase letters.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 A ctype_xdigit() example",
    "output": "<?php\n$strings\n= array(\n'AB10BC99'\n,\n'AR1012'\n,\n'ab12bc99'\n);\nforeach (\n$strings\nas\n$testcase\n) {\n    if (\nctype_xdigit\n(\n$testcase\n)) {\n        echo\n\"The string\n$testcase\n consists of all hexadecimal digits.\\n\"\n;\n    } else {\n        echo\n\"The string\n$testcase\n does not consist of all hexadecimal digits.\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Configuring the default filter to act like htmlspecialchars",
    "output": "filter.default = full_special_chars\nfilter.default_flags = 0"
  },
  {
    "input": "Example #1 \n      Example of using FILTER_CALLBACK to validate\n      a login name",
    "output": "<?php\nfunction\nvalidate_login\n(\n$value\n): ?\nstring\n{\n    if (\nstrlen\n(\n$value\n) >=\n5\n&&\nctype_alnum\n(\n$value\n)) {\n        return\n$value\n;\n    }\n    return\nnull\n;\n}\n$login\n=\n\"val1dL0gin\"\n;\n$filtered_login\n=\nfilter_var\n(\n$login\n,\nFILTER_CALLBACK\n, [\n'options'\n=>\n'validate_login'\n]);\nvar_dump\n(\n$filtered_login\n);\n$login\n=\n\"f&ke login\"\n;\n$filtered_login\n=\nfilter_var\n(\n$login\n,\nFILTER_CALLBACK\n, [\n'options'\n=>\n'validate_login'\n]);\nvar_dump\n(\n$filtered_login\n);\n?>"
  },
  {
    "input": "Example #1 Validating email addresses with filter_var()",
    "output": "<?php\n$email_a\n=\n'joe@example.com'\n;\n$email_b\n=\n'bogus'\n;\nif (\nfilter_var\n(\n$email_a\n,\nFILTER_VALIDATE_EMAIL\n)) {\n    echo\n\"Email address '\n$email_a\n' is considered valid.\\n\"\n;\n}\nif (\nfilter_var\n(\n$email_b\n,\nFILTER_VALIDATE_EMAIL\n)) {\n    echo\n\"Email address '\n$email_b\n' is considered valid.\\n\"\n;\n} else {\n    echo\n\"Email address '\n$email_b\n' is considered invalid.\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Validating IP addresses with filter_var()",
    "output": "<?php\n$ip_a\n=\n'127.0.0.1'\n;\n$ip_b\n=\n'42.42'\n;\nif (\nfilter_var\n(\n$ip_a\n,\nFILTER_VALIDATE_IP\n)) {\n    echo\n\"IP address '\n$ip_a\n' is considered valid.\"\n;\n}\nif (\nfilter_var\n(\n$ip_b\n,\nFILTER_VALIDATE_IP\n)) {\n    echo\n\"IP address '\n$ip_b\n' is considered valid.\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Passing options to filter_var()",
    "output": "<?php\n$int_a\n=\n'1'\n;\n$int_b\n=\n'-1'\n;\n$int_c\n=\n'4'\n;\n$options\n= array(\n\n'options'\n=> array(\n\n'min_range'\n=>\n0\n,\n\n'max_range'\n=>\n3\n,\n    )\n);\nif (\nfilter_var\n(\n$int_a\n,\nFILTER_VALIDATE_INT\n,\n$options\n) !==\nFALSE\n) {\n    echo\n\"Integer A '\n$int_a\n' is considered valid (between 0 and 3).\\n\"\n;\n}\nif (\nfilter_var\n(\n$int_b\n,\nFILTER_VALIDATE_INT\n,\n$options\n) !==\nFALSE\n) {\n    echo\n\"Integer B '\n$int_b\n' is considered valid (between 0 and 3).\\n\"\n;\n}\nif (\nfilter_var\n(\n$int_c\n,\nFILTER_VALIDATE_INT\n,\n$options\n) !==\nFALSE\n) {\n    echo\n\"Integer C '\n$int_c\n' is considered valid (between 0 and 3).\\n\"\n;\n}\n$options\n[\n'options'\n][\n'default'\n] =\n1\n;\nif ((\n$int_c\n=\nfilter_var\n(\n$int_c\n,\nFILTER_VALIDATE_INT\n,\n$options\n)) !==\nFALSE\n) {\n    echo\n\"Integer C '\n$int_c\n' is considered valid (between 0 and 3).\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Sanitizing and validating email addresses",
    "output": "<?php\n$a\n=\n'joe@example.org'\n;\n$b\n=\n'bogus - at - example dot org'\n;\n$c\n=\n'(bogus@example.org)'\n;\n$sanitized_a\n=\nfilter_var\n(\n$a\n,\nFILTER_SANITIZE_EMAIL\n);\nif (\nfilter_var\n(\n$sanitized_a\n,\nFILTER_VALIDATE_EMAIL\n)) {\n    echo\n\"This (a) sanitized email address is considered valid.\\n\"\n;\n}\n$sanitized_b\n=\nfilter_var\n(\n$b\n,\nFILTER_SANITIZE_EMAIL\n);\nif (\nfilter_var\n(\n$sanitized_b\n,\nFILTER_VALIDATE_EMAIL\n)) {\n    echo\n\"This sanitized email address is considered valid.\"\n;\n} else {\n    echo\n\"This (b) sanitized email address is considered invalid.\\n\"\n;\n}\n$sanitized_c\n=\nfilter_var\n(\n$c\n,\nFILTER_SANITIZE_EMAIL\n);\nif (\nfilter_var\n(\n$sanitized_c\n,\nFILTER_VALIDATE_EMAIL\n)) {\n    echo\n\"This (c) sanitized email address is considered valid.\\n\"\n;\n    echo\n\"Before:\n$c\n\\n\"\n;\n    echo\n\"After:\n$sanitized_c\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 A filter_input() example",
    "output": "<?php\n$search_html\n=\nfilter_input\n(\nINPUT_GET\n,\n'search'\n,\nFILTER_SANITIZE_SPECIAL_CHARS\n);\n$search_url\n=\nfilter_input\n(\nINPUT_GET\n,\n'search'\n,\nFILTER_SANITIZE_ENCODED\n);\necho\n\"You have searched for\n$search_html\n.\\n\"\n;\necho\n\"<a href='?search=\n$search_url\n'>Search again.</a>\"\n;\n?>"
  },
  {
    "input": "Example #1 A filter_list() example",
    "output": "<?php\nprint_r\n(\nfilter_list\n());\n?>"
  },
  {
    "input": "Example #1 A filter_var() example",
    "output": "<?php\nvar_dump\n(\nfilter_var\n(\n'bob@example.com'\n,\nFILTER_VALIDATE_EMAIL\n));\nvar_dump\n(\nfilter_var\n(\n'https://example.com'\n,\nFILTER_VALIDATE_URL\n,\nFILTER_FLAG_PATH_REQUIRED\n));\n?>"
  },
  {
    "input": "Example #2 Example validating entries of an array",
    "output": "<?php\n$emails\n= [\n\n\"bob@example.com\"\n,\n\n\"test@example.local\"\n,\n\n\"invalidemail\"\n];\nvar_dump\n(\nfilter_var\n(\n$emails\n,\nFILTER_VALIDATE_EMAIL\n,\nFILTER_REQUIRE_ARRAY\n));\n?>"
  },
  {
    "input": "Example #3 Example of passing an array for options",
    "output": "<?php\n$options\n= [\n\n'options'\n=> [\n\n'min_range'\n=>\n10\n,\n    ],\n\n'flags'\n=>\nFILTER_FLAG_ALLOW_OCTAL\n,\n];\nvar_dump\n(\nfilter_var\n(\n'0755'\n,\nFILTER_VALIDATE_INT\n,\n$options\n));\nvar_dump\n(\nfilter_var\n(\n'011'\n,\nFILTER_VALIDATE_INT\n,\n$options\n));\n?>"
  },
  {
    "input": "Example #4 Providing flags either directly or via an array",
    "output": "<?php\n$str\n=\n'string'\n;\nvar_dump\n(\nfilter_var\n(\n$str\n,\nFILTER_VALIDATE_BOOLEAN\n,\nFILTER_NULL_ON_FAILURE\n));\nvar_dump\n(\nfilter_var\n(\n$str\n,\nFILTER_VALIDATE_BOOLEAN\n, [\n'flags'\n=>\nFILTER_NULL_ON_FAILURE\n]));\n?>"
  },
  {
    "input": "Example #1 A filter_var_array() example",
    "output": "<?php\n$data\n= [\n\n'product_id'\n=>\n'libgd<script>'\n,\n\n'component'\n=>\n'10'\n,\n\n'versions'\n=>\n'2.0.33'\n,\n\n'testscalar'\n=> [\n'2'\n,\n'23'\n,\n'10'\n,\n'12'\n],\n\n'testarray'\n=>\n'2'\n,\n];\n$filters\n= [\n\n'product_id'\n=>\nFILTER_SANITIZE_ENCODED\n,\n\n'component'\n=> [\n\n'filter'\n=>\nFILTER_VALIDATE_INT\n,\n\n'flags'\n=>\nFILTER_FORCE_ARRAY\n,\n\n'options'\n=> [\n\n'min_range'\n=>\n1\n,\n\n'max_range'\n=>\n10\n,\n        ],\n    ],\n\n'versions'\n=> [\n\n'filter'\n=>\nFILTER_SANITIZE_ENCODED\n\n],\n\n'testscalar'\n=> [\n\n'filter'\n=>\nFILTER_VALIDATE_INT\n,\n\n'flags'\n=>\nFILTER_REQUIRE_SCALAR\n,\n    ],\n\n'testarray'\n=> [\n\n'filter'\n=>\nFILTER_VALIDATE_INT\n,\n\n'flags'\n=>\nFILTER_FORCE_ARRAY\n,\n    ],\n\n'doesnotexist'\n=>\nFILTER_VALIDATE_INT\n,\n];\nvar_dump\n(\nfilter_var_array\n(\n$data\n,\n$filters\n));\n?>"
  },
  {
    "input": "Example #1 call_user_func() example and references",
    "output": "<?php\nerror_reporting\n(\nE_ALL\n);\nfunction\nincrement\n(&\n$var\n)\n{\n\n$var\n++;\n}\n$a\n=\n0\n;\ncall_user_func\n(\n'increment'\n,\n$a\n);\necho\n$a\n.\n\"\\n\"\n;\n// it is possible to use this instead\ncall_user_func_array\n(\n'increment'\n, array(&\n$a\n));\necho\n$a\n.\n\"\\n\"\n;\n// it is also possible to use a variable function\n$increment\n=\n'increment'\n;\n$increment\n(\n$a\n);\necho\n$a\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 call_user_func() example",
    "output": "<?php\nfunction\nbarber\n(\n$type\n)\n{\n    echo\n\"You wanted a\n$type\n haircut, no problem\\n\"\n;\n}\ncall_user_func\n(\n'barber'\n,\n\"mushroom\"\n);\ncall_user_func\n(\n'barber'\n,\n\"shave\"\n);\n?>"
  },
  {
    "input": "Example #3 call_user_func() using namespace name",
    "output": "<?php\nnamespace\nFoobar\n;\nclass\nFoo\n{\n    static public function\ntest\n() {\n        print\n\"Hello world!\\n\"\n;\n    }\n}\ncall_user_func\n(\n__NAMESPACE__\n.\n'\\Foo::test'\n);\ncall_user_func\n(array(\n__NAMESPACE__\n.\n'\\Foo'\n,\n'test'\n));\n?>"
  },
  {
    "input": "Example #4 Using a class method with call_user_func()",
    "output": "<?php\nclass\nmyclass\n{\n    static function\nsay_hello\n()\n    {\n        echo\n\"Hello!\\n\"\n;\n    }\n}\n$classname\n=\n\"myclass\"\n;\ncall_user_func\n(array(\n$classname\n,\n'say_hello'\n));\ncall_user_func\n(\n$classname\n.\n'::say_hello'\n);\n$myobject\n= new\nmyclass\n();\ncall_user_func\n(array(\n$myobject\n,\n'say_hello'\n));\n?>"
  },
  {
    "input": "Example #5 Using lambda function with call_user_func()",
    "output": "<?php\ncall_user_func\n(function(\n$arg\n) { print\n\"[\n$arg\n]\\n\"\n; },\n'test'\n);\n?>"
  },
  {
    "input": "Example #1 call_user_func_array() example",
    "output": "<?php\nfunction\nfoobar\n(\n$arg\n,\n$arg2\n) {\n    echo\n__FUNCTION__\n,\n\" got\n$arg\n and\n$arg2\n\\n\"\n;\n}\nclass\nfoo\n{\n    function\nbar\n(\n$arg\n,\n$arg2\n) {\n        echo\n__METHOD__\n,\n\" got\n$arg\n and\n$arg2\n\\n\"\n;\n    }\n}\n// Call the foobar() function with 2 arguments\ncall_user_func_array\n(\n\"foobar\"\n, array(\n\"one\"\n,\n\"two\"\n));\n// Call the $foo->bar() method with 2 arguments\n$foo\n= new\nfoo\n;\ncall_user_func_array\n(array(\n$foo\n,\n\"bar\"\n), array(\n\"three\"\n,\n\"four\"\n));\n?>"
  },
  {
    "input": "Example #2 call_user_func_array() using namespace name",
    "output": "<?php\nnamespace\nFoobar\n;\nclass\nFoo\n{\n    static public function\ntest\n(\n$name\n) {\n        print\n\"Hello\n{\n$name\n}\n!\\n\"\n;\n    }\n}\ncall_user_func_array\n(\n__NAMESPACE__\n.\n'\\Foo::test'\n, array(\n'Hannes'\n));\ncall_user_func_array\n(array(\n__NAMESPACE__\n.\n'\\Foo'\n,\n'test'\n), array(\n'Philip'\n));\n?>"
  },
  {
    "input": "Example #3 Using lambda function",
    "output": "<?php\n$func\n= function(\n$arg1\n,\n$arg2\n) {\n    return\n$arg1\n*\n$arg2\n;\n};\nvar_dump\n(\ncall_user_func_array\n(\n$func\n, array(\n2\n,\n4\n)));\n?>"
  },
  {
    "input": "Example #4 Passing values by reference",
    "output": "<?php\nfunction\nmega\n(&\n$a\n){\n\n$a\n=\n55\n;\n    echo\n\"function mega \\$a=\n$a\n\\n\"\n;\n}\n$bar\n=\n77\n;\ncall_user_func_array\n(\n'mega'\n,array(&\n$bar\n));\necho\n\"global \\$bar=\n$bar\n\\n\"\n;\n?>"
  },
  {
    "input": "Example #5 call_user_func_array() using named arguments",
    "output": "<?php\nfunction\nfoobar\n(\n$first\n,\n$second\n) {\n    echo\n__FUNCTION__\n,\n\" got\n$first\n and\n$second\n\\n\"\n;\n}\n// Call the foobar() function with named arguments in non-positional order\ncall_user_func_array\n(\n\"foobar\"\n, array(\n\"second\"\n=>\n\"two\"\n,\n\"first\"\n=>\n\"one\"\n));\n// Call the foobar() function with one named argument\ncall_user_func_array\n(\n\"foobar\"\n, array(\n\"foo\"\n,\n\"second\"\n=>\n\"bar\"\n));\n// Fatal error: Cannot use positional argument after named argument\ncall_user_func_array\n(\n\"foobar\"\n, array(\n\"first\"\n=>\n\"one\"\n,\n\"bar\"\n));\n?>"
  },
  {
    "input": "Example #1 forward_static_call() example",
    "output": "<?php\nclass\nA\n{\n    const\nNAME\n=\n'A'\n;\n    public static function\ntest\n() {\n\n$args\n=\nfunc_get_args\n();\n        echo static::\nNAME\n,\n\" \"\n.\njoin\n(\n','\n,\n$args\n).\n\" \\n\"\n;\n    }\n}\nclass\nB\nextends\nA\n{\n    const\nNAME\n=\n'B'\n;\n    public static function\ntest\n() {\n        echo\nself\n::\nNAME\n,\n\"\\n\"\n;\n\nforward_static_call\n(array(\n'A'\n,\n'test'\n),\n'more'\n,\n'args'\n);\n\nforward_static_call\n(\n'test'\n,\n'other'\n,\n'args'\n);\n    }\n}\nB\n::\ntest\n(\n'foo'\n);\nfunction\ntest\n() {\n\n$args\n=\nfunc_get_args\n();\n        echo\n\"C \"\n.\njoin\n(\n','\n,\n$args\n).\n\" \\n\"\n;\n    }\n?>"
  },
  {
    "input": "Example #1 forward_static_call_array() example",
    "output": "<?php\nclass\nA\n{\n    const\nNAME\n=\n'A'\n;\n    public static function\ntest\n() {\n\n$args\n=\nfunc_get_args\n();\n        echo static::\nNAME\n,\n\" \"\n.\njoin\n(\n','\n,\n$args\n).\n\" \\n\"\n;\n    }\n}\nclass\nB\nextends\nA\n{\n    const\nNAME\n=\n'B'\n;\n    public static function\ntest\n() {\n        echo\nself\n::\nNAME\n,\n\"\\n\"\n;\n\nforward_static_call_array\n(array(\n'A'\n,\n'test'\n), array(\n'more'\n,\n'args'\n));\n\nforward_static_call_array\n(\n'test'\n, array(\n'other'\n,\n'args'\n));\n    }\n}\nB\n::\ntest\n(\n'foo'\n);\nfunction\ntest\n() {\n\n$args\n=\nfunc_get_args\n();\n        echo\n\"C \"\n.\njoin\n(\n','\n,\n$args\n).\n\" \\n\"\n;\n    }\n?>"
  },
  {
    "input": "Example #1 func_get_arg() example",
    "output": "<?php\nfunction\nfoo\n()\n{\n\n$numargs\n=\nfunc_num_args\n();\n     echo\n\"Number of arguments:\n$numargs\n\\n\"\n;\n     if (\n$numargs\n>=\n2\n) {\n         echo\n\"Second argument is: \"\n.\nfunc_get_arg\n(\n1\n) .\n\"\\n\"\n;\n     }\n}\nfoo\n(\n1\n,\n2\n,\n3\n);\n?>"
  },
  {
    "input": "Example #2 func_get_arg() example of byref and byval arguments",
    "output": "<?php\nfunction\nbyVal\n(\n$arg\n) {\n    echo\n'As passed     : '\n,\nvar_export\n(\nfunc_get_arg\n(\n0\n)),\nPHP_EOL\n;\n\n$arg\n=\n'baz'\n;\n    echo\n'After change  : '\n,\nvar_export\n(\nfunc_get_arg\n(\n0\n)),\nPHP_EOL\n;\n}\nfunction\nbyRef\n(&\n$arg\n) {\n    echo\n'As passed     : '\n,\nvar_export\n(\nfunc_get_arg\n(\n0\n)),\nPHP_EOL\n;\n\n$arg\n=\n'baz'\n;\n    echo\n'After change  : '\n,\nvar_export\n(\nfunc_get_arg\n(\n0\n)),\nPHP_EOL\n;\n}\n$arg\n=\n'bar'\n;\nbyVal\n(\n$arg\n);\nbyRef\n(\n$arg\n);\n?>"
  },
  {
    "input": "Example #1 func_get_args() example",
    "output": "<?php\nfunction\nfoo\n()\n{\n\n$numargs\n=\nfunc_num_args\n();\n    echo\n\"Number of arguments:\n$numargs\n \\n\"\n;\n    if (\n$numargs\n>=\n2\n) {\n        echo\n\"Second argument is: \"\n.\nfunc_get_arg\n(\n1\n) .\n\"\\n\"\n;\n    }\n\n$arg_list\n=\nfunc_get_args\n();\n    for (\n$i\n=\n0\n;\n$i\n<\n$numargs\n;\n$i\n++) {\n        echo\n\"Argument\n$i\n is: \"\n.\n$arg_list\n[\n$i\n] .\n\"\\n\"\n;\n    }\n}\nfoo\n(\n1\n,\n2\n,\n3\n);\n?>"
  },
  {
    "input": "Example #2 func_get_args() example of byref and byval arguments",
    "output": "<?php\nfunction\nbyVal\n(\n$arg\n) {\n    echo\n'As passed     : '\n,\nvar_export\n(\nfunc_get_args\n()),\nPHP_EOL\n;\n\n$arg\n=\n'baz'\n;\n    echo\n'After change  : '\n,\nvar_export\n(\nfunc_get_args\n()),\nPHP_EOL\n;\n}\nfunction\nbyRef\n(&\n$arg\n) {\n    echo\n'As passed     : '\n,\nvar_export\n(\nfunc_get_args\n()),\nPHP_EOL\n;\n\n$arg\n=\n'baz'\n;\n    echo\n'After change  : '\n,\nvar_export\n(\nfunc_get_args\n()),\nPHP_EOL\n;\n}\n$arg\n=\n'bar'\n;\nbyVal\n(\n$arg\n);\nbyRef\n(\n$arg\n);\n?>"
  },
  {
    "input": "Example #1 func_num_args() example",
    "output": "<?php\nfunction\nfoo\n()\n{\n    echo\n\"Number of arguments: \"\n,\nfunc_num_args\n(),\nPHP_EOL\n;\n}\nfoo\n(\n1\n,\n2\n,\n3\n);\n?>"
  },
  {
    "input": "Example #1 function_exists() example",
    "output": "<?php\nif (\nfunction_exists\n(\n'imap_open'\n)) {\n    echo\n\"IMAP functions are available.<br />\\n\"\n;\n} else {\n    echo\n\"IMAP functions are not available.<br />\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 get_defined_functions() example",
    "output": "<?php\nfunction\nmyrow\n(\n$id\n,\n$data\n)\n{\n    return\n\"<tr><th>\n$id\n</th><td>\n$data\n</td></tr>\\n\"\n;\n}\n$arr\n=\nget_defined_functions\n();\nprint_r\n(\n$arr\n);\n?>"
  },
  {
    "input": "Example #1 register_shutdown_function() example",
    "output": "<?php\nfunction\nshutdown\n()\n{\n\n// This is our shutdown function, in\n    // here we can do any last operations\n    // before the script is complete.\n\necho\n'Script executed with success'\n,\nPHP_EOL\n;\n}\nregister_shutdown_function\n(\n'shutdown'\n);\n?>"
  },
  {
    "input": "Example #1 register_tick_function() example",
    "output": "<?php\ndeclare(\nticks\n=\n1\n);\n// using a function as the callback\nregister_tick_function\n(\n'my_function'\n,\ntrue\n);\n// using an object->method\n$object\n= new\nmy_class\n();\nregister_tick_function\n(array(\n$object\n,\n'my_method'\n),\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Quickhash Example",
    "output": "<?php\n$set\n= new\nQuickHashIntSet\n(\n1024\n,\nQuickHashIntSet\n::\nCHECK_FOR_DUPES\n);\n$set\n->\nadd\n(\n1\n);\n$set\n->\nadd\n(\n3\n);\nvar_dump\n(\n$set\n->\nexists\n(\n3\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\n$set\n->\nsaveToFile\n(\n\"/tmp/test-set.set\"\n);\n$newSet\n=\nQuickHashIntSet\n::\nloadFromFile\n(\n\n\"/tmp/test-set.set\"\n);\nvar_dump\n(\n$newSet\n->\nexists\n(\n3\n) );\nvar_dump\n(\n$newSet\n->\nexists\n(\n4\n) );\n?>"
  },
  {
    "input": "Example #2 Quickhash ArrayAccess Example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n64\n);\n// Adding and updating hash entries.\n$hash\n[\n3\n] =\n145926\n;\n$hash\n[\n3\n] =\n1415926\n;\n$hash\n[\n2\n] =\n72\n;\n// Checking if keys exist\nvar_dump\n( isset(\n$hash\n[\n3\n] ) );\n// Removing hash entries\nunset(\n$hash\n[\n2\n] );\n// Retrieving the value stored for a hash\necho\n$hash\n[\n3\n],\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #3 Quickhash Iterator Example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n64\n);\n// Adding hash entries.\n$hash\n[\n1\n] =\n145926\n;\n$hash\n[\n2\n] =\n1415926\n;\n$hash\n[\n3\n] =\n72\n;\n$hash\n[\n4\n] =\n712314\n;\n$hash\n[\n5\n] = -\n4234\n;\nforeach(\n$hash\nas\n$key\n=>\n$value\n)\n{\n    echo\n$key\n,\n' => '\n,\n$value\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #4 Quickhash String Values Example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n64\n);\n// Adding hash entries.\n$hash\n[\n1\n] =\n\"one million four hundred fifteen thousand nine hundred twenty six\"\n;\n$hash\n->\nadd\n(\n2\n,\n\"one more\"\n);\nforeach(\n$hash\nas\n$key\n=>\n$value\n)\n{\n    echo\n$key\n,\n' => '\n,\n$value\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::add() example",
    "output": "<?php\necho\n\"without dupe checking\\n\"\n;\n$set\n= new\nQuickHashIntSet\n(\n1024\n);\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\necho\n\"\\nwith dupe checking\\n\"\n;\n$set\n= new\nQuickHashIntSet\n(\n1024\n,\nQuickHashIntSet\n::\nCHECK_FOR_DUPES\n);\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::__construct() example",
    "output": "<?php\nvar_dump\n( new\nQuickHashIntSet\n(\n1024\n) );\nvar_dump\n( new\nQuickHashIntSet\n(\n1024\n,\nQuickHashIntSet\n::\nCHECK_FOR_DUPES\n) );\nvar_dump\n(\n    new\nQuickHashIntSet\n(\n\n1024\n,\n\nQuickHashIntSet\n::\nDO_NOT_USE_ZEND_ALLOC\n|\nQuickHashIntSet\n::\nHASHER_JENKINS2\n\n)\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::delete() example",
    "output": "<?php\n$set\n= new\nQuickHashIntSet\n(\n1024\n);\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\ndelete\n(\n4\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\ndelete\n(\n4\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::exists() example",
    "output": "<?php\n//generate 200000 elements\n$array\n=\nrange\n(\n0\n,\n199999\n);\n$existingEntries\n=\narray_rand\n(\narray_flip\n(\n$array\n),\n180000\n);\n$testForEntries\n=\narray_rand\n(\narray_flip\n(\n$array\n),\n1000\n);\n$foundCount\n=\n0\n;\necho\n\"Creating set: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\n$set\n= new\nQuickHashIntSet\n(\n100000\n);\necho\n\"Adding elements: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\nforeach(\n$existingEntries\nas\n$key\n)\n{\n\n$set\n->\nadd\n(\n$key\n);\n}\necho\n\"Doing 1000 tests: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\nforeach(\n$testForEntries\nas\n$key\n)\n{\n\n$foundCount\n+=\n$set\n->\nexists\n(\n$key\n);\n}\necho\n\"Done,\n$foundCount\n found: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::getSize() example",
    "output": "<?php\n$set\n= new\nQuickHashIntSet\n(\n8\n);\nvar_dump\n(\n$set\n->\nadd\n(\n2\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n3\n) );\nvar_dump\n(\n$set\n->\ngetSize\n() );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::loadFromFile() example",
    "output": "<?php\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/simple.set\"\n;\n$set\n=\nQuickHashIntSet\n::\nloadFromFile\n(\n\n$file\n,\n\nQuickHashIntSet\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$set\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::loadFromString() example",
    "output": "<?php\n$contents\n=\nfile_get_contents\n(\ndirname\n(\n__FILE__\n) .\n\"/simple.set\"\n);\n$set\n=\nQuickHashIntSet\n::\nloadFromString\n(\n\n$contents\n,\n\nQuickHashIntSet\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$set\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::saveToFile() example",
    "output": "<?php\n$set\n= new\nQuickHashIntSet\n(\n1024\n);\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\n$set\n->\nsaveToFile\n(\n'/tmp/test.set'\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntSet::saveToString() example",
    "output": "<?php\n$set\n= new\nQuickHashIntSet\n(\n1024\n);\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$set\n->\nadd\n(\n4\n) );\nvar_dump\n(\n$set\n->\nsaveToString\n() );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::add() example",
    "output": "<?php\necho\n\"without dupe checking\\n\"\n;\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n22\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n12\n) );\necho\n\"\\nwith dupe checking\\n\"\n;\n$hash\n= new\nQuickHashIntHash\n(\n1024\n,\nQuickHashIntHash\n::\nCHECK_FOR_DUPES\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n78\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n9\n) );\necho\n\"\\ndefault value\\n\"\n;\nvar_dump\n(\n$hash\n->\nadd\n(\n5\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n5\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::__construct() example",
    "output": "<?php\nvar_dump\n( new\nQuickHashIntHash\n(\n1024\n) );\nvar_dump\n( new\nQuickHashIntHash\n(\n1024\n,\nQuickHashIntHash\n::\nCHECK_FOR_DUPES\n) );\nvar_dump\n(\n    new\nQuickHashIntHash\n(\n\n1024\n,\n\nQuickHashIntHash\n::\nDO_NOT_USE_ZEND_ALLOC\n|\nQuickHashIntHash\n::\nHASHER_JENKINS2\n\n)\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::delete() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n5\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n4\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::exists() example",
    "output": "<?php\n//generate 200000 elements\n$array\n=\nrange\n(\n0\n,\n199999\n);\n$existingEntries\n=\narray_rand\n(\narray_flip\n(\n$array\n),\n180000\n);\n$testForEntries\n=\narray_rand\n(\narray_flip\n(\n$array\n),\n1000\n);\n$foundCount\n=\n0\n;\necho\n\"Creating hash: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\n$hash\n= new\nQuickHashIntHash\n(\n100000\n);\necho\n\"Adding elements: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\nforeach(\n$existingEntries\nas\n$key\n)\n{\n\n$hash\n->\nadd\n(\n$key\n,\n56\n);\n}\necho\n\"Doing 1000 tests: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\nforeach(\n$testForEntries\nas\n$key\n)\n{\n\n$foundCount\n+=\n$hash\n->\nexists\n(\n$key\n);\n}\necho\n\"Done,\n$foundCount\n found: \"\n,\nmicrotime\n(\ntrue\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::get() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nget\n(\n1\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n2\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n2\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n3\n,\n5\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n3\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::getSize() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n2\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n3\n,\n5\n) );\nvar_dump\n(\n$hash\n->\ngetSize\n() );\n?>"
  },
  {
    "input": "Example #3 QuickHashIntHash::loadFromFile() example",
    "output": "<?php\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/simple.hash\"\n;\n$hash\n=\nQuickHashIntHash\n::\nloadFromFile\n(\n\n$file\n,\n\nQuickHashIntHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$hash\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::loadFromString() example",
    "output": "<?php\n$contents\n=\nfile_get_contents\n(\ndirname\n(\n__FILE__\n) .\n\"/simple.hash\"\n);\n$hash\n=\nQuickHashIntHash\n::\nloadFromString\n(\n\n$contents\n,\n\nQuickHashIntHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$hash\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::saveToFile() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n43\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n52\n) );\n$hash\n->\nsaveToFile\n(\n'/tmp/test.hash'\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::saveToString() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n34\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n55\n) );\nvar_dump\n(\n$hash\n->\nsaveToString\n() );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::set() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\necho\n\"Set->Add\\n\"\n;\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\nvar_dump\n(\n$hash\n->\nset\n(\n46692\n,\n16091\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\necho\n\"Set->Update\\n\"\n;\nvar_dump\n(\n$hash\n->\nset\n(\n46692\n,\n29906\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntHash::update() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n141421\n,\n173205\n) );\nvar_dump\n(\n$hash\n->\nupdate\n(\n141421\n,\n223606\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n141421\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::add() example",
    "output": "<?php\necho\n\"without dupe checking\\n\"\n;\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"four\"\n,\n22\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"four\"\n,\n12\n) );\necho\n\"\\nwith dupe checking\\n\"\n;\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n,\nQuickHashStringIntHash\n::\nCHECK_FOR_DUPES\n);\nvar_dump\n(\n$hash\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"four\"\n,\n78\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"four\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"four\"\n,\n9\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::__construct() example",
    "output": "<?php\nvar_dump\n( new\nQuickHashStringIntHash\n(\n1024\n) );\nvar_dump\n( new\nQuickHashStringIntHash\n(\n1024\n,\nQuickHashStringIntHash\n::\nCHECK_FOR_DUPES\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::delete() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n'four'\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n'four'\n,\n5\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n'four'\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n'four'\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n'four'\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n'four'\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n'four'\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::get() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nget\n(\n\"one\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"two\"\n,\n2\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"two\"\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::getSize() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n\"two\"\n,\n2\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"three\"\n,\n5\n) );\nvar_dump\n(\n$hash\n->\ngetSize\n() );\n?>"
  },
  {
    "input": "Example #3 QuickHashStringIntHash::loadFromFile() example",
    "output": "<?php\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/simple.hash.string\"\n;\n$hash\n=\nQuickHashStringIntHash\n::\nloadFromFile\n(\n\n$file\n,\n\nQuickHashStringIntHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\n$i\n=\n48712\n+\n$key\n*\n1631\n;\n\n$k\n=\nbase_convert\n(\n$i\n,\n10\n,\n36\n);\n    echo\n$k\n,\n' => '\n,\n$hash\n->\nget\n(\n$k\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::loadFromString() example",
    "output": "<?php\n$contents\n=\nfile_get_contents\n(\ndirname\n(\n__FILE__\n) .\n\"/simple.hash.string\"\n);\n$hash\n=\nQuickHashStringIntHash\n::\nloadFromString\n(\n\n$contents\n,\n\nQuickHashStringIntHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\n$i\n=\n48712\n+\n$key\n*\n1631\n;\n\n$k\n=\nbase_convert\n(\n$i\n,\n10\n,\n36\n);\n    echo\n$k\n,\n' => '\n,\n$hash\n->\nget\n(\n$k\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::saveToFile() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n\"forty three\"\n,\n42\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"fifty two\"\n,\n52\n) );\n$hash\n->\nsaveToFile\n(\n'/tmp/test.hash.string'\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::saveToString() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n\"forty three\"\n,\n42\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n\"fifty two\"\n,\n52\n) );\nvar_dump\n(\n$hash\n->\nsaveToString\n() );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::set() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\necho\n\"Set->Add\\n\"\n;\nvar_dump\n(\n$hash\n->\nget\n(\n\"forty six thousand six hundred ninety two\"\n) );\nvar_dump\n(\n$hash\n->\nset\n(\n\"forty six thousand six hundred ninety two\"\n,\n16091\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"forty six thousand six hundred ninety two\"\n) );\necho\n\"Set->Update\\n\"\n;\nvar_dump\n(\n$hash\n->\nset\n(\n\"forty six thousand six hundred ninety two\"\n,\n29906\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n\"forty six thousand six hundred ninety two\"\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashStringIntHash::update() example",
    "output": "<?php\n$hash\n= new\nQuickHashStringIntHash\n(\n1024\n);\n$hash\n->\nadd\n(\n'six'\n,\n314159265\n);\n$hash\n->\nadd\n(\n\"a lot\"\n,\n314159265\n);\necho\n$hash\n->\nget\n(\n'six'\n),\n\"\\n\"\n;\necho\n$hash\n->\nget\n(\n'a lot'\n),\n\"\\n\"\n;\nvar_dump\n(\n$hash\n->\nupdate\n(\n'a lot'\n,\n314159266\n) );\nvar_dump\n(\n$hash\n->\nupdate\n(\n\"a lot plus one\"\n,\n314159999\n) );\necho\n$hash\n->\nget\n(\n'six'\n),\n\"\\n\"\n;\necho\n$hash\n->\nget\n(\n'a lot'\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::add() example",
    "output": "<?php\necho\n\"without dupe checking\\n\"\n;\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"twenty two\"\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"twelve\"\n) );\necho\n\"\\nwith dupe checking\\n\"\n;\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n,\nQuickHashIntStringHash\n::\nCHECK_FOR_DUPES\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"seventy eight\"\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"nine\"\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::__construct() example",
    "output": "<?php\nvar_dump\n( new\nQuickHashIntStringHash\n(\n1024\n) );\nvar_dump\n( new\nQuickHashIntStringHash\n(\n1024\n,\nQuickHashIntStringHash\n::\nCHECK_FOR_DUPES\n) );\nvar_dump\n(\n    new\nQuickHashIntStringHash\n(\n\n1024\n,\n\nQuickHashIntStringHash\n::\nDO_NOT_USE_ZEND_ALLOC\n|\nQuickHashIntStringHash\n::\nHASHER_JENKINS2\n\n)\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::delete() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"five\"\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\ndelete\n(\n4\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::get() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nget\n(\n1\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n2\n,\n\"two\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n2\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n3\n,\n5\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n3\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::getSize() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n8\n);\nvar_dump\n(\n$hash\n->\nadd\n(\n2\n,\n\"two\"\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n3\n,\n5\n) );\nvar_dump\n(\n$hash\n->\ngetSize\n() );\n?>"
  },
  {
    "input": "Example #3 QuickHashIntStringHash::loadFromFile() example",
    "output": "<?php\n$file\n=\ndirname\n(\n__FILE__\n) .\n\"/simple.string.hash\"\n;\n$hash\n=\nQuickHashIntStringHash\n::\nloadFromFile\n(\n\n$file\n,\n\nQuickHashIntStringHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$hash\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::loadFromString() example",
    "output": "<?php\n$contents\n=\nfile_get_contents\n(\ndirname\n(\n__FILE__\n) .\n\"/simple.hash\"\n);\n$hash\n=\nQuickHashIntStringHash\n::\nloadFromString\n(\n\n$contents\n,\n\nQuickHashIntStringHash\n::\nDO_NOT_USE_ZEND_ALLOC\n);\nforeach(\nrange\n(\n0\n,\n0x0f\n) as\n$key\n)\n{\n\nprintf\n(\n\"Key %3d (%2x) is %s\\n\"\n,\n\n$key\n,\n$key\n,\n\n$hash\n->\nexists\n(\n$key\n) ?\n'set'\n:\n'unset'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::saveToFile() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"forty three\"\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"fifty two\"\n) );\n$hash\n->\nsaveToFile\n(\n'/tmp/test.string.hash'\n);\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::saveToString() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n);\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n4\n,\n\"thirty four\"\n) );\nvar_dump\n(\n$hash\n->\nexists\n(\n4\n) );\nvar_dump\n(\n$hash\n->\nadd\n(\n5\n,\n\"fifty five\"\n) );\nvar_dump\n(\n$hash\n->\nsaveToString\n() );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::set() example",
    "output": "<?php\n$hash\n= new\nQuickHashIntStringHash\n(\n1024\n);\necho\n\"Set->Add\\n\"\n;\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\nvar_dump\n(\n$hash\n->\nset\n(\n46692\n,\n\"sixteen thousand ninety one\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\necho\n\"Set->Update\\n\"\n;\nvar_dump\n(\n$hash\n->\nset\n(\n46692\n,\n\"twenty nine thousand nine hundred six\"\n) );\nvar_dump\n(\n$hash\n->\nget\n(\n46692\n) );\n?>"
  },
  {
    "input": "Example #1 QuickHashIntStringHash::update() example",
    "output": "<?php\n$hash\n->\nadd\n(\n161803398\n,\n\"--\"\n);\n$hash\n->\nadd\n(\n314159265\n,\n\"a lot\"\n);\necho\n$hash\n->\nget\n(\n161803398\n),\n\"\\n\"\n;\necho\n$hash\n->\nget\n(\n314159265\n),\n\"\\n\"\n;\nvar_dump\n(\n$hash\n->\nupdate\n(\n314159265\n,\n\"a lot plus one\"\n) );\nvar_dump\n(\n$hash\n->\nupdate\n(\n314159999\n,\n\"a lot plus one\"\n) );\necho\n$hash\n->\nget\n(\n161803398\n),\n\"\\n\"\n;\necho\n$hash\n->\nget\n(\n314159265\n),\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Extending the built-in classes",
    "output": "<?php\n/**\n * My Reflection_Method class\n */\nclass\nMy_Reflection_Method\nextends\nReflectionMethod\n{\n    public\n$visibility\n= array();\n    public function\n__construct\n(\n$o\n,\n$m\n)\n    {\n\nparent\n::\n__construct\n(\n$o\n,\n$m\n);\n\n$this\n->\nvisibility\n=\nReflection\n::\ngetModifierNames\n(\n$this\n->\ngetModifiers\n());\n    }\n}\n/**\n * Demo class #1\n *\n */\nclass\nT\n{\n    protected function\nx\n() {}\n}\n/**\n * Demo class #2\n *\n */\nclass\nU\nextends\nT\n{\n    function\nx\n() {}\n}\n// Print out information\nvar_dump\n(new\nMy_Reflection_Method\n(\n'U'\n,\n'x'\n));\n?>"
  },
  {
    "input": "Example #1 Reflection::getModifierNames() example",
    "output": "<?php\nclass\nTesting\n{\n    final public static function\nfoo\n()\n    {\n        return;\n    }\n    public function\nbar\n()\n    {\n        return;\n    }\n}\n$foo\n= new\nReflectionMethod\n(\n'Testing'\n,\n'foo'\n);\necho\n\"Modifiers for method foo():\\n\"\n;\necho\n$foo\n->\ngetModifiers\n() .\n\"\\n\"\n;\necho\nimplode\n(\n' '\n,\nReflection\n::\ngetModifierNames\n(\n$foo\n->\ngetModifiers\n())) .\n\"\\n\"\n;\n$bar\n= new\nReflectionMethod\n(\n'Testing'\n,\n'bar'\n);\necho\n\"Modifiers for method bar():\\n\"\n;\necho\n$bar\n->\ngetModifiers\n() .\n\"\\n\"\n;\necho\nimplode\n(\n' '\n,\nReflection\n::\ngetModifierNames\n(\n$bar\n->\ngetModifiers\n()));"
  },
  {
    "input": "Example #1 Basic usage ReflectionClass",
    "output": "<?php\n$reflection\n= new\nReflectionClass\n(\n'Exception'\n);\necho\n$reflection\n;\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::export()",
    "output": "<?php\nclass\nApple\n{\n    public\n$var1\n;\n    public\n$var2\n=\n'Orange'\n;\n    public function\ntype\n() {\n        return\n'Apple'\n;\n    }\n}\nReflectionClass\n::\nexport\n(\n'Apple'\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nclass\nApple\n{\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\n$attributes\n=\n$class\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #2 Filtering results by class name",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nclass\nApple\n{\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\n$attributes\n=\n$class\n->\ngetAttributes\n(\n'Fruit'\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #3 Filtering results by class name, with inheritance",
    "output": "<?php\ninterface\nColor\n{\n}\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\nimplements\nColor\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nclass\nApple\n{\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\n$attributes\n=\n$class\n->\ngetAttributes\n(\nColor\n::class,\nReflectionAttribute\n::\nIS_INSTANCEOF\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #1 Usage of ReflectionClass::getConstant()",
    "output": "<?php\nclass\nExample\n{\n    const\nC1\n=\nfalse\n;\n    const\nC2\n=\n'I am a constant'\n;\n}\n$reflection\n= new\nReflectionClass\n(\n'Example'\n);\nvar_dump\n(\n$reflection\n->\ngetConstant\n(\n'C1'\n));\nvar_dump\n(\n$reflection\n->\ngetConstant\n(\n'C2'\n));\nvar_dump\n(\n$reflection\n->\ngetConstant\n(\n'C3'\n));\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getConstructor()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\n$constructor\n=\n$class\n->\ngetConstructor\n();\nvar_dump\n(\n$constructor\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getDefaultProperties() example",
    "output": "<?php\nclass\nBar\n{\n    protected\n$inheritedProperty\n=\n'inheritedDefault'\n;\n}\nclass\nFoo\nextends\nBar\n{\n    public\n$property\n=\n'propertyDefault'\n;\n    private\n$privateProperty\n=\n'privatePropertyDefault'\n;\n    public static\n$staticProperty\n=\n'staticProperty'\n;\n    public\n$defaultlessProperty\n;\n}\n$reflectionClass\n= new\nReflectionClass\n(\n'Foo'\n);\nvar_dump\n(\n$reflectionClass\n->\ngetDefaultProperties\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getDocComment() example",
    "output": "<?php\n/**\n * A test class\n *\n * @param  foo bar\n * @return baz\n */\nclass\nTestClass\n{ }\n$rc\n= new\nReflectionClass\n(\n'TestClass'\n);\nvar_dump\n(\n$rc\n->\ngetDocComment\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getEndLine() example",
    "output": "<?php\n// Test Class\nclass\nTestClass\n{ }\n$rc\n= new\nReflectionClass\n(\n'TestClass'\n);\necho\n$rc\n->\ngetEndLine\n();\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getExtension()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\n$extension\n=\n$class\n->\ngetExtension\n();\nvar_dump\n(\n$extension\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getExtensionName()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\n$extension\n=\n$class\n->\ngetExtensionName\n();\nvar_dump\n(\n$extension\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getInterfaceNames() example",
    "output": "<?php\ninterface\nFoo\n{ }\ninterface\nBar\n{ }\nclass\nBaz\nimplements\nFoo\n,\nBar\n{ }\n$rc1\n= new\nReflectionClass\n(\n\"Baz\"\n);\nprint_r\n(\n$rc1\n->\ngetInterfaceNames\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getInterfaces() example",
    "output": "<?php\ninterface\nFoo\n{ }\ninterface\nBar\n{ }\nclass\nBaz\nimplements\nFoo\n,\nBar\n{ }\n$rc1\n= new\nReflectionClass\n(\n\"Baz\"\n);\nprint_r\n(\n$rc1\n->\ngetInterfaces\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getMethod()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\n$method\n=\n$class\n->\ngetMethod\n(\n'getMethod'\n);\nvar_dump\n(\n$method\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getMethods()",
    "output": "<?php\nclass\nApple\n{\n    public function\nfirstMethod\n() { }\n    final protected function\nsecondMethod\n() { }\n    private static function\nthirdMethod\n() { }\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\n$methods\n=\n$class\n->\ngetMethods\n();\nvar_dump\n(\n$methods\n);\n?>"
  },
  {
    "input": "Example #2 Filtering results from ReflectionClass::getMethods()",
    "output": "<?php\nclass\nApple\n{\n    public function\nfirstMethod\n() { }\n    final protected function\nsecondMethod\n() { }\n    private static function\nthirdMethod\n() { }\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\n$methods\n=\n$class\n->\ngetMethods\n(\nReflectionMethod\n::\nIS_STATIC\n|\nReflectionMethod\n::\nIS_FINAL\n);\nvar_dump\n(\n$methods\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getName() example",
    "output": "<?php\nnamespace\nA\\B\n;\nclass\nFoo\n{ }\n$function\n= new\n\\ReflectionClass\n(\n'stdClass'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n$function\n= new\n\\ReflectionClass\n(\n'A\\\\B\\\\Foo'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getNamespaceName() example",
    "output": "<?php\nnamespace\nA\\B\n;\nclass\nFoo\n{ }\n$class\n= new\n\\ReflectionClass\n(\n'stdClass'\n);\nvar_dump\n(\n$class\n->\ninNamespace\n());\nvar_dump\n(\n$class\n->\ngetName\n());\nvar_dump\n(\n$class\n->\ngetNamespaceName\n());\nvar_dump\n(\n$class\n->\ngetShortName\n());\n$class\n= new\n\\ReflectionClass\n(\n'A\\\\B\\\\Foo'\n);\nvar_dump\n(\n$class\n->\ninNamespace\n());\nvar_dump\n(\n$class\n->\ngetName\n());\nvar_dump\n(\n$class\n->\ngetNamespaceName\n());\nvar_dump\n(\n$class\n->\ngetShortName\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getProperty()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\n$property\n=\n$class\n->\ngetProperty\n(\n'name'\n);\nvar_dump\n(\n$property\n);\n?>"
  },
  {
    "input": "Example #1 Basic ReflectionClass::getReflectionConstants() example",
    "output": "<?php\nclass\nFoo\n{\n    public    const\nFOO\n=\n1\n;\n    protected const\nBAR\n=\n2\n;\n    private   const\nBAZ\n=\n3\n;\n}\n$foo\n= new\nFoo\n();\n$reflect\n= new\nReflectionClass\n(\n$foo\n);\n$consts\n=\n$reflect\n->\ngetReflectionConstants\n();\nforeach (\n$consts\nas\n$const\n) {\n    print\n$const\n->\ngetName\n() .\n\"\\n\"\n;\n}\nvar_dump\n(\n$consts\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::getShortName() example",
    "output": "<?php\nnamespace\nA\\B\n;\nclass\nFoo\n{ }\n$function\n= new\n\\ReflectionClass\n(\n'stdClass'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n$function\n= new\n\\ReflectionClass\n(\n'A\\\\B\\\\Foo'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::getStaticPropertyValue()",
    "output": "<?php\nclass\nApple\n{\n    public static\n$color\n=\n'Red'\n;\n}\n$class\n= new\nReflectionClass\n(\n'Apple'\n);\nvar_dump\n(\n$class\n->\ngetStaticPropertyValue\n(\n'color'\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::hasConstant() example",
    "output": "<?php\nclass\nFoo\n{\n    const\nc1\n=\n1\n;\n}\n$class\n= new\nReflectionClass\n(\n\"Foo\"\n);\nvar_dump\n(\n$class\n->\nhasConstant\n(\n\"c1\"\n));\nvar_dump\n(\n$class\n->\nhasConstant\n(\n\"c2\"\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::hasMethod() example",
    "output": "<?php\nClass\nC\n{\n    public function\npublicFoo\n() {\n        return\ntrue\n;\n    }\n    protected function\nprotectedFoo\n() {\n        return\ntrue\n;\n    }\n    private function\nprivateFoo\n() {\n        return\ntrue\n;\n    }\n    static function\nstaticFoo\n() {\n        return\ntrue\n;\n    }\n}\n$rc\n= new\nReflectionClass\n(\n\"C\"\n);\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'publicFoo'\n));\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'protectedFoo'\n));\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'privateFoo'\n));\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'staticFoo'\n));\n// C should not have method bar\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'bar'\n));\n// Method names are case insensitive\nvar_dump\n(\n$rc\n->\nhasMethod\n(\n'PUBLICfOO'\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::hasProperty() example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$p1\n;\n    protected\n$p2\n;\n    private\n$p3\n;\n}\n$obj\n= new\nReflectionObject\n(new\nFoo\n());\nvar_dump\n(\n$obj\n->\nhasProperty\n(\n\"p1\"\n));\nvar_dump\n(\n$obj\n->\nhasProperty\n(\n\"p2\"\n));\nvar_dump\n(\n$obj\n->\nhasProperty\n(\n\"p3\"\n));\nvar_dump\n(\n$obj\n->\nhasProperty\n(\n\"p4\"\n));\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n) {\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyGhost\n(function (\n$object\n) {\n    echo\n\"Initializer called\\n\"\n;\n\n$object\n->\n__construct\n(\n1\n);\n});\nvar_dump\n(\n$object\n);\n$reflector\n->\ninitializeLazyObject\n(\n$object\n);\nvar_dump\n(\n$object\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::inNamespace() example",
    "output": "<?php\nnamespace\nA\\B\n;\nclass\nFoo\n{ }\n$function\n= new\n\\ReflectionClass\n(\n'stdClass'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n$function\n= new\n\\ReflectionClass\n(\n'A\\\\B\\\\Foo'\n);\nvar_dump\n(\n$function\n->\ninNamespace\n());\nvar_dump\n(\n$function\n->\ngetName\n());\nvar_dump\n(\n$function\n->\ngetNamespaceName\n());\nvar_dump\n(\n$function\n->\ngetShortName\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isAbstract() example",
    "output": "<?php\nclass\nTestClass\n{ }\nabstract class\nTestAbstractClass\n{ }\n$testClass\n= new\nReflectionClass\n(\n'TestClass'\n);\n$abstractClass\n= new\nReflectionClass\n(\n'TestAbstractClass'\n);\nvar_dump\n(\n$testClass\n->\nisAbstract\n());\nvar_dump\n(\n$abstractClass\n->\nisAbstract\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isAnonymous() example",
    "output": "<?php\nclass\nTestClass\n{}\n$anonClass\n= new class {};\n$normalClass\n= new\nReflectionClass\n(\n'TestClass'\n);\n$anonClass\n= new\nReflectionClass\n(\n$anonClass\n);\nvar_dump\n(\n$normalClass\n->\nisAnonymous\n());\nvar_dump\n(\n$anonClass\n->\nisAnonymous\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::isCloneable()",
    "output": "<?php\nclass\nNotCloneable\n{\n    public\n$var1\n;\n\n    private function\n__clone\n() {\n    }\n}\nclass\nCloneable\n{\n    public\n$var1\n;\n}\n$notCloneable\n= new\nReflectionClass\n(\n'NotCloneable'\n);\n$cloneable\n= new\nReflectionClass\n(\n'Cloneable'\n);\nvar_dump\n(\n$notCloneable\n->\nisCloneable\n());\nvar_dump\n(\n$cloneable\n->\nisCloneable\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isFinal() example",
    "output": "<?php\nclass\nTestClass\n{ }\nfinal class\nTestFinalClass\n{ }\n$normalClass\n= new\nReflectionClass\n(\n'TestClass'\n);\n$finalClass\n= new\nReflectionClass\n(\n'TestFinalClass'\n);\nvar_dump\n(\n$normalClass\n->\nisFinal\n());\nvar_dump\n(\n$finalClass\n->\nisFinal\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isInstance() related examples",
    "output": "<?php\n// Example usage\n$class\n= new\nReflectionClass\n(\n'Foo'\n);\nif (\n$class\n->\nisInstance\n(\n$arg\n)) {\n    echo\n\"Yes\"\n;\n}\n// Equivalent to\nif (\n$arg\ninstanceof\nFoo\n) {\n    echo\n\"Yes\"\n;\n}\n// Equivalent to\nif (\nis_a\n(\n$arg\n,\n'Foo'\n)) {\n    echo\n\"Yes\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isInstantiable() example",
    "output": "<?php\nclass\nC\n{ }\ninterface\niface\n{\n    function\nf1\n();\n}\nclass\nifaceImpl\nimplements\niface\n{\n    function\nf1\n() {}\n}\nabstract class\nabstractClass\n{\n    function\nf1\n() { }\n    abstract function\nf2\n();\n}\nclass\nD\nextends\nabstractClass\n{\n    function\nf2\n() { }\n}\ntrait\nT\n{\n    function\nf1\n() {}\n}\nclass\nprivateConstructor\n{\n    private function\n__construct\n() { }\n}\n$classes\n= array(\n\n\"C\"\n,\n\n\"iface\"\n,\n\n\"ifaceImpl\"\n,\n\n\"abstractClass\"\n,\n\n\"D\"\n,\n\n\"T\"\n,\n\n\"privateConstructor\"\n,\n);\nforeach(\n$classes\nas\n$class\n) {\n\n$reflectionClass\n= new\nReflectionClass\n(\n$class\n);\n    echo\n\"Is\n$class\n instantiable?  \"\n;\n\nvar_dump\n(\n$reflectionClass\n->\nisInstantiable\n());\n}\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::isInterface()",
    "output": "<?php\ninterface\nSomeInterface\n{\n    public function\ninterfaceMethod\n();\n}\n$class\n= new\nReflectionClass\n(\n'SomeInterface'\n);\nvar_dump\n(\n$class\n->\nisInterface\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::isInternal()",
    "output": "<?php\n$internalclass\n= new\nReflectionClass\n(\n'ReflectionClass'\n);\nclass\nApple\n{}\n$userclass\n= new\nReflectionClass\n(\n'Apple'\n);\nvar_dump\n(\n$internalclass\n->\nisInternal\n());\nvar_dump\n(\n$userclass\n->\nisInternal\n());\n?>"
  },
  {
    "input": "Example #1 Basic ReflectionClass::isIterable() Usage",
    "output": "<?php\nclass\nIteratorClass\nimplements\nIterator\n{\n    public function\n__construct\n() { }\n    public function\nkey\n() { }\n    public function\ncurrent\n() { }\n    function\nnext\n() { }\n    function\nvalid\n() { }\n    function\nrewind\n() { }\n}\nclass\nDerivedClass\nextends\nIteratorClass\n{ }\nclass\nNonIterator\n{ }\nfunction\ndump_iterable\n(\n$class\n) {\n\n$reflection\n= new\nReflectionClass\n(\n$class\n);\n\nvar_dump\n(\n$reflection\n->\nisIterable\n());\n}\n$classes\n= array(\n\"ArrayObject\"\n,\n\"IteratorClass\"\n,\n\"DerivedClass\"\n,\n\"NonIterator\"\n);\nforeach (\n$classes\nas\n$class\n) {\n    echo\n\"Is\n$class\n iterable? \"\n;\n\ndump_iterable\n(\n$class\n);\n}\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::isReadOnly() example",
    "output": "<?php\nclass\nTestClass\n{ }\nreadonly class\nTestReadOnlyClass\n{ }\n$normalClass\n= new\nReflectionClass\n(\n'TestClass'\n);\n$readonlyClass\n= new\nReflectionClass\n(\n'TestReadOnlyClass'\n);\nvar_dump\n(\n$normalClass\n->\nisReadOnly\n());\nvar_dump\n(\n$readonlyClass\n->\nisReadOnly\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n) {\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyGhost\n(function (\n$object\n) {\n    echo\n\"Initializer called\\n\"\n;\n\n$object\n->\n__construct\n(\n1\n);\n});\nvar_dump\n(\n$reflector\n->\nisUninitializedLazyObject\n(\n$object\n));\nvar_dump\n(\n$object\n->\nprop\n);\nvar_dump\n(\n$reflector\n->\nisUninitializedLazyObject\n(\n$object\n));\n?>"
  },
  {
    "input": "Example #1 Marking an uninitialized lazy object as initialized",
    "output": "<?php\nclass\nExample\n{\n    public\nstring $prop1\n;\n    public\nstring $prop2\n;\n    public\nstring $prop3\n=\n'default value'\n;\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyGhost\n(function (\n$object\n) {\n    echo\n\"Initializer called\\n\"\n;\n\n$object\n->\nprop1\n=\n'initialized'\n;\n});\n$reflector\n->\ngetProperty\n(\n'prop1'\n)\n          ->\nsetRawValueWithoutLazyInitialization\n(\n$object\n,\n'prop1 value'\n);\nvar_dump\n(\n$object\n);\n$reflector\n->\nmarkLazyObjectAsInitialized\n(\n$object\n);\nvar_dump\n(\n$object\n);\n?>"
  },
  {
    "input": "Example #2 Marking an initialized object as initialized",
    "output": "<?php\nclass\nExample\n{\n    public\nstring $prop1\n;\n    public\nstring $prop2\n;\n    public\nstring $prop3\n=\n'default value'\n;\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyGhost\n(function (\n$object\n) {\n    echo\n\"Initializer called\\n\"\n;\n\n$object\n->\nprop1\n=\n'initialized'\n;\n});\n$reflector\n->\ngetProperty\n(\n'prop1'\n)\n          ->\nsetRawValueWithoutLazyInitialization\n(\n$object\n,\n'prop1 value'\n);\nvar_dump\n(\n$object\n->\nprop3\n);\nvar_dump\n(\n$object\n);\n$reflector\n->\nmarkLazyObjectAsInitialized\n(\n$object\n);\nvar_dump\n(\n$object\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionClass::newInstanceArgs()",
    "output": "<?php\n$class\n= new\nReflectionClass\n(\n'ReflectionFunction'\n);\n$instance\n=\n$class\n->\nnewInstanceArgs\n(array(\n'substr'\n));\nvar_dump\n(\n$instance\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n) {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyGhost\n(function (\nExample $object\n) {\n\n$object\n->\n__construct\n(\n1\n);\n});\nvar_dump\n(\n$object\n);\nvar_dump\n(\n$object\ninstanceof\nExample\n);\n// Triggers initialization, and fetches the property after that\nvar_dump\n(\n$object\n->\nprop\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\nclass\nExample\n{\n    public function\n__construct\n(public\nint $prop\n) {\n        echo\n__METHOD__\n,\n\"\\n\"\n;\n    }\n}\n$reflector\n= new\nReflectionClass\n(\nExample\n::class);\n$object\n=\n$reflector\n->\nnewLazyProxy\n(function (\nExample $object\n) {\n\n$realInstance\n= new\nExample\n(\n1\n);\n     return\n$realInstance\n;\n});\nvar_dump\n(\n$object\n);\nvar_dump\n(\n$object\ninstanceof\nExample\n);\n// Triggers initialization, and forwards the property fetch to the real instance\nvar_dump\n(\n$object\n->\nprop\n);\nvar_dump\n(\n$object\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionClass::__toString() example",
    "output": "<?php\n$reflectionClass\n= new\nReflectionClass\n(\n'Exception'\n);\necho\n$reflectionClass\n->\n__toString\n();\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public const\nAPPLE\n=\n'apple'\n;\n}\n$classConstant\n= new\nReflectionClassConstant\n(\n'Basket'\n,\n'APPLE'\n);\n$attributes\n=\n$classConstant\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #2 Filtering results by class name",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public const\nAPPLE\n=\n'apple'\n;\n}\n$classConstant\n= new\nReflectionClassConstant\n(\n'Basket'\n,\n'APPLE'\n);\n$attributes\n=\n$classConstant\n->\ngetAttributes\n(\n'Fruit'\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #3 Filtering results by class name, with inheritance",
    "output": "<?php\ninterface\nColor\n{\n}\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\nimplements\nColor\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public const\nAPPLE\n=\n'apple'\n;\n}\n$classConstant\n= new\nReflectionClassConstant\n(\n'Basket'\n,\n'APPLE'\n);\n$attributes\n=\n$classConstant\n->\ngetAttributes\n(\n'Color'\n,\nReflectionAttribute\n::\nIS_INSTANCEOF\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #1 \n    ReflectionClassConstant::isDeprecated() example",
    "output": "<?php\nclass\nBasket\n{\n    #[\n\\Deprecated\n(\nmessage\n:\n'use Basket::APPLE instead'\n)]\n    public const\nAPLE\n=\n'apple'\n;\n    public const\nAPPLE\n=\n'apple'\n;\n}\n$classConstant\n= new\nReflectionClassConstant\n(\n'Basket'\n,\n'APLE'\n);\nvar_dump\n(\n$classConstant\n->\nisDeprecated\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionConstant::getExtension()",
    "output": "<?php\nvar_dump\n((new\nReflectionConstant\n(\n'SQLITE3_TEXT'\n))->\ngetExtension\n());\n?>"
  },
  {
    "input": "Example #1 Basic usage of ReflectionConstant::getExtensionName()",
    "output": "<?php\nvar_dump\n((new\nReflectionConstant\n(\n'SQLITE3_TEXT'\n))->\ngetExtensionName\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionConstant::getName() example",
    "output": "<?php\nnamespace\nFoo\n;\nconst\nBAR\n=\n'bar'\n;\necho (new\n\\ReflectionConstant\n(\n'Foo\\BAR'\n))->\ngetName\n();\n?>"
  },
  {
    "input": "Example #1 ReflectionConstant::getNamespaceName() example",
    "output": "<?php\nnamespace\nFoo\n{\n   const\nBAR\n=\n'bar'\n;\n\nvar_dump\n((new\n\\ReflectionConstant\n(\n'Foo\\BAR'\n))->\ngetNamespaceName\n());\n}\nnamespace {\n   const\nBAR\n=\n'bar'\n;\n\nvar_dump\n((new\n\\ReflectionConstant\n(\n'BAR'\n))->\ngetNamespaceName\n());\n}\n?>"
  },
  {
    "input": "Example #1 ReflectionConstant::getShortName() example",
    "output": "<?php\nnamespace\nFoo\n;\nconst\nBAR\n=\n'bar'\n;\necho (new\n\\ReflectionConstant\n(\n'Foo\\BAR'\n))->\ngetName\n();\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::getValue() example",
    "output": "<?php\nconst\nFOO\n=\n'foo'\n;\nvar_dump\n((new\n\\ReflectionConstant\n(\n'FOO'\n))->\ngetValue\n());\n?>"
  },
  {
    "input": "Example #1 \n    ReflectionConstant::isDeprecated() example",
    "output": "<?php\n// E_STRICT is deprecated as of PHP 8.4\nvar_dump\n((new\nReflectionConstant\n(\n'E_STRICT'\n))->\nisDeprecated\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::getBackingType() example",
    "output": "<?php\nenum\nSuit\n:\nstring\n{\n    case\nHearts\n=\n'H'\n;\n    case\nDiamonds\n=\n'D'\n;\n    case\nClubs\n=\n'C'\n;\n    case\nSpades\n=\n'S'\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\n$rBackingType\n=\n$rEnum\n->\ngetBackingType\n();\nvar_dump\n((string)\n$rBackingType\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::getCase() example",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\n$rCase\n=\n$rEnum\n->\ngetCase\n(\n'Clubs'\n);\nvar_dump\n(\n$rCase\n->\ngetValue\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::getCases() example",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\n$cases\n=\n$rEnum\n->\ngetCases\n();\nforeach (\n$cases\nas\n$rCase\n) {\n\nvar_dump\n(\n$rCase\n->\ngetValue\n());\n}\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::hasCase() example",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\nvar_dump\n(\n$rEnum\n->\nhasCase\n(\n'Hearts'\n));\nvar_dump\n(\n$rEnum\n->\nhasCase\n(\n'Horseshoes'\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::isBacked() example",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\nenum\nBackedSuit\n:\nstring\n{\n    case\nHearts\n=\n'H'\n;\n    case\nDiamonds\n=\n'D'\n;\n    case\nClubs\n=\n'C'\n;\n    case\nSpades\n=\n'S'\n;\n}\nvar_dump\n((new\nReflectionEnum\n(\nSuit\n::class))->\nisBacked\n());\nvar_dump\n((new\nReflectionEnum\n(\nBackedSuit\n::class))->\nisBacked\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::getValue() example",
    "output": "<?php\nenum\nSuit\n{\n    case\nHearts\n;\n    case\nDiamonds\n;\n    case\nClubs\n;\n    case\nSpades\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\n$rCase\n=\n$rEnum\n->\ngetCase\n(\n'Diamonds'\n);\nvar_dump\n(\n$rCase\n->\ngetValue\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionEnum::getBackingValue() example",
    "output": "<?php\nenum\nSuit\n:\nstring\n{\n    case\nHearts\n=\n'H'\n;\n    case\nDiamonds\n=\n'D'\n;\n    case\nClubs\n=\n'C'\n;\n    case\nSpades\n=\n'S'\n;\n}\n$rEnum\n= new\nReflectionEnum\n(\nSuit\n::class);\n$rCase\n=\n$rEnum\n->\ngetCase\n(\n'Spades'\n);\nvar_dump\n(\n$rCase\n->\ngetBackingValue\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'Reflection'\n);\nprintf\n(\n'Extension: %s (version: %s)'\n,\n$ext\n->\ngetName\n(),\n$ext\n->\ngetVersion\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getClasses() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'XMLWriter'\n);\nvar_dump\n(\n$ext\n->\ngetClasses\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getClassNames() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'XMLWriter'\n);\nvar_dump\n(\n$ext\n->\ngetClassNames\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getConstants() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'DOM'\n);\nprint_r\n(\n$ext\n->\ngetConstants\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getDependencies() example",
    "output": "<?php\n$dom\n= new\nReflectionExtension\n(\n'dom'\n);\nprint_r\n(\n$dom\n->\ngetDependencies\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getFunctions() example",
    "output": "<?php\n$dom\n= new\nReflectionExtension\n(\n'SimpleXML'\n);\nprint_r\n(\n$dom\n->\ngetFunctions\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getINIEntries() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'mysql'\n);\nprint_r\n(\n$ext\n->\ngetINIEntries\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getName() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'mysqli'\n);\nvar_dump\n(\n$ext\n->\ngetName\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::getVersion() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'mysqli'\n);\nvar_dump\n(\n$ext\n->\ngetVersion\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionExtension::info() example",
    "output": "<?php\n$ext\n= new\nReflectionExtension\n(\n'mysqli'\n);\n$ext\n->\ninfo\n();\n?>"
  },
  {
    "input": "Example #1 ReflectionFunction::__construct() example",
    "output": "<?php\n/**\n * A simple counter\n *\n * @return    int\n */\nfunction\ncounter1\n()\n{\n    static\n$c\n=\n0\n;\n    return ++\n$c\n;\n}\n/**\n * Another simple counter\n *\n * @return    int\n */\n$counter2\n= function()\n{\n    static\n$d\n=\n0\n;\n    return ++\n$d\n;\n};\nfunction\ndumpReflectionFunction\n(\n$func\n)\n{\n\n// Print out basic information\n\nprintf\n(\n\n\"\\n\\n===> The %s function '%s'\\n\"\n.\n\n\"     declared in %s\\n\"\n.\n\n\"     lines %d to %d\\n\"\n,\n\n$func\n->\nisInternal\n() ?\n'internal'\n:\n'user-defined'\n,\n\n$func\n->\ngetName\n(),\n\n$func\n->\ngetFileName\n(),\n\n$func\n->\ngetStartLine\n(),\n\n$func\n->\ngetEndline\n()\n    );\n\n// Print documentation comment\n\nprintf\n(\n\"---> Documentation:\\n %s\\n\"\n,\nvar_export\n(\n$func\n->\ngetDocComment\n(),\n1\n));\n\n// Print static variables if existant\n\nif (\n$statics\n=\n$func\n->\ngetStaticVariables\n())\n    {\n\nprintf\n(\n\"---> Static variables: %s\\n\"\n,\nvar_export\n(\n$statics\n,\n1\n));\n    }\n}\n// Create an instance of the ReflectionFunction class\ndumpReflectionFunction\n(new\nReflectionFunction\n(\n'counter1'\n));\ndumpReflectionFunction\n(new\nReflectionFunction\n(\n$counter2\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionFunction::invoke() example",
    "output": "<?php\nfunction\ntitle\n(\n$title\n,\n$name\n)\n{\n    return\nsprintf\n(\n\"%s. %s\\r\\n\"\n,\n$title\n,\n$name\n);\n}\n$function\n= new\nReflectionFunction\n(\n'title'\n);\necho\n$function\n->\ninvoke\n(\n'Dr'\n,\n'Phil'\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionFunction::invokeArgs() example",
    "output": "<?php\nfunction\ntitle\n(\n$title\n,\n$name\n)\n{\n    return\nsprintf\n(\n\"%s. %s\\r\\n\"\n,\n$title\n,\n$name\n);\n}\n$function\n= new\nReflectionFunction\n(\n'title'\n);\necho\n$function\n->\ninvokeArgs\n(array(\n'Dr'\n,\n'Phil'\n));\n?>"
  },
  {
    "input": "Example #2 ReflectionFunction::invokeArgs() with references example",
    "output": "<?php\nfunction\nget_false_conditions\n(array\n$conditions\n, array &\n$false_conditions\n)\n{\n    foreach (\n$conditions\nas\n$condition\n) {\n        if (!\n$condition\n) {\n\n$false_conditions\n[] =\n$condition\n;\n        }\n    }\n}\n$function_ref\n= new\nReflectionFunction\n(\n'get_false_conditions'\n);\n$conditions\n= array(\ntrue\n,\nfalse\n, -\n1\n,\n0\n,\n1\n);\n$false_conditions\n= array();\n$function_ref\n->\ninvokeArgs\n(array(\n$conditions\n, &\n$false_conditions\n));\nvar_dump\n(\n$false_conditions\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionFunction::isAnonymous() example",
    "output": "<?php\n$rf\n= new\nReflectionFunction\n(function() {});\nvar_dump\n(\n$rf\n->\nisAnonymous\n());\n$rf\n= new\nReflectionFunction\n(\n'strlen'\n);\nvar_dump\n(\n$rf\n->\nisAnonymous\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionFunction::__toString() example",
    "output": "<?php\nfunction\ntitle\n(\n$title\n,\n$name\n)\n{\n    return\nsprintf\n(\n\"%s. %s\\r\\n\"\n,\n$title\n,\n$name\n);\n}\necho new\nReflectionFunction\n(\n'title'\n);\n?>"
  },
  {
    "input": "Example #1 Basic usage with a class method",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nclass\nFactory\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public function\nmakeApple\n():\nstring\n\n{\n        return\n'apple'\n;\n    }\n}\n$method\n= new\nReflectionMethod\n(\n'Factory'\n,\n'makeApple'\n);\n$attributes\n=\n$method\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #2 Basic usage with a function",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nfunction\nmakeApple\n():\nstring\n{\n    return\n'apple'\n;\n}\n$function\n= new\nReflectionFunction\n(\n'makeApple'\n);\n$attributes\n=\n$function\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #3 Filtering results by class name",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nfunction\nmakeApple\n():\nstring\n{\n    return\n'apple'\n;\n}\n$function\n= new\nReflectionFunction\n(\n'makeApple'\n);\n$attributes\n=\n$function\n->\ngetAttributes\n(\n'Fruit'\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #4 Filtering results by class name, with inheritance",
    "output": "<?php\ninterface\nColor\n{\n}\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\nimplements\nColor\n{\n}\n#[\nFruit\n]\n#[\nRed\n]\nfunction\nmakeApple\n():\nstring\n{\n    return\n'apple'\n;\n}\n$function\n= new\nReflectionFunction\n(\n'makeApple'\n);\n$attributes\n=\n$function\n->\ngetAttributes\n(\n'Color'\n,\nReflectionAttribute\n::\nIS_INSTANCEOF\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #1 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a closure in the object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// $this === $b, since a non-static closure take the object context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #2 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a static closure without an object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return static function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// NULL, since the pseudo-variable $this is not available in a static context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #1 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a closure in the object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// $this === $b, since a non-static closure take the object context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #2 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a static closure without an object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return static function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// NULL, since the pseudo-variable $this is not available in a static context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #1 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a closure in the object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// $this === $b, since a non-static closure take the object context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #2 \n    Example showcasing difference between\n    ReflectionFunctionAbstract::getClosureCalledClass(),\n    ReflectionFunctionAbstract::getClosureScopeClass(),\n    and ReflectionFunctionAbstract::getClosureThis()\n    with a static closure without an object context",
    "output": "<?php\nclass\nA\n{\n    public function\ngetClosure\n()\n    {\n\nvar_dump\n(\nself\n::class, static::class);\n        return static function() {};\n    }\n}\nclass\nB\nextends\nA\n{}\n$b\n= new\nB\n();\n$c\n=\n$b\n->\ngetClosure\n();\n$r\n= new\nReflectionFunction\n(\n$c\n);\nvar_dump\n(\n$r\n->\ngetClosureThis\n());\n// NULL, since the pseudo-variable $this is not available in a static context\nvar_dump\n(\n$r\n->\ngetClosureScopeClass\n());\n// Corresponds to the self::class resolution inside a closure\nvar_dump\n(\n$r\n->\ngetClosureCalledClass\n());\n// Corresponds to the static::class resolution inside a closure\n?>"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::getClosureUsedVariables() example",
    "output": "<?php\n$one\n=\n1\n;\n$two\n=\n2\n;\n$function\n= function() use (\n$one\n,\n$two\n) {\n    static\n$three\n=\n3\n;\n};\n$reflector\n= new\nReflectionFunction\n(\n$function\n);\nvar_dump\n(\n$reflector\n->\ngetClosureUsedVariables\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::getReturnType() example",
    "output": "<?php\nfunction\nto_int\n(\n$param\n) :\nint\n{\n    return (int)\n$param\n;\n}\n$reflection1\n= new\nReflectionFunction\n(\n'to_int'\n);\necho\n$reflection1\n->\ngetReturnType\n();"
  },
  {
    "input": "Example #2 Usage on built-in functions",
    "output": "<?php\n$reflection2\n= new\nReflectionFunction\n(\n'array_merge'\n);\nvar_dump\n(\n$reflection2\n->\ngetReturnType\n());"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::getTentativeReturnType() example",
    "output": "<?php\n$method\n= new\nReflectionMethod\n(\n\\ArrayAccess\n::class,\n'offsetGet'\n);\nvar_dump\n(\n$method\n->\ngetTentativeReturnType\n());"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::hasReturnType() example",
    "output": "<?php\nfunction\nto_int\n(\n$param\n) :\nint\n{\n    return (int)\n$param\n;\n}\n$reflection1\n= new\nReflectionFunction\n(\n'to_int'\n);\nvar_dump\n(\n$reflection1\n->\nhasReturnType\n());"
  },
  {
    "input": "Example #2 Usage on built-in functions",
    "output": "<?php\n$reflection2\n= new\nReflectionFunction\n(\n'array_merge'\n);\nvar_dump\n(\n$reflection2\n->\nhasReturnType\n());"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::hasTentativeReturnType() example",
    "output": "<?php\n$method\n= new\nReflectionMethod\n(\n\\ArrayAccess\n::class,\n'offsetGet'\n);\nvar_dump\n(\n$method\n->\nhasTentativeReturnType\n());"
  },
  {
    "input": "Example #1 ReflectionFunctionAbstract::isClosure() example",
    "output": "<?php\n// Non-closure\n$function1\n=\n'str_replace'\n;\n$reflection1\n= new\nReflectionFunction\n(\n$function1\n);\nvar_dump\n(\n$reflection1\n->\nisClosure\n());\n// Closure\n$function2\n= function () {};\n$reflection2\n= new\nReflectionFunction\n(\n$function2\n);\nvar_dump\n(\n$reflection2\n->\nisClosure\n());\n?>"
  },
  {
    "input": "Example #1 \n     ReflectionFunctionAbstract::isDeprecated() example",
    "output": "<?php\n$rf\n= new\nReflectionFunction\n(\n'ereg'\n);\nvar_dump\n(\n$rf\n->\nisDeprecated\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::__construct() example",
    "output": "<?php\nclass\nCounter\n{\n    private static\n$c\n=\n0\n;\n\n/**\n     * Increment counter\n     *\n     * @final\n     * @static\n     * @access  public\n     * @return  int\n     */\n\nfinal public static function\nincrement\n()\n    {\n        return ++\nself\n::\n$c\n;\n    }\n}\n// Create an instance of the ReflectionMethod class\n$method\n= new\nReflectionMethod\n(\n'Counter'\n,\n'increment'\n);\n// Print out basic information\nprintf\n(\n\n\"===> The %s%s%s%s%s%s%s method '%s' (which is %s)\\n\"\n.\n\n\"     declared in %s\\n\"\n.\n\n\"     lines %d to %d\\n\"\n.\n\n\"     having the modifiers %d[%s]\\n\"\n,\n\n$method\n->\nisInternal\n() ?\n'internal'\n:\n'user-defined'\n,\n\n$method\n->\nisAbstract\n() ?\n' abstract'\n:\n''\n,\n\n$method\n->\nisFinal\n() ?\n' final'\n:\n''\n,\n\n$method\n->\nisPublic\n() ?\n' public'\n:\n''\n,\n\n$method\n->\nisPrivate\n() ?\n' private'\n:\n''\n,\n\n$method\n->\nisProtected\n() ?\n' protected'\n:\n''\n,\n\n$method\n->\nisStatic\n() ?\n' static'\n:\n''\n,\n\n$method\n->\ngetName\n(),\n\n$method\n->\nisConstructor\n() ?\n'the constructor'\n:\n'a regular method'\n,\n\n$method\n->\ngetFileName\n(),\n\n$method\n->\ngetStartLine\n(),\n\n$method\n->\ngetEndline\n(),\n\n$method\n->\ngetModifiers\n(),\n\nimplode\n(\n' '\n,\nReflection\n::\ngetModifierNames\n(\n$method\n->\ngetModifiers\n()))\n);\n// Print documentation comment\nprintf\n(\n\"---> Documentation:\\n %s\\n\"\n,\nvar_export\n(\n$method\n->\ngetDocComment\n(),\ntrue\n));\n// Print static variables if existant\nif (\n$statics\n=\n$method\n->\ngetStaticVariables\n()) {\n\nprintf\n(\n\"---> Static variables: %s\\n\"\n,\nvar_export\n(\n$statics\n,\ntrue\n));\n}\n// Invoke the method\nprintf\n(\n\"---> Invocation results in: \"\n);\nvar_dump\n(\n$method\n->\ninvoke\n(\nNULL\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::createFromMethodName() example",
    "output": "<?php\nclass\nFoo\n{\n    public function\nbar\n() {\n    }\n}\n$methodInfo\n=\nReflectionMethod\n::\ncreateFromMethodName\n(\n\"Foo::bar\"\n);\nvar_dump\n(\n$methodInfo\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::getDeclaringClass() example",
    "output": "<?php\nclass\nHelloWorld\n{\n    protected function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(new\nHelloWorld\n(),\n'sayHelloTo'\n);\nvar_dump\n(\n$reflectionMethod\n->\ngetDeclaringClass\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::getModifiers() example",
    "output": "<?php\nclass\nTesting\n{\n    final public static function\nfoo\n()\n    {\n        return;\n    }\n    public function\nbar\n()\n    {\n        return;\n    }\n}\n$foo\n= new\nReflectionMethod\n(\n'Testing'\n,\n'foo'\n);\necho\n\"Modifiers for method foo():\\n\"\n;\necho\n$foo\n->\ngetModifiers\n() .\n\"\\n\"\n;\necho\nimplode\n(\n' '\n,\nReflection\n::\ngetModifierNames\n(\n$foo\n->\ngetModifiers\n())) .\n\"\\n\"\n;\n$bar\n= new\nReflectionMethod\n(\n'Testing'\n,\n'bar'\n);\necho\n\"Modifiers for method bar():\\n\"\n;\necho\n$bar\n->\ngetModifiers\n() .\n\"\\n\"\n;\necho\nimplode\n(\n' '\n,\nReflection\n::\ngetModifierNames\n(\n$bar\n->\ngetModifiers\n()));\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::getPrototype() example",
    "output": "<?php\nclass\nHello\n{\n    public function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\nclass\nHelloWorld\nextends\nHello\n{\n    public function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello world: '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(\n'HelloWorld'\n,\n'sayHelloTo'\n);\nvar_dump\n(\n$reflectionMethod\n->\ngetPrototype\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::hasPrototype() example",
    "output": "<?php\nclass\nHello\n{\n    public function\nsayHelloTo\n(\n$name\n)\n    {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\nclass\nHelloWorld\nextends\nHello\n{\n    public function\nsayHelloTo\n(\n$name\n)\n    {\n        return\n'Hello world: '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(\n'HelloWorld'\n,\n'sayHelloTo'\n);\nvar_dump\n(\n$reflectionMethod\n->\nhasPrototype\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::invoke() example",
    "output": "<?php\nclass\nHelloWorld\n{\n    public function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(\n'HelloWorld'\n,\n'sayHelloTo'\n);\necho\n$reflectionMethod\n->\ninvoke\n(new\nHelloWorld\n(),\n'Mike'\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::invokeArgs() example",
    "output": "<?php\nclass\nHelloWorld\n{\n    public function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(\n'HelloWorld'\n,\n'sayHelloTo'\n);\necho\n$reflectionMethod\n->\ninvokeArgs\n(new\nHelloWorld\n(), array(\n'Mike'\n));\n?>"
  },
  {
    "input": "Example #1 Simple Class definition",
    "output": "<?php\nclass\nMyClass\n{\n    private function\nfoo\n()\n    {\n        return\n'bar'\n;\n    }\n}\n$method\n= new\nReflectionMethod\n(\n\"MyClass\"\n,\n\"foo\"\n);\n$method\n->\nsetAccessible\n(\ntrue\n);\n$obj\n= new\nMyClass\n();\necho\n$method\n->\ninvoke\n(\n$obj\n);\necho\n$obj\n->\nfoo\n();\n?>"
  },
  {
    "input": "Example #1 ReflectionMethod::__toString() example",
    "output": "<?php\nclass\nHelloWorld\n{\n    public function\nsayHelloTo\n(\n$name\n) {\n        return\n'Hello '\n.\n$name\n;\n    }\n}\n$reflectionMethod\n= new\nReflectionMethod\n(new\nHelloWorld\n(),\n'sayHelloTo'\n);\necho\n$reflectionMethod\n;\n?>"
  },
  {
    "input": "Example #1 ReflectionNamedType::isBuiltin() example",
    "output": "<?php\nclass\nSomeClass\n{}\nfunction\nsomeFunction\n(\nstring $param\n,\nSomeClass $param2\n,\nstdClass $param3\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParams\n=\n$reflectionFunc\n->\ngetParameters\n();\nvar_dump\n(\n$reflectionParams\n[\n0\n]->\ngetType\n()->\nisBuiltin\n());\nvar_dump\n(\n$reflectionParams\n[\n1\n]->\ngetType\n()->\nisBuiltin\n());\nvar_dump\n(\n$reflectionParams\n[\n2\n]->\ngetType\n()->\nisBuiltin\n());"
  },
  {
    "input": "Example #1 Using the ReflectionParameter class",
    "output": "<?php\nfunction\nfoo\n(\n$a\n,\n$b\n,\n$c\n) { }\nfunction\nbar\n(\nException $a\n, &\n$b\n,\n$c\n) { }\nfunction\nbaz\n(\nReflectionFunction $a\n,\n$b\n=\n1\n,\n$c\n=\nnull\n) { }\nfunction\nabc\n() { }\n$reflect\n= new\nReflectionFunction\n(\n'foo'\n);\necho\n$reflect\n;\nforeach (\n$reflect\n->\ngetParameters\n() as\n$i\n=>\n$param\n) {\n\nprintf\n(\n\n\"-- Parameter #%d: %s {\\n\"\n.\n\n\"   Class: %s\\n\"\n.\n\n\"   Allows NULL: %s\\n\"\n.\n\n\"   Passed to by reference: %s\\n\"\n.\n\n\"   Is optional?: %s\\n\"\n.\n\n\"}\\n\"\n,\n\n$i\n,\n// $param->getPosition() can be used\n\n$param\n->\ngetName\n(),\n\nvar_export\n(\n$param\n->\ngetClass\n(),\n1\n),\n\nvar_export\n(\n$param\n->\nallowsNull\n(),\n1\n),\n\nvar_export\n(\n$param\n->\nisPassedByReference\n(),\n1\n),\n\n$param\n->\nisOptional\n() ?\n'yes'\n:\n'no'\n\n);\n}\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nfunction\nfruitBasket\n(\n   #[\nFruit\n]\n   #[\nRed\n]\n\nstring $apple\n) { }\n$reflection\n= new\nReflectionFunction\n(\n'fruitBasket'\n);\n$parameter\n=\n$reflection\n->\ngetParameter\n(\n'apple'\n);\n$attributes\n=\n$parameter\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #2 Filtering results by class name",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nfunction\nfruitBasket\n(\n   #[\nFruit\n]\n   #[\nRed\n]\n\nstring $apple\n) { }\n$reflection\n= new\nReflectionFunction\n(\n'fruitBasket'\n);\n$parameter\n=\n$reflection\n->\ngetParameter\n(\n'apple'\n);\n$attributes\n=\n$parameter\n->\ngetAttributes\n(\n'Fruit'\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #3 Filtering results by class name, with inheritance",
    "output": "<?php\ninterface\nColor\n{\n}\n#[\nAttribute\n]\nclass\nFruit\n{\n}\nfunction\nfruitBasket\n(\n   #[\nFruit\n]\n   #[\nRed\n]\n\nstring $apple\n) { }\n$reflection\n= new\nReflectionFunction\n(\n'fruitBasket'\n);\n$parameter\n=\n$reflection\n->\ngetParameter\n(\n'apple'\n);\n$attributes\n=\n$parameter\n->\ngetAttributes\n(\n'Color'\n,\nReflectionAttribute\n::\nIS_INSTANCEOF\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #1 Using the ReflectionParameter class",
    "output": "<?php\nfunction\nfoo\n(\nException $a\n) { }\n$functionReflection\n= new\nReflectionFunction\n(\n'foo'\n);\n$parameters\n=\n$functionReflection\n->\ngetParameters\n();\n$aParameter\n=\n$parameters\n[\n0\n];\necho\n$aParameter\n->\ngetClass\n()->\nname\n;\n?>"
  },
  {
    "input": "Example #1 Getting the class that declared the method",
    "output": "<?php\nclass\nFoo\n{\n    public function\nbar\n(\n\\DateTime $datetime\n)\n    {\n    }\n}\nclass\nBaz\nextends\nFoo\n{\n}\n$param\n= new\n\\ReflectionParameter\n([\n'Baz'\n,\n'bar'\n],\n0\n);\nvar_dump\n(\n$param\n->\ngetDeclaringClass\n());"
  },
  {
    "input": "Example #1 Getting default values of function parameters",
    "output": "<?php\nfunction\nfoo\n(\n$test\n,\n$bar\n=\n'baz'\n)\n{\n    echo\n$test\n.\n$bar\n;\n}\n$function\n= new\nReflectionFunction\n(\n'foo'\n);\nforeach (\n$function\n->\ngetParameters\n() as\n$param\n) {\n    echo\n'Name: '\n.\n$param\n->\ngetName\n() .\nPHP_EOL\n;\n    if (\n$param\n->\nisOptional\n()) {\n        echo\n'Default value: '\n.\n$param\n->\ngetDefaultValue\n() .\nPHP_EOL\n;\n    }\n    echo\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Getting default values' constant names of function parameters",
    "output": "<?php\nfunction\nfoo\n(\n$test\n,\n$bar\n=\nPHP_INT_MIN\n)\n{\n    echo\n$test\n.\n$bar\n;\n}\n$function\n= new\nReflectionFunction\n(\n'foo'\n);\nforeach (\n$function\n->\ngetParameters\n() as\n$param\n) {\n    echo\n'Name: '\n.\n$param\n->\ngetName\n() .\nPHP_EOL\n;\n    if (\n$param\n->\nisOptional\n()) {\n        echo\n'Default value: '\n.\n$param\n->\ngetDefaultValueConstantName\n() .\nPHP_EOL\n;\n    }\n    echo\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #2 ReflectionParameter::getType() Usage before PHP 7.1.0",
    "output": "<?php\nfunction\nsomeFunction\n(\nint $param\n,\n$param2\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParams\n=\n$reflectionFunc\n->\ngetParameters\n();\n$reflectionType1\n=\n$reflectionParams\n[\n0\n]->\ngetType\n();\n$reflectionType2\n=\n$reflectionParams\n[\n1\n]->\ngetType\n();\necho\n$reflectionType1\n,\nPHP_EOL\n;\nvar_dump\n(\n$reflectionType2\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionParameter::hasType() example",
    "output": "<?php\nfunction\nsomeFunction\n(\nstring $param\n,\n$param2\n=\nnull\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParams\n=\n$reflectionFunc\n->\ngetParameters\n();\nvar_dump\n(\n$reflectionParams\n[\n0\n]->\nhasType\n());\nvar_dump\n(\n$reflectionParams\n[\n1\n]->\nhasType\n());"
  },
  {
    "input": "Example #1 ReflectionParameter::__toString() example",
    "output": "<?php\necho new\nReflectionParameter\n(\n'substr'\n,\n0\n);\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::__construct() example",
    "output": "<?php\nclass\nStr\n{\n    public\n$length\n=\n5\n;\n}\n// Create an instance of the ReflectionProperty class\n$prop\n= new\nReflectionProperty\n(\n'Str'\n,\n'length'\n);\n// Print out basic information\nprintf\n(\n\n\"===> The%s%s%s%s property '%s' (which was %s)\\n\"\n.\n\n\"     having the modifiers %s\\n\"\n,\n\n$prop\n->\nisPublic\n() ?\n' public'\n:\n''\n,\n\n$prop\n->\nisPrivate\n() ?\n' private'\n:\n''\n,\n\n$prop\n->\nisProtected\n() ?\n' protected'\n:\n''\n,\n\n$prop\n->\nisStatic\n() ?\n' static'\n:\n''\n,\n\n$prop\n->\ngetName\n(),\n\n$prop\n->\nisDefault\n() ?\n'declared at compile-time'\n:\n'created at run-time'\n,\n\nvar_export\n(\nReflection\n::\ngetModifierNames\n(\n$prop\n->\ngetModifiers\n()),\ntrue\n)\n);\n// Create an instance of Str\n$obj\n= new\nStr\n();\n// Get current value\nprintf\n(\n\"---> Value is: \"\n);\nvar_dump\n(\n$prop\n->\ngetValue\n(\n$obj\n));\n// Change value\n$prop\n->\nsetValue\n(\n$obj\n,\n10\n);\nprintf\n(\n\"---> Setting value to 10, new value is: \"\n);\nvar_dump\n(\n$prop\n->\ngetValue\n(\n$obj\n));\n// Dump object\nvar_dump\n(\n$obj\n);\n?>"
  },
  {
    "input": "Example #2 Getting value from private and protected properties using ReflectionProperty class",
    "output": "<?php\nclass\nFoo\n{\n    public\n$x\n=\n1\n;\n    protected\n$y\n=\n2\n;\n    private\n$z\n=\n3\n;\n}\n$obj\n= new\nFoo\n;\n$prop\n= new\nReflectionProperty\n(\n'Foo'\n,\n'y'\n);\n$prop\n->\nsetAccessible\n(\ntrue\n);\nvar_dump\n(\n$prop\n->\ngetValue\n(\n$obj\n));\n// int(2)\n$prop\n= new\nReflectionProperty\n(\n'Foo'\n,\n'z'\n);\n$prop\n->\nsetAccessible\n(\ntrue\n);\nvar_dump\n(\n$prop\n->\ngetValue\n(\n$obj\n));\n// int(2)\n?>"
  },
  {
    "input": "Example #1 Basic usage",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public\nstring $apple\n=\n'apple'\n;\n}\n$property\n= new\nReflectionProperty\n(\n'Basket'\n,\n'apple'\n);\n$attributes\n=\n$property\n->\ngetAttributes\n();\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #2 Filtering results by class name",
    "output": "<?php\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public\nstring $apple\n=\n'apple'\n;\n}\n$property\n= new\nReflectionProperty\n(\n'Basket'\n,\n'apple'\n);\n$attributes\n=\n$property\n->\ngetAttributes\n(\n'Fruit'\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #3 Filtering results by class name, with inheritance",
    "output": "<?php\ninterface\nColor\n{\n}\n#[\nAttribute\n]\nclass\nFruit\n{\n}\n#[\nAttribute\n]\nclass\nRed\nimplements\nColor\n{\n}\nclass\nBasket\n{\n    #[\nFruit\n]\n    #[\nRed\n]\n    public\nstring $apple\n=\n'apple'\n;\n}\n$property\n= new\nReflectionProperty\n(\n'Basket'\n,\n'apple'\n);\n$attributes\n=\n$property\n->\ngetAttributes\n(\n'Color'\n,\nReflectionAttribute\n::\nIS_INSTANCEOF\n);\nprint_r\n(\narray_map\n(fn(\n$attribute\n) =>\n$attribute\n->\ngetName\n(),\n$attributes\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::getDefaultValue() example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$bar\n=\n1\n;\n    public ?\nint $baz\n;\n    public\nint $boing\n=\n0\n;\n    public function\n__construct\n(public\nstring $bak\n=\n\"default\"\n) { }\n}\n$ro\n= new\nReflectionClass\n(\nFoo\n::class);\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bar'\n)->\ngetDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'baz'\n)->\ngetDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'boing'\n)->\ngetDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bak'\n)->\ngetDefaultValue\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::getDocComment() example",
    "output": "<?php\nclass\nStr\n{\n\n/**\n     * @var int  The length of the string\n     */\n\npublic\n$length\n=\n5\n;\n}\n$prop\n= new\nReflectionProperty\n(\n'Str'\n,\n'length'\n);\nvar_dump\n(\n$prop\n->\ngetDocComment\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::getType() example",
    "output": "<?php\nclass\nUser\n{\n    public\nstring $name\n;\n}\n$rp\n= new\nReflectionProperty\n(\n'User'\n,\n'name'\n);\necho\n$rp\n->\ngetType\n()->\ngetName\n();\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::getValue() example",
    "output": "<?php\nclass\nFoo\n{\n    public static\n$staticProperty\n=\n'foobar'\n;\n\n    public\n$property\n=\n'barfoo'\n;\n    protected\n$privateProperty\n=\n'foofoo'\n;\n}\n$reflectionClass\n= new\nReflectionClass\n(\n'Foo'\n);\nvar_dump\n(\n$reflectionClass\n->\ngetProperty\n(\n'staticProperty'\n)->\ngetValue\n());\nvar_dump\n(\n$reflectionClass\n->\ngetProperty\n(\n'property'\n)->\ngetValue\n(new\nFoo\n));\n$reflectionProperty\n=\n$reflectionClass\n->\ngetProperty\n(\n'privateProperty'\n);\n$reflectionProperty\n->\nsetAccessible\n(\ntrue\n);\n// only required prior to PHP 8.1.0\nvar_dump\n(\n$reflectionProperty\n->\ngetValue\n(new\nFoo\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::hasDefaultValue() example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$bar\n;\n    public ?\nint $baz\n;\n    public ?\nint $foo\n=\nnull\n;\n    public\nint $boing\n;\n\n    public function\n__construct\n()\n    {\n\n$this\n->\nping\n=\n''\n;\n    }\n}\n$ro\n= new\nReflectionObject\n(new\nFoo\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bar'\n)->\nhasDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'baz'\n)->\nhasDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'foo'\n)->\nhasDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'boing'\n)->\nhasDefaultValue\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'ping'\n)->\nhasDefaultValue\n());\n// Dynamic property\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'pong'\n)->\nhasDefaultValue\n());\n// Not defined property\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::hasType() example",
    "output": "<?php\nclass\nUser\n{\n    public\nstring $name\n;\n}\n$rp\n= new\nReflectionProperty\n(\n'User'\n,\n'name'\n);\nvar_dump\n(\n$rp\n->\nhasType\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::isDefault() example",
    "output": "<?php\n#[\n\\AllowDynamicProperties\n]\nclass\nFoo\n{\n    public\n$bar\n;\n}\n$o\n= new\nFoo\n();\n$o\n->\nbar\n=\n42\n;\n$o\n->\nbaz\n=\n42\n;\n$ro\n= new\nReflectionObject\n(\n$o\n);\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bar'\n)->\nisDefault\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'baz'\n)->\nisDefault\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::isDynamic() example",
    "output": "<?php\n#[\n\\AllowDynamicProperties\n]\nclass\nFoo\n{\n    public\n$bar\n;\n}\n$o\n= new\nFoo\n();\n$o\n->\nbar\n=\n42\n;\n$o\n->\nbaz\n=\n42\n;\n$ro\n= new\nReflectionObject\n(\n$o\n);\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bar'\n)->\nisDynamic\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'baz'\n)->\nisDynamic\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::isInitialized() example",
    "output": "<?php\nclass\nUser\n{\n    public\nstring $name\n;\n}\n$rp\n= new\nReflectionProperty\n(\n'User'\n,\n'name'\n);\n$user\n= new\nUser\n;\nvar_dump\n(\n$rp\n->\nisInitialized\n(\n$user\n));\n$user\n->\nname\n=\n'Nikita'\n;\nvar_dump\n(\n$rp\n->\nisInitialized\n(\n$user\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::isPromoted() example",
    "output": "<?php\nclass\nFoo\n{\n    public\n$baz\n;\n    public function\n__construct\n(public\n$bar\n) {}\n}\n$o\n= new\nFoo\n(\n42\n);\n$o\n->\nbaz\n=\n42\n;\n$ro\n= new\nReflectionObject\n(\n$o\n);\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'bar'\n)->\nisPromoted\n());\nvar_dump\n(\n$ro\n->\ngetProperty\n(\n'baz'\n)->\nisPromoted\n());\n?>"
  },
  {
    "input": "Example #1 Simple Class definition",
    "output": "<?php\nclass\nMyClass\n{\n    private\n$foo\n=\n'bar'\n;\n}\n$property\n= new\nReflectionProperty\n(\n\"MyClass\"\n,\n\"foo\"\n);\n$property\n->\nsetAccessible\n(\ntrue\n);\n$obj\n= new\nMyClass\n();\necho\n$property\n->\ngetValue\n(\n$obj\n);\necho\n$obj\n->\nfoo\n;\n?>"
  },
  {
    "input": "Example #1 ReflectionProperty::setValue() example",
    "output": "<?php\nclass\nFoo\n{\n    public static\n$staticProperty\n;\n\n    public\n$property\n;\n    protected\n$privateProperty\n;\n}\n$reflectionClass\n= new\nReflectionClass\n(\n'Foo'\n);\n// As of PHP 8.3, setValue should no longer be used to set static property value, use setStaticPropertyValue() instead\n$reflectionClass\n->\nsetStaticPropertyValue\n(\n'staticProperty'\n,\n'foo'\n);\nvar_dump\n(\nFoo\n::\n$staticProperty\n);\n$foo\n= new\nFoo\n;\n$reflectionClass\n->\ngetProperty\n(\n'property'\n)->\nsetValue\n(\n$foo\n,\n'bar'\n);\nvar_dump\n(\n$foo\n->\nproperty\n);\n$reflectionProperty\n=\n$reflectionClass\n->\ngetProperty\n(\n'privateProperty'\n);\n$reflectionProperty\n->\nsetAccessible\n(\ntrue\n);\n// only required prior to PHP 8.1.0\n$reflectionProperty\n->\nsetValue\n(\n$foo\n,\n'foobar'\n);\nvar_dump\n(\n$reflectionProperty\n->\ngetValue\n(\n$foo\n));\n?>"
  },
  {
    "input": "Example #1 ReflectionType::allowsNull() example",
    "output": "<?php\nfunction\nsomeFunction\n(\nstring $param\n,\nstdClass $param2\n=\nnull\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParams\n=\n$reflectionFunc\n->\ngetParameters\n();\nvar_dump\n(\n$reflectionParams\n[\n0\n]->\ngetType\n()->\nallowsNull\n());\nvar_dump\n(\n$reflectionParams\n[\n1\n]->\ngetType\n()->\nallowsNull\n());"
  },
  {
    "input": "Example #1 ReflectionType::__toString() example",
    "output": "<?php\nfunction\nsomeFunction\n(\nstring $param\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParam\n=\n$reflectionFunc\n->\ngetParameters\n()[\n0\n];\necho\n$reflectionParam\n->\ngetType\n();"
  },
  {
    "input": "Example #1 ReflectionUnionType::getTypes() example",
    "output": "<?php\nfunction\nsomeFunction\n(\nint\n|\nfloat $number\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParam\n=\n$reflectionFunc\n->\ngetParameters\n()[\n0\n];\nvar_dump\n(\n$reflectionParam\n->\ngetType\n()->\ngetTypes\n());"
  },
  {
    "input": "Example #1 ReflectionGenerator::__construct() example",
    "output": "<?php\nfunction\ngen\n()\n{\n    yield\n1\n;\n}\n$gen\n=\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\necho <<< output\n{\n$reflectionGen\n->\ngetFunction\n()->\nname\n}\nLine:\n{\n$reflectionGen\n->\ngetExecutingLine\n()}\nFile:\n{\n$reflectionGen\n->\ngetExecutingFile\n()}\noutput;"
  },
  {
    "input": "Example #1 ReflectionGenerator::getExecutingFile() example",
    "output": "<?php\nclass\nGenExample\n{\n    public function\ngen\n()\n    {\n        yield\n1\n;\n    }\n}\n$gen\n= (new\nGenExample\n)->\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\necho\n\"File:\n{\n$reflectionGen\n->\ngetExecutingFile\n()}\n\"\n;"
  },
  {
    "input": "Example #1 ReflectionGenerator::getExecutingGenerator() example",
    "output": "<?php\nclass\nGenExample\n{\n    public function\ngen\n()\n    {\n        yield\n1\n;\n    }\n}\n$gen\n= (new\nGenExample\n)->\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\n$gen2\n=\n$reflectionGen\n->\ngetExecutingGenerator\n();\nvar_dump\n(\n$gen2\n===\n$gen\n);\nvar_dump\n(\n$gen2\n->\ncurrent\n());"
  },
  {
    "input": "Example #1 ReflectionGenerator::getExecutingLine() example",
    "output": "<?php\nclass\nGenExample\n{\n    public function\ngen\n()\n    {\n        yield\n1\n;\n    }\n}\n$gen\n= (new\nGenExample\n)->\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\necho\n\"Line:\n{\n$reflectionGen\n->\ngetExecutingLine\n()}\n\"\n;"
  },
  {
    "input": "Example #1 ReflectionGenerator::getFunction() example",
    "output": "<?php\nfunction\ngen\n()\n{\n    yield\n1\n;\n}\n$gen\n=\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\nvar_dump\n(\n$reflectionGen\n->\ngetFunction\n());"
  },
  {
    "input": "Example #1 ReflectionGenerator::getThis() example",
    "output": "<?php\nclass\nGenExample\n{\n    public function\ngen\n()\n    {\n        yield\n1\n;\n    }\n}\n$gen\n= (new\nGenExample\n)->\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\nvar_dump\n(\n$reflectionGen\n->\ngetThis\n());"
  },
  {
    "input": "Example #1 ReflectionGenerator::getTrace() example",
    "output": "<?php\nfunction\nfoo\n() {\n    yield\n1\n;\n}\nfunction\nbar\n()\n{\n    yield from\nfoo\n();\n}\nfunction\nbaz\n()\n{\n    yield from\nbar\n();\n}\n$gen\n=\nbaz\n();\n$gen\n->\nvalid\n();\n// start the generator\nvar_dump\n((new\nReflectionGenerator\n(\n$gen\n))->\ngetTrace\n());"
  },
  {
    "input": "Example #1 ReflectionGenerator::isClosed() example",
    "output": "<?php\nfunction\ngen\n()\n{\n    yield\n'a'\n;\n    yield\n'a'\n;\n}\n$gen\n=\ngen\n();\n$reflectionGen\n= new\nReflectionGenerator\n(\n$gen\n);\nforeach (\n$gen\nas\n$value\n) {\n    echo\n$value\n,\nPHP_EOL\n;\n\nvar_dump\n(\n$reflectionGen\n->\nisClosed\n());\n}\nvar_dump\n(\n$reflectionGen\n->\nisClosed\n());\n?>"
  },
  {
    "input": "Example #1 ReflectionIntersectionType::getTypes() example",
    "output": "<?php\nfunction\nsomeFunction\n(\nIterator\n&\nCountable $value\n) {}\n$reflectionFunc\n= new\nReflectionFunction\n(\n'someFunction'\n);\n$reflectionParam\n=\n$reflectionFunc\n->\ngetParameters\n()[\n0\n];\nvar_dump\n(\n$reflectionParam\n->\ngetType\n()->\ngetTypes\n());\n?>"
  },
  {
    "input": "Example #1 Basic ReflectionReference::getId() usage",
    "output": "<?php\n$val1\n=\n'foo'\n;\n$val2\n=\n'bar'\n;\n$arr\n= [&\n$val1\n, &\n$val2\n, &\n$val1\n];\n$rr1\n=\nReflectionReference\n::\nfromArrayElement\n(\n$arr\n,\n0\n);\n$rr2\n=\nReflectionReference\n::\nfromArrayElement\n(\n$arr\n,\n1\n);\n$rr3\n=\nReflectionReference\n::\nfromArrayElement\n(\n$arr\n,\n2\n);\nvar_dump\n(\n$rr1\n->\ngetId\n() ===\n$rr2\n->\ngetId\n());\nvar_dump\n(\n$rr1\n->\ngetId\n() ===\n$rr3\n->\ngetId\n());\n?>"
  },
  {
    "input": "Example #1 boolval() examples",
    "output": "<?php\necho\n'0:        '\n.(\nboolval\n(\n0\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'42:       '\n.(\nboolval\n(\n42\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'0.0:      '\n.(\nboolval\n(\n0.0\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'4.2:      '\n.(\nboolval\n(\n4.2\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'\"\":       '\n.(\nboolval\n(\n\"\"\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'\"string\": '\n.(\nboolval\n(\n\"string\"\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'\"0\":      '\n.(\nboolval\n(\n\"0\"\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'\"1\":      '\n.(\nboolval\n(\n\"1\"\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'[1, 2]:   '\n.(\nboolval\n([\n1\n,\n2\n]) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'[]:       '\n.(\nboolval\n([]) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\necho\n'stdClass: '\n.(\nboolval\n(new\nstdClass\n) ?\n'true'\n:\n'false'\n).\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 debug_zval_dump() example",
    "output": "<?php\n$var1\n=\n'Hello'\n;\n$var1\n.=\n' World'\n;\n$var2\n=\n$var1\n;\ndebug_zval_dump\n(\n$var1\n);\n?>"
  },
  {
    "input": "Example #1 \n     A simple empty() / isset()\n     comparison.",
    "output": "<?php\n$var\n=\n0\n;\n// Evaluates to true because $var is empty\nif (empty(\n$var\n)) {\n    echo\n'$var is either 0, empty, or not set at all'\n;\n}\n// Evaluates as true because $var is set\nif (isset(\n$var\n)) {\n    echo\n'$var is set even though it is empty'\n;\n}\n?>"
  },
  {
    "input": "Example #2 empty() on String Offsets",
    "output": "<?php\n$expected_array_got_string\n=\n'somestring'\n;\nvar_dump\n(empty(\n$expected_array_got_string\n[\n'some_key'\n]));\nvar_dump\n(empty(\n$expected_array_got_string\n[\n0\n]));\nvar_dump\n(empty(\n$expected_array_got_string\n[\n'0'\n]));\nvar_dump\n(empty(\n$expected_array_got_string\n[\n'0.5'\n]));\nvar_dump\n(empty(\n$expected_array_got_string\n[\n'0 Mostel'\n]));\n?>"
  },
  {
    "input": "Example #3 empty() on multidimensional arrays",
    "output": "<?php\n$multidimensional\n= [\n\n'some'\n=> [\n\n'deep'\n=> [\n\n'nested'\n=>\n'value'\n\n]\n    ]\n];\nif (!empty(\n$multidimensional\n[\n'some'\n][\n'some'\n][\n'nested'\n])) {\n\n$someVariable\n=\n$multidimensional\n[\n'some'\n][\n'deep'\n][\n'nested'\n];\n}\nvar_dump\n(empty(\n$multidimensional\n[\n'some-undefined-key'\n]));\nvar_dump\n(empty(\n$multidimensional\n[\n'some'\n][\n'deep'\n][\n'unknown'\n]));\nvar_dump\n(empty(\n$multidimensional\n[\n'some'\n][\n'deep'\n][\n'nested'\n]));\n?>"
  },
  {
    "input": "Example #1 floatval() Example",
    "output": "<?php\n$var\n=\n'122.34343The'\n;\n$float_value_of_var\n=\nfloatval\n(\n$var\n);\necho\n$float_value_of_var\n;\n// 122.34343\n?>"
  },
  {
    "input": "Example #2 floatval() non-numeric leftmost characters Example",
    "output": "<?php\n$var\n=\n'The122.34343'\n;\n$float_value_of_var\n=\nfloatval\n(\n$var\n);\necho\n$float_value_of_var\n;\n// 0\n?>"
  },
  {
    "input": "Example #1 get_debug_type() example",
    "output": "<?php\nnamespace\nFoo\n;\necho\nget_debug_type\n(\nnull\n),\nPHP_EOL\n;\necho\nget_debug_type\n(\ntrue\n),\nPHP_EOL\n;\necho\nget_debug_type\n(\n1\n),\nPHP_EOL\n;\necho\nget_debug_type\n(\n0.1\n),\nPHP_EOL\n;\necho\nget_debug_type\n(\n\"foo\"\n),\nPHP_EOL\n;\necho\nget_debug_type\n([]),\nPHP_EOL\n;\n$fp\n=\nfopen\n(\n__FILE__\n,\n'rb'\n);\necho\nget_debug_type\n(\n$fp\n),\nPHP_EOL\n;\nfclose\n(\n$fp\n);\necho\nget_debug_type\n(\n$fp\n),\nPHP_EOL\n;\necho\nget_debug_type\n(new\n\\stdClass\n),\nPHP_EOL\n;\necho\nget_debug_type\n(new class {}),\nPHP_EOL\n;\ninterface\nA\n{}\ninterface\nB\n{}\nclass\nC\n{}\necho\nget_debug_type\n(new class implements\nA\n{}),\nPHP_EOL\n;\necho\nget_debug_type\n(new class implements\nA\n,\nB\n{}),\nPHP_EOL\n;\necho\nget_debug_type\n(new class extends\nC\n{}),\nPHP_EOL\n;\necho\nget_debug_type\n(new class extends\nC\nimplements\nA\n{}),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 get_defined_vars() Example",
    "output": "<?php\n$b\n= array(\n1\n,\n1\n,\n2\n,\n3\n,\n5\n,\n8\n);\n$arr\n=\nget_defined_vars\n();\n// print $b\nprint_r\n(\n$arr\n[\n\"b\"\n]);\n/* print path to the PHP interpreter (if used as a CGI)\n * e.g. /usr/local/bin/php */\necho\n$arr\n[\n\"_\"\n];\n// print the command-line parameters if any\nprint_r\n(\n$arr\n[\n\"argv\"\n]);\n// print all the server vars\nprint_r\n(\n$arr\n[\n\"_SERVER\"\n]);\n// print all the available keys for the arrays of variables\nprint_r\n(\narray_keys\n(\nget_defined_vars\n()));\n?>"
  },
  {
    "input": "Example #1 get_resource_id() produces the same result as an int cast",
    "output": "<?php\n$handle\n=\nfopen\n(\n\"php://stdout\"\n,\n\"w\"\n);\necho (int)\n$handle\n.\n\"\\n\"\n;\necho\nget_resource_id\n(\n$handle\n);\n?>"
  },
  {
    "input": "Example #1 get_resource_type() example",
    "output": "<?php\n$fp\n=\nfopen\n(\n\"foo\"\n,\n\"w\"\n);\necho\nget_resource_type\n(\n$fp\n) .\n\"\\n\"\n;\n// As of PHP 8.0.0, the following does not work anymore. The curl_init function returns a CurlHandle object now.\n$c\n=\ncurl_init\n();\necho\nget_resource_type\n(\n$c\n) .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 gettype() example",
    "output": "<?php\n$data\n= array(\n1\n,\n1.\n,\nNULL\n, new\nstdClass\n,\n'foo'\n);\nforeach (\n$data\nas\n$value\n) {\n    echo\ngettype\n(\n$value\n),\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Check that variable is an array",
    "output": "<?php\n$yes\n= array(\n'this'\n,\n'is'\n,\n'an array'\n);\necho\nis_array\n(\n$yes\n) ?\n'Array'\n:\n'not an Array'\n;\necho\n\"\\n\"\n;\n$no\n=\n'this is a string'\n;\necho\nis_array\n(\n$no\n) ?\n'Array'\n:\n'not an Array'\n;\n?>"
  },
  {
    "input": "Example #1 is_bool() examples",
    "output": "<?php\n$a\n=\nfalse\n;\n$b\n=\n0\n;\n// Since $a is a boolean, it will return true\nif (\nis_bool\n(\n$a\n) ===\ntrue\n) {\n    echo\n\"Yes, this is a boolean\"\n;\n}\n// Since $b is not a boolean, it will return false\nif (\nis_bool\n(\n$b\n) ===\nfalse\n) {\n    echo\n\"No, this is not a boolean\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Checking whether a string can be called as a function",
    "output": "<?php\nfunction\nsomeFunction\n() {}\n$functionVariable\n=\n'someFunction'\n;\nvar_dump\n(\nis_callable\n(\n$functionVariable\n,\nfalse\n,\n$callable_name\n));\nvar_dump\n(\n$callable_name\n);\n?>"
  },
  {
    "input": "Example #2 Checking whether an array can be called as a function",
    "output": "<?php\nclass\nSomeClass\n{\n    public function\nsomeMethod\n() {}\n}\n$anObject\n= new\nSomeClass\n();\n$methodVariable\n= [\n$anObject\n,\n'someMethod'\n];\nvar_dump\n(\nis_callable\n(\n$methodVariable\n,\ntrue\n,\n$callable_name\n));\nvar_dump\n(\n$callable_name\n);\n?>"
  },
  {
    "input": "Example #1 is_countable() examples",
    "output": "<?php\nvar_dump\n(\nis_countable\n([\n1\n,\n2\n,\n3\n]));\n// bool(true)\nvar_dump\n(\nis_countable\n(new\nArrayIterator\n([\n'foo'\n,\n'bar'\n,\n'baz'\n])));\n// bool(true)\nvar_dump\n(\nis_countable\n(new\nArrayIterator\n()));\n// bool(true)\nvar_dump\n(\nis_countable\n(new\nstdClass\n()));\n// bool(false)"
  },
  {
    "input": "Example #1 is_float() example",
    "output": "<?php\nvar_dump\n(\nis_float\n(\n27.25\n));\nvar_dump\n(\nis_float\n(\n'abc'\n));\nvar_dump\n(\nis_float\n(\n23\n));\nvar_dump\n(\nis_float\n(\n23.5\n));\nvar_dump\n(\nis_float\n(\n1e7\n));\n//Scientific Notation\nvar_dump\n(\nis_float\n(\ntrue\n));\n?>"
  },
  {
    "input": "Example #1 is_int() example",
    "output": "<?php\n$values\n= array(\n23\n,\n\"23\"\n,\n23.5\n,\n\"23.5\"\n,\nnull\n,\ntrue\n,\nfalse\n);\nforeach (\n$values\nas\n$value\n) {\n    echo\n\"is_int(\"\n;\n\nvar_export\n(\n$value\n);\n    echo\n\") = \"\n;\n\nvar_dump\n(\nis_int\n(\n$value\n));\n}\n?>"
  },
  {
    "input": "Example #1 is_iterable() examples",
    "output": "<?php\nvar_dump\n(\nis_iterable\n([\n1\n,\n2\n,\n3\n]));\n// bool(true)\nvar_dump\n(\nis_iterable\n(new\nArrayIterator\n([\n1\n,\n2\n,\n3\n])));\n// bool(true)\nvar_dump\n(\nis_iterable\n((function () { yield\n1\n; })()));\n// bool(true)\nvar_dump\n(\nis_iterable\n(\n1\n));\n// bool(false)\nvar_dump\n(\nis_iterable\n(new\nstdClass\n()));\n// bool(false)\n?>"
  },
  {
    "input": "Example #1 is_null() example",
    "output": "<?php\nerror_reporting\n(\nE_ALL\n);\n$foo\n=\nNULL\n;\nvar_dump\n(\nis_null\n(\n$inexistent\n),\nis_null\n(\n$foo\n));\n?>"
  },
  {
    "input": "Example #1 is_numeric() examples",
    "output": "<?php\n$tests\n= array(\n\n\"42\"\n,\n\n1337\n,\n\n0x539\n,\n\n02471\n,\n\n0b10100111001\n,\n\n1337e0\n,\n\n\"0x539\"\n,\n\n\"02471\"\n,\n\n\"0b10100111001\"\n,\n\n\"1337e0\"\n,\n\n\"not numeric\"\n,\n    array(),\n\n9.1\n,\n\nnull\n,\n\n''\n,\n);\nforeach (\n$tests\nas\n$element\n) {\n    if (\nis_numeric\n(\n$element\n)) {\n        echo\nvar_export\n(\n$element\n,\ntrue\n) .\n\" is numeric\"\n,\nPHP_EOL\n;\n    } else {\n        echo\nvar_export\n(\n$element\n,\ntrue\n) .\n\" is NOT numeric\"\n,\nPHP_EOL\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #2 is_numeric() with whitespace",
    "output": "<?php\n$tests\n= [\n\n\" 42\"\n,\n\n\"42 \"\n,\n\n\"\\u{A0}9001\"\n,\n// non-breaking space\n\n\"9001\\u{A0}\"\n,\n// non-breaking space\n];\nforeach (\n$tests\nas\n$element\n) {\n    if (\nis_numeric\n(\n$element\n)) {\n        echo\nvar_export\n(\n$element\n,\ntrue\n) .\n\" is numeric\"\n,\nPHP_EOL\n;\n    } else {\n        echo\nvar_export\n(\n$element\n,\ntrue\n) .\n\" is NOT numeric\"\n,\nPHP_EOL\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 is_object() example",
    "output": "<?php\n// Declare a simple function to return an\n// array from our object\nfunction\nget_students\n(\n$obj\n)\n{\n    if (!\nis_object\n(\n$obj\n)) {\n        return\nfalse\n;\n    }\n    return\n$obj\n->\nstudents\n;\n}\n// Declare a new class instance and fill up\n// some values\n$obj\n= new\nstdClass\n();\n$obj\n->\nstudents\n= array(\n'Kalle'\n,\n'Ross'\n,\n'Felipe'\n);\nvar_dump\n(\nget_students\n(\nnull\n));\nvar_dump\n(\nget_students\n(\n$obj\n));\n?>"
  },
  {
    "input": "Example #1 is_resource() example",
    "output": "<?php\n$handle\n=\nfopen\n(\n\"php://stdout\"\n,\n\"w\"\n);\nif (\nis_resource\n(\n$handle\n)) {\n    echo\n'$handle is a resource'\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_scalar() example",
    "output": "<?php\nfunction\nshow_var\n(\n$var\n)\n{\n    if (\nis_scalar\n(\n$var\n)) {\n        echo\n$var\n;\n    } else {\n\nvar_dump\n(\n$var\n);\n    }\n}\n$pi\n=\n3.1416\n;\n$proteins\n= array(\n\"hemoglobin\"\n,\n\"cytochrome c oxidase\"\n,\n\"ferredoxin\"\n);\nshow_var\n(\n$pi\n);\nshow_var\n(\n$proteins\n)\n?>"
  },
  {
    "input": "Example #1 is_string() example",
    "output": "<?php\n$values\n= array(\nfalse\n,\ntrue\n,\nnull\n,\n'abc'\n,\n'23'\n,\n23\n,\n'23.5'\n,\n23.5\n,\n''\n,\n' '\n,\n'0'\n,\n0\n);\nforeach (\n$values\nas\n$value\n) {\n    echo\n\"is_string(\"\n;\n\nvar_export\n(\n$value\n);\n    echo\n\") = \"\n;\n    echo\nvar_dump\n(\nis_string\n(\n$value\n));\n}\n?>"
  },
  {
    "input": "Example #1 isset() Examples",
    "output": "<?php\n$var\n=\n''\n;\n// This will evaluate to TRUE so the text will be printed.\nif (isset(\n$var\n)) {\n    echo\n\"This var is set so I will print.\"\n;\n}\n// In the next examples we'll use var_dump to output\n// the return value of isset().\n$a\n=\n\"test\"\n;\n$b\n=\n\"anothertest\"\n;\nvar_dump\n(isset(\n$a\n));\n// TRUE\nvar_dump\n(isset(\n$a\n,\n$b\n));\n// TRUE\nunset (\n$a\n);\nvar_dump\n(isset(\n$a\n));\n// FALSE\nvar_dump\n(isset(\n$a\n,\n$b\n));\n// FALSE\n$foo\n=\nNULL\n;\nvar_dump\n(isset(\n$foo\n));\n// FALSE\n?>"
  },
  {
    "input": "Example #2 isset() on String Offsets",
    "output": "<?php\n$expected_array_got_string\n=\n'somestring'\n;\nvar_dump\n(isset(\n$expected_array_got_string\n[\n'some_key'\n]));\nvar_dump\n(isset(\n$expected_array_got_string\n[\n0\n]));\nvar_dump\n(isset(\n$expected_array_got_string\n[\n'0'\n]));\nvar_dump\n(isset(\n$expected_array_got_string\n[\n0.5\n]));\nvar_dump\n(isset(\n$expected_array_got_string\n[\n'0.5'\n]));\nvar_dump\n(isset(\n$expected_array_got_string\n[\n'0 Mostel'\n]));\n?>"
  },
  {
    "input": "Example #1 print_r() example",
    "output": "<pre>\n<?php\n$a\n= array (\n'a'\n=>\n'apple'\n,\n'b'\n=>\n'banana'\n,\n'c'\n=> array (\n'x'\n,\n'y'\n,\n'z'\n));\nprint_r\n(\n$a\n);\n?>\n</pre>"
  },
  {
    "input": "Example #2 return parameter example",
    "output": "<?php\n$b\n= array (\n'm'\n=>\n'monkey'\n,\n'foo'\n=>\n'bar'\n,\n'x'\n=> array (\n'x'\n,\n'y'\n,\n'z'\n));\n$results\n=\nprint_r\n(\n$b\n,\ntrue\n);\n// $results now contains output from print_r\n?>"
  },
  {
    "input": "Example #1 serialize() example",
    "output": "<?php\n// $session_data contains a multi-dimensional array with session\n// information for the current user.  We use serialize() to store\n// it in a database at the end of the request.\n$conn\n=\nodbc_connect\n(\n\"webdb\"\n,\n\"php\"\n,\n\"chicken\"\n);\n$stmt\n=\nodbc_prepare\n(\n$conn\n,\n\n\"UPDATE sessions SET data = ? WHERE id = ?\"\n);\n$sqldata\n= array (\nserialize\n(\n$session_data\n),\n$_SERVER\n[\n'PHP_AUTH_USER'\n]);\nif (!\nodbc_execute\n(\n$stmt\n,\n$sqldata\n)) {\n\n$stmt\n=\nodbc_prepare\n(\n$conn\n,\n\n\"INSERT INTO sessions (id, data) VALUES(?, ?)\"\n);\n    if (!\nodbc_execute\n(\n$stmt\n,\narray_reverse\n(\n$sqldata\n))) {\n\n/* Something went wrong.. */\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 settype() example",
    "output": "<?php\n$foo\n=\n\"5bar\"\n;\n// string\n$bar\n=\ntrue\n;\n// boolean\nsettype\n(\n$foo\n,\n\"integer\"\n);\n// $foo is now 5   (integer)\nsettype\n(\n$bar\n,\n\"string\"\n);\n// $bar is now \"1\" (string)\n?>"
  },
  {
    "input": "Example #1 \n     strval() example using PHP magic\n     __toString() method.",
    "output": "<?php\nclass\nStrValTest\n{\n    public function\n__toString\n()\n    {\n        return\n__CLASS__\n;\n    }\n}\n// Prints 'StrValTest'\necho\nstrval\n(new\nStrValTest\n);\n?>"
  },
  {
    "input": "Example #1 unserialize() example",
    "output": "<?php\n// Here, we use unserialize() to load session data to the\n// $session_data array from the string selected from a database.\n// This example complements the one described with serialize().\n$conn\n=\nodbc_connect\n(\n\"webdb\"\n,\n\"php\"\n,\n\"chicken\"\n);\n$stmt\n=\nodbc_prepare\n(\n$conn\n,\n\"SELECT data FROM sessions WHERE id = ?\"\n);\n$sqldata\n= array(\n$_SERVER\n[\n'PHP_AUTH_USER'\n]);\nif (!\nodbc_execute\n(\n$stmt\n,\n$sqldata\n) || !\nodbc_fetch_into\n(\n$stmt\n,\n$tmp\n)) {\n\n// if the execute or fetch fails, initialize to empty array\n\n$session_data\n= array();\n} else {\n\n// we should now have the serialized data in $tmp[0].\n\n$session_data\n=\nunserialize\n(\n$tmp\n[\n0\n]);\n    if (!\nis_array\n(\n$session_data\n)) {\n\n// something went wrong, initialize to empty array\n\n$session_data\n= array();\n    }\n}\n?>"
  },
  {
    "input": "Example #2 unserialize_callback_func example",
    "output": "<?php\n$serialized_object\n=\n'O:1:\"a\":1:{s:5:\"value\";s:3:\"100\";}'\n;\nini_set\n(\n'unserialize_callback_func'\n,\n'mycallback'\n);\n// set your callback_function\nfunction\nmycallback\n(\n$classname\n)\n{\n\n// just include a file containing your class definition\n    // you get $classname to figure out which class definition is required\n}\n?>"
  },
  {
    "input": "Example #1 unset() example",
    "output": "<?php\n// destroy a single variable\nunset(\n$foo\n);\n// destroy a single element of an array\nunset(\n$bar\n[\n'quux'\n]);\n// destroy more than one variable\nunset(\n$foo1\n,\n$foo2\n,\n$foo3\n);\n?>"
  },
  {
    "input": "Example #1 var_dump() example",
    "output": "<?php\n$a\n= array(\n1\n,\n2\n, array(\n\"a\"\n,\n\"b\"\n,\n\"c\"\n));\nvar_dump\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #1 var_export() Examples",
    "output": "<?php\n$a\n= array (\n1\n,\n2\n, array (\n\"a\"\n,\n\"b\"\n,\n\"c\"\n));\nvar_export\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #2 Exporting stdClass (since PHP 7.3.0)",
    "output": "<?php\n$person\n= new\nstdClass\n;\n$person\n->\nname\n=\n'ElePHPant ElePHPantsdotter'\n;\n$person\n->\nwebsite\n=\n'https://php.net/elephpant.php'\n;\nvar_export\n(\n$person\n);"
  },
  {
    "input": "Example #3 Exporting classes",
    "output": "<?php\nclass\nA\n{ public\n$var\n; }\n$a\n= new\nA\n;\n$a\n->\nvar\n=\n5\n;\nvar_export\n(\n$a\n);\n?>"
  },
  {
    "input": "Example #4 Using __set_state()",
    "output": "<?php\nclass\nA\n{\n    public\n$var1\n;\n    public\n$var2\n;\n    public static function\n__set_state\n(\n$an_array\n)\n    {\n\n$obj\n= new\nA\n;\n\n$obj\n->\nvar1\n=\n$an_array\n[\n'var1'\n];\n\n$obj\n->\nvar2\n=\n$an_array\n[\n'var2'\n];\n        return\n$obj\n;\n    }\n}\n$a\n= new\nA\n;\n$a\n->\nvar1\n=\n5\n;\n$a\n->\nvar2\n=\n'foo'\n;\neval(\n'$b = '\n.\nvar_export\n(\n$a\n,\ntrue\n) .\n';'\n);\n// $b = A::__set_state(array(\n                                            //    'var1' => 5,\n                                            //    'var2' => 'foo',\n                                            // ));\nvar_dump\n(\n$b\n);\n?>"
  },
  {
    "input": "Example #1 OAuth::fetch() example",
    "output": "<?php\ntry {\n\n$oauth\n= new\nOAuth\n(\n\"consumer_key\"\n,\n\"consumer_secret\"\n,\nOAUTH_SIG_METHOD_HMACSHA1\n,\nOAUTH_AUTH_TYPE_AUTHORIZATION\n);\n\n$oauth\n->\nsetToken\n(\n\"access_token\"\n,\n\"access_token_secret\"\n);\n\n$oauth\n->\nfetch\n(\n\"http://photos.example.net/photo?file=vacation.jpg\"\n);\n\n$response_info\n=\n$oauth\n->\ngetLastResponseInfo\n();\n\nheader\n(\n\"Content-Type:\n{\n$response_info\n[\n\"content_type\"\n]}\n\"\n);\n    echo\n$oauth\n->\ngetLastResponse\n();\n} catch(\nOAuthException $E\n) {\n    echo\n\"Exception caught!\\n\"\n;\n    echo\n\"Response: \"\n.\n$E\n->\nlastResponse\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 OAuth::getAccessToken() example",
    "output": "<?php\ntry {\n\n$oauth\n= new\nOAuth\n(\nOAUTH_CONSUMER_KEY\n,\nOAUTH_CONSUMER_SECRET\n);\n\n$oauth\n->\nsetToken\n(\n$request_token\n,\n$request_token_secret\n);\n\n$access_token_info\n=\n$oauth\n->\ngetAccessToken\n(\n\"https://example.com/oauth/access_token\"\n);\n    if(!empty(\n$access_token_info\n)) {\n\nprint_r\n(\n$access_token_info\n);\n    } else {\n        print\n\"Failed fetching access token, response was: \"\n.\n$oauth\n->\ngetLastResponse\n();\n    }\n} catch(\nOAuthException $E\n) {\n    echo\n\"Response: \"\n.\n$E\n->\nlastResponse\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 OAuth::getRequestToken() example",
    "output": "<?php\ntry {\n\n$oauth\n= new\nOAuth\n(\nOAUTH_CONSUMER_KEY\n,\nOAUTH_CONSUMER_SECRET\n);\n\n$request_token_info\n=\n$oauth\n->\ngetRequestToken\n(\n\"https://example.com/oauth/request_token\"\n);\n    if(!empty(\n$request_token_info\n)) {\n\nprint_r\n(\n$request_token_info\n);\n    } else {\n        print\n\"Failed fetching request token, response was: \"\n.\n$oauth\n->\ngetLastResponse\n();\n    }\n} catch(\nOAuthException $E\n) {\n    echo\n\"Response: \"\n.\n$E\n->\nlastResponse\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 OAuth::setRequestEngine() example",
    "output": "<?php\n$consumer\n= new\nOAuth\n();\n$consumer\n->\nsetRequestEngine\n(\nOAUTH_REQENGINE_STREAMS\n);\n?>"
  },
  {
    "input": "Example #1 An OAuth::setRsaCertificate() example",
    "output": "<?php\n$consume\n= new\nOAuth\n(\n'1234'\n,\n''\n,\nOAUTH_SIG_METHOD_RSASHA1\n);\n$consume\n->\nsetRSACertificate\n(\nfile_get_contents\n(\n'test.pem'\n));\n?>"
  },
  {
    "input": "Example #1 OAuth::setToken() example",
    "output": "<?php\n$oauth\n= new\nOAuth\n(\nOAUTH_CONSUMER_KEY\n,\nOAUTH_CONSUMER_SECRET\n);\n$oauth\n->\nsetToken\n(\n\"token\"\n,\n\"token-secret\"\n);\n?>"
  },
  {
    "input": "Example #1 OAuthProvider::__construct() example",
    "output": "<?php\ntry {\n\n$op\n= new\nOAuthProvider\n();\n\n// Uses user-defined callback functions\n\n$op\n->\nconsumerHandler\n(array(\n$this\n,\n'lookupConsumer'\n));\n\n$op\n->\ntimestampNonceHandler\n(array(\n$this\n,\n'timestampNonceChecker'\n));\n\n$op\n->\ntokenHandler\n(array(\n$this\n,\n'myTokenHandler'\n));\n\n// Ignore the foo_uri parameter\n\n$op\n->\nsetParam\n(\n'foo_uri'\n,\nNULL\n);\n\n// No token needed for this end point\n\n$op\n->\nsetRequestTokenPath\n(\n'/v1/oauth/request_token'\n);\n\n$op\n->\ncheckOAuthRequest\n();\n} catch (\nOAuthException $e\n) {\n    echo\nOAuthProvider\n::\nreportProblem\n(\n$e\n);\n}\n?>"
  },
  {
    "input": "Example #1 Example OAuthProvider::consumerHandler() callback",
    "output": "<?php\nfunction\nlookupConsumer\n(\n$provider\n) {\n    if (\n$provider\n->\nconsumer_key\n===\n'unknown'\n) {\n        return\nOAUTH_CONSUMER_KEY_UNKNOWN\n;\n    } else if(\n$provider\n->\nconsumer_key\n==\n'blacklisted'\n||\n$provider\n->\nconsumer_key\n===\n'throttled'\n) {\n        return\nOAUTH_CONSUMER_KEY_REFUSED\n;\n    }\n\n$provider\n->\nconsumer_secret\n=\n\"the_consumers_secret\"\n;\n    return\nOAUTH_OK\n;\n}\n?>"
  },
  {
    "input": "Example #1 OAuthProvider::generateToken() example",
    "output": "<?php\n$p\n= new\nOAuthProvider\n();\n$t\n=\n$p\n->\ngenerateToken\n(\n4\n);\necho\nstrlen\n(\n$t\n),\nPHP_EOL\n;\necho\nbin2hex\n(\n$t\n),\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 OAuthProvider::is2LeggedEndpoint() example",
    "output": "<?php\n$provider\n= new\nOAuthProvider\n();\n$provider\n->\nis2LeggedEndpoint\n(\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Example OAuthProvider::timestampNonceHandler() callback",
    "output": "<?php\nfunction\ntimestampNonceChecker\n(\n$provider\n) {\n    if (\n$provider\n->\nnonce\n===\n'bad'\n) {\n        return\nOAUTH_BAD_NONCE\n;\n    } elseif (\n$provider\n->\ntimestamp\n==\n'0'\n) {\n        return\nOAUTH_BAD_TIMESTAMP\n;\n    }\n\n    return\nOAUTH_OK\n;\n}\n?>"
  },
  {
    "input": "Example #1 Example OAuthProvider::tokenHandler() callback",
    "output": "<?php\nfunction\ntokenHandler\n(\n$provider\n) {\n\n    if (\n$provider\n->\ntoken\n===\n'rejected'\n) {\n        return\nOAUTH_TOKEN_REJECTED\n;\n    } elseif (\n$provider\n->\ntoken\n===\n'revoked'\n) {\n        return\nOAUTH_TOKEN_REVOKED\n;\n    }\n\n$provider\n->\ntoken_secret\n=\n\"the_tokens_secret\"\n;\n    return\nOAUTH_OK\n;\n}\n?>"
  },
  {
    "input": "Example #1 is_soap_fault() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'exceptions'\n=>\n0\n));\n$result\n=\n$client\n->\nSomeFunction\n();\nif (\nis_soap_fault\n(\n$result\n)) {\n\ntrigger_error\n(\n\"SOAP Fault: (faultcode:\n{\n$result\n->\nfaultcode\n}\n, faultstring:\n{\n$result\n->\nfaultstring\n}\n)\"\n,\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #2 SOAP's standard method for error reporting is exceptions",
    "output": "<?php\ntry {\n\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n);\n\n$result\n=\n$client\n->\nSomeFunction\n(\n/* ... */\n);\n} catch (\nSoapFault $fault\n) {\n\ntrigger_error\n(\n\"SOAP Fault: (faultcode:\n{\n$fault\n->\nfaultcode\n}\n, faultstring:\n{\n$fault\n->\nfaultstring\n}\n)\"\n,\nE_USER_ERROR\n);\n}\n?>"
  },
  {
    "input": "Example #1 Specifying use of TLS 1.3 only",
    "output": "<?php\n$context\n=\nstream_context_create\n([\n\n'ssl'\n=> [\n\n'crypto_method'\n=>\nSTREAM_CRYPTO_METHOD_TLSv1_3_CLIENT\n\n]\n]);\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, [\n'context'\n=>\n$context\n]);"
  },
  {
    "input": "Example #2 \n     SoapClient::__construct() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n);\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'soap_version'\n=>\nSOAP_1_2\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'login'\n=>\n\"some_name\"\n,\n\n'password'\n=>\n\"some_password\"\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'proxy_host'\n=>\n\"localhost\"\n,\n\n'proxy_port'\n=>\n8080\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'proxy_host'\n=>\n\"localhost\"\n,\n\n'proxy_port'\n=>\n8080\n,\n\n'proxy_login'\n=>\n\"some_name\"\n,\n\n'proxy_password'\n=>\n\"some_password\"\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'local_cert'\n=>\n\"cert_key.pem\"\n));\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n,\n\n'style'\n=>\nSOAP_DOCUMENT\n,\n\n'use'\n=>\nSOAP_LITERAL\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n,\n  array(\n'compression'\n=>\nSOAP_COMPRESSION_ACCEPT\n|\nSOAP_COMPRESSION_GZIP\n|\n9\n));\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'encoding'\n=>\n'ISO-8859-1'\n));\nclass\nMyBook\n{\n    public\n$title\n;\n    public\n$author\n;\n}\n$client\n= new\nSoapClient\n(\n\"books.wsdl\"\n, array(\n'classmap'\n=> array(\n'book'\n=>\n\"MyBook\"\n)));\n$typemap\n= array(\n    array(\n\"type_ns\"\n=>\n\"http://schemas.example.com\"\n,\n\n\"type_name\"\n=>\n\"book\"\n,\n\n\"from_xml\"\n=>\n\"unserialize_book\"\n,\n\n\"to_xml\"\n=>\n\"serialize_book\"\n)\n);\n$client\n= new\nSoapClient\n(\n\"books.wsdl\"\n, array(\n'typemap'\n=>\n$typemap\n));\n?>"
  },
  {
    "input": "Example #3 Using the SOAP_SINGLE_ELEMENT_ARRAYS feature",
    "output": "/* Assuming a response like this, and an appropriate WSDL:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns=\"urn:example\">\n    <SOAP-ENV:Body>\n        <response>\n            <collection>\n                <item>Single</item>\n            </collection>\n            <collection>\n                <item>First</item>\n                <item>Second</item>\n            </collection>\n        </response>\n    </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n*/\necho \"Default:\\n\";\n$client = new TestSoapClient(__DIR__ . '/temp.wsdl');\n$response = $client->exampleRequest();\nvar_dump( $response->collection[0]->item );\nvar_dump( $response->collection[1]->item );\necho \"\\nWith SOAP_SINGLE_ELEMENT_ARRAYS:\\n\";\n$client = new TestSoapClient(__DIR__ . '/temp.wsdl', ['features' => SOAP_SINGLE_ELEMENT_ARRAYS]);\n$response = $client->exampleRequest();\nvar_dump( $response->collection[0]->item );\nvar_dump( $response->collection[1]->item );"
  },
  {
    "input": "Example #1 SoapClient::__doRequest() example",
    "output": "<?php\nfunction\nAdd\n(\n$x\n,\n$y\n)\n{\n    return\n$x\n+\n$y\n;\n}\nclass\nLocalSoapClient\nextends\nSoapClient\n{\n    private\n$server\n;\n    public function\n__construct\n(\n$wsdl\n,\n$options\n)\n    {\n\nparent\n::\n__construct\n(\n$wsdl\n,\n$options\n);\n\n$this\n->\nserver\n= new\nSoapServer\n(\n$wsdl\n,\n$options\n);\n\n$this\n->\nserver\n->\naddFunction\n(\n'Add'\n);\n    }\n    public function\n__doRequest\n(\n\n$request\n,\n\n$location\n,\n\n$action\n,\n\n$version\n,\n\n$one_way\n=\nfalse\n,\n    ): ?\nstring\n{\n\nob_start\n();\n\n$this\n->\nserver\n->\nhandle\n(\n$request\n);\n\n$response\n=\nob_get_contents\n();\n\nob_end_clean\n();\n        return\n$response\n;\n    }\n}\n$x\n= new\nLocalSoapClient\n(\n\nnull\n,\n    [\n\n'location'\n=>\n'test://'\n,\n\n'uri'\n=>\n'http://testuri.org'\n,\n    ]\n);\nvar_dump\n(\n$x\n->\nAdd\n(\n3\n,\n4\n));\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getFunctions() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n'http://soap.amazon.com/schemas3/AmazonWebServices.wsdl'\n);\nvar_dump\n(\n$client\n->\n__getFunctions\n());\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getLastRequest() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'trace'\n=>\n1\n));\n$result\n=\n$client\n->\nSomeFunction\n();\necho\n\"REQUEST:\\n\"\n.\n$client\n->\n__getLastRequest\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getLastRequestHeaders() example",
    "output": "<?php\n$client\n=\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'trace'\n=>\n1\n));\n$result\n=\n$client\n->\nSomeFunction\n();\necho\n\"REQUEST HEADERS:\\n\"\n.\n$client\n->\n__getLastRequestHeaders\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getLastResponse() example",
    "output": "<?php\n$client\n=\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'trace'\n=>\n1\n));\n$result\n=\n$client\n->\nSomeFunction\n();\necho\n\"Response:\\n\"\n.\n$client\n->\n__getLastResponse\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getLastResponse() example",
    "output": "<?php\n$client\n=\nSoapClient\n(\n\"some.wsdl\"\n, array(\n'trace'\n=>\n1\n));\n$result\n=\n$client\n->\nSomeFunction\n();\necho\n\"RESPONSE HEADERS:\\n\"\n.\n$client\n->\n__getLastResponseHeaders\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SoapClient::__getTypes() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n'http://soap.amazon.com/schemas3/AmazonWebServices.wsdl'\n);\nvar_dump\n(\n$client\n->\n__getTypes\n());\n?>"
  },
  {
    "input": "Example #1 SoapClient::__setLocation() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n'http://example.com/webservice.php?wsdl'\n);\n$client\n->\n__setLocation\n(\n'http://www.somethirdparty.com'\n);\n$old_location\n=\n$client\n->\n__setLocation\n();\n// unsets the location option\necho\n$old_location\n;\n?>"
  },
  {
    "input": "Example #1 SoapClient::__setSoapHeaders() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$header\n= new\nSoapHeader\n(\n'http://soapinterop.org/echoheader/'\n,\n\n'echoMeStringRequest'\n,\n\n'hello world'\n);\n$client\n->\n__setSoapHeaders\n(\n$header\n);\n$client\n->\n__soapCall\n(\n\"echoVoid\"\n,\nnull\n);\n?>"
  },
  {
    "input": "Example #2 Set Multiple Headers",
    "output": "<?php\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$headers\n= array();\n$headers\n[] = new\nSoapHeader\n(\n'http://soapinterop.org/echoheader/'\n,\n\n'echoMeStringRequest'\n,\n\n'hello world'\n);\n$headers\n[] = new\nSoapHeader\n(\n'http://soapinterop.org/echoheader/'\n,\n\n'echoMeStringRequest'\n,\n\n'hello world again'\n);\n$client\n->\n__setSoapHeaders\n(\n$headers\n);\n$client\n->\n__soapCall\n(\n\"echoVoid\"\n,\nnull\n);\n?>"
  },
  {
    "input": "Example #1 SoapClient::__soapCall() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\n\"some.wsdl\"\n);\n$client\n->\nSomeFunction\n(\n$a\n,\n$b\n,\n$c\n);\n$client\n->\n__soapCall\n(\n\"SomeFunction\"\n, array(\n$a\n,\n$b\n,\n$c\n));\n$client\n->\n__soapCall\n(\n\"SomeFunction\"\n, array(\n$a\n,\n$b\n,\n$c\n),\nNULL\n,\n                    new\nSoapHeader\n(),\n$output_headers\n);\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$client\n->\nSomeFunction\n(\n$a\n,\n$b\n,\n$c\n);\n$client\n->\n__soapCall\n(\n\"SomeFunction\"\n, array(\n$a\n,\n$b\n,\n$c\n));\n$client\n->\n__soapCall\n(\n\"SomeFunction\"\n, array(\n$a\n,\n$b\n,\n$c\n),\n                    array(\n'soapaction'\n=>\n'some_action'\n,\n\n'uri'\n=>\n'some_uri'\n));\n?>"
  },
  {
    "input": "Example #1 SoapServer::addFunction() example",
    "output": "<?php\nfunction\nechoString\n(\n$inputString\n)\n{\n    return\n$inputString\n;\n}\n$server\n->\naddFunction\n(\n\"echoString\"\n);\nfunction\nechoTwoStrings\n(\n$inputString1\n,\n$inputString2\n)\n{\n    return array(\n\"outputString1\"\n=>\n$inputString1\n,\n\n\"outputString2\"\n=>\n$inputString2\n);\n}\n$server\n->\naddFunction\n(array(\n\"echoString\"\n,\n\"echoTwoStrings\"\n));\n$server\n->\naddFunction\n(\nSOAP_FUNCTIONS_ALL\n);\n?>"
  },
  {
    "input": "Example #1 SoapServer::__construct() example",
    "output": "<?php\n$server\n= new\nSoapServer\n(\n\"some.wsdl\"\n);\n$server\n= new\nSoapServer\n(\n\"some.wsdl\"\n, array(\n'soap_version'\n=>\nSOAP_1_2\n));\n$server\n= new\nSoapServer\n(\n\"some.wsdl\"\n, array(\n'actor'\n=>\n\"http://example.org/ts-tests/C\"\n));\n$server\n= new\nSoapServer\n(\n\"some.wsdl\"\n, array(\n'encoding'\n=>\n'ISO-8859-1'\n));\n$server\n= new\nSoapServer\n(\nnull\n, array(\n'uri'\n=>\n\"http://test-uri/\"\n));\nclass\nMyBook\n{\n    public\n$title\n;\n    public\n$author\n;\n}\n$server\n= new\nSoapServer\n(\n\"books.wsdl\"\n, array(\n'classmap'\n=> array(\n'book'\n=>\n\"MyBook\"\n)));\n?>"
  },
  {
    "input": "Example #1 SoapServer::getFunctions() example",
    "output": "<?php\n$server\n= new\nSoapServer\n(\nNULL\n, array(\n\"uri\"\n=>\n\"http://test-uri\"\n));\n$server\n->\naddFunction\n(\nSOAP_FUNCTIONS_ALL\n);\nif (\n$_SERVER\n[\n\"REQUEST_METHOD\"\n] ==\n\"POST\"\n) {\n\n$server\n->\nhandle\n();\n} else {\n  echo\n\"This SOAP server can handle following functions: \"\n;\n\n$functions\n=\n$server\n->\ngetFunctions\n();\n  foreach(\n$functions\nas\n$func\n) {\n    echo\n$func\n.\n\"\\n\"\n;\n  }\n}\n?>"
  },
  {
    "input": "Example #1 SoapServer::__getLastResponse() example",
    "output": "<?php\n$server\n=\nSoapServer\n(\n\"some.wsdl\"\n, [\n\"trace\"\n=>\n1\n]);\n$server\n->\nhandle\n();\necho\n\"Response:\\n\"\n.\n$server\n->\n__getLastResponse\n() .\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 SoapServer::handle() example",
    "output": "<?php\nfunction\ntest\n(\n$x\n)\n{\n    return\n$x\n;\n}\n$server\n= new\nSoapServer\n(\nnull\n, array(\n'uri'\n=>\n\"http://test-uri/\"\n));\n$server\n->\naddFunction\n(\n\"test\"\n);\n$server\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #1 SoapServer::setPersistence() example",
    "output": "<?php\n\nclass\nMyFirstPersistentSoapServer\n{\n     private\n$resource\n;\n// (Such as PDO, mysqli, etc..)\n\npublic\n$myvar1\n;\n     public\n$myvar2\n;\n     public function\n__construct\n() {\n\n$this\n->\n__wakeup\n();\n// We're calling our wakeup to handle starting our resource\n\n}\n     public function\n__wakeup\n() {\n\n$this\n->\nresource\n=\nCodeToStartOurResourceUp\n();\n     }\n     public function\n__sleep\n() {\n\n// We make sure to leave out $resource here, so our session data remains persistent\n         // Failure to do so will result in the failure during the unserialization of data\n         // on the next request; thus, our SoapObject would not be persistent across requests.\n\nreturn array(\n'myvar1'\n,\n'myvar2'\n);\n     }\n }\n try {\n\nsession_start\n();\n\n$server\n= new\nSoapServer\n(\nnull\n, array(\n'uri'\n=>\n$_SERVER\n[\n'REQUEST_URI'\n]));\n\n$server\n->\nsetClass\n(\n'MyFirstPersistentSoapServer'\n);\n\n// setPersistence MUST be called after setClass, because setClass's\n     // behavior sets SESSION_PERSISTENCE_REQUEST upon enacting the method.\n\n$server\n->\nsetPersistence\n(\nSOAP_PERSISTENCE_SESSION\n);\n\n$server\n->\nhandle\n();\n } catch(\nSoapFault $e\n) {\n\nerror_log\n(\n\"SOAP ERROR: \"\n.\n$e\n->\ngetMessage\n());\n }\n?>"
  },
  {
    "input": "Example #1 Some examples",
    "output": "<?php\nfunction\ntest\n(\n$x\n)\n{\n    return new\nSoapFault\n(\n\"Server\"\n,\n\"Some error message\"\n);\n}\n$server\n= new\nSoapServer\n(\nnull\n, array(\n'uri'\n=>\n\"http://test-uri/\"\n));\n$server\n->\naddFunction\n(\n\"test\"\n);\n$server\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #2 Some examples",
    "output": "<?php\nfunction\ntest\n(\n$x\n)\n{\n    throw new\nSoapFault\n(\n\"Server\"\n,\n\"Some error message\"\n);\n}\n$server\n= new\nSoapServer\n(\nnull\n, array(\n'uri'\n=>\n\"http://test-uri/\"\n));\n$server\n->\naddFunction\n(\n\"test\"\n);\n$server\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #1 SoapHeader::__construct() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$client\n->\n__soapCall\n(\n\"echoVoid\"\n,\nnull\n,\nnull\n,\n                new\nSoapHeader\n(\n'http://soapinterop.org/echoheader/'\n,\n\n'echoMeStringRequest'\n,\n\n'hello world'\n));\n?>"
  },
  {
    "input": "Example #1 SoapParam::__construct() example",
    "output": "<?php\n$client\n= new\nSoapClient\n(\nnull\n,array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$client\n->\nSomeFunction\n(new\nSoapParam\n(\n$a\n,\n\"a\"\n),\n                      new\nSoapParam\n(\n$b\n,\n\"b\"\n),\n                      new\nSoapParam\n(\n$c\n,\n\"c\"\n));\n?>"
  },
  {
    "input": "Example #1 SoapVar::__construct() example",
    "output": "<?php\nclass\nSOAPStruct\n{\n    function\nSOAPStruct\n(\n$s\n,\n$i\n,\n$f\n)\n    {\n\n$this\n->\nvarString\n=\n$s\n;\n\n$this\n->\nvarInt\n=\n$i\n;\n\n$this\n->\nvarFloat\n=\n$f\n;\n    }\n}\n$client\n= new\nSoapClient\n(\nnull\n, array(\n'location'\n=>\n\"http://localhost/soap.php\"\n,\n\n'uri'\n=>\n\"http://test-uri/\"\n));\n$struct\n= new\nSOAPStruct\n(\n'arg'\n,\n34\n,\n325.325\n);\n$soapstruct\n= new\nSoapVar\n(\n$struct\n,\nSOAP_ENC_OBJECT\n,\n\"SOAPStruct\"\n,\n\"http://soapinterop.org/xsd\"\n);\n$client\n->\nechoStruct\n(new\nSoapParam\n(\n$soapstruct\n,\n\"inputStruct\"\n));\n?>"
  },
  {
    "input": "Example #1 Yar Server Example",
    "output": "<?php\n/* assume this page can be accessed by http://example.com/operator.php */\nclass\nOperator\n{\n\n/**\n     * Add two operands\n     * @param interge\n     * @return interge\n     */\n\npublic function\nadd\n(\n$a\n,\n$b\n) {\n        return\n$this\n->\n_add\n(\n$a\n,\n$b\n);\n    }\n\n/**\n     * Sub\n     */\n\npublic function\nsub\n(\n$a\n,\n$b\n) {\n        return\n$a\n-\n$b\n;\n    }\n\n/**\n     * Mul\n     */\n\npublic function\nmul\n(\n$a\n,\n$b\n) {\n        return\n$a\n*\n$b\n;\n    }\n\n/**\n     * Protected methods will not be exposed\n     * @param interge\n     * @return interge\n     */\n\nprotected function\n_add\n(\n$a\n,\n$b\n) {\n        return\n$a\n+\n$b\n;\n    }\n}\n$server\n= new\nYar_Server\n(new\nOperator\n());\n$server\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #3 Yar Client Example",
    "output": "<?php\n$client\n= new\nyar_client\n(\n\"http://example.com/operator.php\"\n);\n/* call directly */\nvar_dump\n(\n$client\n->\nadd\n(\n1\n,\n2\n));\n/* call via call */\nvar_dump\n(\n$client\n->\ncall\n(\n\"add\"\n, array(\n3\n,\n2\n)));\n/* __add can not be called */\nvar_dump\n(\n$client\n->\n_add\n(\n1\n,\n2\n));\n?>"
  },
  {
    "input": "Example #4 Yar Concurrent Client Example",
    "output": "<?php\nfunction\ncallback\n(\n$ret\n,\n$callinfo\n) {\n    echo\n$callinfo\n[\n'method'\n] ,\n\" result: \"\n,\n$ret\n,\n\"\\n\"\n;\n}\n/* register async call to remote services */\nYar_Concurrent_Client\n::\ncall\n(\n\"http://example.com/operator.php\"\n,\n\"add\"\n, array(\n1\n,\n2\n),\n\"callback\"\n);\nYar_Concurrent_Client\n::\ncall\n(\n\"http://example.com/operator.php\"\n,\n\"sub\"\n, array(\n2\n,\n1\n),\n\"callback\"\n);\nYar_Concurrent_Client\n::\ncall\n(\n\"http://example.com/operator.php\"\n,\n\"mul\"\n, array(\n2\n,\n2\n),\n\"callback\"\n);\n/* sent all request and wait for response */\nYar_Concurrent_Client\n::\nloop\n();\n?>"
  },
  {
    "input": "Example #1 Yar_Server::__construct() example",
    "output": "<?php\nclass\nAPI\n{\n\n/**\n     * the doc info will be generated automatically into service info page.\n     * @params\n     * @return\n     */\n\npublic function\nsome_method\n(\n$parameter\n,\n$option\n=\n\"foo\"\n) {\n         return\n\"some_method\"\n;\n    }\n    protected function\nclient_can_not_see\n() {\n    }\n}\n$service\n= new\nYar_Server\n(new\nAPI\n());\n$service\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #1 Yar_Server::handle() example",
    "output": "<?php\nclass\nAPI\n{\n\n/**\n     * the doc info will be generated automatically into service info page.\n     * @params\n     * @return\n     */\n\npublic function\nsome_method\n(\n$parameter\n,\n$option\n=\n\"foo\"\n) {\n    }\n    protected function\nclient_can_not_see\n() {\n    }\n}\n$service\n= new\nYar_Server\n(new\nAPI\n());\n$service\n->\nhandle\n();\n?>"
  },
  {
    "input": "Example #1 Yar_Client::__call() example",
    "output": "<?php\n$client\n= new\nYar_Client\n(\n\"http://host/api/\"\n);\n/* call remote service */\n$result\n=\n$client\n->\nsome_method\n(\n\"parameter\"\n);\n?>"
  },
  {
    "input": "Example #1 Yar_Client::__construct() example",
    "output": "<?php\n$client\n= new\nYar_Client\n(\n\"http://host/api/\"\n);\n?>"
  },
  {
    "input": "Example #1 Yar_Client::setOpt() example",
    "output": "<?php\n$cient\n= new\nYar_Client\n(\n\"http://host/api/\"\n);\n//Set timeout to 1s\n$client\n->\nSetOpt\n(\nYAR_OPT_CONNECT_TIMEOUT\n,\n1000\n);\n//Set packager to JSON\n$client\n->\nSetOpt\n(\nYAR_OPT_PACKAGER\n,\n\"json\"\n);\n//Set Custom headers\n$client\n->\nSetOpt\n(\nYAR_OPT_HEADER\n, array(\n\"hr1: val1\"\n,\n\"hd2: val2\"\n));\n// Set Http Proxy\n$client\n->\nSetOpt\n(\nYAR_OPT_PROXY\n,\n\"127.0.0.1:8888\"\n);\n/* call remote service */\n$result\n=\n$client\n->\nsome_method\n(\n\"parameter\"\n);\n?>"
  },
  {
    "input": "Example #1 Yar_Concurrent_Client::call() example",
    "output": "<?php\nfunction\ncallback\n(\n$retval\n,\n$callinfo\n) {\n\nvar_dump\n(\n$retval\n);\n}\nfunction\nerror_callback\n(\n$type\n,\n$error\n,\n$callinfo\n) {\n\nerror_log\n(\n$error\n);\n}\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n);\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n));\n// if the callback is not specificed,\n                                                                               // callback in loop will be used\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n,\nNULL\n, array(\nYAR_OPT_PACKAGER\n=>\n\"json\"\n));\n\n//this server accept json packager\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n,\nNULL\n, array(\nYAR_OPT_TIMEOUT\n=>\n1\n));\n\n//custom timeout\n//The requests are not sent yet\n?>"
  },
  {
    "input": "Example #1 Yar_Concurrent_Client::loop() example",
    "output": "<?php\nfunction\ncallback\n(\n$retval\n,\n$callinfo\n) {\n     if (\n$callinfo\n==\nNULL\n) {\n        echo\n\"Now, all requests are sent, and no any response available\\n\"\n;\n     } else {\n        echo\n\"This is a remote call response, the method name is\"\n,\n$callinfo\n[\n\"method\"\n],\n\n\". calling sequence is \"\n,\n$callinfo\n[\n\"sequence\"\n] ,\n\"\\n\"\n;\n\nvar_dump\n(\n$retval\n);\n     }\n}\nfunction\nerror_callback\n(\n$type\n,\n$error\n,\n$callinfo\n) {\n\nerror_log\n(\n$error\n);\n}\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n);\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n));\n// if the callback is not specificed,\n                                                                               // callback in loop will be used\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n,\nNULL\n, array(\nYAR_OPT_PACKAGER\n=>\n\"json\"\n));\n\n//this server accept json packager\nYar_Concurrent_Client\n::\ncall\n(\n\"http://host/api/\"\n,\n\"some_method\"\n, array(\n\"parameters\"\n),\n\"callback\"\n,\nNULL\n, array(\nYAR_OPT_TIMEOUT\n=>\n1\n));\n\n//custom timeout\nYar_Concurrent_Client\n::\nloop\n(\n\"callback\"\n,\n\"error_callback\"\n);\n//send the requests,\n                                                           //the error_callback is optional\n?>"
  },
  {
    "input": "Example #1 Yar_Server_Exception::getType() example",
    "output": "//Server.php\n<?php\nclass\nCustom_Exception\nextends\nException\n{};\nclass\nAPI\n{\n    public function\nthrow_exception\n(\n$name\n) {\n        throw new\nCustom_Exception\n(\n$name\n);\n    }\n}\n$service\n= new\nYar_Server\n(new\nAPI\n());\n$service\n->\nhandle\n();\n?>\n//Client.php\n<?php\n$client\n= new\nYar_Client\n(\n\"http://host/api.php\"\n);\ntry {\n\n$client\n->\nthrow_exception\n(\n\"client\"\n);\n} catch (\nYar_Server_Exception $e\n) {\n\nvar_dump\n(\n$e\n->\ngetType\n());\n\nvar_dump\n(\n$e\n->\ngetMessage\n());\n}"
  },
  {
    "input": "Example #1 Yar_Client_Exception::getType() example",
    "output": "<?php\n/* ... */\n?>"
  },
  {
    "input": "Example #1 XMLRPC client functions example",
    "output": "<?php\n$request\n=\nxmlrpc_encode_request\n(\n\"method\"\n, array(\n1\n,\n2\n,\n3\n));\n$context\n=\nstream_context_create\n(array(\n'http'\n=> array(\n\n'method'\n=>\n\"POST\"\n,\n\n'header'\n=>\n\"Content-Type: text/xml\"\n,\n\n'content'\n=>\n$request\n)));\n$file\n=\nfile_get_contents\n(\n\"http://www.example.com/xmlrpc\"\n,\nfalse\n,\n$context\n);\n$response\n=\nxmlrpc_decode\n(\n$file\n);\nif (\n$response\n&&\nxmlrpc_is_fault\n(\n$response\n)) {\n\ntrigger_error\n(\n\"xmlrpc:\n$response\n[\nfaultString\n]\n (\n$response\n[\nfaultCode\n]\n)\"\n);\n} else {\n\nprint_r\n(\n$response\n);\n}\n?>"
  },
  {
    "input": "Example #1 XML-RPC type example",
    "output": "<?php\necho\nxmlrpc_get_type\n(\nnull\n) .\n\"\\n\"\n;\n// base64\necho\nxmlrpc_get_type\n(\nfalse\n) .\n\"\\n\"\n;\n// boolean\necho\nxmlrpc_get_type\n(\n1\n) .\n\"\\n\"\n;\n// int\necho\nxmlrpc_get_type\n(\n1.0\n) .\n\"\\n\"\n;\n// double\necho\nxmlrpc_get_type\n(\n\"\"\n) .\n\"\\n\"\n;\n// string\necho\nxmlrpc_get_type\n(array()) .\n\"\\n\"\n;\n// array\necho\nxmlrpc_get_type\n(new\nstdClass\n) .\n\"\\n\"\n;\n// array\necho\nxmlrpc_get_type\n(\nSTDIN\n) .\n\"\\n\"\n;\n// int\n?>"
  },
  {
    "input": "Example #2 foreach in PHP",
    "output": "<?php\n$domainObject\n= new\nCOM\n(\n\"WinNT://Domain\"\n);\nforeach (\n$domainObject\nas\n$obj\n) {\n   echo\n$obj\n->\nName\n.\n\"<br />\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 com example (1)",
    "output": "<?php\n// starting word\n$word\n= new\ncom\n(\n\"word.application\"\n) or die(\n\"Unable to instantiate Word\"\n);\necho\n\"Loaded Word, version\n{\n$word\n->\nVersion\n}\n\\n\"\n;\n//bring it to front\n$word\n->\nVisible\n=\n1\n;\n//open an empty document\n$word\n->\nDocuments\n->\nAdd\n();\n//do some weird stuff\n$word\n->\nSelection\n->\nTypeText\n(\n\"This is a test...\"\n);\n$word\n->\nDocuments\n[\n1\n]->\nSaveAs\n(\n\"Useless test.doc\"\n);\n//closing word\n$word\n->\nQuit\n();\n//free the object\n$word\n=\nnull\n;\n?>"
  },
  {
    "input": "Example #2 com example (2)",
    "output": "<?php\n$conn\n= new\ncom\n(\n\"ADODB.Connection\"\n) or die(\n\"Cannot start ADO\"\n);\n$conn\n->\nOpen\n(\n\"Provider=SQLOLEDB; Data Source=localhost;\nInitial Catalog=database; User ID=user; Password=password\"\n);\n$rs\n=\n$conn\n->\nExecute\n(\n\"SELECT * FROM sometable\"\n);\n// Recordset\n$num_columns\n=\n$rs\n->\nFields\n->\nCount\n();\necho\n$num_columns\n.\n\"\\n\"\n;\nfor (\n$i\n=\n0\n;\n$i\n<\n$num_columns\n;\n$i\n++) {\n\n$fld\n[\n$i\n] =\n$rs\n->\nFields\n(\n$i\n);\n}\n$rowcount\n=\n0\n;\nwhile (!\n$rs\n->\nEOF\n) {\n    for (\n$i\n=\n0\n;\n$i\n<\n$num_columns\n;\n$i\n++) {\n        echo\n$fld\n[\n$i\n]->\nvalue\n.\n\"\\t\"\n;\n    }\n    echo\n\"\\n\"\n;\n\n$rowcount\n++;\n// increments rowcount\n\n$rs\n->\nMoveNext\n();\n}\n$rs\n->\nClose\n();\n$conn\n->\nClose\n();\n$rs\n=\nnull\n;\n$conn\n=\nnull\n;\n?>"
  },
  {
    "input": "Example #1 dotnet example",
    "output": "<?php\n$stack\n= new\ndotnet\n(\n\"mscorlib\"\n,\n\"System.Collections.Stack\"\n);\n$stack\n->\nPush\n(\n\".Net\"\n);\n$stack\n->\nPush\n(\n\"Hello \"\n);\necho\n$stack\n->\nPop\n() .\n$stack\n->\nPop\n();\n?>"
  },
  {
    "input": "Example #1 variant example",
    "output": "<?php\n$v\n= new\nvariant\n(\n42\n);\nprint\n\"The type is \"\n.\nvariant_get_type\n(\n$v\n) .\n\"<br/>\"\n;\nprint\n\"The value is \"\n.\n$v\n.\n\"<br/>\"\n;\n?>"
  },
  {
    "input": "Example #1 Basic COMPersistHelper::saveToFile() Usage",
    "output": "<?php\n$word\n= new\nCOM\n(\n'Word.Application'\n);\n$doc\n=\n$word\n->\nDocuments\n->\nAdd\n();\n$ph\n= new\nCOMPersistHelper\n(\n$doc\n);\n$ph\n->\nSaveToFile\n(\n'C:\\\\Users\\\\cmb\\\\Documents\\\\my.docx'\n);\n$word\n->\nQuit\n();\n?>"
  },
  {
    "input": "Example #1 COM event sink example",
    "output": "<?php\nclass\nIEEventSinker\n{\n    var\n$terminated\n=\nfalse\n;\n   function\nProgressChange\n(\n$progress\n,\n$progressmax\n) {\n      echo\n\"Download progress:\n$progress\n /\n$progressmax\n\\n\"\n;\n    }\n    function\nDocumentComplete\n(&\n$dom\n,\n$url\n) {\n      echo\n\"Document\n$url\n complete\\n\"\n;\n    }\n    function\nOnQuit\n() {\n      echo\n\"Quit!\\n\"\n;\n\n$this\n->\nterminated\n=\ntrue\n;\n    }\n}\n$ie\n= new\nCOM\n(\n\"InternetExplorer.Application\"\n);\n$sink\n= new\nIEEventSinker\n();\ncom_event_sink\n(\n$ie\n,\n$sink\n,\n\"DWebBrowserEvents2\"\n);\n$ie\n->\nVisible\n=\ntrue\n;\n$ie\n->\nNavigate\n(\n\"http://www.example.org\"\n);\nwhile(!\n$sink\n->\nterminated\n) {\n\ncom_message_pump\n(\n4000\n);\n}\n$ie\n=\nnull\n;\n?>"
  },
  {
    "input": "Example #1 Registering a PHP script to run as a service",
    "output": "<?php\nwin32_create_service\n(array(\n\n'service'\n=>\n'dummyphp'\n,\n# the name of your service\n\n'display'\n=>\n'sample dummy PHP service'\n,\n# short description\n\n'description'\n=>\n'This is a dummy Windows service created using PHP.'\n,\n# long description\n\n'params'\n=>\n'\"'\n.\n__FILE__\n.\n'\"  run'\n,\n# path to the script and parameters\n));\n?>"
  },
  {
    "input": "Example #2 Unregistering a service",
    "output": "<?php\nwin32_delete_service\n(\n'dummyphp'\n);\n?>"
  },
  {
    "input": "Example #3 Running as a service",
    "output": "<?php\nif (\n$argv\n[\n1\n] ==\n'run'\n) {\n\nwin32_start_service_ctrl_dispatcher\n(\n'dummyphp'\n);\n  while (\nWIN32_SERVICE_CONTROL_STOP\n!=\nwin32_get_last_control_message\n()) {\n\n# do your work here.\n    # try not to take up more than 30 seconds before going around the loop\n    # again\n\n}\n}\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMAttr object",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$attr\n=\n$element\n->\nsetAttributeNode\n(new\nDOMAttr\n(\n'attr'\n,\n'attrvalue'\n));\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 DOMAttr::isId() Example",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n// We need to validate our document before referring to the id\n$doc\n->\nvalidateOnParse\n=\ntrue\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n// We retrieve the attribute named id of the chapter element\n$attr\n=\n$doc\n->\ngetElementsByTagName\n(\n'chapter'\n)->\nitem\n(\n0\n)->\ngetAttributeNode\n(\n'id'\n);\nvar_dump\n(\n$attr\n->\nisId\n());\n// bool(true)\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMCdataSection object",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'utf-8'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$text\n=\n$element\n->\nappendChild\n(new\nDOMCdataSection\n(\n'root value'\n));\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMComment",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$comment\n=\n$element\n->\nappendChild\n(new\nDOMComment\n(\n'root comment'\n));\necho\n$dom\n->\nsaveXML\n();\n/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?><root><!--root comment--></root> */\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMDocument",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\necho\n$dom\n->\nsaveXML\n();\n/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?> */\n?>"
  },
  {
    "input": "Example #1 Creating a new element and inserting it as root",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'utf-8'\n);\n$element\n=\n$dom\n->\ncreateElement\n(\n'test'\n,\n'This is the root element!'\n);\n// We insert the new element as root (child of the document)\n$dom\n->\nappendChild\n(\n$element\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #2 Passing text containing an unescaped & as value",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'utf-8'\n);\n$element\n=\n$dom\n->\ncreateElement\n(\n'foo'\n,\n'me & you'\n);\n$dom\n->\nappendChild\n(\n$element\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new element and inserting it as root",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'utf-8'\n);\n$element\n=\n$dom\n->\ncreateElementNS\n(\n'http://www.example.com/XFoo'\n,\n'xfoo:test'\n,\n'This is the root element!'\n);\n// We insert the new element as root (child of the document)\n$dom\n->\nappendChild\n(\n$element\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #2 A namespace prefix example",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n'1.0'\n,\n'utf-8'\n);\n$doc\n->\nformatOutput\n=\ntrue\n;\n$root\n=\n$doc\n->\ncreateElementNS\n(\n'http://www.w3.org/2005/Atom'\n,\n'element'\n);\n$doc\n->\nappendChild\n(\n$root\n);\n$root\n->\nsetAttributeNS\n(\n'http://www.w3.org/2000/xmlns/'\n,\n'xmlns:g'\n,\n'http://base.google.com/ns/1.0'\n);\n$item\n=\n$doc\n->\ncreateElementNS\n(\n'http://base.google.com/ns/1.0'\n,\n'g:item_type'\n,\n'house'\n);\n$root\n->\nappendChild\n(\n$item\n);\necho\n$doc\n->\nsaveXML\n(),\n\"\\n\"\n;\necho\n$item\n->\nnamespaceURI\n,\n\"\\n\"\n;\n// Outputs: http://base.google.com/ns/1.0\necho\n$item\n->\nprefix\n,\n\"\\n\"\n;\n// Outputs: g\necho\n$item\n->\nlocalName\n,\n\"\\n\"\n;\n// Outputs: item_type\n?>"
  },
  {
    "input": "Example #1 Basic Usage Example",
    "output": "<?php\n$xml\n= <<< XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<books>\n <book>Patterns of Enterprise Application Architecture</book>\n <book>Design Patterns: Elements of Reusable Software Design</book>\n <book>Clean Code</book>\n</books>\nXML;\n$dom\n= new\nDOMDocument\n;\n$dom\n->\nloadXML\n(\n$xml\n);\n$books\n=\n$dom\n->\ngetElementsByTagName\n(\n'book'\n);\nforeach (\n$books\nas\n$book\n) {\n    echo\n$book\n->\nnodeValue\n,\nPHP_EOL\n;\n}\n?>"
  },
  {
    "input": "Example #1 Get all the XInclude elements",
    "output": "<?php\n$xml\n= <<<EOD\n<?xml version=\"1.0\" ?>\n<chapter xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n<title>Books of the other guy..</title>\n<para>\n <xi:include href=\"book.xml\">\n  <xi:fallback>\n   <error>xinclude: book.xml not found</error>\n  </xi:fallback>\n </xi:include>\n <include>\n  This is another namespace\n </include>\n</para>\n</chapter>\nEOD;\n$dom\n= new\nDOMDocument\n;\n// load the XML string defined above\n$dom\n->\nloadXML\n(\n$xml\n);\nforeach (\n$dom\n->\ngetElementsByTagNameNS\n(\n'http://www.w3.org/2001/XInclude'\n,\n'*'\n) as\n$element\n) {\n    echo\n'local name: '\n,\n$element\n->\nlocalName\n,\n', prefix: '\n,\n$element\n->\nprefix\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Creating a Document",
    "output": "<?php\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nload\n(\n'book.xml'\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a Document",
    "output": "<?php\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nloadHTML\n(\n\"<html><body>Test<br></body></html>\"\n);\necho\n$doc\n->\nsaveHTML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a Document",
    "output": "<?php\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nloadHTMLFile\n(\n\"filename.html\"\n);\necho\n$doc\n->\nsaveHTML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a Document",
    "output": "<?php\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nloadXML\n(\n'<root><node/></root>'\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Adding a new method to DOMElement to ease our code",
    "output": "<?php\nclass\nmyElement\nextends\nDOMElement\n{\n   function\nappendElement\n(\n$name\n) {\n      return\n$this\n->\nappendChild\n(new\nmyElement\n(\n$name\n));\n   }\n}\nclass\nmyDocument\nextends\nDOMDocument\n{\n   function\nsetRoot\n(\n$name\n) {\n      return\n$this\n->\nappendChild\n(new\nmyElement\n(\n$name\n));\n   }\n}\n$doc\n= new\nmyDocument\n();\n$doc\n->\nregisterNodeClass\n(\n'DOMElement'\n,\n'myElement'\n);\n// From now on, adding an element to another costs only one method call !\n$root\n=\n$doc\n->\nsetRoot\n(\n'root'\n);\n$child\n=\n$root\n->\nappendElement\n(\n'child'\n);\n$child\n->\nsetAttribute\n(\n'foo'\n,\n'bar'\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #2 Retrieving elements as custom class",
    "output": "<?php\nclass\nmyElement\nextends\nDOMElement\n{\n    public function\n__toString\n() {\n        return\n$this\n->\nnodeValue\n;\n    }\n}\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nloadXML\n(\n\"<root><element><child>text in child</child></element></root>\"\n);\n$doc\n->\nregisterNodeClass\n(\n\"DOMElement\"\n,\n\"myElement\"\n);\n$element\n=\n$doc\n->\ngetElementsByTagName\n(\n\"child\"\n)->\nitem\n(\n0\n);\nvar_dump\n(\nget_class\n(\n$element\n));\n// And take advantage of the __toString method..\necho\n$element\n;\n?>"
  },
  {
    "input": "Example #4 Custom objects are transient",
    "output": "<?php\nclass\nMyDOMElement\nextends\nDOMElement\n{\n    public\n$myProp\n=\n'default value'\n;\n}\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nregisterNodeClass\n(\n'DOMElement'\n,\n'MyDOMElement'\n);\n$node\n=\n$doc\n->\ncreateElement\n(\n'a'\n);\n$node\n->\nmyProp\n=\n'modified value'\n;\n$doc\n->\nappendChild\n(\n$node\n);\necho\n$doc\n->\nchildNodes\n[\n0\n]->\nmyProp\n,\nPHP_EOL\n;\nunset(\n$node\n);\necho\n$doc\n->\nchildNodes\n[\n0\n]->\nmyProp\n,\nPHP_EOL\n;\n?>"
  },
  {
    "input": "Example #1 Saving a DOM tree into a file",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n'1.0'\n);\n// we want a nice output\n$doc\n->\nformatOutput\n=\ntrue\n;\n$root\n=\n$doc\n->\ncreateElement\n(\n'book'\n);\n$root\n=\n$doc\n->\nappendChild\n(\n$root\n);\n$title\n=\n$doc\n->\ncreateElement\n(\n'title'\n);\n$title\n=\n$root\n->\nappendChild\n(\n$title\n);\n$text\n=\n$doc\n->\ncreateTextNode\n(\n'This is the title'\n);\n$text\n=\n$title\n->\nappendChild\n(\n$text\n);\necho\n'Wrote: '\n.\n$doc\n->\nsave\n(\n\"/tmp/test.xml\"\n) .\n' bytes'\n;\n// Wrote: 72 bytes\n?>"
  },
  {
    "input": "Example #1 Saving a HTML tree into a string",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n'1.0'\n);\n$root\n=\n$doc\n->\ncreateElement\n(\n'html'\n);\n$root\n=\n$doc\n->\nappendChild\n(\n$root\n);\n$head\n=\n$doc\n->\ncreateElement\n(\n'head'\n);\n$head\n=\n$root\n->\nappendChild\n(\n$head\n);\n$title\n=\n$doc\n->\ncreateElement\n(\n'title'\n);\n$title\n=\n$head\n->\nappendChild\n(\n$title\n);\n$text\n=\n$doc\n->\ncreateTextNode\n(\n'This is the title'\n);\n$text\n=\n$title\n->\nappendChild\n(\n$text\n);\necho\n$doc\n->\nsaveHTML\n();\n?>"
  },
  {
    "input": "Example #1 Saving a HTML tree into a file",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n'1.0'\n);\n// we want a nice output\n$doc\n->\nformatOutput\n=\ntrue\n;\n$root\n=\n$doc\n->\ncreateElement\n(\n'html'\n);\n$root\n=\n$doc\n->\nappendChild\n(\n$root\n);\n$head\n=\n$doc\n->\ncreateElement\n(\n'head'\n);\n$head\n=\n$root\n->\nappendChild\n(\n$head\n);\n$title\n=\n$doc\n->\ncreateElement\n(\n'title'\n);\n$title\n=\n$head\n->\nappendChild\n(\n$title\n);\n$text\n=\n$doc\n->\ncreateTextNode\n(\n'This is the title'\n);\n$text\n=\n$title\n->\nappendChild\n(\n$text\n);\necho\n'Wrote: '\n.\n$doc\n->\nsaveHTMLFile\n(\n\"/tmp/test.html\"\n) .\n' bytes'\n;\n// Wrote: 129 bytes\n?>"
  },
  {
    "input": "Example #1 Saving a DOM tree into a string",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n'1.0'\n);\n// we want a nice output\n$doc\n->\nformatOutput\n=\ntrue\n;\n$root\n=\n$doc\n->\ncreateElement\n(\n'book'\n);\n$root\n=\n$doc\n->\nappendChild\n(\n$root\n);\n$title\n=\n$doc\n->\ncreateElement\n(\n'title'\n);\n$title\n=\n$root\n->\nappendChild\n(\n$title\n);\n$text\n=\n$doc\n->\ncreateTextNode\n(\n'This is the title'\n);\n$text\n=\n$title\n->\nappendChild\n(\n$text\n);\necho\n\"Saving all the document:\\n\"\n;\necho\n$doc\n->\nsaveXML\n() .\n\"\\n\"\n;\necho\n\"Saving only the title part:\\n\"\n;\necho\n$doc\n->\nsaveXML\n(\n$title\n);\n?>"
  },
  {
    "input": "Example #1 Example of DTD validation",
    "output": "<?php\n$dom\n= new\nDOMDocument\n;\n$dom\n->\nload\n(\n'book.xml'\n);\nif (\n$dom\n->\nvalidate\n()) {\n    echo\n\"This document is valid!\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 DOMDocument::xinclude() example",
    "output": "<?php\n$xml\n= <<<EOD\n<?xml version=\"1.0\" ?>\n<chapter xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n <title>Books of the other guy..</title>\n <para>\n  <xi:include href=\"book.xml\">\n   <xi:fallback>\n    <error>xinclude: book.xml not found</error>\n   </xi:fallback>\n  </xi:include>\n </para>\n</chapter>\nEOD;\n$dom\n= new\nDOMDocument\n;\n// let's have a nice output\n$dom\n->\npreserveWhiteSpace\n=\nfalse\n;\n$dom\n->\nformatOutput\n=\ntrue\n;\n// load the XML string defined above\n$dom\n->\nloadXML\n(\n$xml\n);\n// substitute xincludes\n$dom\n->\nxinclude\n();\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Appending XML data to your document",
    "output": "<?php\n$doc\n= new\nDOMDocument\n();\n$doc\n->\nloadXML\n(\n\"<root/>\"\n);\n$f\n=\n$doc\n->\ncreateDocumentFragment\n();\n$f\n->\nappendXML\n(\n\"<foo>text</foo><bar>text2</bar>\"\n);\n$doc\n->\ndocumentElement\n->\nappendChild\n(\n$f\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMElement",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$element_ns\n= new\nDOMElement\n(\n'pr:node1'\n,\n'thisvalue'\n,\n'http://xyz'\n);\n$element\n->\nappendChild\n(\n$element_ns\n);\necho\n$dom\n->\nsaveXML\n();\n/* <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root><pr:node1 xmlns:pr=\"http://xyz\">thisvalue</pr:node1></root> */\n?>"
  },
  {
    "input": "Example #1 DOMElement::getAttributeNames() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n'<html xmlns:some=\"some:ns\" some:test=\"a\" test2=\"b\"/>'\n);\nvar_dump\n(\n$dom\n->\ndocumentElement\n->\ngetAttributeNames\n());\n?>"
  },
  {
    "input": "Example #1 DOMElement::insertAdjacentElement() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n'<?xml version=\"1.0\"?><container><p>foo</p></container>'\n);\n$container\n=\n$dom\n->\ndocumentElement\n;\n$p\n=\n$container\n->\nfirstElementChild\n;\n$p\n->\ninsertAdjacentElement\n(\n'beforebegin'\n,\n$dom\n->\ncreateElement\n(\n'A'\n));\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 DOMElement::insertAdjacentText() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n'<?xml version=\"1.0\"?><container><p>H</p></container>'\n);\n$container\n=\n$dom\n->\ndocumentElement\n;\n$p\n=\n$container\n->\nfirstElementChild\n;\n$p\n->\ninsertAdjacentText\n(\n\"afterbegin\"\n,\n\"P\"\n);\n$p\n->\ninsertAdjacentText\n(\n\"beforeend\"\n,\n\"P\"\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Setting an attribute",
    "output": "<?php\n$doc\n= new\nDOMDocument\n(\n\"1.0\"\n);\n$node\n=\n$doc\n->\ncreateElement\n(\n\"para\"\n);\n$newnode\n=\n$doc\n->\nappendChild\n(\n$node\n);\n$newnode\n->\nsetAttribute\n(\n\"align\"\n,\n\"left\"\n);\n?>"
  },
  {
    "input": "Example #1 DOMElement::toggleAttribute() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n\"<?xml version='1.0'?><container selected=\\\"\\\"/>\"\n);\nvar_dump\n(\n$dom\n->\ndocumentElement\n->\ntoggleAttribute\n(\n'selected'\n));\necho\n$dom\n->\nsaveXML\n() .\nPHP_EOL\n;\nvar_dump\n(\n$dom\n->\ndocumentElement\n->\ntoggleAttribute\n(\n'selected'\n));\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMEntityReference",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$entity\n=\n$element\n->\nappendChild\n(new\nDOMEntityReference\n(\n'nbsp'\n));\necho\n$dom\n->\nsaveXML\n();\n/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?><root>&nbsp;</root> */\n?>"
  },
  {
    "input": "Example #1 Creating a document with an attached DTD",
    "output": "<?php\n// Creates an instance of the DOMImplementation class\n$imp\n= new\nDOMImplementation\n;\n// Creates a DOMDocumentType instance\n$dtd\n=\n$imp\n->\ncreateDocumentType\n(\n'graph'\n,\n''\n,\n'graph.dtd'\n);\n// Creates a DOMDocument instance\n$dom\n=\n$imp\n->\ncreateDocument\n(\n\"\"\n,\n\"\"\n,\n$dtd\n);\n// Set other properties\n$dom\n->\nencoding\n=\n'UTF-8'\n;\n$dom\n->\nstandalone\n=\nfalse\n;\n// Create an empty element\n$element\n=\n$dom\n->\ncreateElement\n(\n'graph'\n);\n// Append the element\n$dom\n->\nappendChild\n(\n$element\n);\n// Retrieve and print the document\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Testing your DOM Implementation",
    "output": "<?php\n$features\n= array(\n\n'Core'\n=>\n'Core module'\n,\n\n'XML'\n=>\n'XML module'\n,\n\n'HTML'\n=>\n'HTML module'\n,\n\n'Views'\n=>\n'Views module'\n,\n\n'Stylesheets'\n=>\n'Style Sheets module'\n,\n\n'CSS'\n=>\n'CSS module'\n,\n\n'CSS2'\n=>\n'CSS2 module'\n,\n\n'Events'\n=>\n'Events module'\n,\n\n'UIEvents'\n=>\n'User interface Events module'\n,\n\n'MouseEvents'\n=>\n'Mouse Events module'\n,\n\n'MutationEvents'\n=>\n'Mutation Events module'\n,\n\n'HTMLEvents'\n=>\n'HTML Events module'\n,\n\n'Range'\n=>\n'Range module'\n,\n\n'Traversal'\n=>\n'Traversal module'\n);\n$implementation\n= new\nDOMImplementation\n;\nforeach (\n$features\nas\n$key\n=>\n$name\n) {\n  if (\n$implementation\n->\nhasFeature\n(\n$key\n,\n'2.0'\n)) {\n    echo\n\"Has feature\n$name\n\\n\"\n;\n  } else {\n    echo\n\"Missing feature\n$name\n\\n\"\n;\n  }\n}\n?>"
  },
  {
    "input": "Example #1 Getting an attribute on a node",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$id\n=\n$doc\n->\nfirstChild\n->\nattributes\n->\ngetNamedItem\n(\n'id'\n);\n?>"
  },
  {
    "input": "Example #2 Accessing attribute with array syntax",
    "output": "<?php\n$id\n=\n$doc\n->\nfirstChild\n->\nattributes\n[\n'id'\n];\n?>"
  },
  {
    "input": "Example #1 Adding a child",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$node\n=\n$doc\n->\ncreateElement\n(\n\"para\"\n);\n$newnode\n=\n$doc\n->\nappendChild\n(\n$node\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #2 Nested children",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$headNode\n=\n$doc\n->\ncreateElement\n(\n\"head\"\n);\n$doc\n->\nappendChild\n(\n$headNode\n);\n$titleNode\n=\n$doc\n->\ncreateElement\n(\n\"title\"\n);\n$headNode\n->\nappendChild\n(\n$titleNode\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 DOMNode::compareDocumentPosition() example",
    "output": "<?php\n$xml\n= <<<XML\n<root>\n    <child1/>\n    <child2/>\n</root>\nXML;\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n$xml\n);\n$root\n=\n$dom\n->\ndocumentElement\n;\n$child1\n=\n$root\n->\nfirstElementChild\n;\n$child2\n=\n$child1\n->\nnextElementSibling\n;\nvar_dump\n(\n$root\n->\ncompareDocumentPosition\n(\n$child1\n));\nvar_dump\n(\n$child2\n->\ncompareDocumentPosition\n(\n$child1\n));\n?>"
  },
  {
    "input": "Example #1 DOMNode::contains() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(<<<XML\n<!DOCTYPE HTML>\n<html>\n   <body>\n       <main>\n           <p>Hello, world!</p>\n       </main>\n   </body>\n</html>\nXML);\n$xpath\n= new\nDOMXPath\n(\n$dom\n);\n$main\n=\n$xpath\n->\nquery\n(\n\"//main\"\n)[\n0\n];\nvar_dump\n(\n$dom\n->\ndocumentElement\n->\ncontains\n(\n$main\n));\n?>"
  },
  {
    "input": "Example #1 DOMNode::getLineNo() example",
    "output": "<?php\n// XML dump for below example\n$xml\n= <<<XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n    <node />\n</root>\nXML;\n// Create a new DOMDocument instance\n$dom\n= new\nDOMDocument\n;\n// Load the XML\n$dom\n->\nloadXML\n(\n$xml\n);\n// Print where the line where the 'node' element was defined in\nprintf\n(\n'The <node> tag is defined on line %d'\n,\n$dom\n->\ngetElementsByTagName\n(\n'node'\n)->\nitem\n(\n0\n)->\ngetLineNo\n());\n?>"
  },
  {
    "input": "Example #1 DOMNode::getNodePath() example",
    "output": "<?php\n// Create a new DOMDocument instance\n$dom\n= new\nDOMDocument\n;\n// Load the XML\n$dom\n->\nloadXML\n(\n'\n<fruits>\n <apples>\n  <apple>braeburn</apple>\n  <apple>granny smith</apple>\n </apples>\n <pears>\n  <pear>conference</pear>\n </pears>\n</fruits>\n'\n);\n// Print XPath for each element\nforeach (\n$dom\n->\ngetElementsByTagName\n(\n'*'\n) as\n$node\n) {\n    echo\n$node\n->\ngetNodePath\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 DOMNode::getRootNode() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadXML\n(\n'<?xml version=\"1.0\"?><html><body/></html>'\n);\nvar_dump\n(\n$dom\n->\ndocumentElement\n->\nfirstElementChild\n->\ngetRootNode\n() ===\n$dom\n);\n?>"
  },
  {
    "input": "Example #1 DOMNode::isEqualNode() example",
    "output": "<?php\n$dom1\n= (new\nDOMDocument\n())->\ncreateElement\n(\n'h1'\n,\n'Hello World!'\n);\n$dom2\n= (new\nDOMDocument\n())->\ncreateElement\n(\n'h1'\n,\n'Hello World!'\n);\nvar_dump\n(\n$dom1\n->\nisEqualNode\n(\n$dom2\n));\n?>"
  },
  {
    "input": "Example #1 Removing a child",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$book\n=\n$doc\n->\ndocumentElement\n;\n// we retrieve the chapter and remove it from the book\n$chapter\n=\n$book\n->\ngetElementsByTagName\n(\n'chapter'\n)->\nitem\n(\n0\n);\n$oldchapter\n=\n$book\n->\nremoveChild\n(\n$chapter\n);\necho\n$doc\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Traversing all the entries of the table",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$items\n=\n$doc\n->\ngetElementsByTagName\n(\n'entry'\n);\nfor (\n$i\n=\n0\n;\n$i\n<\n$items\n->\nlength\n;\n$i\n++) {\n    echo\n$items\n->\nitem\n(\n$i\n)->\nnodeValue\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 Accessing item with array syntax",
    "output": "<?php\nfor (\n$i\n=\n0\n;\n$i\n<\n$items\n->\nlength\n;\n$i\n++) {\n    echo\n$items\n[\n$i\n]->\nnodeValue\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 Traversing items with foreach",
    "output": "<?php\nforeach (\n$items\nas\n$item\n) {\n    echo\n$item\n->\nnodeValue\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 DOMParentNode::replaceChildren() example",
    "output": "<?php\n$dom\n= new\nDOMDocument\n();\n$dom\n->\nloadHTML\n(\n'<!DOCTYPE HTML><html><p>hi</p> test <p>hi2</p></html>'\n);\n$dom\n->\ndocumentElement\n->\nreplaceChildren\n(\n'foo'\n,\n$dom\n->\ncreateElement\n(\n'p'\n),\n'bar'\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMProcessingInstruction object",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'UTF-8'\n);\n$html\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'html'\n));\n$body\n=\n$html\n->\nappendChild\n(new\nDOMElement\n(\n'body'\n));\n$pinode\n= new\nDOMProcessingInstruction\n(\n'php'\n,\n'echo \"Hello World\"; '\n);\n$body\n->\nappendChild\n(\n$pinode\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 Creating a new DOMText",
    "output": "<?php\n$dom\n= new\nDOMDocument\n(\n'1.0'\n,\n'iso-8859-1'\n);\n$element\n=\n$dom\n->\nappendChild\n(new\nDOMElement\n(\n'root'\n));\n$text\n=\n$element\n->\nappendChild\n(new\nDOMText\n(\n'root value'\n));\necho\n$dom\n->\nsaveXML\n();\n/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?><root>root value</root> */\n?>"
  },
  {
    "input": "Example #1 Getting the count of all the english books",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n$tbody\n=\n$doc\n->\ngetElementsByTagName\n(\n'tbody'\n)->\nitem\n(\n0\n);\n// our query is relative to the tbody node\n$query\n=\n'count(row/entry[. = \"en\"])'\n;\n$entries\n=\n$xpath\n->\nevaluate\n(\n$query\n,\n$tbody\n);\necho\n\"There are\n$entries\n english books\\n\"\n;\n?>"
  },
  {
    "input": "Example #1 Getting all the english books",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n// We don't want to bother with white spaces\n$doc\n->\npreserveWhiteSpace\n=\nfalse\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n// We start from the root element\n$query\n=\n'//book/chapter/para/informaltable/tgroup/tbody/row/entry[. = \"en\"]'\n;\n$entries\n=\n$xpath\n->\nquery\n(\n$query\n);\nforeach (\n$entries\nas\n$entry\n) {\n    echo\n\"Found\n{\n$entry\n->\npreviousSibling\n->\npreviousSibling\n->\nnodeValue\n}\n,\"\n.\n\n\" by\n{\n$entry\n->\npreviousSibling\n->\nnodeValue\n}\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Matching attribute value with quotes",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nloadXML\n(<<<XML\n<books>\n    <book name=\"'quoted' name\">Book title</book>\n</books>\nXML);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n$query\n=\n\"//book[@name=\"\n.\nDOMXPath\n::\nquote\n(\n\"'quoted' name\"\n) .\n\"]\"\n;\necho\n$query\n,\n\"\\n\"\n;\n$entries\n=\n$xpath\n->\nquery\n(\n$query\n);\nforeach (\n$entries\nas\n$entry\n) {\n    echo\n\"Found \"\n,\n$entry\n->\ntextContent\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #2 DOMXPath::registerPHPFunctions() with php:functionString",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n// Register the php: namespace (required)\n$xpath\n->\nregisterNamespace\n(\n\"php\"\n,\n\"http://php.net/xpath\"\n);\n// Register PHP functions (no restrictions)\n$xpath\n->\nregisterPHPFunctions\n();\n// Call substr function on the book title\n$nodes\n=\n$xpath\n->\nquery\n(\n'//book[php:functionString(\"substr\", title, 0, 3) = \"PHP\"]'\n);\necho\n\"Found\n{\n$nodes\n->\nlength\n}\n books starting with 'PHP':\\n\"\n;\nforeach (\n$nodes\nas\n$node\n) {\n\n$title\n=\n$node\n->\ngetElementsByTagName\n(\n\"title\"\n)->\nitem\n(\n0\n)->\nnodeValue\n;\n\n$author\n=\n$node\n->\ngetElementsByTagName\n(\n\"author\"\n)->\nitem\n(\n0\n)->\nnodeValue\n;\n    echo\n\"\n$title\n by\n$author\n\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #3 DOMXPath::registerPHPFunctions() with php:function",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n// Register the php: namespace (required)\n$xpath\n->\nregisterNamespace\n(\n\"php\"\n,\n\"http://php.net/xpath\"\n);\n// Register PHP functions (has_multiple only)\n$xpath\n->\nregisterPHPFunctions\n(\n\"has_multiple\"\n);\n\nfunction\nhas_multiple\n(\n$nodes\n) {\n\n// Return true if more than one author\n\nreturn\ncount\n(\n$nodes\n) >\n1\n;\n}\n// Filter books with multiple authors\n$books\n=\n$xpath\n->\nquery\n(\n'//book[php:function(\"has_multiple\", author)]'\n);\necho\n\"Books with multiple authors:\\n\"\n;\nforeach (\n$books\nas\n$book\n) {\n    echo\n$book\n->\ngetElementsByTagName\n(\n\"title\"\n)->\nitem\n(\n0\n)->\nnodeValue\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #4 DOMXPath::registerPHPFunctions() with a callable",
    "output": "<?php\n$doc\n= new\nDOMDocument\n;\n$doc\n->\nload\n(\n'book.xml'\n);\n$xpath\n= new\nDOMXPath\n(\n$doc\n);\n// Register the php: namespace (required)\n$xpath\n->\nregisterNamespace\n(\n\"php\"\n,\n\"http://php.net/xpath\"\n);\n// Register PHP functions (has_multiple only)\n$xpath\n->\nregisterPHPFunctions\n([\n\"has_multiple\"\n=> fn (\n$nodes\n) =>\ncount\n(\n$nodes\n) >\n1\n]);\n// Filter books with multiple authors\n$books\n=\n$xpath\n->\nquery\n(\n'//book[php:function(\"has_multiple\", author)]'\n);\necho\n\"Books with multiple authors:\\n\"\n;\nforeach (\n$books\nas\n$book\n) {\n    echo\n$book\n->\ngetElementsByTagName\n(\n\"title\"\n)->\nitem\n(\n0\n)->\nnodeValue\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Dom\\Attr::isId() Example",
    "output": "<?php\n// We need to validate our document before referring to the id\n$doc\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'book.xml'\n,\nLIBXML_DTDVALID\n);\n// We retrieve the attribute named id of the chapter element\n$attr\n=\n$doc\n->\ngetElementsByTagName\n(\n'chapter'\n)->\nitem\n(\n0\n)->\ngetAttributeNode\n(\n'id'\n);\nvar_dump\n(\n$attr\n->\nisId\n());\n// bool(true)\n?>"
  },
  {
    "input": "Example #1 Dom\\ParentNode::replaceChildren() example",
    "output": "<?php\n$dom\n=\nDom\\HTMLDocument\n::\ncreateFromString\n(\n'<!DOCTYPE HTML><html><p>hi</p> test <p>hi2</p></html>'\n);\n$dom\n->\ndocumentElement\n->\nreplaceChildren\n(\n'foo'\n,\n$dom\n->\ncreateElement\n(\n'p'\n),\n'bar'\n);\necho\n$dom\n->\nsaveHtml\n();\n?>"
  },
  {
    "input": "Example #1 Import SimpleXML into DOM with dom_import_simplexml()",
    "output": "<?php\n$sxe\n=\nsimplexml_load_string\n(\n'<books><book><title>blah</title></book></books>'\n);\nif (\n$sxe\n===\nfalse\n) {\n    echo\n'Error while parsing the document'\n;\n    exit;\n}\n$dom_sxe\n=\ndom_import_simplexml\n(\n$sxe\n);\nif (!\n$dom_sxe\n) {\n    echo\n'Error while converting XML'\n;\n    exit;\n}\n$dom\n= new\nDOMDocument\n(\n'1.0'\n);\n$dom_sxe\n=\n$dom\n->\nimportNode\n(\n$dom_sxe\n,\ntrue\n);\n$dom_sxe\n=\n$dom\n->\nappendChild\n(\n$dom_sxe\n);\necho\n$dom\n->\nsaveXML\n();\n?>"
  },
  {
    "input": "Example #1 libxml_set_external_entity_loader() example",
    "output": "<?php\n$xml\n= <<<XML\n<!DOCTYPE foo PUBLIC \"-//FOO/BAR\" \"http://example.com/foobar\">\n<foo>bar</foo>\nXML;\n$dtd\n= <<<DTD\n<!ELEMENT foo (#PCDATA)>\nDTD;\nlibxml_set_external_entity_loader\n(\n    function (\n$public\n,\n$system\n,\n$context\n) use(\n$dtd\n) {\n\nvar_dump\n(\n$public\n);\n\nvar_dump\n(\n$system\n);\n\nvar_dump\n(\n$context\n);\n\n$f\n=\nfopen\n(\n\"php://temp\"\n,\n\"r+\"\n);\n\nfwrite\n(\n$f\n,\n$dtd\n);\n\nrewind\n(\n$f\n);\n        return\n$f\n;\n    }\n);\n$dd\n= new\nDOMDocument\n;\n$r\n=\n$dd\n->\nloadXML\n(\n$xml\n);\nvar_dump\n(\n$dd\n->\nvalidate\n());\n?>"
  },
  {
    "input": "Example #1 A libxml_set_streams_context() example",
    "output": "<?php\n$opts\n= array(\n\n'http'\n=> array(\n\n'user_agent'\n=>\n'PHP libxml agent'\n,\n    )\n);\n$context\n=\nstream_context_create\n(\n$opts\n);\nlibxml_set_streams_context\n(\n$context\n);\n// request a file through HTTP\n$doc\n=\nDOMDocument\n::\nload\n(\n'http://www.example.com/file.xml'\n);\n?>"
  },
  {
    "input": "Example #1 Include file example.php with XML string",
    "output": "<?php\n$xmlstr\n= <<<XML\n<?xml version='1.0' standalone='yes'?>\n<movies>\n <movie>\n  <title>PHP: Behind the Parser</title>\n  <characters>\n   <character>\n    <name>Ms. Coder</name>\n    <actor>Onlivia Actora</actor>\n   </character>\n   <character>\n    <name>Mr. Coder</name>\n    <actor>El Act&#211;r</actor>\n   </character>\n  </characters>\n  <plot>\n   So, this language. It's like, a programming language. Or is it a\n   scripting language? All is revealed in this thrilling horror spoof\n   of a documentary.\n  </plot>\n  <great-lines>\n   <line>PHP solves all my web problems</line>\n  </great-lines>\n  <rating type=\"thumbs\">7</rating>\n  <rating type=\"stars\">5</rating>\n </movie>\n</movies>\nXML;\n?>"
  },
  {
    "input": "Example #2 Getting <plot>",
    "output": "<?php\ninclude\n'example.php'\n;\n$movies\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\necho\n$movies\n->\nmovie\n[\n0\n]->\nplot\n;\n?>"
  },
  {
    "input": "Example #3 Getting <line>",
    "output": "<?php\ninclude\n'example.php'\n;\n$movies\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\necho\n$movies\n->\nmovie\n->{\n'great-lines'\n}->\nline\n;\n?>"
  },
  {
    "input": "Example #1 Loading broken XML string",
    "output": "<?php\nlibxml_use_internal_errors\n(\ntrue\n);\n$sxe\n=\nsimplexml_load_string\n(\n\"<?xml version='1.0'><broken><xml></broken>\"\n);\nif (\n$sxe\n===\nfalse\n) {\n    echo\n\"Failed loading XML\\n\"\n;\n    foreach(\nlibxml_get_errors\n() as\n$error\n) {\n        echo\n\"\\t\"\n,\n$error\n->\nmessage\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Add attributes and children to a SimpleXML element",
    "output": "<?php\ninclude\n'example.php'\n;\n\n$sxe\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\n$sxe\n->\naddAttribute\n(\n'type'\n,\n'documentary'\n);\n$movie\n=\n$sxe\n->\naddChild\n(\n'movie'\n);\n$movie\n->\naddChild\n(\n'title'\n,\n'PHP2: More Parser Stories'\n);\n$movie\n->\naddChild\n(\n'plot'\n,\n'This is all about the people who make it work.'\n);\n$characters\n=\n$movie\n->\naddChild\n(\n'characters'\n);\n$character\n=\n$characters\n->\naddChild\n(\n'character'\n);\n$character\n->\naddChild\n(\n'name'\n,\n'Mr. Parser'\n);\n$character\n->\naddChild\n(\n'actor'\n,\n'John Doe'\n);\n$rating\n=\n$movie\n->\naddChild\n(\n'rating'\n,\n'5'\n);\n$rating\n->\naddAttribute\n(\n'type'\n,\n'stars'\n);\n\necho\n$sxe\n->\nasXML\n();\n?>"
  },
  {
    "input": "Example #1 Add attributes and children to a SimpleXML element",
    "output": "<?php\ninclude\n'example.php'\n;\n$sxe\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\n$sxe\n->\naddAttribute\n(\n'type'\n,\n'documentary'\n);\n$movie\n=\n$sxe\n->\naddChild\n(\n'movie'\n);\n$movie\n->\naddChild\n(\n'title'\n,\n'PHP2: More Parser Stories'\n);\n$movie\n->\naddChild\n(\n'plot'\n,\n'This is all about the people who make it work.'\n);\n$characters\n=\n$movie\n->\naddChild\n(\n'characters'\n);\n$character\n=\n$characters\n->\naddChild\n(\n'character'\n);\n$character\n->\naddChild\n(\n'name'\n,\n'Mr. Parser'\n);\n$character\n->\naddChild\n(\n'actor'\n,\n'John Doe'\n);\n$rating\n=\n$movie\n->\naddChild\n(\n'rating'\n,\n'5'\n);\n$rating\n->\naddAttribute\n(\n'type'\n,\n'stars'\n);\n\necho\n$sxe\n->\nasXML\n();\n?>"
  },
  {
    "input": "Example #1 Get XML",
    "output": "<?php\n$string\n= <<<XML\n<a>\n <b>\n  <c>text</c>\n  <c>stuff</c>\n </b>\n <d>\n  <c>code</c>\n </d>\n</a>\nXML;\n$xml\n= new\nSimpleXMLElement\n(\n$string\n);\necho\n$xml\n->\nasXML\n();\n?>"
  },
  {
    "input": "Example #2 Using asXML() on SimpleXMLElement::xpath() results",
    "output": "<?php\n// Continued from example XML above.\n/* Search for <a><b><c> */\n$result\n=\n$xml\n->\nxpath\n(\n'/a/b/c'\n);\nforeach (\n$result\nas\n$node\n) {\n    echo\n$node\n->\nasXML\n();\n}\n?>"
  },
  {
    "input": "Example #1 Interpret an XML string",
    "output": "<?php\n$string\n= <<<XML\n<a>\n <foo name=\"one\" game=\"lonely\">1</foo>\n</a>\nXML;\n$xml\n=\nsimplexml_load_string\n(\n$string\n);\nforeach(\n$xml\n->\nfoo\n[\n0\n]->\nattributes\n() as\n$a\n=>\n$b\n) {\n    echo\n$a\n,\n'=\"'\n,\n$b\n,\n\"\\\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Traversing a children() pseudo-array",
    "output": "<?php\n$xml\n= new\nSimpleXMLElement\n(\n'<person>\n <child role=\"son\">\n  <child role=\"daughter\"/>\n </child>\n <child role=\"daughter\">\n  <child role=\"son\">\n   <child role=\"son\"/>\n  </child>\n </child>\n</person>'\n);\nforeach (\n$xml\n->\nchildren\n() as\n$second_gen\n) {\n    echo\n' The person begot a '\n.\n$second_gen\n[\n'role'\n];\n    foreach (\n$second_gen\n->\nchildren\n() as\n$third_gen\n) {\n        echo\n' who begot a '\n.\n$third_gen\n[\n'role'\n] .\n';'\n;\n        foreach (\n$third_gen\n->\nchildren\n() as\n$fourth_gen\n) {\n            echo\n' and that '\n.\n$third_gen\n[\n'role'\n] .\n\n' begot a '\n.\n$fourth_gen\n[\n'role'\n];\n        }\n    }\n}\n?>"
  },
  {
    "input": "Example #2 Using namespaces",
    "output": "<?php\n$xml\n=\n'<example xmlns:foo=\"my.foo.urn\">\n  <foo:a>Apple</foo:a>\n  <foo:b>Banana</foo:b>\n  <c>Cherry</c>\n</example>'\n;\n$sxe\n= new\nSimpleXMLElement\n(\n$xml\n);\n$kids\n=\n$sxe\n->\nchildren\n(\n'foo'\n);\nvar_dump\n(\ncount\n(\n$kids\n));\n$kids\n=\n$sxe\n->\nchildren\n(\n'foo'\n,\nTRUE\n);\nvar_dump\n(\ncount\n(\n$kids\n));\n$kids\n=\n$sxe\n->\nchildren\n(\n'my.foo.urn'\n);\nvar_dump\n(\ncount\n(\n$kids\n));\n$kids\n=\n$sxe\n->\nchildren\n(\n'my.foo.urn'\n,\nTRUE\n);\nvar_dump\n(\ncount\n(\n$kids\n));\n$kids\n=\n$sxe\n->\nchildren\n();\nvar_dump\n(\ncount\n(\n$kids\n));\n?>"
  },
  {
    "input": "Example #1 Create a SimpleXMLElement object",
    "output": "<?php\ninclude\n'example.php'\n;\n$sxe\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\necho\n$sxe\n->\nmovie\n[\n0\n]->\ntitle\n;\n?>"
  },
  {
    "input": "Example #2 Create a SimpleXMLElement object from a URL",
    "output": "<?php\n$sxe\n= new\nSimpleXMLElement\n(\n'http://example.org/document.xml'\n,\n0\n,\ntrue\n);\necho\n$sxe\n->\nasXML\n();\n?>"
  },
  {
    "input": "Example #1 Counting the number of children",
    "output": "<?php\n$xml\n= <<<EOF\n<people>\n <person name=\"Person 1\">\n  <child/>\n  <child/>\n  <child/>\n </person>\n <person name=\"Person 2\">\n  <child/>\n  <child/>\n  <child/>\n  <child/>\n  <child/>\n </person>\n</people>\nEOF;\n$elem\n= new\nSimpleXMLElement\n(\n$xml\n);\nforeach (\n$elem\nas\n$person\n) {\n\nprintf\n(\n\"%s has got %d children.\\n\"\n,\n$person\n[\n'name'\n],\n$person\n->\ncount\n());\n}\n?>"
  },
  {
    "input": "Example #1 Return the current element",
    "output": "<?php\n$xmlElement\n= new\nSimpleXMLElement\n(\n'<books><book>PHP basics</book><book>XML basics</book></books>'\n);\n$xmlElement\n->\nrewind\n();\n// rewind to first element, otherwise current() won't work\nvar_dump\n(\n$xmlElement\n->\ncurrent\n());\n?>"
  },
  {
    "input": "Example #1 Get document namespaces",
    "output": "<?php\n$xml\n= <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http://example.org/ns\">\n    <p:person id=\"1\">John Doe</p:person>\n    <p:person id=\"2\">Susie Q. Public</p:person>\n</people>\nXML;\n\n$sxe\n= new\nSimpleXMLElement\n(\n$xml\n);\n$namespaces\n=\n$sxe\n->\ngetDocNamespaces\n();\nvar_dump\n(\n$namespaces\n);\n?>"
  },
  {
    "input": "Example #2 Working with multiple namespaces",
    "output": "<?php\n$xml\n= <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http://example.org/ns\" xmlns:t=\"http://example.org/test\">\n    <p:person t:id=\"1\">John Doe</p:person>\n    <p:person t:id=\"2\" a:addr=\"123 Street\" xmlns:a=\"http://example.org/addr\">\n        Susie Q. Public\n    </p:person>\n</people>\nXML;\n\n$sxe\n= new\nSimpleXMLElement\n(\n$xml\n);\n$namespaces\n=\n$sxe\n->\ngetDocNamespaces\n(\nTRUE\n);\nvar_dump\n(\n$namespaces\n);\n?>"
  },
  {
    "input": "Example #1 Get XML element names",
    "output": "<?php\ninclude\n'example.php'\n;\n$sxe\n= new\nSimpleXMLElement\n(\n$xmlstr\n);\necho\n$sxe\n->\ngetName\n() .\n\"\\n\"\n;\nforeach (\n$sxe\n->\nchildren\n() as\n$child\n)\n{\n    echo\n$child\n->\ngetName\n() .\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Get document namespaces in use",
    "output": "<?php\n$xml\n= <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http://example.org/ns\" xmlns:t=\"http://example.org/test\">\n    <p:person id=\"1\">John Doe</p:person>\n    <p:person id=\"2\">Susie Q. Public</p:person>\n</people>\nXML;\n\n$sxe\n= new\nSimpleXMLElement\n(\n$xml\n);\n$namespaces\n=\n$sxe\n->\ngetNamespaces\n(\ntrue\n);\nvar_dump\n(\n$namespaces\n);\n?>"
  },
  {
    "input": "Example #1 Return the sub-elements of the current element",
    "output": "<?php\n$xml\n= <<<XML\n<books>\n    <book>\n        <title>PHP Basics</title>\n        <author>Jim Smith</author>\n    </book>\n    <book>XML basics</book>\n</books>\nXML;\n$xmlElement\n= new\nSimpleXMLElement\n(\n$xml\n);\nfor (\n$xmlElement\n->\nrewind\n();\n$xmlElement\n->\nvalid\n();\n$xmlElement\n->\nnext\n()) {\n    foreach(\n$xmlElement\n->\ngetChildren\n() as\n$name\n=>\n$data\n) {\n    echo\n\"The\n$name\n is '\n$data\n' from the class \"\n.\nget_class\n(\n$data\n) .\n\"\\n\"\n;\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Check whether the current element has sub-elements",
    "output": "<?php\n$xml\n= <<<XML\n<books>\n    <book>\n        <title>PHP Basics</title>\n        <author>Jim Smith</author>\n    </book>\n    <book>XML basics</book>\n</books>\nXML;\n$xmlElement\n= new\nSimpleXMLElement\n(\n$xml\n);\nfor (\n$xmlElement\n->\nrewind\n();\n$xmlElement\n->\nvalid\n();\n$xmlElement\n->\nnext\n()) {\n    if (\n$xmlElement\n->\nhasChildren\n()) {\n\nvar_dump\n(\n$xmlElement\n->\ncurrent\n());\n    }\n}\n?>"
  },
  {
    "input": "Example #1 Get the current XML tag key",
    "output": "<?php\n$xmlElement\n= new\nSimpleXMLElement\n(\n'<books><book>PHP basics</book><book>XML basics</book></books>'\n);\necho\nvar_dump\n(\n$xmlElement\n->\nkey\n());\n$xmlElement\n->\nrewind\n();\n// rewind to the first element\necho\nvar_dump\n(\n$xmlElement\n->\nkey\n());\n?>"
  },
  {
    "input": "Example #1 Move to the next element",
    "output": "<?php\n$xmlElement\n= new\nSimpleXMLElement\n(\n'<books><book>PHP Basics</book><book>XML basics</book></books>'\n);\n$xmlElement\n->\nrewind\n();\n// rewind to the first element\n$xmlElement\n->\nnext\n();\nvar_dump\n(\n$xmlElement\n->\ncurrent\n());\n?>"
  },
  {
    "input": "Example #1 Setting a namespace prefix to use in an XPath query",
    "output": "<?php\n$xml\n= <<<EOD\n<book xmlns:chap=\"http://example.org/chapter-title\">\n    <title>My Book</title>\n    <chapter id=\"1\">\n        <chap:title>Chapter 1</chap:title>\n        <para>Donec velit. Nullam eget tellus vitae tortor gravida scelerisque.\n            In orci lorem, cursus imperdiet, ultricies non, hendrerit et, orci.\n            Nulla facilisi. Nullam velit nisl, laoreet id, condimentum ut,\n            ultricies id, mauris.</para>\n    </chapter>\n    <chapter id=\"2\">\n        <chap:title>Chapter 2</chap:title>\n        <para>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin\n            gravida. Phasellus tincidunt massa vel urna. Proin adipiscing quam\n            vitae odio. Sed dictum. Ut tincidunt lorem ac lorem. Duis eros\n            tellus, pharetra id, faucibus eu, dapibus dictum, odio.</para>\n    </chapter>\n</book>\nEOD;\n$sxe\n= new\nSimpleXMLElement\n(\n$xml\n);\n$sxe\n->\nregisterXPathNamespace\n(\n'c'\n,\n'http://example.org/chapter-title'\n);\n$result\n=\n$sxe\n->\nxpath\n(\n'//c:title'\n);\nforeach (\n$result\nas\n$title\n) {\n  echo\n$title\n.\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Rewind to the first element",
    "output": "<?php\n$xmlElement\n= new\nSimpleXMLElement\n(\n'<books><book>PHP Basics</book><book>XML Basics</book></books>'\n);\n$xmlElement\n->\nrewind\n();\nvar_dump\n(\n$xmlElement\n->\ncurrent\n());\n?>"
  },
  {
    "input": "Example #1 Get string content",
    "output": "<?php\n$xml\n= new\nSimpleXMLElement\n(\n'<a>1 <b>2 </b>3</a>'\n);\necho\n$xml\n;\n?>"
  },
  {
    "input": "Example #1 Check whether the current element is valid",
    "output": "<?php\n$xmlElement\n= new\nSimpleXMLElement\n(\n'<books><book>SQL Basics</book></books>'\n);\n$xmlElement\n->\nrewind\n();\n// rewind to the first element\necho\nvar_dump\n(\n$xmlElement\n->\nvalid\n());\n// bool(true)\n$xmlElement\n->\nnext\n();\n// advance to the next element\necho\nvar_dump\n(\n$xmlElement\n->\nvalid\n());\n// bool(false) because there is only one element\n?>"
  },
  {
    "input": "Example #1 Xpath",
    "output": "<?php\n$string\n= <<<XML\n<a>\n <b>\n  <c>text</c>\n  <c>stuff</c>\n </b>\n <d>\n  <c>code</c>\n </d>\n</a>\nXML;\n$xml\n= new\nSimpleXMLElement\n(\n$string\n);\n/* Search for <a><b><c> */\n$result\n=\n$xml\n->\nxpath\n(\n'/a/b/c'\n);\nforeach (\n$result\nas\n$node\n) {\n    echo\n'/a/b/c: '\n,\n$node\n,\n\"\\n\"\n;\n}\n/* Relative paths also work... */\n$result\n=\n$xml\n->\nxpath\n(\n'b/c'\n);\nforeach (\n$result\nas\n$node\n) {\n    echo\n'b/c: '\n,\n$node\n,\n\"\\n\"\n;\n}\n?>"
  },
  {
    "input": "Example #1 Importing a DOMDocument",
    "output": "<?php\n$dom\n= new\nDOMDocument\n;\n$dom\n->\nloadXML\n(\n'<books><book><title>blah</title></book></books>'\n);\nif (!\n$dom\n) {\n    echo\n'Error while parsing the document'\n;\n    exit;\n}\n$s\n=\nsimplexml_import_dom\n(\n$dom\n);\necho\n$s\n->\nbook\n[\n0\n]->\ntitle\n;\n?>"
  },
  {
    "input": "Example #2 Importing a Dom\\Document",
    "output": "<?php\n$dom\n=\nDom\\XMLDocument\n::\ncreateFromString\n(\n'<books><book><title>blah</title></book></books>'\n);\n$s\n=\nsimplexml_import_dom\n(\n$dom\n);\necho\n$s\n->\nbook\n[\n0\n]->\ntitle\n;\n?>"
  },
  {
    "input": "Example #1 Interpret an XML document",
    "output": "<?php\n// The file test.xml contains an XML document with a root element\n// and at least an element /[root]/title.\nif (\nfile_exists\n(\n'test.xml'\n)) {\n\n$xml\n=\nsimplexml_load_file\n(\n'test.xml'\n);\n\n\nprint_r\n(\n$xml\n);\n} else {\n    exit(\n'Failed to open test.xml.'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Interpret an XML string",
    "output": "<?php\n$string\n= <<<XML\n<?xml version='1.0'?>\n<document>\n <title>Forty What?</title>\n <from>Joe</from>\n <to>Jane</to>\n <body>\n  I know that's the answer -- but what's the question?\n </body>\n</document>\nXML;\n$xml\n=\nsimplexml_load_string\n(\n$string\n);\nprint_r\n(\n$xml\n);\n?>"
  },
  {
    "input": "Example #1 Serializing a single value with WDDX",
    "output": "<?php\necho\nwddx_serialize_value\n(\n\"PHP to WDDX packet example\"\n,\n\"PHP packet\"\n);\n?>"
  },
  {
    "input": "Example #2 Using incremental packets with WDDX",
    "output": "<?php\n$pi\n=\n3.1415926\n;\n$packet_id\n=\nwddx_packet_start\n(\n\"PHP\"\n);\nwddx_add_vars\n(\n$packet_id\n,\n\"pi\"\n);\n/* Suppose $cities came from database */\n$cities\n= array(\n\"Austin\"\n,\n\"Novato\"\n,\n\"Seattle\"\n);\nwddx_add_vars\n(\n$packet_id\n,\n\"cities\"\n);\n$packet\n=\nwddx_packet_end\n(\n$packet_id\n);\necho\n$packet\n;\n?>"
  },
  {
    "input": "Example #1 wddx_serialize_vars() example",
    "output": "<?php\n$a\n=\n1\n;\n$b\n=\n5.5\n;\n$c\n= array(\n\"blue\"\n,\n\"orange\"\n,\n\"violet\"\n);\n$d\n=\n\"colors\"\n;\n$clvars\n= array(\n\"c\"\n,\n\"d\"\n);\necho\nwddx_serialize_vars\n(\n\"a\"\n,\n\"b\"\n,\n$clvars\n);\n?>"
  },
  {
    "input": "Example #1 Show XML Element Structure",
    "output": "<?php\n$file\n=\n\"data.xml\"\n;\n$depth\n=\n0\n;\nfunction\nstartElement\n(\n$parser\n,\n$name\n,\n$attrs\n)\n{\n    global\n$depth\n;\n    for (\n$i\n=\n0\n;\n$i\n<\n$depth\n;\n$i\n++) {\n        echo\n\"  \"\n;\n    }\n    echo\n\"\n$name\n\\n\"\n;\n\n$depth\n++;\n}\nfunction\nendElement\n(\n$parser\n,\n$name\n)\n{\n    global\n$depth\n;\n\n$depth\n--;\n}\n$xml_parser\n=\nxml_parser_create\n();\nxml_set_element_handler\n(\n$xml_parser\n,\n\"startElement\"\n,\n\"endElement\"\n);\nif (!(\n$fp\n=\nfopen\n(\n$file\n,\n\"r\"\n))) {\n    die(\n\"could not open XML input\"\n);\n}\nwhile (\n$data\n=\nfread\n(\n$fp\n,\n4096\n)) {\n    if (!\nxml_parse\n(\n$xml_parser\n,\n$data\n,\nfeof\n(\n$fp\n))) {\n        die(\nsprintf\n(\n\"XML error: %s at line %d\"\n,\n\nxml_error_string\n(\nxml_get_error_code\n(\n$xml_parser\n)),\n\nxml_get_current_line_number\n(\n$xml_parser\n)));\n    }\n}\nxml_parser_free\n(\n$xml_parser\n);\n?>"
  },
  {
    "input": "Example #1 External Entity Example",
    "output": "<?php\n$file\n=\n\"xmltest.xml\"\n;\nfunction\ntrustedFile\n(\n$file\n)\n{\n\n// only trust local files owned by ourselves\n\nif (!\npreg_match\n(\n\"@^([a-z][a-z0-9+.-]*)\\:\\/\\/@i\"\n,\n$file\n)\n        &&\nfileowner\n(\n$file\n) ==\ngetmyuid\n()) {\n            return\ntrue\n;\n    }\n    return\nfalse\n;\n}\nfunction\nstartElement\n(\n$parser\n,\n$name\n,\n$attribs\n)\n{\n    echo\n\"&lt;<font color=\\\"#0000cc\\\">\n$name\n</font>\"\n;\n    if (\ncount\n(\n$attribs\n)) {\n        foreach (\n$attribs\nas\n$k\n=>\n$v\n) {\n            echo\n\" <font color=\\\"#009900\\\">\n$k\n</font>=\\\"<font\n                   color=\\\"#990000\\\">\n$v\n</font>\\\"\"\n;\n        }\n    }\n    echo\n\"&gt;\"\n;\n}\nfunction\nendElement\n(\n$parser\n,\n$name\n)\n{\n    echo\n\"&lt;/<font color=\\\"#0000cc\\\">\n$name\n</font>&gt;\"\n;\n}\nfunction\ncharacterData\n(\n$parser\n,\n$data\n)\n{\n    echo\n\"<b>\n$data\n</b>\"\n;\n}\nfunction\nPIHandler\n(\n$parser\n,\n$target\n,\n$data\n)\n{\n    switch (\nstrtolower\n(\n$target\n)) {\n        case\n\"php\"\n:\n            global\n$parser_file\n;\n\n// If the parsed document is \"trusted\", we say it is safe\n            // to execute PHP code inside it.  If not, display the code\n            // instead.\n\nif (\ntrustedFile\n(\n$parser_file\n[\n$parser\n])) {\n                eval(\n$data\n);\n            } else {\n\nprintf\n(\n\"Untrusted PHP code: <i>%s</i>\"\n,\n\nhtmlspecialchars\n(\n$data\n));\n            }\n            break;\n    }\n}\nfunction\ndefaultHandler\n(\n$parser\n,\n$data\n)\n{\n    if (\nsubstr\n(\n$data\n,\n0\n,\n1\n) ==\n\"&\"\n&&\nsubstr\n(\n$data\n, -\n1\n,\n1\n) ==\n\";\"\n) {\n\nprintf\n(\n'<font color=\"#aa00aa\">%s</font>'\n,\n\nhtmlspecialchars\n(\n$data\n));\n    } else {\n\nprintf\n(\n'<font size=\"-1\">%s</font>'\n,\n\nhtmlspecialchars\n(\n$data\n));\n    }\n}\nfunction\nexternalEntityRefHandler\n(\n$parser\n,\n$openEntityNames\n,\n$base\n,\n$systemId\n,\n\n$publicId\n) {\n    if (\n$systemId\n) {\n        if (!list(\n$parser\n,\n$fp\n) =\nnew_xml_parser\n(\n$systemId\n)) {\n\nprintf\n(\n\"Could not open entity %s at %s\\n\"\n,\n$openEntityNames\n,\n\n$systemId\n);\n            return\nfalse\n;\n        }\n        while (\n$data\n=\nfread\n(\n$fp\n,\n4096\n)) {\n            if (!\nxml_parse\n(\n$parser\n,\n$data\n,\nfeof\n(\n$fp\n))) {\n\nprintf\n(\n\"XML error: %s at line %d while parsing entity %s\\n\"\n,\n\nxml_error_string\n(\nxml_get_error_code\n(\n$parser\n)),\n\nxml_get_current_line_number\n(\n$parser\n),\n$openEntityNames\n);\n\nxml_parser_free\n(\n$parser\n);\n                return\nfalse\n;\n            }\n        }\n\nxml_parser_free\n(\n$parser\n);\n        return\ntrue\n;\n    }\n    return\nfalse\n;\n}\nfunction\nnew_xml_parser\n(\n$file\n)\n{\n    global\n$parser_file\n;\n\n$xml_parser\n=\nxml_parser_create\n();\n\nxml_parser_set_option\n(\n$xml_parser\n,\nXML_OPTION_CASE_FOLDING\n,\n1\n);\n\nxml_set_element_handler\n(\n$xml_parser\n,\n\"startElement\"\n,\n\"endElement\"\n);\n\nxml_set_character_data_handler\n(\n$xml_parser\n,\n\"characterData\"\n);\n\nxml_set_processing_instruction_handler\n(\n$xml_parser\n,\n\"PIHandler\"\n);\n\nxml_set_default_handler\n(\n$xml_parser\n,\n\"defaultHandler\"\n);\n\nxml_set_external_entity_ref_handler\n(\n$xml_parser\n,\n\"externalEntityRefHandler\"\n);\n\n    if (!(\n$fp\n= @\nfopen\n(\n$file\n,\n\"r\"\n))) {\n        return\nfalse\n;\n    }\n    if (!\nis_array\n(\n$parser_file\n)) {\n\nsettype\n(\n$parser_file\n,\n\"array\"\n);\n    }\n\n$parser_file\n[\n$xml_parser\n] =\n$file\n;\n    return array(\n$xml_parser\n,\n$fp\n);\n}\nif (!(list(\n$xml_parser\n,\n$fp\n) =\nnew_xml_parser\n(\n$file\n))) {\n    die(\n\"could not open XML input\"\n);\n}\necho\n\"<pre>\"\n;\nwhile (\n$data\n=\nfread\n(\n$fp\n,\n4096\n)) {\n    if (!\nxml_parse\n(\n$xml_parser\n,\n$data\n,\nfeof\n(\n$fp\n))) {\n        die(\nsprintf\n(\n\"XML error: %s at line %d\\n\"\n,\n\nxml_error_string\n(\nxml_get_error_code\n(\n$xml_parser\n)),\n\nxml_get_current_line_number\n(\n$xml_parser\n)));\n    }\n}\necho\n\"</pre>\"\n;\necho\n\"parse complete\\n\"\n;\nxml_parser_free\n(\n$xml_parser\n);\n?>"
  },
  {
    "input": "Example #1 xml_parse_into_struct() example",
    "output": "<?php\n$simple\n=\n\"<para><note>simple note</note></para>\"\n;\n$p\n=\nxml_parser_create\n();\nxml_parse_into_struct\n(\n$p\n,\n$simple\n,\n$vals\n,\n$index\n);\nxml_parser_free\n(\n$p\n);\necho\n\"Index array\\n\"\n;\nprint_r\n(\n$index\n);\necho\n\"\\nVals array\\n\"\n;\nprint_r\n(\n$vals\n);\n?>"
  },
  {
    "input": "Example #3 \n     parsemoldb.php - parses moldb.xml into an array of\n     molecular objects",
    "output": "<?php\nclass\nAminoAcid\n{\n    var\n$name\n;\n// aa name\n\nvar\n$symbol\n;\n// three letter symbol\n\nvar\n$code\n;\n// one letter code\n\nvar\n$type\n;\n// hydrophobic, charged or neutral\n\n\nfunction\n__construct\n(\n$aa\n)\n    {\n        foreach (\n$aa\nas\n$k\n=>\n$v\n)\n\n$this\n->\n$k\n=\n$aa\n[\n$k\n];\n    }\n}\nfunction\nreadDatabase\n(\n$filename\n)\n{\n\n// read the XML database of aminoacids\n\n$data\n=\nfile_get_contents\n(\n$filename\n);\n\n$parser\n=\nxml_parser_create\n();\n\nxml_parser_set_option\n(\n$parser\n,\nXML_OPTION_CASE_FOLDING\n,\n0\n);\n\nxml_parser_set_option\n(\n$parser\n,\nXML_OPTION_SKIP_WHITE\n,\n1\n);\n\nxml_parse_into_struct\n(\n$parser\n,\n$data\n,\n$values\n,\n$tags\n);\n\nxml_parser_free\n(\n$parser\n);\n\n// loop through the structures\n\nforeach (\n$tags\nas\n$key\n=>\n$val\n) {\n        if (\n$key\n==\n\"molecule\"\n) {\n\n$molranges\n=\n$val\n;\n\n// each contiguous pair of array entries are the\n            // lower and upper range for each molecule definition\n\nfor (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$molranges\n);\n$i\n+=\n2\n) {\n\n$offset\n=\n$molranges\n[\n$i\n] +\n1\n;\n\n$len\n=\n$molranges\n[\n$i\n+\n1\n] -\n$offset\n;\n\n$tdb\n[] =\nparseMol\n(\narray_slice\n(\n$values\n,\n$offset\n,\n$len\n));\n            }\n        } else {\n            continue;\n        }\n    }\n    return\n$tdb\n;\n}\nfunction\nparseMol\n(\n$mvalues\n)\n{\n    for (\n$i\n=\n0\n;\n$i\n<\ncount\n(\n$mvalues\n);\n$i\n++) {\n\n$mol\n[\n$mvalues\n[\n$i\n][\n\"tag\"\n]] =\n$mvalues\n[\n$i\n][\n\"value\"\n];\n    }\n    return new\nAminoAcid\n(\n$mol\n);\n}\n$db\n=\nreadDatabase\n(\n\"moldb.xml\"\n);\necho\n\"** Database of AminoAcid objects:\\n\"\n;\nprint_r\n(\n$db\n);\n?>"
  },
  {
    "input": "Example #1 xml_set_object() example",
    "output": "<?php\nclass\nCustomXMLParser\n{\n    private\n$parser\n;\n    function\n__construct\n()\n    {\n\n$this\n->\nparser\n=\nxml_parser_create\n();\n\nxml_set_object\n(\n$this\n->\nparser\n,\n$this\n);\n\nxml_set_element_handler\n(\n$this\n->\nparser\n,\n\"tag_open\"\n,\n\"tag_close\"\n);\n\nxml_set_character_data_handler\n(\n$this\n->\nparser\n,\n\"cdata\"\n);\n    }\n    function\nparse\n(\n$data\n)\n    {\n\nxml_parse\n(\n$this\n->\nparser\n,\n$data\n);\n    }\n    function\ntag_open\n(\n$parser\n,\n$tag\n,\n$attributes\n)\n    {\n\nvar_dump\n(\n$tag\n,\n$attributes\n);\n    }\n    function\ncdata\n(\n$parser\n,\n$cdata\n)\n    {\n\nvar_dump\n(\n$cdata\n);\n    }\n    function\ntag_close\n(\n$parser\n,\n$tag\n)\n    {\n\nvar_dump\n(\n$tag\n);\n    }\n}\n$xml_parser\n= new\nCustomXMLParser\n();\n$xml_parser\n->\nparse\n(\n\"<A ID='hallo'>PHP</A>\"\n);\n?>"
  },
  {
    "input": "Example #1 Validating XML",
    "output": "<?php\n$xml\n=\nXMLReader\n::\nopen\n(\n'test.xml'\n);\n// The validate parser option must be enabled for\n// this method to work properly\n$xml\n->\nsetParserProperty\n(\nXMLReader\n::\nVALIDATE\n,\ntrue\n);\nvar_dump\n(\n$xml\n->\nisValid\n());\n?>"
  },
  {
    "input": "Example #1 Creating a simple XML document",
    "output": "<?php\n$xw\n=\nxmlwriter_open_memory\n();\nxmlwriter_set_indent\n(\n$xw\n,\n1\n);\n$res\n=\nxmlwriter_set_indent_string\n(\n$xw\n,\n' '\n);\nxmlwriter_start_document\n(\n$xw\n,\n'1.0'\n,\n'UTF-8'\n);\n// A first element\nxmlwriter_start_element\n(\n$xw\n,\n'tag1'\n);\n// Attribute 'att1' for element 'tag1'\nxmlwriter_start_attribute\n(\n$xw\n,\n'att1'\n);\nxmlwriter_text\n(\n$xw\n,\n'valueofatt1'\n);\nxmlwriter_end_attribute\n(\n$xw\n);\nxmlwriter_write_comment\n(\n$xw\n,\n'this is a comment.'\n);\n// Start a child element\nxmlwriter_start_element\n(\n$xw\n,\n'tag11'\n);\nxmlwriter_text\n(\n$xw\n,\n'This is a sample text, ä'\n);\nxmlwriter_end_element\n(\n$xw\n);\n// tag11\nxmlwriter_end_element\n(\n$xw\n);\n// tag1\n// CDATA\nxmlwriter_start_element\n(\n$xw\n,\n'testc'\n);\nxmlwriter_write_cdata\n(\n$xw\n,\n\"This is cdata content\"\n);\nxmlwriter_end_element\n(\n$xw\n);\n// testc\nxmlwriter_start_element\n(\n$xw\n,\n'testc'\n);\nxmlwriter_start_cdata\n(\n$xw\n);\nxmlwriter_text\n(\n$xw\n,\n\"test cdata2\"\n);\nxmlwriter_end_cdata\n(\n$xw\n);\nxmlwriter_end_element\n(\n$xw\n);\n// testc\n// A processing instruction\nxmlwriter_start_pi\n(\n$xw\n,\n'php'\n);\nxmlwriter_text\n(\n$xw\n,\n'$foo=2;echo $foo;'\n);\nxmlwriter_end_pi\n(\n$xw\n);\nxmlwriter_end_document\n(\n$xw\n);\necho\nxmlwriter_output_memory\n(\n$xw\n);"
  },
  {
    "input": "Example #1 Working with XML namespaces",
    "output": "<?php\n$xw\n=\nxmlwriter_open_memory\n();\nxmlwriter_set_indent\n(\n$xw\n,\n1\n);\n$res\n=\nxmlwriter_set_indent_string\n(\n$xw\n,\n' '\n);\nxmlwriter_start_document\n(\n$xw\n,\n'1.0'\n,\n'UTF-8'\n);\n// A first element\nxmlwriter_start_element_ns\n(\n$xw\n,\n'prefix'\n,\n'books'\n,\n'uri'\n);\nxmlwriter_start_attribute\n(\n$xw\n,\n'isbn'\n);\nxmlwriter_start_attribute_ns\n(\n$xw\n,\n'prefix'\n,\n'isbn'\n,\n'uri'\n);\nxmlwriter_end_attribute\n(\n$xw\n);\nxmlwriter_end_attribute\n(\n$xw\n);\nxmlwriter_text\n(\n$xw\n,\n'book1'\n);\nxmlwriter_end_element\n(\n$xw\n);\nxmlwriter_end_document\n(\n$xw\n);\necho\nxmlwriter_output_memory\n(\n$xw\n);"
  },
  {
    "input": "Example #1 Working with the OO API",
    "output": "<?php\n$xw\n= new\nXMLWriter\n();\n$xw\n->\nopenMemory\n();\n$xw\n->\nstartDocument\n(\n\"1.0\"\n);\n$xw\n->\nstartElement\n(\n\"book\"\n);\n$xw\n->\ntext\n(\n\"example\"\n);\n$xw\n->\nendElement\n();\n$xw\n->\nendDocument\n();\necho\n$xw\n->\noutputMemory\n();"
  },
  {
    "input": "Example #1 Basic XMLWriter::startAttribute() Usage",
    "output": "<?php\n$writer\n= new\nXMLWriter\n;\n$writer\n->\nopenURI\n(\n'php://output'\n);\n$writer\n->\nstartDocument\n(\n'1.0'\n,\n'UTF-8'\n);\n$writer\n->\nstartElement\n(\n'element'\n);\n$writer\n->\nstartAttribute\n(\n'attribute'\n);\n$writer\n->\ntext\n(\n'value'\n);\n$writer\n->\nendAttribute\n();\n$writer\n->\nendElement\n();\n$writer\n->\nendDocument\n();"
  },
  {
    "input": "Example #1 Basic xmlwriter_write_cdata() Usage",
    "output": "<?php\n// set up the document\n$xml\n= new\nXmlWriter\n();\n$xml\n->\nopenMemory\n();\n$xml\n->\nsetIndent\n(\ntrue\n);\n$xml\n->\nstartDocument\n(\n'1.0'\n,\n'UTF-8'\n);\n$xml\n->\nstartElement\n(\n'mydoc'\n);\n$xml\n->\nstartElement\n(\n'myele'\n);\n// CData output\n$xml\n->\nstartElement\n(\n'mycdataelement'\n);\n$xml\n->\nwriteCData\n(\n\"text for inclusion as CData\"\n);\n$xml\n->\nendElement\n();\n// end the document and output\n$xml\n->\nendElement\n();\n$xml\n->\nendElement\n();\necho\n$xml\n->\noutputMemory\n(\ntrue\n);\n?>"
  },
  {
    "input": "Example #1 Creating an XSLTProcessor",
    "output": "<?php\n$xsldoc\n= new\nDOMDocument\n();\n$xsldoc\n->\nload\n(\n$xsl_filename\n);\n$xmldoc\n= new\nDOMDocument\n();\n$xmldoc\n->\nload\n(\n$xml_filename\n);\n$xsl\n= new\nXSLTProcessor\n();\n$xsl\n->\nimportStyleSheet\n(\n$xsldoc\n);\necho\n$xsl\n->\ntransformToXML\n(\n$xmldoc\n);\n?>"
  },
  {
    "input": "Example #1 Testing EXSLT support",
    "output": "<?php\n$proc\n= new\nXSLTProcessor\n;\nif (!\n$proc\n->\nhasExsltSupport\n()) {\n    die(\n'EXSLT support not available'\n);\n}\n// do EXSLT stuff here ..\n?>"
  },
  {
    "input": "Example #1 Simple PHP Function call from a stylesheet",
    "output": "<?php\n$xml\n= <<<EOB\n<allusers>\n <user>\n  <uid>bob</uid>\n </user>\n <user>\n  <uid>joe</uid>\n </user>\n</allusers>\nEOB;\n$xsl\n= <<<EOB\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n     xmlns:php=\"http://php.net/xsl\">\n<xsl:output method=\"html\" encoding=\"utf-8\" indent=\"yes\"/>\n <xsl:template match=\"allusers\">\n  <html><body>\n    <h2>Users</h2>\n    <table>\n    <xsl:for-each select=\"user\">\n      <tr><td>\n        <xsl:value-of\n             select=\"php:function('ucfirst',string(uid))\"/>\n      </td></tr>\n    </xsl:for-each>\n    </table>\n  </body></html>\n </xsl:template>\n</xsl:stylesheet>\nEOB;\n$xmldoc\n= new\nDOMDocument\n();\n$xmldoc\n->\nloadXML\n(\n$xml\n);\n$xsldoc\n= new\nDOMDocument\n();\n$xsldoc\n->\nloadXML\n(\n$xsl\n);\n$proc\n= new\nXSLTProcessor\n();\n$proc\n->\nregisterPHPFunctions\n();\n$proc\n->\nimportStyleSheet\n(\n$xsldoc\n);\necho\n$proc\n->\ntransformToXML\n(\n$xmldoc\n);\n?>"
  },
  {
    "input": "Example #1 Changing the owner before the transformation",
    "output": "<?php\n$collections\n= array(\n\n'Marc Rutkowski'\n=>\n'marc'\n,\n\n'Olivier Parmentier'\n=>\n'olivier'\n);\n$xsl\n= new\nDOMDocument\n;\n$xsl\n->\nload\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\nforeach (\n$collections\nas\n$name\n=>\n$file\n) {\n\n// Load the XML source\n\n$xml\n= new\nDOMDocument\n;\n\n$xml\n->\nload\n(\n'collection_'\n.\n$file\n.\n'.xml'\n);\n\n$proc\n->\nsetParameter\n(\n''\n,\n'owner'\n,\n$name\n);\n\n$proc\n->\ntransformToURI\n(\n$xml\n,\n'file:///tmp/'\n.\n$file\n.\n'.html'\n);\n}\n?>"
  },
  {
    "input": "Example #1 Example profiling output",
    "output": "<?php\n// Load the XML source\n$xml\n= new\nDOMDocument\n;\n$xml\n->\nload\n(\n'collection.xml'\n);\n$xsl\n= new\nDOMDocument\n;\n$xsl\n->\nload\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nsetProfiling\n(\n'profiling.txt'\n);\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\necho\ntrim\n(\n$proc\n->\ntransformToDoc\n(\n$xml\n)->\nfirstChild\n->\nwholeText\n);\n?>"
  },
  {
    "input": "Example #1 Transforming to a DOMDocument",
    "output": "<?php\n// Load the XML source\n$xml\n= new\nDOMDocument\n;\n$xml\n->\nload\n(\n'collection.xml'\n);\n$xsl\n= new\nDOMDocument\n;\n$xsl\n->\nload\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\necho\ntrim\n(\n$proc\n->\ntransformToDoc\n(\n$xml\n)->\nfirstChild\n->\nwholeText\n);\n?>"
  },
  {
    "input": "Example #2 Transforming to a Dom\\Document",
    "output": "<?php\n$xml\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xml'\n);\n$xsl\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\necho\ntrim\n(\n$proc\n->\ntransformToDoc\n(\n$xml\n)->\nfirstChild\n->\nwholeText\n);\n?>"
  },
  {
    "input": "Example #1 Transforming to a HTML file",
    "output": "<?php\n// Load the XML source\n$xml\n= new\nDOMDocument\n;\n$xml\n->\nload\n(\n'collection.xml'\n);\n$xsl\n= new\nDOMDocument\n;\n$xsl\n->\nload\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\n$proc\n->\ntransformToURI\n(\n$xml\n,\n'file:///tmp/out.html'\n);\n?>"
  },
  {
    "input": "Example #2 Transforming to a HTML file using Dom\\Document",
    "output": "<?php\n$xml\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xml'\n);\n$xsl\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\n$proc\n->\ntransformToURI\n(\n$xml\n,\n'file:///tmp/out.html'\n);\n?>"
  },
  {
    "input": "Example #1 Transforming to a string",
    "output": "<?php\n// Load the XML source\n$xml\n= new\nDOMDocument\n;\n$xml\n->\nload\n(\n'collection.xml'\n);\n$xsl\n= new\nDOMDocument\n;\n$xsl\n->\nload\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\necho\n$proc\n->\ntransformToXML\n(\n$xml\n);\n?>"
  },
  {
    "input": "Example #2 Transforming to a string using Dom\\Document",
    "output": "<?php\n$xml\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xml'\n);\n$xsl\n=\nDom\\XMLDocument\n::\ncreateFromFile\n(\n'collection.xsl'\n);\n// Configure the transformer\n$proc\n= new\nXSLTProcessor\n;\n$proc\n->\nimportStyleSheet\n(\n$xsl\n);\n// attach the xsl rules\necho\n$proc\n->\ntransformToXML\n(\n$xml\n);\n?>"
  },
  {
    "input": "Example #1 A hidden HTML form element",
    "output": "<?php\n\necho\n'<input type=\"hidden\" value=\"'\n.\nhtmlspecialchars\n(\n$data\n) .\n'\" />'\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #2 Data to be edited by the user",
    "output": "<?php\n\necho\n\"<textarea name='mydata'>\\n\"\n;\n    echo\nhtmlspecialchars\n(\n$data\n).\n\"\\n\"\n;\n    echo\n\"</textarea>\"\n;\n?>"
  },
  {
    "input": "Example #3 In a URL",
    "output": "<?php\n\necho\n'<a href=\"'\n.\nhtmlspecialchars\n(\n\"/nextpage.php?stage=23&data=\"\n.\n\nurlencode\n(\n$data\n)) .\n'\">'\n.\n\"\\n\"\n;\n?>"
  },
  {
    "input": "Example #4 Generating Javascript with PHP",
    "output": "<?php\nif (isset(\n$_GET\n[\n'width'\n]) AND isset(\n$_GET\n[\n'height'\n])) {\n\n// output the geometry variables\n\necho\n\"Screen width is: \"\n.\n$_GET\n[\n'width'\n] .\n\"<br />\\n\"\n;\n  echo\n\"Screen height is: \"\n.\n$_GET\n[\n'height'\n] .\n\"<br />\\n\"\n;\n} else {\n\n// pass the geometry variables\n  // (preserve the original query string\n  //   -- post variables will need to handled differently)\n\necho\n\"<script language='javascript'>\\n\"\n;\n  echo\n\"  location.href=\\\"\n{\n$_SERVER\n[\n'SCRIPT_NAME'\n]}\n?\n{\n$_SERVER\n[\n'QUERY_STRING'\n]}\n\"\n\n.\n\"&width=\\\" + screen.width + \\\"&height=\\\" + screen.height;\\n\"\n;\n  echo\n\"</script>\\n\"\n;\n  exit();\n}\n?>"
  },
  {
    "input": "Example #1 string.rot13",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'string.rot13'\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\n/* Outputs:  Guvf vf n grfg.   */\n?>"
  },
  {
    "input": "Example #2 string.toupper",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'string.toupper'\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\n/* Outputs:  THIS IS A TEST.   */\n?>"
  },
  {
    "input": "Example #3 string.tolower",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'string.tolower'\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\n/* Outputs:  this is a test.   */\n?>"
  },
  {
    "input": "Example #4 string.strip_tags",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'string.strip_tags'\n,\nSTREAM_FILTER_WRITE\n,\n\"<b><i><u>\"\n);\nfwrite\n(\n$fp\n,\n\"<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\\n\"\n);\nfclose\n(\n$fp\n);\n/* Outputs:  bolded text enlarged to a level 1 heading   */\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'string.strip_tags'\n,\nSTREAM_FILTER_WRITE\n, array(\n'b'\n,\n'i'\n,\n'u'\n));\nfwrite\n(\n$fp\n,\n\"<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\\n\"\n);\nfclose\n(\n$fp\n);\n/* Outputs:  bolded text enlarged to a level 1 heading   */\n?>"
  },
  {
    "input": "Example #1 \n     convert.base64-encode &\n     convert.base64-decode",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'convert.base64-encode'\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\nfclose\n(\n$fp\n);\n/* Outputs:  VGhpcyBpcyBhIHRlc3QuCg==  */\n$param\n= array(\n'line-length'\n=>\n8\n,\n'line-break-chars'\n=>\n\"\\r\\n\"\n);\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'convert.base64-encode'\n,\nSTREAM_FILTER_WRITE\n,\n$param\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\nfclose\n(\n$fp\n);\n/* Outputs:  VGhpcyBp\n          :  cyBhIHRl\n          :  c3QuCg==  */\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'convert.base64-decode'\n);\nfwrite\n(\n$fp\n,\n\"VGhpcyBpcyBhIHRlc3QuCg==\"\n);\nfclose\n(\n$fp\n);\n/* Outputs:  This is a test.  */\n?>"
  },
  {
    "input": "Example #2 \n     convert.quoted-printable-encode &\n     convert.quoted-printable-decode",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'convert.quoted-printable-encode'\n);\nfwrite\n(\n$fp\n,\n\"This is a test.\\n\"\n);\n/* Outputs:  =This is a test.=0A  */\n?>"
  },
  {
    "input": "Example #3 convert.iconv.*",
    "output": "<?php\n$fp\n=\nfopen\n(\n'php://output'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'convert.iconv.utf-16le.utf-8'\n);\nfwrite\n(\n$fp\n,\n\"T\\0h\\0i\\0s\\0 \\0i\\0s\\0 \\0a\\0 \\0t\\0e\\0s\\0t\\0.\\0\\n\\0\"\n);\nfclose\n(\n$fp\n);\n/* Outputs: This is a test. */\n?>"
  },
  {
    "input": "Example #1 \n     zlib.deflate and\n     zlib.inflate",
    "output": "<?php\n$params\n= array(\n'level'\n=>\n6\n,\n'window'\n=>\n15\n,\n'memory'\n=>\n9\n);\n$original_text\n=\n\"This is a test.\\nThis is only a test.\\nThis is not an important string.\\n\"\n;\necho\n\"The original text is \"\n.\nstrlen\n(\n$original_text\n) .\n\" characters long.\\n\"\n;\n$fp\n=\nfopen\n(\n'test.deflated'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'zlib.deflate'\n,\nSTREAM_FILTER_WRITE\n,\n$params\n);\nfwrite\n(\n$fp\n,\n$original_text\n);\nfclose\n(\n$fp\n);\necho\n\"The compressed file is \"\n.\nfilesize\n(\n'test.deflated'\n) .\n\" bytes long.\\n\"\n;\necho\n\"The original text was:\\n\"\n;\n/* Use readfile and zlib.inflate to decompress on the fly */\nreadfile\n(\n'php://filter/zlib.inflate/resource=test.deflated'\n);\n/* Generates output:\nThe original text is 70 characters long.\nThe compressed file is 56 bytes long.\nThe original text was:\nThis is a test.\nThis is only a test.\nThis is not an important string.\n */\n?>"
  },
  {
    "input": "Example #2 \n     zlib.deflate simple",
    "output": "<?php\n$original_text\n=\n\"This is a test.\\nThis is only a test.\\nThis is not an important string.\\n\"\n;\necho\n\"The original text is \"\n.\nstrlen\n(\n$original_text\n) .\n\" characters long.\\n\"\n;\n$fp\n=\nfopen\n(\n'test.deflated'\n,\n'w'\n);\n/* Here \"6\" indicates compression level 6 */\nstream_filter_append\n(\n$fp\n,\n'zlib.deflate'\n,\nSTREAM_FILTER_WRITE\n,\n6\n);\nfwrite\n(\n$fp\n,\n$original_text\n);\nfclose\n(\n$fp\n);\necho\n\"The compressed file is \"\n.\nfilesize\n(\n'test.deflated'\n) .\n\" bytes long.\\n\"\n;\n/* Generates output:\nThe original text is 70 characters long.\nThe compressed file is 56 bytes long.\n */\n?>"
  },
  {
    "input": "Example #3 \n     bzip2.compress and\n     bzip2.decompress",
    "output": "<?php\n$param\n= array(\n'blocks'\n=>\n9\n,\n'work'\n=>\n0\n);\necho\n\"The original file is \"\n.\nfilesize\n(\n'LICENSE'\n) .\n\" bytes long.\\n\"\n;\n$fp\n=\nfopen\n(\n'LICENSE.compressed'\n,\n'w'\n);\nstream_filter_append\n(\n$fp\n,\n'bzip2.compress'\n,\nSTREAM_FILTER_WRITE\n,\n$param\n);\nfwrite\n(\n$fp\n,\nfile_get_contents\n(\n'LICENSE'\n));\nfclose\n(\n$fp\n);\necho\n\"The compressed file is \"\n.\nfilesize\n(\n'LICENSE.compressed'\n) .\n\" bytes long.\\n\"\n;\n/* Generates output:\nThe original file is 3288 bytes long.\nThe compressed file is 1488 bytes long.\n */\n?>"
  },
  {
    "input": "Example #1 Encrypt/Decrypt with Blowfish",
    "output": "<?php\n//$key assumed to be previously generated\n$iv_size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_BLOWFISH\n,\nMCRYPT_MODE_CBC\n);\n$iv\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_DEV_URANDOM\n);\n$fp\n=\nfopen\n(\n'encrypted-file.enc'\n,\n'wb'\n);\nfwrite\n(\n$fp\n,\n$iv\n);\n$opts\n= array(\n'mode'\n=>\n'cbc'\n,\n'iv'\n=>\n$iv\n,\n'key'\n=>\n$key\n);\nstream_filter_append\n(\n$fp\n,\n'mcrypt.blowfish'\n,\nSTREAM_FILTER_WRITE\n,\n$opts\n);\nfwrite\n(\n$fp\n,\n'message to encrypt'\n);\nfclose\n(\n$fp\n);\n//decrypt...\n$fp\n=\nfopen\n(\n'encrypted-file.enc'\n,\n'rb'\n);\n$iv\n=\nfread\n(\n$fp\n,\n$iv_size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_BLOWFISH\n,\nMCRYPT_MODE_CBC\n));\n$opts\n= array(\n'mode'\n=>\n'cbc'\n,\n'iv'\n=>\n$iv\n,\n'key'\n=>\n$key\n)\nstream_filter_append\n(\n$fp\n,\n'mdecrypt.blowfish'\n,\nSTREAM_FILTER_READ\n,\n$opts\n);\n$data\n=\nrtrim\n(\nstream_get_contents\n(\n$fp\n));\n//trims off null padding\nfclose\n(\n$fp\n);\necho\n$data\n;\n?>"
  },
  {
    "input": "Example #2 Encrypt file using AES-128 CBC with SHA256 HMAC",
    "output": "<?php\nAES_CBC\n::\nencryptFile\n(\n$password\n,\n\"plaintext.txt\"\n,\n\"encrypted.enc\"\n);\nAES_CBC\n::\ndecryptFile\n(\n$password\n,\n\"encrypted.enc\"\n,\n\"decrypted.txt\"\n);\nclass\nAES_CBC\n{\n   protected static\n$KEY_SIZES\n= array(\n'AES-128'\n=>\n16\n,\n'AES-192'\n=>\n24\n,\n'AES-256'\n=>\n32\n);\n   protected static function\nkey_size\n() { return\nself\n::\n$KEY_SIZES\n[\n'AES-128'\n]; }\n//default AES-128\n\npublic static function\nencryptFile\n(\n$password\n,\n$input_stream\n,\n$aes_filename\n){\n\n$iv_size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_RIJNDAEL_128\n,\nMCRYPT_MODE_CBC\n);\n\n$fin\n=\nfopen\n(\n$input_stream\n,\n\"rb\"\n);\n\n$fc\n=\nfopen\n(\n$aes_filename\n,\n\"wb+\"\n);\n      if (!empty(\n$fin\n) && !empty(\n$fc\n)) {\n\nfwrite\n(\n$fc\n,\nstr_repeat\n(\n\"_\"\n,\n32\n) );\n//placeholder, SHA256 HMAC will go here later\n\nfwrite\n(\n$fc\n,\n$hmac_salt\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_DEV_URANDOM\n));\n\nfwrite\n(\n$fc\n,\n$esalt\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_DEV_URANDOM\n));\n\nfwrite\n(\n$fc\n,\n$iv\n=\nmcrypt_create_iv\n(\n$iv_size\n,\nMCRYPT_DEV_URANDOM\n));\n\n$ekey\n=\nhash_pbkdf2\n(\n\"sha256\"\n,\n$password\n,\n$esalt\n,\n$it\n=\n1000\n,\nself\n::\nkey_size\n(),\n$raw\n=\ntrue\n);\n\n$opts\n= array(\n'mode'\n=>\n'cbc'\n,\n'iv'\n=>\n$iv\n,\n'key'\n=>\n$ekey\n);\n\nstream_filter_append\n(\n$fc\n,\n'mcrypt.rijndael-128'\n,\nSTREAM_FILTER_WRITE\n,\n$opts\n);\n\n$infilesize\n=\n0\n;\n         while (!\nfeof\n(\n$fin\n)) {\n\n$block\n=\nfread\n(\n$fin\n,\n8192\n);\n\n$infilesize\n+=\nstrlen\n(\n$block\n);\n\nfwrite\n(\n$fc\n,\n$block\n);\n         }\n\n$block_size\n=\nmcrypt_get_block_size\n(\nMCRYPT_RIJNDAEL_128\n,\nMCRYPT_MODE_CBC\n);\n\n$padding\n=\n$block_size\n- (\n$infilesize\n%\n$block_size\n);\n//$padding is a number from 1-16\n\nfwrite\n(\n$fc\n,\nstr_repeat\n(\nchr\n(\n$padding\n),\n$padding\n) );\n//perform PKCS7 padding\n\nfclose\n(\n$fin\n);\n\nfclose\n(\n$fc\n);\n\n$hmac_raw\n=\nself\n::\ncalculate_hmac_after_32bytes\n(\n$password\n,\n$hmac_salt\n,\n$aes_filename\n);\n\n$fc\n=\nfopen\n(\n$aes_filename\n,\n\"rb+\"\n);\n\nfwrite\n(\n$fc\n,\n$hmac_raw\n);\n//overwrite placeholder\n\nfclose\n(\n$fc\n);\n      }\n   }\n   public static function\ndecryptFile\n(\n$password\n,\n$aes_filename\n,\n$out_stream\n) {\n\n$iv_size\n=\nmcrypt_get_iv_size\n(\nMCRYPT_RIJNDAEL_128\n,\nMCRYPT_MODE_CBC\n);\n\n$hmac_raw\n=\nfile_get_contents\n(\n$aes_filename\n,\nfalse\n,\nNULL\n,\n0\n,\n32\n);\n\n$hmac_salt\n=\nfile_get_contents\n(\n$aes_filename\n,\nfalse\n,\nNULL\n,\n32\n,\n$iv_size\n);\n\n$hmac_calc\n=\nself\n::\ncalculate_hmac_after_32bytes\n(\n$password\n,\n$hmac_salt\n,\n$aes_filename\n);\n\n$fc\n=\nfopen\n(\n$aes_filename\n,\n\"rb\"\n);\n\n$fout\n=\nfopen\n(\n$out_stream\n,\n'wb'\n);\n      if (!empty(\n$fout\n) && !empty(\n$fc\n) &&\nself\n::\nhash_equals\n(\n$hmac_raw\n,\n$hmac_calc\n)) {\n\nfread\n(\n$fc\n,\n32\n+\n$iv_size\n);\n//skip sha256 hmac and salt\n\n$esalt\n=\nfread\n(\n$fc\n,\n$iv_size\n);\n\n$iv\n=\nfread\n(\n$fc\n,\n$iv_size\n);\n\n$ekey\n=\nhash_pbkdf2\n(\n\"sha256\"\n,\n$password\n,\n$esalt\n,\n$it\n=\n1000\n,\nself\n::\nkey_size\n(),\n$raw\n=\ntrue\n);\n\n$opts\n= array(\n'mode'\n=>\n'cbc'\n,\n'iv'\n=>\n$iv\n,\n'key'\n=>\n$ekey\n);\n\nstream_filter_append\n(\n$fc\n,\n'mdecrypt.rijndael-128'\n,\nSTREAM_FILTER_READ\n,\n$opts\n);\n         while (!\nfeof\n(\n$fc\n)) {\n\n$block\n=\nfread\n(\n$fc\n,\n8192\n);\n            if (\nfeof\n(\n$fc\n)) {\n\n$padding\n=\nord\n(\n$block\n[\nstrlen\n(\n$block\n) -\n1\n]);\n//assume PKCS7 padding\n\n$block\n=\nsubstr\n(\n$block\n,\n0\n,\n0\n-\n$padding\n);\n            }\n\nfwrite\n(\n$fout\n,\n$block\n);\n         }\n\nfclose\n(\n$fout\n);\n\nfclose\n(\n$fc\n);\n      }\n   }\n   private static function\nhash_equals\n(\n$str1\n,\n$str2\n) {\n      if(\nstrlen\n(\n$str1\n) ==\nstrlen\n(\n$str2\n)) {\n\n$res\n=\n$str1\n^\n$str2\n;\n         for(\n$ret\n=\n0\n,\n$i\n=\nstrlen\n(\n$res\n) -\n1\n;\n$i\n>=\n0\n;\n$i\n--)\n$ret\n|=\nord\n(\n$res\n[\n$i\n]);\n         return !\n$ret\n;\n      }\n      return\nfalse\n;\n   }\n   private static function\ncalculate_hmac_after_32bytes\n(\n$password\n,\n$hsalt\n,\n$filename\n) {\n      static\n$init\n=\n0\n;\n\n$init\nor\n$init\n=\nstream_filter_register\n(\n\"user-filter.skipfirst32bytes\"\n,\n\"FileSkip32Bytes\"\n);\n\n$stream\n=\n'php://filter/read=user-filter.skipfirst32bytes/resource='\n.\n$filename\n;\n\n$hkey\n=\nhash_pbkdf2\n(\n\"sha256\"\n,\n$password\n,\n$hsalt\n,\n$iterations\n=\n1000\n,\n24\n,\n$raw\n=\ntrue\n);\n      return\nhash_hmac_file\n(\n'sha256'\n,\n$stream\n,\n$hkey\n,\n$raw\n=\ntrue\n);\n   }\n}\nclass\nFileSkip32Bytes\nextends\nphp_user_filter\n{\n   private\n$skipped\n=\n0\n;\n   function\nfilter\n(\n$in\n,\n$out\n, &\n$consumed\n,\n$closing\n)  {\n      while (\n$bucket\n=\nstream_bucket_make_writeable\n(\n$in\n)) {\n\n$outlen\n=\n$bucket\n->\ndatalen\n;\n         if (\n$this\n->\nskipped\n<\n32\n){\n\n$outlen\n=\nmin\n(\n$bucket\n->\ndatalen\n,\n32\n-\n$this\n->\nskipped\n);\n\n$bucket\n->\ndata\n=\nsubstr\n(\n$bucket\n->\ndata\n,\n$outlen\n);\n\n$bucket\n->\ndatalen\n=\n$bucket\n->\ndatalen\n-\n$outlen\n;\n\n$this\n->\nskipped\n+=\n$outlen\n;\n         }\n\n$consumed\n+=\n$outlen\n;\n\nstream_bucket_append\n(\n$out\n,\n$bucket\n);\n      }\n      return\nPSFS_PASS_ON\n;\n   }\n}\nclass\nAES_128_CBC\nextends\nAES_CBC\n{\n   protected static function\nkey_size\n() { return\nself\n::\n$KEY_SIZES\n[\n'AES-128'\n]; }\n}\nclass\nAES_192_CBC\nextends\nAES_CBC\n{\n   protected static function\nkey_size\n() { return\nself\n::\n$KEY_SIZES\n[\n'AES-192'\n]; }\n}\nclass\nAES_256_CBC\nextends\nAES_CBC\n{\n   protected static function\nkey_size\n() { return\nself\n::\n$KEY_SIZES\n[\n'AES-256'\n]; }\n}"
  }
]